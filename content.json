{"meta":{"title":"墨码山河","subtitle":"代码改变世界","description":"代码改变世界","author":"墨码山河","url":"https://momashanhe.com","root":"/"},"pages":[{"title":"专栏","date":"2024-02-29T02:12:36.000Z","updated":"2024-04-05T22:56:18.349Z","comments":true,"path":"groups/index.html","permalink":"https://momashanhe.com/groups/index.html","excerpt":"整理归纳，搭建系统。","text":"整理归纳，搭建系统。 建站技术:Hexo:搭建建站技术:Hexo:折腾大前端:HTML:基础大前端:CSS:基础"},{"title":"分类","date":"2024-02-25T13:45:11.000Z","updated":"2024-03-10T03:45:36.241Z","comments":true,"path":"categories/index.html","permalink":"https://momashanhe.com/categories/index.html","excerpt":"","text":""},{"title":"建站技术:Hexo:搭建","date":"2024-02-29T11:50:06.000Z","updated":"2024-04-02T06:42:52.689Z","comments":true,"path":"groups/001001/index.html","permalink":"https://momashanhe.com/groups/001001/index.html","excerpt":"","text":""},{"title":"建站技术:Hexo:折腾","date":"2024-02-29T12:52:36.000Z","updated":"2024-04-02T06:42:47.900Z","comments":true,"path":"groups/001002/index.html","permalink":"https://momashanhe.com/groups/001002/index.html","excerpt":"","text":""},{"title":"标签","date":"2024-02-25T13:53:29.000Z","updated":"2024-03-10T03:12:38.918Z","comments":true,"path":"tags/index.html","permalink":"https://momashanhe.com/tags/index.html","excerpt":"","text":""},{"title":"大前端:CSS:基础","date":"2024-04-02T03:53:12.000Z","updated":"2024-04-05T22:56:15.125Z","comments":true,"path":"groups/102001/index.html","permalink":"https://momashanhe.com/groups/102001/index.html","excerpt":"","text":""},{"title":"大前端:HTML:基础","date":"2024-03-31T00:12:26.000Z","updated":"2024-04-05T06:29:22.369Z","comments":true,"path":"groups/101001/index.html","permalink":"https://momashanhe.com/groups/101001/index.html","excerpt":"","text":""},{"title":"关于","date":"2024-02-25T14:31:08.000Z","updated":"2024-03-10T03:12:17.376Z","comments":true,"path":"pages/about/index.html","permalink":"https://momashanhe.com/pages/about/index.html","excerpt":"简简单单，平平凡凡。","text":"简简单单，平平凡凡。"},{"title":"留言板","date":"2024-03-08T10:58:49.000Z","updated":"2024-03-10T03:12:22.265Z","comments":true,"path":"pages/board/index.html","permalink":"https://momashanhe.com/pages/board/index.html","excerpt":"遵纪守法，友善发言。","text":"遵纪守法，友善发言。"},{"title":"通讯录","date":"2024-02-25T14:23:13.000Z","updated":"2024-03-31T11:45:17.811Z","comments":true,"path":"pages/friend/index.html","permalink":"https://momashanhe.com/pages/friend/index.html","excerpt":"红尘漫漫，增减随缘。","text":"红尘漫漫，增减随缘。 名片夹大佬大佬的博客Akilarの糖果屋期待您的光临！安知鱼生活明朗，万物可爱xaoxuu风暴前夕BeaCoxOn the way to be a hacker.失联失联的博客测试测试友链测试测试友链测试测试友链测试测试友链 个人名片card12345title: 墨码山河avatar: url: https://momashanhe.com/screenshot: description: 代码改变世界 建议avatar使用分辨率为200px的图片。 建议screenshot使用https://image.thum.io/get/width/400/crop/800/allowJPG/wait/20/noanimate/https://momashanhe.com/网站生成的图片。 用户须知 免责声明 本站作者遵守中华人民共和国相关法律，本页内容中的网站链接仅为方便学习而创建，均为其他网站。虽然本站作者会对绝大多数的网站内容进行鉴别，并取消存在风险的网站链接。但因本站作者能力有限，无法判断网站链接指向的网站内容是否存在安全问题，并且无法判断在收录后是否增加了违法内容。故而用户在通过本页内容中的网站链接访问其他网站时，仍然无法避免风险，包括但不限于：网站链接的网站作者更换了网站链接的指向，替换成了其他内容；网站链接的网站作者修改了文章内容，增加了钓鱼网站、广告等其他无效信息；网站链接的服务器被恶意攻击、劫持、注入了其他内容；网站链接的域名到期，被不法分子改做他用；网站链接的规则不完善，对用户的隐私造成了侵害、泄漏。本页内容中的文章链接均为机器自动抓取，本站作者未经过任何审核和筛选，不能保证文章内容的安全可靠。本页内容中的网站链接指向的网站内容如果给用户造成了损失，本站作者深表歉意，建议用户如果发现问题请及时和本站作者联系，避免给更多用户造成损失。"}],"posts":[{"title":"缩放导致元素尺寸错乱","slug":"100-大前端/102-CSS/002-技巧/002-缩放导致元素尺寸错乱","date":"2024-04-07T03:47:39.000Z","updated":"2024-04-07T03:47:51.044Z","comments":true,"path":"posts/20240407/114739/","permalink":"https://momashanhe.com/posts/20240407/114739/","excerpt":"摘要：","text":"摘要： https://blog.csdn.net/O3O_O3O_/article/details/121255024","categories":[],"tags":[]},{"title":"Emmet语法规则","slug":"100-大前端/102-CSS/002-技巧/001-Emmet语法规则","date":"2024-04-07T02:47:45.000Z","updated":"2024-04-07T02:47:45.459Z","comments":true,"path":"posts/20240407/104745/","permalink":"https://momashanhe.com/posts/20240407/104745/","excerpt":"摘要：","text":"摘要：","categories":[],"tags":[]},{"title":"CSS2进阶","slug":"100-大前端/102-CSS/001-基础/002-CSS2进阶","date":"2024-04-05T06:24:36.000Z","updated":"2024-04-08T08:00:29.103Z","comments":true,"path":"posts/20240405/142436/","permalink":"https://momashanhe.com/posts/20240405/142436/","excerpt":"摘要：本文主要介绍了CSS的盒子模型。","text":"摘要：本文主要介绍了CSS的盒子模型。 1 长度单位CSS中主要有以下几种长度单位： px：像素 em：元素字体大小的倍数 rem：根元素字体大小的倍数，根元素就是html元素 %：父元素对应属性的百分比 CSS中设置长度，必须加单位，否则样式无效。 2 显示模式2.1 分类2.1.1 块级元素又称为块元素（block）。 特点： 在页面中独占一行，不会与任何元素共用一行，从上到下排列。 默认宽度：撑满父元素。 默认高度：由内容撑开。 可以通过CSS设置宽高。 相关元素： 主体结构元素：html、body 排版相关元素：h1~h6、div、hr、p、pre、div 列表相关元素：ul、ol、li、dl、dt、dd 表格相关元素：table、tbody、thead、tfoot、caption、tr 表单相关元素：form、option 2.1.2 行内元素又称为内联元素（inline）。 特点: 在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。 默认宽度：由内容撑开。 默认高度：由内容撑开。 无法通过CSS设置宽高。 相关元素： 文本：br、span、em、strong、sup、sub、del、ins 标记：label 超链接：a 2.1.3 行内块元素又称为内联块元素（inline-block）。 特点： 在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。 默认宽度：由内容撑开。 默认高度：由内容撑开。 可以通过CSS设置宽高。 相关元素： 图片：img 表格：th、td 表单：input、textarea、select、button 框架：iframe 如果按照“是否独占一行”进行分类，行内块元素应该算作行内元素。 2.2 设置显示模式控制元素显示模式的属性： 属性名 作用 取值 display 控制元素的显示模式 none：元素会被隐藏 block：元素将作为块级元素显示 inline：元素将作为内联元素显示 inline-block：元素将作为行内块元素显示 示例： css1display: none; 3 盒子模型3.1 概念CSS会把所有的HTML元素都看成一个盒子，所有的样式也都是基于这个盒子。 相关概念： content（内容）：盒子内容，也就是元素内容。 padding（内边距）：盒子内部边距，盒子内容与盒子边框的补白区域。 border（边框）：盒子边框，分隔盒子的内外区域。 margin（外边距）：盒子外部边距，盒子边框与其他盒子的间隔区域。 说明： 盒子的大小&#x3D;内容的大小+内边距的大小+边框的大小。 盒子的外边距不受盒子样式的影响，不会影响盒子的大小，只会影响盒子的位置。 图示如下： 3.2 相关属性3.2.1 盒子内容相关控制盒子内容的属性： 属性名 作用 取值 width 设置内容区域宽度 长度单位 max-width 设置内容区域的最大宽度，一般不与width一起使用 长度单位 min-width 设置内容区域的最小宽度，一般不与width一起使用 长度单位 height 设置内容区域高度 长度单位 max-height 设置内容区域的最大高度，一般不与height一起使用 长度单位 min-height 设置内容区域的最小高度，一般不与height一起使用 长度单位 如果没有设置宽度和高度： 总宽度&#x3D;父盒子content-自身左右margin 内容宽度&#x3D;父盒子content-自身左右margin-自身左右border-自身左右padding 总高度&#x3D;父盒子content-自身上下margin 内容高度&#x3D;父盒子content-自身上下margin-自身上下border-自身上下padding 示例： css12width: 100px;height: 500px; 3.2.2 盒子内边距相关控制盒子内边距的属性： 属性名 作用 取值 padding-top 设置上内边距 长度单位 padding-right 设置右内边距 长度单位 padding-bottom 设置下内边距 长度单位 padding-left 设置左内边距 长度单位 padding 复合属性 用空格隔开，顺时针设置内边距： 1. 四个方向内边距相同： padding: 长度; 2. 上下内边距相同，左右内边距相同： padding: 上下长度 左右长度; 3. 上内边距，左右内边距相同，下内边距： padding: 上长度 左右长度 下长度; 4. 上内边距，右内边距，下内边距，左内边距： padding: 上长度 右长度 下长度 左长度; 说明： 值不能为负数。 行内元素的左右内边距是没问题的，上下内边距不能完美的设置。 示例： css1padding: 10px; 3.2.3 盒子边框相关控制盒子边框的属性： 属性名 作用 取值 border-style 设置边框风格，复合四个方向 none：无（默认值） solid：实线 dashed：虚线 dotted：点线 double：双实线 border-width 设置边框宽度，复合四个方向 长度单位，默认3px border-color 设置边框颜色，复合四个方向 颜色代码，默认黑色 border 设置复合属性 没有数量和顺序要求，同属性后面的会覆盖前面的 上述的每个属性都能在四个方向上的边框单独设置。 3.2.4 盒子外边距相关控制盒子外边框的属性： 属性名 作用 取值 margin-top 设置上外边距 长度单位 margin-right 设置右外边距 长度单位 margin-bottom 设置下外边距 长度单位 margin-left 设置左外边距 长度单位 margin 复合属性 用空格隔开，顺时针设置外边距： 1. 四个方向外边距相同： margin: 长度; 2. 上下外边距相同，左右外边距相同： margin: 上下长度 左右长度; 3. 上外边距，左右外边距相同，下外边距： margin: 上长度 左右长度 下长度; 4. 上外边距，右外边距，下外边距，左外边距： margin: 上长度 右长度 下长度 左长度; 说明： 行内元素的左右外边距是没问题的，上下外边距不能设置。 上左影响自己的位置，下右影响后面兄弟元素的位置。 值可以为负数，负值允许其他元素进入到元素内部。 值可以设为auto，给块级元素的左右设为auto会让元素水平居中。 示例： css1margin: 10px; 3.3 技巧3.3.1 外边距问题3.3.1.1 margin塌陷在设置margin时，第一个子元素的上margin会作用在父元素上，最后一个子元素的下margin会作用在父元素上。 问题原因： 历史遗留问题，可以看作早期CSS故意这么处理的。 解决办法： 方案一：给父元素padding设为非0的数字。 方案二：给父元素border设为非0的数字。 方案三（推荐）：把父元素overflow设为hidden。 3.3.1.2 margin合并上面兄弟元素的下margin和下面兄弟元素的上margin会合并，取一个最大的值，而不是相加。 这种是正常的，可以把元素margin设为期望的总和。 3.3.2 内容溢出文本内容过长超出父元素设置的高度会产生纵向内容溢出，子元素宽度过长超出父元素设置的宽度会产生横线内容溢出。 设置溢出属性： 属性名 作用 取值 overflow 设置内容溢出的处理方式 visible：显示（默认值） hidden：隐藏（常用） scroll：显示滚动条，不论内容是否溢出 auto：自动显示滚动条，内容不溢出不显示（常用） 示例： css1overflow: auto; 3.3.3 隐藏元素使用属性隐藏元素： 属性名 作用 取值 visibility 设置元素的可见性 show：元素会被显示（默认值） hidden：元素会被隐藏，会保留占位 display 控制元素的显示模式 none：元素会被隐藏，不保留占位 block：元素将作为块级元素显示 inline：元素将作为内联元素显示 inline-block：元素将作为行内块元素显示 示例： css1display: none; 3.3.4 继承样式元素会自动拥有祖先元素设置的某些样式，并且关系近的优先级高。 可以继承的属性，都是不影响布局的，即都是和盒子模型没关系的。 3.3.5 居中布局让子元素在父元素中水平居中： 子元素为块级元素 给子元素设置：css1margin: auto; 子元素为行内元素和行内块元素 给父元素设置：css1text-align: center; 让子元素在父元素中垂直居中： 子元素为块元素 给子元素设置：css1margin-top: (父元素盒子内容高度-子元素盒子高度)/2; 子元素为行内元素和行内块元素 给父元素设置：css1line-height: 父元素盒子内容高度; 当子元素字体大小不同时，字体小的子元素会靠下，需要让子元素使用中线对齐，给子元素设置：css1vertical-align: middle; 父元素字体越大子元素越靠下，需要清除父元素字体的影响，给父元素设置：css1font-size: 0px; 3.3.6 消除空白3.3.6.1 消除换行空白行内元素和行内块元素之间的换行会被浏览器解析为一个空白字符。 解决办法： 方案一：去掉换行和空格。 方案二（推荐）：把父元素字体大小设为0，再给子元素单独设置字体大小。 3.3.6.2 消除基线空白子元素与基线对齐，而基线与盒子底部之间是有一定距离的。 解决办法： 方案一（推荐）：把子元素vertical-align设为除了baseline以外的其他值，比如top、middel、bottom均可。 方案二：若子元素只有一个，设置子元素display为block，将子元素转为块级元素。 方案三：把父元素字体大小设为0，清除父元素字体的影响，再给子元素单独设置字体大小。 4 浮动4.1 介绍浮动最初是用来实现文字环绕图片效果的，现在是主流的页面布局方式之一。 元素浮动的特点： 会脱离文档流。 不管浮动前是什么元素，浮动后默认宽高都是尽可能小的被内容撑开，而且可以设置宽高。 不会独占一行，可以与其他元素共用一行。 不会产生外边距问题，能够完美的设置四个方向的外边距和内边距。 不会有空白问题。 4.2 影响浮动产生的影响： 对父元素的影响：不能撑起父元素的高度，导致父元素高度塌陷，但是父元素的宽度依然束缚浮动元素。 对兄弟元素的影响：不浮动的兄弟元素会占据浮动元素之前的位置，而且是在浮动元素的下层。 解决浮动的影响： 方案一：给父元素指定高度，不能解决对兄弟元素的影响。 方案二：给父元素也设置浮动，不能解决对兄弟元素的影响。 方案三：给父元素overflow设置为hidden，不能解决对兄弟元素的影响。 方案四（推荐）：如果不是全都浮动，给不浮动的兄弟元素clear设为both，清除浮动效果，解决浮动产生的全部影响。 方案五：如果全都浮动，在最后添加不浮动的块级元素，给不浮动的块级元素clear设为both，原理与方案四相同。 方案六（推荐）：如果全都浮动，给父元素设置伪元素，通过伪元素清除浮动，原理与方案四相同：css12345父元素::after &#123; content: &quot;&quot;; display: block; clear:both;&#125; 4.3 属性浮动相关属性： 属性名 作用 取值 float 设置元素的浮动方式 left：设置左浮动 right：设置右浮动 none：不浮动（默认值） clear 控制元素的显示模式 left：清除前面左浮动的影响 right：清除前面右浮动的影响 both：清除前面左右浮动的影响 5 定位5.1 属性定位相关属性： 属性名 作用 取值 position 设置元素的定位方式 static：不开启定位（默认值） relative：开启相对定位 absolute：开启绝对定位 fixed：开启固定定位 sticky：开启粘性定位 用于调整定位的属性，只有开启定位才有效： 属性名 作用 取值 left 调整到左侧边缘的距离 长度单位 right 调整到右侧边缘的距离，不能和left同时使用 长度单位 top 调整到顶部边缘的距离 长度单位 bottom 调整到底部边缘的距离，不能和top同时使用 长度单位 5.2 分类5.2.1 相对定位参考元素： 基于原来的位置，即基于正常定位的位置进行调整的。 效果： 只设为相对定位，不设置位置，无变化。 设置位置后，根据层级进行元素覆盖。 特点： 不会脱离文档流，元素位置的变化，只是视觉效果上的变化，不会对其他元素产生任何影响。 不建议和float同时使用。 不建议和margin同时使用。 元素（行内元素、行内块元素、块级元素）在设置为相对定位之后，不会变成定位元素（宽度和高度由内容决定，可以自由设置）。 5.2.2 绝对定位参考元素： 基于包含块。如果没有脱离文档流，包含块就是父元素，如果脱离文档流，包含块就是最近开启任何定位的祖先元素。 效果： 只设为绝对定位，不设置位置，元素在绝对定位前的位置浮动，后面的元素占用绝对定位前的位置并且被元素覆盖。 设置位置后，根据包含块进行元素覆盖。 特点： 会脱离文档流，会对后面的兄弟元素有影响，会对父元素有影响。 不建议和float同时使用，浮动会失效，以绝对定位为主。 不建议和margin同时使用。 元素（行内元素、行内块元素、块级元素）在设置为绝对定位之后，都会变成定位元素（宽度和高度由内容决定，可以自由设置）。 使用规则： 在父元素上开启相对定位，在对其他元素没有影响的情况下，支持作为子元素的包含块。 在子元素上开启绝对定位，在包含块为父元素的前提下修改位置。 和浮动的区别： 绝对定位的元素内容会被覆盖，不能环绕元素。 绝对定位的元素会变成定位元素。 绝对定位的元素一般会配合相对定位的包含块一起使用。 5.2.3 固定定位参考元素： 基于视口。对于PC浏览器来说，视口就是浏览器展示内容的界面。 效果： 只设为固定定位，不设置位置，元素在固定定位前的位置浮动，后面的元素占用固定定位前的位置并且被元素覆盖。 设置位置后，根据视口进行元素覆盖，并且页面内容滚动时，固定定位固定在视口相对位置，不随页面内容滚动。 特点： 会脱离文档流，会对后面的兄弟元素有影响，会对父元素有影响。 不建议和float同时使用，浮动会失效，以固定定位为主。 不建议和margin同时使用。 元素（行内元素、行内块元素、块级元素）在设置为固定定位之后，都会变成定位元素（宽度和高度由内容决定，可以自由设置）。 和绝对定位的区别： 固定定位不使用包含块，不需要父元素配合，不需要和相对定位配合。 固定定位保持在视口显示，不会跟随内容移动而消失。 5.2.4 粘性定位参考元素： 基于滚动元素。根据关系最近的具有滚动机制的祖先元素，即祖先元素必须有滚动条，最远的是body元素。 效果： 只设为粘性定位，不设置位置，无变化。 设置位置后，根据滚动元素进行元素覆盖，并且页面内容滚动时，粘性定位固定在滚动元素相对位置，不随页面内容滚动。 当滚动元素和父元素同时在页面显示时，粘性定位显示，否则粘性定位消失，多个粘性定位会进行元素覆盖。 特点： 不会脱离文档流，是一种专门用于窗口滚动时的新的定位方式。 不建议和float同时使用。 不建议和margin同时使用。 元素（行内元素、行内块元素、块级元素）在设置为粘性定位之后，不会变成定位元素（宽度和高度由内容决定，可以自由设置）。 滚动机制： 设置元素的高度小于元素内容的高度，继续将元素overflow设为scroll或者auto，就能在元素上显示滚动条。 5.3 层级元素的显示层级： 开启定位的元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的。 如果位置发生重叠，默认情况下，后面的元素会覆盖前面的元素。 如果元素被显示层级低的元素覆盖了，可能是因为包含块的显示层级低被其他元素覆盖，导致元素和包含块一起被覆盖。 用于调整显示层级的属性： 属性名 作用 取值 z-index 调整元素的显示层级，开启定位的元素有效 无单位的数字，值越大显示层级越高 5.4 定位元素的特殊应用定位元素的宽度和高度由内容决定，不再充满包含块，由此会带来一些问题。 成为定位元素的两种方式： 元素使用固定定位成为定位元素。 父元素使用相对定位，元素使用绝对定位成为定位元素。 5.4.1 让定位元素充满包含块在定位元素没有设置宽度和高度的前提下，让定位元素在包含块居中，有以下两种方案： 方案一：计算充满所需要的宽度和高度。 方案二：给定位元素的用于调整定位的属性设置为0（推荐）：css1234top: 0;right: 0;bottom: 0;left: 0; 5.4.2 让定位元素在包含块居中在定位元素设置宽度和高度的前提下，让定位元素在包含块居中，有以下两种方案： 方案一：设置左右margin为auto，计算上margin长度。 方案二：使用折半的方式设置：css1234left: 50%;top: 50%;margin-left: 元素宽度一半的负数;margin-top: 元素高度一半的负数; 方案三：将用于调整定位的属性设置为0，同时设置margin为auto（推荐）：css12345top: 0;right: 0;bottom: 0;left: 0;margin: auto; 6 布局6.1 版心在PC端网页中，一般都会有一个固定宽度且水平居中的盒子，来显示网页的主要内容，这是网页的版心。 版心的宽度一般是960像素到1200像素之间。 版心可以是一个，也可以是多个。 6.2 布局名词常用布局名词： 版心：container 顶部导航条：topbar 页头：header、page-header 导航：nav、navigator、navbar 搜索框：search、search-box 横幅：banner 主要内容：content、main 侧边栏：aside、sidebar 页脚：footer、page-footer 6.3 重置默认样式在早期元素默认样式能够快速的绘制网页，但如今网页的设计越来越复杂，这些默认样式会在绘制页面时带来麻烦，而且这些默认样式在不同的浏览器上呈现出来的效果也不一样，所以需要重置这些默认样式。 6.3.1 全局选择器代码： css1234* &#123; margin: 0; padding: 0;&#125; 此种方法在测试时可以用，但实际开发中不会使用，因为在重置样式时，需要对特定元素进行重做，并不是清除所有样式。 6.3.2 重置样式文件将对默认样式的修改写入单独的reset.css文件，在页面中引入默认的CSS文件。 6.3.3 Normalize.cssNormalize.css也是CSS文件，它对默认样式提供了跨浏览器的高度一致性，相比传统的重置样式文件，Normalize.css是一种现代的、为HTML5准备的优质替代方案。 使用方式和重置样式文件一样，需要先在官网下载最新的CSS文件，在页面中引入即可。 官网：http://necolas.github.io/normalize.css/ 相对于重置样式文件来说，Normalize.css有如下优点： 保护了有价值的默认样式，而不是完全去掉它们。 为大部分HTML元素提供高度一致的样式。 新增对HTML5元素的设置。 对并集选择器的使用比较谨慎，有效避免调试工具杂乱。","categories":[{"name":"大前端","slug":"大前端","permalink":"https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://momashanhe.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://momashanhe.com/tags/CSS/"}]},{"title":"CSS2入门","slug":"100-大前端/102-CSS/001-基础/001-CSS2入门","date":"2024-04-02T06:49:27.000Z","updated":"2024-04-08T04:30:21.889Z","comments":true,"path":"posts/20240402/144927/","permalink":"https://momashanhe.com/posts/20240402/144927/","excerpt":"摘要：本文主要介绍了CSS的语法规则和选择器，以及CSS常用的一些属性。","text":"摘要：本文主要介绍了CSS的语法规则和选择器，以及CSS常用的一些属性。 1 简介CSS全称：Cascading Style Sheets（层叠样式表）。 CSS也是一种标记语言，用于给HTML结构设置样式，比如文字大小、颜色、元素宽高等等。 2 语法规范2.1 基本语法CSS的语法为： css1234选择器 &#123; 属性名: 属性值; 属性名: 属性值;&#125; 主要由两部分组成： 选择器：匹配要添加样式的元素。 声明块：给匹配到的元素设置具体的样式，声明块由多个声明组成，并使用&#123;&#125;包裹，声明由属性名和属性值组成。 说明： 选择器和声明块之间，声明的属性名和属性值之间，均有一个可以省略的空格，建议不要省略，提高可读性。 声明使用;分号结尾，最后一个声明可以省略，建议不要省略，提高可读性。 2.2 注释CSS中注释的语法为： css1/* 注释内容 */ 2.3 代码风格展开风格，开发时使用，可读性高： css123span &#123; color: red;&#125; 紧凑风格，上线时使用，文件体积小： css1span&#123;color:red;&#125; 在上线时可以使用工具将展开风格转为紧凑风格。 2.4 编写位置2.4.1 行内样式行内样式又称为内联样式，写在元素的style属性中。 代码： hello.html1&lt;p&gt;欢迎学习&lt;span style=&quot;color: red;&quot;&gt;前端&lt;/span&gt;知识&lt;/p&gt; 这种方式编写的CSS没有和HTML分离，不能体现出结构和样式分离的思想，而且样式不能复用，不建议使用这种方式。 2.4.2 内部样式将CSS提取出来，写在页面内部的style元素中。 代码： hello.html12345&lt;style&gt;span &#123; color: red;&#125;&lt;/style&gt; 理论上可以将style元素放在页面的任何位置，建议放到head元素中。 和行内样式相比，这种方式编写的CSS和HTML分离，样式也能复用，但也没有做到完全分离，并且样式不能在多个页面复用。 2.4.3 外部样式将CSS进一步提取，写在单独的CSS文件中，在HTML页面中使用元素引用外部的CSS文件，如下： 标签名 说明 单双 link 表示引用文件 单标签 常用属性如下： rel：引用文件和当前文件的关系。 href：引用文件位置。 创建CSS文件，后缀为.css格式，代码： hello.css123span &#123; color: red;&#125; 在HTML页面引用CSS文件，代码： hello.html1&lt;link rel=&quot;stylesheet&quot; href=&quot;./hello.css&quot;&gt; 2.5 优先级三种方式的优先级：行内样式 &gt; 内部样式 &#x3D; 外部样式 行内样式的优先级最高，内部样式和外部样式的优先级和位置有关，后面的样式会覆盖前面的样式。 三种方式比较： 方式 优点 缺点 使用频率 作用范围 行内样式 优先级高 结构和样式未分离样式不能复用 低 当前元素 内部样式 结构和样式分离样式可以在当前页面复用 结构和样式未彻底分离样式不能在多个页面复用 中 当前页面 外部样式 结构和样式彻底分离样式可以在多个页面复用能够触发浏览器缓存机制 需要引入才能使用 低 多个页面 3 选择器3.1 基本选择器基本选择器： 通配选择器 元素选择器 属性选择器 类选择器 ID选择器 其他选择器可以参考文档：MDN官方CSS文档 3.1.1 通配选择器匹配所有元素。 语法： css123* &#123; 声明块&#125; 3.1.2 元素选择器匹配元素的标签名和选择器的标签名相同的所有元素。 语法： css123标签名 &#123; 声明块&#125; 3.1.3 类选择器匹配元素的class属性值和选择器的类名相同的所有元素。 语法： css123.类名 &#123; 声明块&#125; 说明： 在类名前增加.符号，表示这是类选择器，用来和其他选择器区分。 一个元素中的class属性最多只有一个，属性值可以有多个，使用空格分隔多个属性值。 class属性值不是唯一的，不同的元素可以有相同的属性值。 class属性值按照标准，建议使用英文和数字的组合，并且使用英文开头，多个单词之间使用-短横线和_下划线连接，注意区分大小写。 3.1.4 ID选择器匹配元素的id属性值和选择器的id值相同的所有元素。 语法： css123#id值 &#123; 声明块&#125; 说明： 在id值前增加.符号，表示这是ID选择器，用来和其他选择器区分。 一个元素中的id属性最多只有一个，属性值只能有一个。 id属性值是唯一的，不同的元素不能有相同的属性值。 id属性值按照标准，建议使用英文和数字的组合，并且使用英文开头，多个单词之间使用-短横线和_下划线连接，注意区分大小写。 3.1.5 属性选择器匹配元素的属性及属性值和选择器指定的属性及属性值相同的所有元素。 属性选择器可以对元素的所有属性进行匹配，可以实现类选择器和ID选择器的效果。 属性选择器的语法较为复杂，使用[]包裹来区分其他选择器： css12345678910111213141516171819202122232425262728/* 选择具有指定属性名的元素，对属性值没有要求 */[属性名] &#123; 声明块&#125;/* 选择具有指定属性名的元素，并且属性值是指定属性值的元素 */[属性名=属性值] &#123; 声明块&#125;/* 选择具有指定属性名的元素，并且属性值是以指定属性值开头的元素 */[属性名^=属性值] &#123; 声明块&#125;/* 选择具有指定属性名的元素，并且属性值是以指定属性值结尾的元素 */[属性名$=属性值] &#123; 声明块&#125;/* 选择具有指定属性名的元素，并且属性值包含指定属性值的元素 */[属性名*=属性值] &#123; 声明块&#125;/* 选择具有指定属性名的元素，并且属性值是用空格分隔的列表，存在指定属性值的列表项的元素 */[属性名~=属性值] &#123; 声明块&#125;/* 选择具有指定属性名的元素，并且属性值是指定属性值的元素或者属性值是以指定属性值拼接&quot;-&quot;开头的元素 */[属性名|=属性值] &#123; 声明块&#125; 说明： 选择器中的属性名不需要&quot;双引号包裹，但是属性值需要&quot;双引号包裹。 3.2 复合选择器复合选择器建立在基本选择器之上，由多个基础选择器，通过不同的方式组合而成。 主要有： 并集选择器 交集选择器 后代选择器 子代选择器 兄弟选择器 伪类选择器 伪元素选择器 3.2.1 并集选择器选择满足任何一个选择器的元素。 语法： css1234基础选择器1,基础选择器2 &#123; 声明块&#125; 说明： 不同的选择器使用,逗号分隔，建议多个选择器换行编写，提高可读性。 3.2.2 交集选择器选择满足所有选择器的元素。 语法： css123基础选择器1基础选择器2 &#123; 声明块&#125; 说明： 不同的选择器相邻，中间不能有任何符号，也不能有空格和换行。 因为没有任何符号分隔，所以如果有元素选择器的话，需要将其放在首位，否则会被识别为其他选择器的一部分。 3.2.3 后代选择器选择满足后一个选择器是前一个选择器的后代的元素。 语法： css123基础选择器1 基础选择器2 &#123; 声明块&#125; 说明： 不同的选择器使用 空格分隔，子代也属于后代。 3.2.4 子代选择器选择满足后一个选择器是前一个选择器的子代的元素。 语法： css123基础选择器1&gt;基础选择器2 &#123; 声明块&#125; 说明： 不同的选择器使用&gt;大于号分隔。 3.2.5 兄弟选择器3.2.5.1 相邻兄弟选择器选择满足后一个选择器是前一个选择器下方的相邻兄弟的元素。 语法： css123基础选择器1+基础选择器2 &#123; 声明块&#125; 说明： 不同的选择器使用+加号分隔。 选择器匹配的元素之间必须是兄弟关系，必须相邻，除了空格和换行，没有其他代码。 可以匹配到多个元素，每个选择器匹配的元素的相邻兄弟元素只有一个。 3.2.5.2 通用兄弟选择器选择满足后一个选择器是前一个选择器下方的所有兄弟的元素。 语法： css123基础选择器1~基础选择器2 &#123; 声明块&#125; 说明： 不同的选择器使用~加号分隔。 选择器匹配的元素之间必须是兄弟关系，可以有其他代码。 可以匹配到多个元素，每个选择器匹配的元素的兄弟元素可以有多个。 3.2.6 伪类选择器3.2.6.1 伪类普通的元素，如果处于某种特殊状态下，把这种处于特殊状态下的元素称为伪类。 伪类选择器固定以:冒号开头。 3.2.6.2 动态伪类匹配需要用户手动操作才会出现的元素： 使用:link选择未被访问的元素，多用于超链接。 使用:visited选择被访问后的元素，多用于超链接。 使用:hover选择被鼠标悬停的元素。 使用:focus选择获取焦点时的元素，多用于表单元素。 使用:active选择被鼠标按住的元素。 说明： 在使用:link和:visited匹配超链接时，匹配到的是具有href属性的超链接，因为这种超链接才具有访问的功能。 在使用:focus匹配元素时，需要元素拥有获取焦点的功能，否则无效。 如果元素同时存在多个伪类选择器那么后面的样式会替换前面的样式，所以需要按照l-v-h-f-a的顺序，将规则宽松的放前面，将规则严格的放后面。 3.2.6.3 结构伪类匹配在页面结构上处于特殊顺序的元素： 使用:first-child选择元素的父元素的所有子元素中的第一个，即元素的第一个兄弟元素，并且兄弟元素要和元素相同。 使用:last-child选择元素的父元素的所有子元素中的最后一个，即元素的最后一个兄弟元素，并且兄弟元素要和元素相同。 使用:nth-child(n)选择元素的父元素的所有子元素中的第n个，即元素的第n个兄弟元素，并且兄弟元素要和元素相同。 使用:first-of-type选择元素的父元素的和元素相同的子元素中的第一个，即元素的第一个相同的兄弟元素。 使用:last-of-type选择元素的父元素的和元素相同的子元素中的最后一个，即元素的最后一个相同的兄弟元素。 使用:nth-of-type(n)选择元素的父元素的和元素相同的子元素中的第n个，即元素的第n个相同的兄弟元素。 使用:root选择根元素，即html元素。 使用:empty选择内容为空元素，即双标签中开始标签紧跟结束标签的元素或者单标签的元素，双标签的空格和换行也算内容。 说明： 伪类选择器中的n实际上是an+b性质的表达式，a和b都是数字。 0或者小于0都表示不选择任何元素。 n表示n从0到超过元素数量的过程中符合的元素，也就是选择全部元素。 2n表示n从0到超过元素数量的过程中符合的元素，也就是选择偶数元素。 2n+1表示n从0到超过元素数量的过程中符合的元素，也就是选择奇数元素。 -n+5表示n从0到超过元素数量的过程中符合的元素，也就是选择前5个元素。 3.2.6.4 否定伪类匹配不满足指定选择器的元素： 使用:not(选择器)选择不满足指定选择器的元素。 说明： 伪类选择器中指定的选择器可以使用伪类选择器。 3.2.6.5 界面伪类匹配在界面上有特殊效果的元素： 使用:checked选择被勾选的元素，多用于单选框和复选框。 使用:enable选择可用的元素，即没有disabled属性的元素，多用于表单元素。 使用:disabled选择不可用的元素，即有disabled属性的元素，多用于表单元素。 3.2.6.6 锚点伪类匹配被作为锚点跳转的元素： 使用:target选择锚点指向的元素。 3.2.6.7 语言伪类匹配被作为锚点跳转的元素： 使用:lang(语言)选择特定语言的元素，即有lang属性并且属性值和伪类选择器中语言相同的元素。 说明： 如果在html元素中使用lang属性，那么html的后代元素也默认使用相同的lang属性。 3.2.7 伪元素选择器伪元素指的是元素中的一些特殊位置。 伪元素选择器固定以::双冒号开头，但为了兼容之前的版本，使用:冒号开头也能被识别。 常用伪元素选择器： 使用::first-letter选择元素内容中的第一个文字。 使用::first-line选择元素内容中的第一行文字。 使用::selection选择元素内容中被鼠标选中的内容。 使用::placeholder选择输入框的提示文字，多用于输入框和文本域。 使用::before在元素的起始位置，创建一个子元素，需要使用content属性指定内容。 使用::after在元素的结束位置，创建一个子元素，需要使用content属性指定内容。 3.3 优先级使用相同的选择器，选择相同的元素，优先级和位置有关，后面的选择器优先级高。 使用不同的选择器，选择相同的元素，优先级和权重有关，权重高的选择器优先级高比。 3.3.1 简单描述优先级： 行内样式 &gt; ID选择器 &gt; 类选择器 &#x3D; 伪类选择器 &#x3D; 属性选择器 &gt; 元素选择器 &#x3D; 伪元素选择器 &gt; 通配选择器 3.3.2 详细描述优先级： !important &gt; 行内样式 &gt; 按权重计算选择器 &gt; 通配选择器 &gt; 继承的样式 权重计算规则： 每个选择器，都可计算出一组格式为(a,b,c)的权重，说明： a：ID选择器的个数。 b：类选择器、伪类选择器、属性选择器的个数。 c：元素选择器、伪元素选择器的个数。 比较规则： 按照从左到右的顺序，依次比较大小，当前位胜出后，后面的不再对比。 特殊规则： 并集选择器需要被看作多个选择器，只能计算涉及当前元素的选择器的权重，不能计算整个并集选择器的权重。 4 三大特性4.1 层叠性如果发生了样式冲突，会根据选择器优先级进行样式层叠，优先级低的会被优先级高的覆盖。 4.2 继承性元素会自动拥有祖先元素设置的某些样式，继承性也遵循样式优先级，关系近的优先级高。 常见的可继承样式： color font-前缀 text-前缀 line-前缀 可以在MDN网站查询属性是否可被继承。 4.3 优先级选择器相同： !important &gt; 行内样式 &gt; 后面的选择器 &gt; 前面的选择器 &gt; 通配选择器 &gt; 默认的样式 &gt; 继承的样式 选择器不同： !important &gt; 行内样式 &gt; 按权重计算选择器优先级 &gt; 通配选择器 &gt; 默认的样式 &gt; 继承的样式 5 常用属性5.1 像素5.1.1 概念在涉及电子设备的屏幕时，为了更精确的描述图像的清晰度，创建了像素这个新的长度计量单位，使用px表示。 像素和毫米的换算和分辨率有关，分辨率不同换算结果也不同。 像素是图像最小的单位，图像是由多个像素组成的，每个像素内的颜色是相同的，像素越高的图像看起来画质越清晰，占用空间也越大。 5.1.2 尺寸尺寸就是宽度和高度，单位也是像素，指的是图像的宽度和高度占用的像素数量，也称为像素密度。 5.1.3 分辨率分辨率就是单位面积内的像素数量，单位通常是DPI（Dots Per Inch，每英寸的像素数量），如果使用DPI作为单位，那么“单位面积”就是英寸。 英寸和毫米的换算： 1in &#x3D; 25.4mm 如果是DPI为96的图像，像素和毫米的换算： 1mm ≈ 3.77px 分辨率有两种，一种是图像的分辨率，一种是屏幕的分辨率： 如果二者相同，看起来就是正常的。 如果图像的分辨率大，看起来就像被放大了。 如果图像的分辨率小，看起来就像被缩小了。 5.2 颜色5.2.1 使用颜色名使用颜色名表示颜色。 语法： css1颜色名; 使用颜色名设置颜色为红色： css1color: red; 这种方式比较简单，但是颜色名有限，不常见的颜色没有颜色名，可用颜色名参考文档：MDN具名颜色 5.2.2 使用RGB或RGBARGB指的是光的红（Red）绿（Green）蓝（Blue）三原色，RGBA多了一个透明度（Alpha）。 三原色的可选范围是0到255，透明度的可选范围是0到1，0表示全透明，1表示不透明。 语法： css1rgb(红色,绿色,蓝色); 使用RGB设置颜色为红色： css1color: rgb(255,0,0); 使用RGBA设置颜色为半透明红色： css1color: rgba(255,0,0,0.5); 5.2.3 使用HEX或HEXAHEX或HEXA是一种使用RGB或RGBA的十六进制表示的一种方式。 三原色和透明度都使用两位十六进制表示，范围是00到FF，对应数字0到255。 说明： 如果HEX或HEXA表示的颜色，每组两位十六进制都相同，可以简写为一位十六进制。 颜色字母大小写不敏感。 IE浏览器不支持HEXA，只支持HEX。 语法： css1#红色绿色蓝色; 使用HEX设置颜色为红色： css1color: #ff0000; 使用HEXA设置颜色为半透明红色： css1color: #ff000088; 5.2.4 使用HSL或HSLAHSL指的是色相（Hue）、饱和度（Saturation）、亮度（Lightness），HSLA多了一个透明度（Alpha）。 概念： 色相：取值范围是0度到360度，表示颜色的角度。 饱和度：取值范围是0%到100%，表示向色相中对应颜色中添加灰色，0%表示黑白，100%表示彩色。 亮度：取值范围是0%到100%，表色颜色的明亮程度，0%表示没有亮度的黑色，100%表示最高亮度的白色。 色相的度数对应的颜色如下图： 语法： css1hsl(色相,饱和度,亮度); 使用HSL设置颜色为红色： css1color: hsl(0,100%,50%); 使用HSLA设置颜色为半透明红色： css1color: hsl(0,100%,50%,50%); 5.3 字体5.3.1 字体大小控制字体大小的属性： 属性名 作用 取值 font-size 控制文本字体的大小 长度单位 说明： 设置为0会让文本消失。 浏览器有默认字体，不同浏览器默认字体可能不一样大，为了显示统一，建议设置明确大小。 因为CSS的继承性，只需要给body元素设置字体大小，后代元素默认继承祖先元素的字体大小。不建议使用通配选择器，否则会导致在给某个元素的父元素的字体设置大小后，因为通配选择器优先级高于继承，元素优先使用通配选择器设置的大小，并没有使用继承父元素设置的大小。 示例： css1font-size: 16px; 5.3.2 字体族控制字体字型的属性： 属性名 作用 取值 font-family 控制文本字体的字型 字体名称，多个使用,分隔分隔 分类： 衬线字体：字体线条粗细不一，类似毛笔和钢笔的字体。使用serif表示选择系统可用的衬线字体。 非衬线字体：字体线条宽度一致。使用sans-serif表示选择系统可用的非衬线字体。 说明： 支持使用中文，但有的字体没有提供中文名称，建议使用英文，如果存在空格，需要使用&quot;双引号包裹。 多个字体使用时按照从左到右的顺序查找，系统存在就使用，系统不存在就查找下一个。 如果都不能匹配，会使用操作系统默认字体，不同的操作系统能够使用的字体不同。在Windows系统下使用微软雅黑作为默认字体。 为了保证显示效果统一，通常多个字体都是衬线字体或者非衬线字体，并且可以使用serif或者sans-serif兜底，当前面的字体在系统中不存在时，强制使用系统可用的衬线字体或者非衬线字体进行渲染。 示例： css1font-family: &quot;Microsoft YaHei&quot;,sans-serif; 5.3.3 字体风格控制字体风格的属性： 属性名 作用 取值 font-style 控制文本字体的风格（是否斜体） normal：正常（默认字体） italic：斜体（先使用斜体字体，如果不存在，才会强制字体倾斜，推荐） oblique：斜体（不使用斜体字体，直接强制字体倾斜） 示例： css1font-style: italic; 5.3.4 字体粗细控制字体粗细的属性： 属性名 作用 取值 font-weight 控制文本字体的粗细 有两种方式： 1. 使用名称设置粗细： lighter：细 normal：正常 bold：粗 bolder：很粗（多数字体不支持，效果同bold） 2. 使用数值设置粗细： 数值的范围是从100到1000，一般来说数值越大字体越粗，具体要看字体设计 100~300等同于lighter 400~500等同于normal 600及以上等同于bold 示例： css1font-weight: 200; 5.3.5 复合写法控制字体的多个属性： 属性名 作用 取值 font 控制文本字体的多个属性的复合写法 用空格隔开： 1. 字体族必须存在并且是最后一位： 字体族同font-family属性 2. 字体大小必须存在并且是倒数第二位： 字体大小同font-size属性 3. 其他属性： 同其他字体属性 示例： css1font: normal 200 40px &quot;Microsoft YaHei&quot;,sans-serif; 5.4 文本5.4.1 文本颜色控制文本颜色的属性： 属性名 作用 取值 color 控制文本的颜色 颜色名 RGB或RGBA（常用） HEX或HEXA（常用） HSL或HSLA 示例： css1color: #ff0000; 5.4.2 文本划线控制文本划线样式的属性： 属性名 作用 取值 text-decoration 控制文本的各种装饰线 用空格隔开，支持三种维度设置： 1. 装饰线类型： none：无装饰线（常用） line-through：删除线（常用） underline：下划线（常用） overline：上划线 2. 装饰线样式： dotted：虚线 wavy：波浪线 3. 装饰线颜色： 颜色代码 示例： css1text-decoration: line-through dotted #ff0000; 5.4.3 文本缩进控制文本缩进的属性： 属性名 作用 取值 text-indent 控制文本的缩进 长度单位 说明： 正值让文本右移，负值让文本左移。 示例： css1text-indent: 5px; 5.4.4 文本间距控制文本间距的属性： 属性名 作用 取值 letter-spacing 控制字符之间的距离，包括汉字和标点符号，也包括空格 长度单位 word-spacing 控制空格分隔的词语之间的距离，实际控制的是空格占用的距离 长度单位 说明： 正值让间距增大，负值让间距缩小。 示例： css12letter-spacing: 5px;word-spacing: 5px; 5.4.5 文本水平对齐控制文本水平对齐的属性： 属性名 作用 取值 text-align 控制块级元素内容或者单元格元素内容的水平对齐 left：左对齐（默认值） right：右对齐 center：居中对齐 示例： css1text-align: center; 5.4.6 文本字体字体设计用到的参考线： 概念： baseline：基线，以英文字符x下边缘为参考的横线，字符默认是以基线对齐的。middle：中线，以英文字符x上边缘为参考的横线。top：顶线，字符的上边缘，所有字符均不会超过上边缘，包括中文。bottom：底线，字符的下边缘，所有字符均不会超过下边缘，包括中文。line-height：行高，文字的高度，实际是上下两行基线之间的高度。 说明： 即使可以通过font-size给不同的字体设置统一的大小，不同的字体在页面上显示的大小还是有细微的区别。不同的字体对相同的字符在垂直方向上的处理也是不同的，有的可能贴近底线，有的可能贴近顶线。 5.4.7 行高控制行高的属性： 属性名 作用 取值 line-height 控制元素内容一行内容的高度 normal：由浏览器根据文字大小决定的默认值 像素：使用像素`px`作为单位设置行高 数字倍数：使用`font-size`的数字倍数设置行高（很常用） 百分比倍数：使用`font-size`的百分比倍数设置行高 说明： 如果设置行高为负数，效果等同设置行高为normal的效果。 如果设置行高为最小值0，效果和字体设计以及元素区块有关。 如果设置行高为字体大小，会因为字体设计的问题，导致相邻两行发生重叠。 建议设置行高为字体的1.5倍，不会发生重叠，也不会间隔太长。 示例： css1line-height: normal; 5.4.8 文本垂直对齐控制文本垂直对齐的属性： 属性名 作用 取值 vertical-align 控制行内元素内容或者单元格元素内容的垂直对齐 baseline：使元素的基线与父元素的基线对齐（默认值） middle：使元素的中线与父元素的中线对齐 top：使元素的顶线与其所在行的顶线对齐 bottom：使元素的底线与其所在行的底线对齐 说明： 只能用于控制行内元素在父元素一行中的垂直对齐，不能控制行内元素在父元素整个元素中的垂直对齐。 示例： css1vertical-align: middle; 5.5 列表控制列表的属性，可以作用在ul、ol、li元素上： 属性名 作用 取值 list-style-type 设置列表符号 none：不显示前面的标识（很常用） square：实心方块 disc：圆形 decimal：数字 lower-roman：小写罗马字 upper-roman：大写罗马字 lower-alpha：小写字母 upper-alpha：大写字母 list-style-position 设置列表符号的位置 inside：在`li`的里面 outside：在`li`的外边 list-style-image 自定义列表符号 url(图片地址) list-style 设置复合属性 没有数量和顺序要求，同属性后面的会覆盖前面的 示例： css1list-style: decimal; 5.6 表格5.6.1 边框控制边框的属性，可以作用在其他元素上，不仅仅是表格元素： 属性名 作用 取值 border-style 设置边框风格 none：默认值 solid：实线 dashed：虚线 dotted：点线 double：双实线 border-width 设置边框宽度 长度单位 border-color 设置边框颜色 颜色代码 border 设置复合属性 没有数量和顺序要求，同属性后面的会覆盖前面的 示例： css1border: none; 5.6.2 表格独有表格独有属性，只能作用在table元素上： 属性名 作用 取值 table-layout 设置列宽度 auto：自动，列宽根据内容计算（默认值） fixed：固定列宽，平均分 border-collapse 合并单元格边框 collapse：合并 separate：不合并（默认值） border-spacing 设置单元格间距，这个属性生效的前提是单元格边框不能合并 长度单位 empty-cells 隐藏没有内容的单元格，这个属性生效的前提是单元格边框不能合并 show：显示（默认值） hide：隐藏 caption-side 设置表格标题位置 top：在表格上面（默认值） bottom：在表格下面 示例： css1border-collapse: separate; 5.7 背景控制元素背景的属性： 属性名 作用 取值 background-color 设置背景颜色 默认是transparent background-image 设置背景图片 url(图片地址) background-repeat 设置背景重复方式 repeat：重复，铺满整个元素（默认值） repeat-x：只在水平方向重复 repeat-y：只在垂直方向重复 no-repeat：不重复 background-position 设置背景图位置 用空格隔开，使用两个维度定位，有两种方式： 1. 使用关键字(水平 垂直)设置位置： 水平：left、center、right 垂直：top、center、bottom 如果只写一个值，另一个方向的值取center 2. 使用坐标(x y)设置图片左上角的位置，以元素左上角为坐标原点： 如果只写一个值，会被当做x坐标，y坐标取center background 设置复合属性 没有数量和顺序要求，同属性后面的会覆盖前面的 示例： css1background: transparent; 5.8 鼠标控制鼠标样式的属性： 属性名 作用 取值 cursor 设置鼠标光标的样式，也可以自定义鼠标图标 pointer：小手 move：移动图标 text：文字选择器 crosshair：十字架 wait：等待 help：帮助 url(图片地址)：自定义图标 示例： css1cursor: pointer;","categories":[{"name":"大前端","slug":"大前端","permalink":"https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://momashanhe.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://momashanhe.com/tags/CSS/"}]},{"title":"HTML4进阶","slug":"100-大前端/101-HTML/001-基础/002-HTML4进阶","date":"2024-03-14T08:31:25.000Z","updated":"2024-04-08T00:44:17.671Z","comments":true,"path":"posts/20240314/163125/","permalink":"https://momashanhe.com/posts/20240314/163125/","excerpt":"摘要：本文主要介绍了HTML常见的元素及其特点。","text":"摘要：本文主要介绍了HTML常见的元素及其特点。 1 文本元素和排版元素相比，文本元素侧重词汇和短语并且一般是行内元素，排版元素侧重文章和段落并且一般是块级元素，而且文本元素通常写在排版元素中。 常用的文本元素如下： 标签名 说明 单双 em 表示需要注意的内容 双标签 strong 表示十分重要的内容，语气比em元素更重 双标签 不太常用的文本元素如下： 标签名 说明 单双 cite 表示作品标题 双标签 dfn 表示特殊术语或者专属名词 双标签 del 表示想要删除的文本 双标签 ins 表示想要插入的文本 双标签 sub 表示下标 双标签 sup 表示上标 双标签 code 表示代码 双标签 i 表示具有特定含义的文本，多用于呈现字体图标 双标签 省略了一些语义不强、较少使用、能被替代的元素，可以在官方网站上查看全部元素。 2 图片元素2.1 基本结构图片元素用于定义图片资源的位置，以及图片的一些属性，属于行内元素，如下： 标签名 说明 单双 img 表示图片 单标签 常用属性如下： src：图片路径。 alt：图片描述。 width：图片宽度，默认使用图片本身的宽度，单位是像素。 height：图片高度，默认使用图片本身的高度， 单位是像素。 2.2 路径图片路径也称为图片地址，分为相对路径和绝对路径，以及网络地址： 相对路径：从当前页面文件所在的位置开始，能够访问图片资源的路径。 绝对路径：从当前页面文件所在的磁盘的根目录开始，能够访问图片资源的路径。 网络地址：相对路径和绝对路径都是本地图片，如果是网络图片则需要使用图片的网络地址进行访问。 如果是本地图片，需要注意图片被移动会导致路径失效，如果是网络图片，需要注意在开启防盗链后会导致图片不可访问。 2.3 图片格式2.3.1 jpg说明：扩展名为jpg和jpeg，有损压缩，丢弃了肉眼观察不到的细节。 特点：占用空间较小，不支持透明背景，不支持动态图片。 场景：对图片质量没有极高的要求，适合绝大多数场景。 2.3.2 png说明：扩展名为png，无损压缩，支持图片高质量的保存。 特点：占用空间较大，支持透明背景，不支持动态图片。 场景：对图片质量有一定的要求，或者需要使用有透明背景的图片。 2.3.3 bmp说明：扩展名为bmp，不进行压缩，最大程度保留了图片细节。 特点：占用空间极大，不支持透明背景，不支持动态图片。 场景：对图片细节要求极高的场景，页面中很少使用。 2.3.4 gif说明：扩展名为gif，有损压缩，仅支持256种颜色。 特点：占用空间较小，支持颜色较少，支持透明背景，支持动态图片。 场景：页面中的动态图片。 2.3.5 webp说明：扩展名为webp，同时支持无损压缩和有损压缩，谷歌推出的图片格式，专用于处理页面图片。 特点：占用空间较小，支持透明背景，支持动态图片，需要注意兼容性问题。 场景：页面中的图片，在和jpg在同等大小的情况下能保留更多细节。 2.3.6 base64说明：将图片转换得到的一串特殊的文本，支持通过浏览器打开，但某些看图应用无法打开。 特点：字符串会特别长，并且会占用和图片大小相同的空间。 场景：一些较小的图片，或者需要同页面一起加载的图片。 3 超链接3.1 基本结构用于从当前页面进行跳转，超链接本身属于行内元素，如下： 标签名 说明 单双 a 表示超链接 双标签 常用属性如下： href：指定要跳转到的具体目标。 target：控制跳转时如何打开页面。 需要注意的是，虽然a元素是行内元素，但是可以包裹a元素之外的其他元素，包括块级元素和行内元素。 3.2 跳转方式3.2.1 跳转到页面使用href属性指定页面，那么点击超链接会跳转到指定的页面。 使用target属性指定打开目标页面的方式： _self：在当前标签页打开，即替换当前页面的地址为目标地址并访问。 _blank：在新建标签页打开，当前标签页保留。 3.2.2 跳转到文件使用href属性指定文件，那么点击超链接会跳转到指定的文件。 如果浏览器能打开指定的文件就在浏览器展示，比如图片文件，如果浏览器不能打开指定的文件就引导用户下载，比如压缩文件。 3.2.3 跳转到锚点使用href属性指定锚点，那么点击超链接会跳转到指定的锚点。 锚点是#符号和在其他元素中id属性值拼接得到的，代码： html123&lt;a href=&quot;#test&quot;&gt;点击前往测试内容&lt;/a&gt;&lt;!-- 其他内容 --&gt;&lt;p id=&quot;test&quot;&gt;测试内容&lt;/p&gt; 也可以跳转到页面顶部： html1&lt;a href=&quot;#top&quot;&gt;点击前往页面顶部&lt;/a&gt; 如果href属性空白，页面上不会有超链接样式，可以使用#符号占位，点击会跳转到当前页： html1&lt;a href=&quot;#&quot;&gt;占位链接&lt;/a&gt; 3.2.4 跳转到应用使用href属性指定应用，那么点击超链接会跳转到指定的应用，需要应用支持，比如邮箱等。 代码： html1&lt;a href=&quot;mailto:momashanhe@163.com&quot;&gt;点击发送邮件&lt;/a&gt; 4 列表4.1 有序列表有顺序或侧重顺序的列表，属于块级元素，如下： 标签名 说明 单双 ol 表示有序列表的范围 双标签 li 表示列表的一列 双标签 代码： html123456&lt;p&gt;要把大象放冰箱总共分几步&lt;/p&gt;&lt;ol&gt; &lt;li&gt;把冰箱门打开&lt;/li&gt; &lt;li&gt;把大象放进去&lt;/li&gt; &lt;li&gt;把冰箱门关上&lt;/li&gt;&lt;/ol&gt; 4.2 无序列表无顺序或不侧重顺序的列表，属于块级元素，如下： 标签名 说明 单双 ul 表示无序列表的范围 双标签 li 表示列表的一列 双标签 代码： html1234567&lt;p&gt;我想去的几个城市&lt;/p&gt;&lt;ul&gt; &lt;li&gt;成都&lt;/li&gt; &lt;li&gt;上海&lt;/li&gt; &lt;li&gt;西安&lt;/li&gt; &lt;li&gt;武汉&lt;/li&gt;&lt;/ul&gt; 4.3 嵌套列表有序列表和无序列表支持嵌套列表。 代码： html123456789101112131415&lt;p&gt;我想去的几个城市&lt;/p&gt;&lt;ul&gt; &lt;li&gt;成都&lt;/li&gt; &lt;li&gt; &lt;span&gt;上海&lt;/span&gt; &lt;ul&gt; &lt;li&gt;外滩&lt;/li&gt; &lt;li&gt;杜莎夫人蜡像馆&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.opg.cn/&quot;&gt;东方明珠&lt;/a&gt;&lt;/li&gt; &lt;li&gt;迪士尼乐园&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;西安&lt;/li&gt; &lt;li&gt;武汉&lt;/li&gt;&lt;/ul&gt; 4.4 自定义列表包含术语名称以及术语描述的列表，属于块级元素，如下： 标签名 说明 单双 dl 表示自定义列表的范围 双标签 dt 表示术语名称 双标签 dd 表示术语描述 双标签 代码： html12345678910&lt;p&gt;如何高效的学习&lt;/p&gt;&lt;dl&gt; &lt;dt&gt;做好笔记&lt;/dt&gt; &lt;dd&gt;笔记是我们以后复习的一个抓手&lt;/dd&gt; &lt;dd&gt;笔记可以是电子版，也可以是纸质版&lt;/dd&gt; &lt;dt&gt;多加练习&lt;/dt&gt; &lt;dd&gt;只有敲出来的代码，才是自己的&lt;/dd&gt; &lt;dt&gt;别怕出错&lt;/dt&gt; &lt;dd&gt;错很正常，改正后并记住，就是经验&lt;/dd&gt;&lt;/dl&gt; 5 表格5.1 基本结构一个完整的表格由四部分组成：表格标题、表格头部、表格主体、表格脚注。 表格的某些部分可以省略，各个部分都属于块级元素。 表格结构如图： 表格涉及到的元素： 标签名 说明 单双 table 表示表格的范围 双标签 caption 表示表格的标题行 双标签 thead 表示表格头部的范围 双标签 tbody 表示表格主体的范围 双标签 tfoot 表示表格脚注的范围 双标签 tr 表示表格一行的范围，可以用在thead元素、tbody元素、tfoot元素 双标签 th 表示表格头部一格的范围，可以用在thead元素 双标签 td 表示表格主体一格的范围，可以用在tbody元素、tfoot元素 双标签 表格详细结构如图： 表格详细结构代码： html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;table&gt; &lt;!-- 表格标题 --&gt; &lt;caption&gt;学生信息&lt;/caption&gt; &lt;!-- 表格头部 --&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;民族&lt;/th&gt; &lt;th&gt;政治面貌&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;!-- 表格主体 --&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;18&lt;/td&gt; &lt;td&gt;汉族&lt;/td&gt; &lt;td&gt;团员&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李四&lt;/td&gt; &lt;td&gt;女&lt;/td&gt; &lt;td&gt;20&lt;/td&gt; &lt;td&gt;满族&lt;/td&gt; &lt;td&gt;群众&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;王五&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;20&lt;/td&gt; &lt;td&gt;回族&lt;/td&gt; &lt;td&gt;党员&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;赵六&lt;/td&gt; &lt;td&gt;女&lt;/td&gt; &lt;td&gt;21&lt;/td&gt; &lt;td&gt;壮族&lt;/td&gt; &lt;td&gt;团员&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;!-- 表格脚注 --&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;共计：4人&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt;&lt;/table&gt; 5.2 常用属性table元素常用属性： width：设置表格宽度。 height：设置表格最小高度，表格最终高度可能比设置的值大。 border：设置表格边框宽度。 cellspacing：设置单元格之间的间距。 thead元素常用属性： height：设置表格头部高度。 align：设置单元格的水平对齐方式。 valign：设置单元格的垂直对齐方式。 thead元素中的align属性可选值如下： left：左边对齐。 center：中间对齐。 right：右边对齐。 thead元素中的valign属性可选值如下： top：顶部对齐。 middle：中间对齐。 bottom：底部对齐。 tbody元素常用属性与thead元素常用属性相同。 tfoot元素常用属性与thead元素常用属性相同。 tr元素常用属性与thead元素常用属性相同。 th元素常用属性： width：设置单元格的宽度，同列所有单元格全都受影响。 heigth：设置单元格的高度，同行所有单元格全都受影响。 align：设置单元格的水平对齐方式。 valign：设置单元格的垂直对齐方式。 rowspan：指定要跨的行数。 colspan：指定要跨的列数。 td元素常用属性与th元素常用属性相同。 5.3 跨行跨列涉及属性： rowspan：指定要跨的行数。 colspan：指定要跨的列数。 使用属性实现跨行跨列： 原始表格使用colspan跨行使用rowspan跨列代码： html123456789101112&lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;1-1&lt;/td&gt; &lt;td&gt;2-1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1-2&lt;/td&gt; &lt;td&gt;2-2&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;代码： html123456789101112&lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;1-1&lt;/td&gt; &lt;!-- &lt;td&gt;2-1&lt;/td&gt; --&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1-2&lt;/td&gt; &lt;td&gt;2-2&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;代码： html123456789101112&lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot; valign=&quot;middle&quot;&gt;1-1&lt;/td&gt; &lt;td&gt;2-1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- &lt;td&gt;1-2&lt;/td&gt; --&gt; &lt;td&gt;2-2&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 6 表单6.1 基本元素表单是一个包含交互的区域，用于收集用户提供的数据，整个表单属于块级元素，表单中的控件一般属于行内元素。 表单中常见的元素： 标签名 说明 单双 form 表示表单的范围 双标签 input 表示表单中的控件，存在多种控件类型 单标签 button 表示表单中的按钮，点击可以触发处理表单数据的操作 双标签 textarea 表示文本域，可以存储多行文本 双标签 select 表示下拉框的范围，点击展示下拉框选项 双标签 option 表示下拉框的选项 双标签 label 和表单控件关联，点击元素可使表单控件获得焦点 双标签 fieldset 表示表单元素分组的范围 双标签 legend 表示表单元素分组的标题 双标签 form元素常用属性： action：表单提交的地址，需要和后端沟通确定。 target：表单提交后，页面的打开方式，同a元素中的target属性。 method：表单提交的请求方式，比如get和post等。 input元素常用属性： type：设置控件的类型，比如text表示普通文本。 name：设置控件的数据名称，需要和后端沟通确定。 value：获取控件的数据，不同的表单控件有不同的获取方式。 disabled：设置控件不可用。 button元素常用属性： disabled：设置按钮不可用。 type：设置按钮的类型，不同的类型对表单数据的处理方式不同，比如submit会提交表单。 textarea元素常用属性： name：设置文本域的数据名称。 rows：设置文本域默认显示的行数，影响文本域的高度。 cols：设置文本域默认显示的列数，影响文本域的宽度。 disabled：设置文本域不可用。 select元素常用属性： name：设置下拉框的数据名称。 disabled：设置下拉框不可用。 option元素常用属性： disabled：设置下拉选项不可用。 value：设置下拉选项的数据，在省略的情况下，会使用下拉选项的元素内容作为数据。 selected：设置下拉选项在加载后默认选中。 label元素常用属性： for：属性值与表单控件的id属性值相同。 6.2 常用控件6.2.1 文本输入框最常用的表单控件，支持输入一行文本。 代码： html1请输入文本：&lt;input type=&quot;text&quot;&gt; 属性： name：设置输入框的数据名称。 value：设置输入框的默认值。 maxlength：设置输入框最大可输入长度。 6.2.2 密码输入框和文本输入框类似，但是输入的内容会显示为*号，避免密码泄露。 代码： html1请输入密码：&lt;input type=&quot;password&quot;&gt; 属性： name：设置输入框的数据名称。 value：设置输入框的默认值，作为密码时无意义，可以省略。 maxlength：设置输入框最大可输入长度。 6.2.3 单选框支持单选的控件。 代码： html123请选择性别：&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;女&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot;&gt;男 属性： name：设置单选框的数据名称，同组控件的name属性值要保持一致。 value：设置单选框提交的数据值，会提交被选中的控件的value属性。 checked：设置单选框在加载后默认选中。 6.2.4 多选框多选框也称为复选框，支持多选的控件。 代码： html1234请选择爱好：&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;smoke&quot;&gt;抽烟&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;drink&quot;&gt;喝酒&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;perm&quot;&gt;烫头 属性： name：设置多选框的数据名称，同组控件的name属性值要保持一致。 value：设置多选框提交的数据值，会提交被选中的控件的value属性，多个值会组成数组。 checked：设置多选框在加载后默认选中。 6.2.5 隐藏域不会让用户看到的特殊控件，可以在检查后看到，通常用于提交特殊数据。 代码： html1&lt;input type=&quot;hidden&quot; name=&quot;tag&quot; value=&quot;100&quot;&gt; 属性： name：设置隐藏域的数据名称。 value：设置隐藏域提交的数据值，通常由操作自动存储，不需要用户处理。 6.2.6 提交按钮用于将表单数据提交到指定地址。 使用input元素，代码： html1&lt;input type=&quot;submit&quot; value=&quot;提交表单&quot;&gt; 使用input元素涉及的属性： name：设置按钮的数据名称，作为按钮时无意义，可以省略。 value：设置按钮要显示的内容。 也可以使用button元素，代码： html1&lt;button type=&quot;submit&quot;&gt;提交表单&lt;/button&gt; 使用button元素时可以省略type属性，默认就是submit类型。 6.2.7 重置按钮用于将表单数据清空，恢复到页面加载后的状态。 使用input元素，代码： html1&lt;input type=&quot;reset&quot; value=&quot;重置表单&quot;&gt; 使用input元素涉及的属性： name：设置按钮的数据名称，作为按钮时无意义，可以省略。 value：设置按钮要显示的内容。 也可以使用button元素，代码： html1&lt;button type=&quot;reset&quot;&gt;重置表单&lt;/button&gt; 6.2.8 普通按钮用于触发特定操作。 使用input元素，代码： html1&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt; 使用input元素涉及的属性： name：设置按钮的数据名称，作为按钮时无意义，可以省略。 value：设置按钮要显示的内容。 也可以使用button元素，代码： html1&lt;button type=&quot;button&quot;&gt;普通按钮&lt;/button&gt; 6.2.9 文本域用于存储多行文本。 代码： html1请输入多行文本：&lt;textarea name=&quot;msg&quot; rows=&quot;3&quot; cols=&quot;3&quot;&gt;我是文本域&lt;/textarea&gt; 使用textarea元素时不需要使用type属性，其他和input元素的文本输入框一致。 6.2.10 下拉框用于选择下拉选项。 代码： html1234567请选择省份：&lt;select name=&quot;from&quot;&gt;&lt;option value=&quot;黑&quot;&gt;黑龙江&lt;/option&gt;&lt;option value=&quot;辽&quot;&gt;辽宁&lt;/option&gt;&lt;option value=&quot;吉&quot;&gt;吉林&lt;/option&gt;&lt;option value=&quot;粤&quot; selected&gt;广东&lt;/option&gt;&lt;/select&gt; 使用option元素时如果没有设置value属性，会将元素内容作为数据提交。 6.2.11 标记和表单控件关联，点击元素可使表单控件获得焦点。 需要配合表单控件使用，代码： html1&lt;label for=&quot;password&quot;&gt;请输入密码：&lt;/label&gt;&lt;input id=&quot;password&quot; type=&quot;password&quot;&gt; 6.2.12 分组用于对表单元素进行分组，和其他控件不同，分组元素属于块级元素。 代码： html123456789101112&lt;fieldset&gt; &lt;legend&gt;主要信息&lt;/legend&gt; &lt;label for=&quot;username&quot;&gt;账户：&lt;/label&gt; &lt;input id=&quot;username&quot; type=&quot;text&quot; name=&quot;username&quot; maxlength=&quot;10&quot;&gt; &lt;br&gt; &lt;label for=&quot;password&quot;&gt;密码：&lt;/label&gt; &lt;input id=&quot;password&quot; type=&quot;password&quot; name=&quot;password&quot; maxlength=&quot;6&quot;&gt; &lt;br&gt; 性别： &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;male&quot; id=&quot;male&quot;&gt;&lt;label for=&quot;male&quot;&gt;男&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot; id=&quot;female&quot;&gt;&lt;label for=&quot;female&quot;&gt;女&lt;/label&gt;&lt;/fieldset&gt; 7 框架用于在当前页面加载其他内容，属于行内元素，如下： 标签名 说明 单双 iframe 框架，允许在框架里展示其他内容 双标签 常用属性如下： name：框架名字，可以与其他元素的target属性配合，实现在框架中展示页面的效果。 src：框架内容，可以是网址，也可以是资源文件地址。 width：框架宽度。 height：框架高度。 frameborder：是否显示边框，取值0否1是。 代码： html1&lt;iframe src=&quot;https://momashanhe.com&quot;&gt;查看博客&lt;/iframe&gt; 8 全局属性常用的全局属性： 属性名 含义 id 元素唯一标识，一个页面中的id属性值不能重复。可以配合CSS和JS使用，也可以在其他元素中使用 class 元素类名，可以配合CSS和JS使用 style 元素样式，给元素设置CSS样式 title 元素提示，一般超链接和图片用得比较多 lang 元素语言，给元素指定语言，很少使用 一般来说，在html元素中设置lang属性设置语言即可，很少会在其他元素中使用lang属性，除非想要使用其他语言显示某个元素。 虽然这些属性是全局属性，但是在一些特殊元素上使用是没有意义的，不建议使用，也没有必要使用，比如html元素，以及head元素及其内部元素，等一些其他特殊元素。 完整的全局属性可以参考文档：MDN全局属性 9 元数据9.1 基本结构元数据就是描述数据的数据，对于HTML而言，元数据就是描述HTML页面的数据。 元数据的具体使用方式是在head元素中使用meta元素： 标签名 说明 单双 meta 表示元数据 单标签 9.2 使用示例配置字符编码： html1&lt;meta charset=&quot;UTF-8&quot;&gt; 配置网页自动刷新： html1&lt;meta http-equiv=&quot;refresh&quot; content=&quot;10;url=https://momashanhe.com&quot;&gt; 刷新说明： 数字表示秒数，非负整数有效。 url表示地址，省略或地址无效会刷新当前页面。 针对IE浏览器的兼容性配置： html1&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=edge&quot;&gt; 针对移动端的兼容性配置： html1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; 配置网页关键字： html1&lt;meta name=&quot;keywords&quot; content=&quot;英文逗号隔开的一组词语&quot;&gt; 配置网页描述信息： html1&lt;meta name=&quot;description&quot; content=&quot;80字以内的一段话，与网站内容相关&quot;&gt; 针对搜索引擎爬虫配置： html1&lt;meta name=&quot;robots&quot; content=&quot;可选值&quot;&gt; 可选值如下： 值 描述 index 要求搜索爬虫索引此页面 noindex 要求搜索爬虫不索引此页面 follow 要求搜索爬虫跟随此页面上的链接 nofollow 要求搜索爬虫不跟随此页面上的链接 all 和设置index, follow相同 none 和设置noindex, nofollow相同 noarchive 要求搜索引擎不缓存页面内容 nocache 是noarchive的代名词 配置网页作者： html1&lt;meta name=&quot;author&quot; content=&quot;momashanhe&quot;&gt; 配置网页生成工具： html1&lt;meta name=&quot;generator&quot; content=&quot;Visual Studio Code&quot;&gt; 配置网页版权信息： html1&lt;meta name=&quot;copyright&quot; content=&quot;2020-2050©版权所有&quot;&gt; 完整的网页元数据可以参考文档：MDN元数据","categories":[{"name":"大前端","slug":"大前端","permalink":"https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://momashanhe.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://momashanhe.com/tags/CSS/"}]},{"title":"HTML4入门","slug":"100-大前端/101-HTML/001-基础/001-HTML4入门","date":"2024-03-14T06:35:53.000Z","updated":"2024-04-08T00:43:50.021Z","comments":true,"path":"posts/20240314/143553/","permalink":"https://momashanhe.com/posts/20240314/143553/","excerpt":"摘要：本文主要介绍了HTML相关的一些概念。","text":"摘要：本文主要介绍了HTML相关的一些概念。 1 简介1.1 介绍1.1.1 什么是网站网站是指在因特网上根据一定的规则，使用HTML等制作的用于展示特定内容相关的网页集合。 1.1.2 什么是网页网页是网站中的一“页”，通常是HTML格式的文件，它要通过浏览器来阅读。 网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以.htm或.html后缀结尾的文件，因此将其俗称为HTML文件。 1.1.3 什么是HTMLHTML全称：HyperText Markup Language（超文本标记语言），含义如下： HyperText（超文本）：指可以加入图片、声音、动画、多媒体等内容，超越了文本限制，也指可以从一个文件跳转到另一个文件，与世界各地主机的文件连接。 Markup（标记）：文本要变成超文本，就需要用到各种标记符号，包括各种元素。 Language（语言）：每一个标记的写法、读音、使用规则，组成了一个标记语言。 HTML不是一种编程语言，而是一种标记语言（Markup Language），标记语言是一套标记标签（Markup Tag）。 1.2 浏览器浏览器是网页显示、运行的平台。常用的浏览器有IE、Firefox、Chrome、Safari和Opera等，称为五大浏览器。 浏览器内核是将文件展示成网页的渲染引擎，负责读取网页内容、整理讯息、计算网页的显示方式并显示页面。 1.3 国际组织1.3.1 IETF全称：Internet Engineering Task Force（国际互联网工程任务组），成立于1985年底，是一个权威的互联网技术标准化组织，主要负责互联网相关技术规范的研发和制定，当前绝大多数国际互联网技术标准均出自IETF。 官网：https://www.ietf.org 1.3.2 W3C全称：World Wide Web Consortium（万维网联盟），创建于1994年，是目前Web技术领域，最具影响力的技术标准机构。共计发布了200多项技术标准和实施指南，对互联网技术的发展和应用起到了基础性和根本性的支撑作用。 官网：https://www.w3.org 1.3.3 WHATWF全称：Web Hypertext Application Technology Working Group（网页超文本应用技术工作小组），成立于2004年，是一个以推动网络HTML5标准为目的而成立的组织。由Opera、Mozilla基金会、苹果，等这些浏览器厂商组成。 官网：https://whatwg.org 1.4 发展历史从HTML1.0开始发展，期间经历了很多版本，目前HTML的最新标准是HMTL5，具体发展史如图： 1.5 Web标准Web标准是由W3C组织和其他标准化组织制定的一系列标准的集合。 遵循Web标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点： 让Web的发展前景更广阔。 内容能被更广泛的设备访问。 更容易被搜寻引擎搜索。 降低网站流量费用。 使网站更易于维护。 提高页面浏览速度。 Web标准主要包括三个方面：结构（Structure）用于对网页元素进行整理和分类，主要指的是HTML。表现（Presentation）用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。行为（Behavior）用于定义网页模型及编写网页交互，主要指的是JavaScript。 Web标准提出的最佳体验方案是结构、样式、行为互相分离，即结构写到HTML文件中、表现写到CSS文件中、行为写到JavaScript文件中。 1.6 官方文档W3C官网：https://www.w3.org/ W3School：https://www.w3school.com.cn MDN：https://developer.mozilla.org 推荐使用MDN官方文档。 2 概念2.1 标签2.1.1 定义标签又称元素，是HTML的基本组成单位。 标签名不区分大小写，但推荐小写，因为小写更规范。 元素分为双标签和单标签，绝大多数都是双标签： 双标签单标签前面的是开始标签，两个标签中间的是元素内容，后面的是结束标签，结束标签多了一个/符号且不可省略： html1&lt;span&gt;&lt;/span&gt;只有一个标签，不存在元素内容： html1&lt;input /&gt; 标签后面的空格和/符号可以省略： html1&lt;input&gt; 2.1.2 尝试使用鼠标右键新建文本文档，输入以下内容： hello.html1&lt;h1&gt;Hello HTML&lt;/h1&gt; 将文本文档重命名为hello.html后，双击打开，即可看到创建的页面。 2.1.3 基本结构一般情况下，在网页中右键，在菜单的底部可以看到查看页面源代码和检查这两个选项： 查看页面源代码：可以看到程序员编写的页面源码。 检查：浏览器对页面源码经过格式化等处理后的代码。 选择检查后，可以看到页面的基本结构： html123456&lt;html&gt; &lt;head&gt; &lt;title&gt;网页标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt;&lt;/html&gt; 基本结构包含的元素： 标签名 说明 单双 html 页面中最大的元素，称为根元素 双标签 head 用于定义页面的特性，不会展示在页面上 双标签 title 用于定义页面的标题，嵌套在head元素中 双标签 body 用于定义页面的内容，会展示在页面上 双标签 使用VSCode工具快速生成页面结构： 第一步：双击打开软件。 第二步：新建文件并保存为.html文件。 第三步：输入!符号并根据提示按下Tab键，会自动生成基本结构。 生成的页面结构如下： html12345678&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;我是标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt;&lt;/html&gt; 此外，如果想配置网站图标，可以在存放页面的根目录中，使用favicon.ico图片作为网站图标。 2.1.4 关系元素的关系可以分为两类：嵌套和并列。 嵌套指的是不同层次的元素之间的关系，将被嵌套的元素置于嵌套元素之中，要求嵌套元素必须有双标签。比如： html12345&lt;html&gt; &lt;head&gt; &lt;title&gt;网页标题&lt;/title&gt; &lt;/head&gt;&lt;/html&gt; 嵌套的元素之间存在父子关系： 父亲元素：对于title元素来说，head元素是其父亲元素。对于head元素来说，html元素是其父亲元素。 儿子元素：对于head元素来说，title元素是其儿子元素。对于html元素来说，head元素是其儿子元素。 祖先元素：对于title元素来说，head元素和html元素都是其祖先元素。父亲元素也是祖先元素的一种。 后代元素：对于html元素来说，head元素和title元素都是其后代元素。儿子元素也是后代元素的一种。 并列指的是相同层次的元素之间的关系，对元素的标签无要求。比如： html12&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt; 并列的元素之间存在兄弟关系： 兄弟元素：对于body元素来说，head元素是其兄弟元素。对于head元素来说，body元素是其兄弟元素。 2.2 声明2.2.1 说明用于告知浏览器当前页面的版本。 页面的声明必须写在第一行，并且要写在html元素外面，即和html元素同级且在html元素上面。 格式： html1&lt;!DOCTYPE&gt; DOCTYPE是Document Type Declaration（文档类型声明）的缩写。 声明不是HTML标签，既不是单标签也不是双标签。 声明不区分大小写，可以按照个人习惯选择。 2.2.2 HTML4在HTML4中，确切的说是在HTML4.01及之前版本中，因为基于SGML（Standard Generalized Markup Language，标准通用标记语言），声明可能会指向DTD（Document Type Definition，文档类型定义）文件，这个文件定义了文档的结构和元素规则。 HTML4.01规定了三种不同的声明： Strict：最严格，包含所有元素和属性，不包括表象或过时的元素，框架集frameset是不允许使用的。代码：html1&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt; Transitional：较严格，包含所有元素和属性，包括表象或过时的元素，框架集frameset是不允许使用的。代码：html1&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; Frameset：最宽松，包含所有元素和属性，包括表象或过时的元素，框架集frameset是允许使用的。代码：html1&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt; 2.2.3 HTML5在HTML5中不再基于SGML，因此不再依赖DTD文件，而是使用更简单的声明。代码： html1&lt;!DOCTYPE html&gt; 因为声明是向下兼容的，因此可以在HTML5的声明中编写HTML4的代码，但是不能在HTML4的声明中编写HTML5的代码。 2.3 属性属性用于给元素提供附加信息，在双标签中可以将属性写在开始标签中，在单标签中可以将属性写在/符号前。 属性一般由属性名和属性值组成，某些特殊属性也可以只有属性名，其属性值可以省略： 指定属性值省略属性值html1&lt;input type=&quot;password&quot;&gt;html1&lt;input disable&gt; 注意： 不同的元素有不同的属性，存在适用所有元素的通用属性，比如id属性用于在页面上作为元素的唯一标识。 属性名和属性值都是W3C规定好的，不能乱写。 属性名和属性值不区分大小写，推荐使用小写。 属性值的双引号也可以写成单引号，如果没有空格等特殊字符也可以不写，推荐使用双引号。 元素中如果出现同名属性，后面的属性会失效。 2.4 语言设置页面语言可以让浏览器显示对应的翻译提示，也可以方便搜索引擎的优化。 语言可以在html元素中使用lang属性设置，写法如下： html1&lt;html lang=&quot;zh-CN&quot;&gt; 其他语言的设置： zh-CN：中文-中国大陆（简体中文） zh-TW：中文-中国台湾（繁体中文） zh：中文 en-US：英语-美国 en-GB：英语-英国 2.5 字符集计算机本身是二进制的，为了方便使用，在写入时会对输入的数据进行编码，在读取时会对输出的数据进行解码。 在编码和解码时，需要使用字符集进行规范，解码需要使用和编码相同的字符集，否则会导致最终读取出来的内容产生乱码。 常见的字符集如下： ASCII：大写字母、小写字母、数字、一些符号，共计128个。 ISO 8859-1：在ASCII基础上，扩充了一些希腊字符等，共计是256个。 GB2312：继续扩充，收录了6763个常用汉字和682个字符。 GBK：收录了的汉字和符号达到20000多个，支持繁体中文。 UTF-8：包含世界上所有的文字与符号。建议使用。 可以在head元素中通过meta元素配合charset属性指定页面的字符集，让浏览器使用这种字符集对页面内容进行解析： html123&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt; 2.6 注释使用注释可以对页面源码进行解释和说明，并且注释在展示的时候会被过滤掉，但是查看源码是可以看到的。 格式： html1&lt;!-- 注释内容，在页面上不可见 --&gt; 3 基础3.1 排版元素排版元素用于规范页面内容的显示，如下： 标签名 说明 单双 h1~h6 用于标识页面内容的6个标题级别，从h1到h6级别越来越低，元素里不能嵌套其他排版元素 双标签 p 用于表示页面内容的段落，元素里不能嵌套其他排版元素 双标签 div 无特殊含义，用于整体布局，元素里可以嵌套其他元素，包括排版元素 双标签 span 无特殊含义，用于局部修饰，元素里不能嵌套其他排版元素 双标签 3.2 语义化语义指的是元素的含义，某些元素是有特定含义的，比如p元素的含义是表示段落，某些元素是没有特定含义的，比如span元素。 语义化元素指的是具有特定含义的元素，这种元素有一定的优势： 代码结构清晰，方便阅读，有利于团队合作开发。 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页。 有利于搜索引擎优化（SEO）。 在使用语义化元素时，应该关注元素特定含义，不应该关注元素样式，因为样式可以通过CSS进行调整。 常用的语义化元素： 标签名 说明 单双 br 换行，如果只想增加段落间隔，建议使用CSS实现 单标签 hr 分隔，如果只想使用水平线，建议使用CSS实现 单标签 pre 按原文显示，一般用于在页面中嵌入大段代码 双标签 3.3 元素区块在页面上只能独占一行的元素被称为块级元素，比如div元素，在页面上不需要独占一行的元素被称为行内元素，比如span元素。 排版元素属于块级元素，是独占一行的。 一般情况下，在块级元素中可以嵌套块级元素和行内元素，在行内元素中只能嵌套行内元素，但某些特殊的块级元素不能嵌套： 标题元素h1~h6中不支持互相嵌套，也不建议在标题中嵌套其他块级元素。 段落元素p中不支持其他块级元素，建议分段并在段落中使用其他块级元素。 3.4 实体3.4.1 介绍在HTML中存在一些预留字符，比如标签的&lt;字符和&gt;字符。 浏览器默认会将预留字符识别为标签，如果想要在页面内容里使用预留字符，就需要用特殊形式的内容来表示这些预留字符，这种特殊形式的内容称为实体。 比如想要在页面中显示这句话： html1我记得&lt;div&gt;是块级元素 如果在代码中直接写的话，会导致页面将&lt;div&gt;解析为标签，而不是文本内容，解决办法就是使用实体替换预留字符。 再比如想要在页面中显示多个空格： html1这里有 三个空格 但是页面实际上会将多个空格合并为一个空格，想要强制显示多个空格，就需要使用实体。 3.4.2 规则实体的规则： 以&amp;符号开始。 以;符号结束。 如果使用实体名称，格式为&amp;实体名称;，如果使用实体编号，格式为&amp;#实体编号;。 实体名称更方便记忆，能使用实体名称就尽量使用实体名称，但是需要注意： 实体名称对大小写敏感。 并不是所有的预留字符都有实体名称。 部分浏览器可能不支持某些实体名称。 3.4.3 常见常见的预留字符对应的实体名称和实体编号如下： 预留字符 描述 实体名称 实体编号 &#38; 和 amp 38 &#60; 小于号 lt 60 &#62; 大于号 gt 62 &#160; 空格 nbsp 160 &#165; 元 yen 165 &#169; 版权 copy 169 &#174; 商标 reg 174 &#215; 乘号 times 215 &#247; 除号 divide 247 &#34; 双引号 quot 34 &#39; 单引号 无 39 &#96; 反引号 无 96 更多的对应关系可以参考文档：WHATWG实体 3.4.4 解决回到之前的问题，可以使用下面的代码实现： html12我记得&amp;lt;div&amp;gt;是块级元素这里有&amp;nbsp;&amp;nbsp;&amp;nbsp;三个空格","categories":[{"name":"大前端","slug":"大前端","permalink":"https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://momashanhe.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://momashanhe.com/tags/CSS/"}]},{"title":"使用GitHub图床存放博客静态资源","slug":"000-建站技术/001-Hexo/002-折腾/007-使用GitHub图床存放博客静态资源","date":"2024-03-10T06:15:20.000Z","updated":"2024-04-03T03:10:22.910Z","comments":true,"path":"posts/20240310/141520/","permalink":"https://momashanhe.com/posts/20240310/141520/","excerpt":"摘要：本文主要介绍了如何使用GitHub图床存放静态资源，并对静态资源的获取进行加速。","text":"摘要：本文主要介绍了如何使用GitHub图床存放静态资源，并对静态资源的获取进行加速。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 简介博客暂时还没有服务器进行备案，也不想使用别人的图床，就只能自己打一个比较简陋的了。 使用GitHub作为图床，但是需要注意不要超过1G容量，超过1G的时候需要想办法进行拆分。 使用NPM加速访问，实现CDN的效果。 2 GitHubGitHub官网：https://github.com/ 如果没有注册过GitHub的话，需要注册一个账号。 创建一个用于存储静态资源的仓库。 点击右上角个人头像，在下拉列表中点击Settings进入设置界面。 点击左侧菜单栏底部的Developer Settings进入开发者界面。 点击Personal access tokens选项，然后点击Tokens (classic)菜单，并在右侧点击Generate new token下拉列表中的Generate new token (classic)按钮： 在Note中输入对Token使用的描述，把Expiration设置为No expiration永不过期，然后给下面的Select scopes勾选repo选框： 最后点击底部的Generate token创建Token，并将页面上展示的Token进行复制保存，这个Token只会出现这一次，忘记只能重新生成。 这个Token后面会在PicGo里配置。 将静态资源文件上传到仓库里。 3 NPM3.1 注册NPM官网：https://www.npmjs.com/ 注册NPM账号： 新账号注册后需要配置2FA认证： txt1You don’t have two-factor authentication (2FA) enabled on your account. Configure 2FA or visit our docs to learn more. 点击2FA认证链接，选择使用Authenticator app的方式认证： 在手机上下载Authenticator并安装，打开后选择扫描QR码然后扫描网页上的二维码，将生成的一次性密码代码输入底部的密码框中。 保存好生成的恢复代码，这里只出现一次，忘记需要重新生成。 3.2 本地仓库进入静态资源的本地仓库，执行以下命名切换回原生源： bash1npm config set registry https://registry.npmjs.org 如果是第一次使用，需要执行命令添加本地NPM用户配置，输入账户和密码以及邮箱即可： bash1npm adduser 如果不是第一次使用，执行登录命令，输入账户和密码以及邮箱即可： bash1npm login 如果命令行提示需要登录，在下面的网址里完成登录即可： bash1Create your account at: 在打包前准备好包名，需要事先确认包名没有重复，可以在NPM官网搜索相应包名，搜不到就说明还没被占用。 执行初始化命令，将仓库打包，按照指示进行配置： bash1npm init 根据实际情况填写，红框内的使用默认就好： 注意名称不要使用带有年月日的数字，不然会被认为垃圾名称发布失败，尽量是用-短横线分隔。 最后输入yes即可。 打包以后就可以发布了，执行命令： bash1npm publish --otp=123456 命令说明： otp：需要输入Authenticator生成的一次性密码。 发布成功提示： 发布成功后，可以寻找NPM的节点使用，比如可以按照下面的方式使用： url1https://unpkg.com/:package@:version/:file 3.3 升级仓库以后使用静态资源的时候，现在本地试用，然后将静态资源同步到GitHub上，再发布NPM升级包。 使用命令增加NPM版本，版本由3位组成，从左到右分别是： major：主要版本，左边首位，不会向后兼容的重大改动。minor：次要版本，中间位，向后兼容的新增功能。patch：补丁版本，右边首位，向后兼容的缺陷修复。 如果需要更新补丁版本，执行如下命令即可，会自动给版本的patch部分加一： bash1npm version patch 然后执行发布命令： bash1npm publish --otp=123456 发布成功后修改使用的版本就可以了。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://momashanhe.com/tags/GitHub/"},{"name":"NPM","slug":"NPM","permalink":"https://momashanhe.com/tags/NPM/"},{"name":"PicGo","slug":"PicGo","permalink":"https://momashanhe.com/tags/PicGo/"}]},{"title":"博客图床对比","slug":"000-建站技术/001-Hexo/002-折腾/006-博客图床对比","date":"2024-03-10T03:31:45.000Z","updated":"2024-03-17T03:22:39.835Z","comments":true,"path":"posts/20240310/113145/","permalink":"https://momashanhe.com/posts/20240310/113145/","excerpt":"摘要：本文主要介绍了不同图床之间的区别。","text":"摘要：本文主要介绍了不同图床之间的区别。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 对比图床一般用来加速对博客图片的访问，实际上是一种专门存储图片的服务器，大致分为：个人图床，平台图床。 1.1 个人图床由个人搭建的图床，搭建之后将其公开，允许公众使用的图床。 代表：SM.MS图床：土豪兽兽建的图床，2015年开始正式运营，烧风自建的CDN，支持HTTPS地址。路过图床：老牌图床，2011年开放，提供全球CDN，支持HTTPS地址。去不图床：杜老师创建的图床，部署在腾讯云上，需要搭配CDN。 1.2 平台图床由大型服务商搭建的图床，安全性要比个人图床好，但也更贵一些，可能会有一些限制。 代表：GitHub：支持存储1G以内图片，稳定可靠，需要额外配置CDN。腾讯云：稳定可靠，就是贵。阿里云：稳定可靠，就是贵。又拍云：需要在网站底部添加LOGO和官网链接，每月10G免费空间，每月10G免费CDN。七牛云：免费流量不支持HTTPS地址，每月10G免费空间，每月15G免费CDN。多吉云：域名需要在服务器进行ICP备案，每月10G免费空间，每月20G免费CDN。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"给博客加装Waline评论","slug":"000-建站技术/001-Hexo/002-折腾/005-给博客加装Waline评论","date":"2024-03-09T02:08:21.000Z","updated":"2024-03-18T00:36:11.868Z","comments":true,"path":"posts/20240309/100821/","permalink":"https://momashanhe.com/posts/20240309/100821/","excerpt":"摘要：本文主要介绍了通过使用LeanCloud数据库和Vercel服务器将Waline评论部署到Hexo博客。","text":"摘要：本文主要介绍了通过使用LeanCloud数据库和Vercel服务器将Waline评论部署到Hexo博客。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 Waline评论1.1 简介详情查看官方文档：Waline官方文档 - 快速上手 2 使用LeanCloud2.1 简介LeanCloud是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage数据存储、LeanMessage通信服务、LeanAnalytics统计分析、LeanModules拓展模块等四大类型的后端云服务，加速应用开发。 加装Waline评论主要使用LeanCloud的LeanStorage数据存储功能。 LeanCloud的中文官网：https://www.leancloud.cn/ 2.2 注册账号并创建应用注册LeanCloud账号，分为中国大陆版和国际版，区别是中国大陆版需要绑定手机、实名认证、备案域名，国际版不需要，这里注册国际版就能满足要求。 国际版注册链接：https://console.leancloud.app/register 输入注册信息，然后在邮箱中验证邮件完成注册。 点击创建应用并选择免费的开发版，创建用于Waline的应用： 进入应用，在左侧的导航栏内进入设置下的应用凭证界面，记录认证信息以便后续使用： 3 使用Vercel3.1 创建项目创建账户并登录到Vercel，在Waline提供的文档里找到快速创建Vercel项目的链接：部署Waline到Vercel 输入GitHub项目名称后会自动在GitHub上创建项目，然后会在Vercel上自动部署，首次部署后需要设置环境变量。 3.2 配置项目进入刚刚创建的项目界面，切换到Settings标签。 在左侧导航栏点击Environment Variables设置，配置LEAN_ID、LEAN_KEY、LEAN_MASTER_KEY三个环境变量，值为上面LeanCloud里的应用凭证里的认证信息： 如果使用LeanCloud国内版，需要额外配置LEAN_SERVER环境变量，值为绑定的域名。 切换到Deployments标签，点击任意一项后面的...并在下拉选项中选择Redeploy，点击弹出界面下方的Redeploy重新部署。 在Domains中的https://xxx.vercel.app地址即为环境ID。 4 前端部署4.1 选择评论系统在主题的配置文件中选择Waline作为评论系统。 特殊配置参考官方文档即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"Vercel","slug":"Vercel","permalink":"https://momashanhe.com/tags/Vercel/"},{"name":"LeanCloud","slug":"LeanCloud","permalink":"https://momashanhe.com/tags/LeanCloud/"},{"name":"Waline","slug":"Waline","permalink":"https://momashanhe.com/tags/Waline/"}]},{"title":"给博客加装Twikoo评论","slug":"000-建站技术/001-Hexo/002-折腾/004-给博客加装Twikoo评论","date":"2024-03-03T07:21:02.000Z","updated":"2024-03-18T00:36:11.868Z","comments":true,"path":"posts/20240303/152102/","permalink":"https://momashanhe.com/posts/20240303/152102/","excerpt":"摘要：本文主要介绍了通过使用MongoDB数据库和Vercel服务器将Twikoo评论部署到Hexo博客。","text":"摘要：本文主要介绍了通过使用MongoDB数据库和Vercel服务器将Twikoo评论部署到Hexo博客。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 Twikoo评论1.1 简介详情查看官方文档：Twikoo官方文档 - 快速上手 2 使用MongoDB2.1 简介MongoDB是一款流行的开源文档型数据库，用于存储文档类型的数据，比如博客产生的评论。 MongoDB的中文官网：https://www.mongodb.com/zh-cn/ 如果有云服务器，可以在服务器上使用MongoDB本地数据库，如果没有云服务器，可以使用MongoDB Atlas云数据库。 2.2 注册账号并创建集群注册MongoDB账号，然后在邮箱中验证邮件完成注册。 在Overview界面中可以设置组织名和项目名，然后创建一个集群： 在区域选择界面，选择免费的，提供商Provider选择AWS亚马逊即可，区域Region选择N. Virginia (us-east-1)弗吉尼亚州，也可以选择其他的。 继续设置Name集群名称，默认使用Cluster0作为集群名称，可以自定义，一旦设定不可修改。 继续设置Tag标签，这是可选的。 点击页面下方的Create创建免费集群。 2.3 创建用户进入Database Access界面，创建用户。 选择Password作为认证方式，输入用户和密码，这个用户是用来登录云数据库的，因此密码尽量设置的难一些： 继续设置用户权限，点击Add Built In Role并选择Atlas Admin选项： 点击页面下方的Add User创建用户。 2.4 设置IP地址进入Network Access界面，添加能访问云数据库的IP地址。 点击Allow Access from Anywhere或者在Access List Entry输入0.0.0.0/0表示允许所有IP地址的连接，点击Confirm保存设置： 2.5 查看如何连接进入Database界面，点击集群后面的Connect建立连接，连接方式选择Drivers使用驱动连接： 使用Driver默认的Node.js作为驱动，使用Version默认的5.5 or later作为版本： 复制下方mongodb+srv开头的字符串，并将&lt;password&gt;修改为创建用户时设置的密码，将这个数据库连接字符串复制并保存，后面需要用到。 点击页面下方的Close关闭退出即可。 3 使用Vercel3.1 创建项目创建账户并登录到Vercel，在Twikoo提供的文档里找到快速创建Vercel项目的链接：部署Twikoo到Vercel 输入GitHub项目名称后会自动在GitHub上创建项目，然后会在Vercel上自动部署，首次部署后会提示需要设置MONGODB_URI环境变量。 3.2 配置项目进入刚刚创建的项目界面，切换到Settings标签。 在左侧导航栏点击Environment Variables设置，在Key中输入MONGODB_URI，在Value中输入前面设置MongoDB保存的数据库连接字符串，点击Save保存： 在左侧导航栏点击Environment Variables设置，将Vercel Authentication设置为Disable，点击Save保存，这是关闭对项目的登录保护，支持任何人访问项目： 切换到Deployments标签，点击任意一项后面的...并在下拉选项中选择Redeploy，点击弹出界面下方的Redeploy重新部署，如果环境配置正确，可以看到提示： 在Domains中的https://xxx.vercel.app地址即为环境ID。 4 前端部署4.1 选择评论系统在主题的配置文件中选择Twikoo作为评论系统。 特殊配置参考官方文档即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"Vercel","slug":"Vercel","permalink":"https://momashanhe.com/tags/Vercel/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://momashanhe.com/tags/MongoDB/"},{"name":"Twikoo","slug":"Twikoo","permalink":"https://momashanhe.com/tags/Twikoo/"}]},{"title":"博客评论系统对比","slug":"000-建站技术/001-Hexo/002-折腾/003-博客评论系统对比","date":"2024-03-03T05:12:51.000Z","updated":"2024-03-31T10:13:06.203Z","comments":true,"path":"posts/20240303/131251/","permalink":"https://momashanhe.com/posts/20240303/131251/","excerpt":"摘要：本文主要介绍了不同评论系统之间的区别。","text":"摘要：本文主要介绍了不同评论系统之间的区别。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 对比Hexo支持的评论系统有很多，大致分为：GitHub系列，Vercel系列，云服务器系列。 1.1 GitHub系列这种方式基于GitHub，使用Discussions功能或者Issue功能实现评论。 代表：Giscus：基于GitHub的Discussions功能。Gitalk：基于GitHub的Issue功能。Beaudar：基于GitHub的Issue功能。Utterances：基于GitHub的Issue功能。 优点是使用简单，不用注册额外数据库和服务器。 缺点是数据管理不方便，不能通过数据库维护评论。 出于数据管理方面的考虑，不太推荐这种方式。 1.2 Vercel系列这种方式基于Vercel服务器，借助免费版的Vercel服务器，以及免费版的云数据库，将评论系统部署到Vercel服务器，将评论存储到数据库中。 代表：Twikoo：支持多种部署方式，支持自动填写浏览数，支持获取评论数。Waline：支持多种部署方式，支持自动填写浏览数和评论数。 优点是免费，免费版的资源足够个人使用了，而且有一些额外功能，比如统计浏览数和评论数。 缺点是需要注册相关账户，使用额外功能需要进行额外配置。 在不考虑购买服务器的情况下，推荐这种方式。 1.3 云服务器系列这种方式基于云服务器，需要购买云服务器资源，然后在云服务器上安装数据库，将评论系统部署到云服务器，将评论存储到数据库中。 代表：Artalk：部署在服务器上，功能强大的评论系统。 优点是安全，评论系统提供的功能更为强大。 缺点是需要购买云服务器资源，有一定的开销，并且需要对数据库和服务器有一定的了解。 不差钱的情况下，推荐这种方式。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"使用Vercel托管博客","slug":"000-建站技术/001-Hexo/002-折腾/002-使用Vercel托管博客","date":"2024-03-03T03:23:21.000Z","updated":"2024-03-18T00:36:11.867Z","comments":true,"path":"posts/20240303/112321/","permalink":"https://momashanhe.com/posts/20240303/112321/","excerpt":"摘要：本文主要介绍了如何将博客托管到Vercel云平台。","text":"摘要：本文主要介绍了如何将博客托管到Vercel云平台。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 使用Vercel1.1 简介Vercel是一个云服务平台，可以用于部署静态网站，也用于部署一些没有接口数据交互的动态网站。 对于个人博客，在Vercel上部署类似于在GitHub Pages上进行部署，但是Vercel的访问速度要比GitHub Pages好太多，因此许多博主都将博客部署在Vercel上。 Vercel的官网：https://vercel.com/ 1.2 注册在注册时选择私人目的，不要选择商业目的： 选择邮箱注册，在邮箱收到链接后验证完成注册。 1.3 部署1. 通过本地手动部署2. 通过GitHub Pages博客项目自动部署3. 通过GitHub博客源码项目自动部署这种方式不需要访问GitHub，是通过本地命令的方式进行部署的。 类似于将本地博客部署到GitHub Pages需要安装插件，将本地博客部署到Vercel也需要安装插件。 在博客目录打开bash命令行，安装Vercel插件，需要进行全局安装： bash1npm install vercel -g 执行命令将博客部署到平台，首次执行会登录Vercel平台，然后进行一些设置，可以直接回车使用默认设置： bash1vercel 部署完成后会提示生成的链接，通过链接可以访问博客。 还有一些常用命令，可以在官网学习。 推荐方式之一，从本地可以直接部署到Vercel平台，简单快速。进入Vercel项目管理界面，打开Overview并在右侧点击Add New...下拉列表中的Project选项： 在导入项目管理界面点击Continue with GitHub并在弹出的界面上完成GitHub授权： 在导入项目管理界面可以看到刚刚导入的项目，点击项目后面的Install并在弹出的界面上选择Only select repositories选项，在Select repositories下拉列表中选择GitHub Pages博客项目，点击Install执行安装，输入GitHub密码将项目从GitHub复制到Vercel上。 在导入项目管理界面点击项目右侧的Import，进入设置和部署界面： 设置Vercel中的项目名，可以使用默认的。 设置框架，自动识别为Other框架，可以使用默认的，因为项目中只有静态文件，不需要使用框架部署。 检查并设置部署命令，可以使用默认配置，点击Deploy在Vercel上进行部署。 等到部署结束，会跳转到祝贺页面，能够看到博客的缩略图，点击即可通过Vercel提供的链接访问博客。 当对GitHub Pages博客项目进行推送时，会触发Vercel的自动部署。 推荐方式之一，不需要对现有流程进行更改，不需要考虑在Vercel上部署带来的一系列问题。进入Vercel项目管理界面，打开Overview并在右侧点击Add New...下拉列表中的Project选项： 在导入项目管理界面点击Continue with GitHub并在弹出的界面上完成GitHub授权： 在导入项目管理界面可以看到刚刚导入的项目，点击项目后面的Install并在弹出的界面上选择Only select repositories选项，在Select repositories下拉列表中选择GitHub博客源码项目，点击Install执行安装，输入GitHub密码将项目从GitHub复制到Vercel上。 在导入项目管理界面点击项目右侧的Import，进入设置和部署界面： 设置Vercel中的项目名，可以使用默认的。 设置框架，支持自动识别比如Hexo框架，如果不对可以修改。 检查并设置部署命令，可以使用默认配置，点击Deploy在Vercel上进行部署。 等到部署结束，会跳转到祝贺页面，能够看到博客的缩略图，点击即可通过Vercel提供的链接访问博客。 当对GitHub博客源码项目进行推送时，会触发Vercel的自动部署。 不推荐这种方式，在某些情况下会出现问题，将主题项目作为子模块或者子项目，会导致部署后进入博客白屏。 1.4 设置域名进入Vercel项目管理界面，点击创建的博客项目进入项目界面，切换到Settings标签，在左侧导航栏点击Domains设置： 在输入框中输入购买的域名，点击Add添加。 根据提示去域名服务商配置域名解析，将指向GitHub Pages改为指向Vercel。 之后等待域名生效即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"Vercel","slug":"Vercel","permalink":"https://momashanhe.com/tags/Vercel/"}]},{"title":"给博客添加徽标","slug":"000-建站技术/001-Hexo/002-折腾/001-给博客添加徽标","date":"2024-03-03T02:25:43.000Z","updated":"2024-03-17T03:22:42.702Z","comments":true,"path":"posts/20240303/102543/","permalink":"https://momashanhe.com/posts/20240303/102543/","excerpt":"摘要：本文主要介绍了如何给博客添加自定义徽标。","text":"摘要：本文主要介绍了如何给博客添加自定义徽标。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 静态徽标1.1 语法徽标生成网站：https://shields.io/ 通过访问特定链接就能生成自定义徽标，特定链接的语法： url1https://img.shields.io/badge/前缀-后缀-颜色?参数 特定链接使用-短横线分隔，如果用到了特殊字符需要转义： 需要 空格，则使用_下划线或者%20表示。需要_下划线，则使用__双下划线表示。需要-短横线，则使用--双短横线表示。 颜色支持十六进制、RGB、RGBA、HSL、HSLA和CSS进行表达。 样式： 可以使用img标签引用，也可以使用object标签引用： 1. img2. object不支持点击徽标跳转链接，需要包装跳转链接。 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/left-right-blue&quot;&gt;&lt;/a&gt;支持点击徽标跳转链接。 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-blue&quot;&gt;&lt;/object&gt; 1.2 参数1.2.1 类型类型参数名为style，类型参数值支持多种。 1. flat2. flat-square3. plastic4. for-the-badge5. social扁平，默认，样式： 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/left-right-blue?style=flat&quot;&gt;&lt;/a&gt;方角扁平，样式： 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/left-right-blue?style=flat-square&quot;&gt;&lt;/a&gt;塑料质感，样式： 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/left-right-blue?style=plastic&quot;&gt;&lt;/a&gt;放大版，同时字母大写，样式： 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/left-right-blue?style=for-the-badge&quot;&gt;&lt;/a&gt;后缀改为聊天气泡，样式： 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/left-right-blue?style=social&quot;&gt;&lt;/a&gt; 1.2.2 标签左侧标签参数名为label，左侧标签颜色参数名为labelColor，右侧标签颜色参数名为color，支持重写左侧标签和自定义两侧标签颜色。 样式： 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/left-right-90EE90?label=edit&amp;labelColor=A9A9A9&amp;color=FF0000&quot;&gt;&lt;/a&gt; 1.2.3 链接链接参数名为link，链接参数值支持自定义链接，用于点击徽标进行跳转。 只有使用object标签才支持跳转，使用img标签需要包装跳转链接。 样式： 写法： html1&lt;a href=&quot;https://shields.io/&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/left-right-90EE90&quot;&gt;&lt;/a&gt; 1.2.4 LOGOLOGO参数名为logo，LOGO颜色参数名为logoColor，参数值支持从网站获取：https://simpleicons.org/ 在上述网站中可以找到支持的LOGO名称和颜色，也可以复制下载SVG格式的图标。 样式： 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/left-right-90EE90?logo=hexo&amp;logoColor=0E83CD&quot;&gt;&lt;/a&gt; 2 动态徽标2.1 通过URL获取的文件内容语法： url1https://img.shields.io/badge/dynamic/类型?参数 支持的文件类型有： jsontomlxmlyaml 参数沿用静态徽标的参数，并且新增了url参数和query参数，用于指定文件地址和属性名，属性名前使用$.作为前缀。 样式： 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/dynamic/json?url=https://github.com/badges/shields/raw/master/package.json&amp;query=$.name&quot;&gt;&lt;/a&gt; 2.2 通过URL获取的响应内容语法： url1https://img.shields.io/endpoint?参数 参数沿用静态徽标的参数，并且新增了url参数，用于请求地址。 请求地址需要响应的内容： schemaVersion：版本，必填，总是设置为1。style：类型，非必填，默认是flat。label：左侧标签内容，可以设置为空字符串，必填。message：右侧标签内容，不能设置为空字符串，必填。labelColor：左侧标签颜色，非必填，默认是grey。color：右侧标签颜色，非必填，默认是lightgrey。namedLogo：LOGO对应名字，非必填，默认不传。logoSvg：LOGO对应的SVG字符串，非必填，默认不传。logoColor：LOGO颜色，非必填，默认不传。isError：非必填，默认否， 请求url得到的响应内容： json1&#123; &quot;schemaVersion&quot;: 1, &quot;label&quot;: &quot;is it monday&quot;, &quot;message&quot;: &quot;no&quot;, &quot;color&quot;: &quot;orange&quot; &#125; 样式： 写法： html1&lt;a href=&quot;javascript:void(0);&quot; title=&quot;shields&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://shields.redsparr0w.com/2473/monday&quot;&gt;&lt;/a&gt;","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"设置博客主题","slug":"000-建站技术/001-Hexo/001-搭建/006-设置博客主题","date":"2024-02-26T14:39:23.000Z","updated":"2024-03-17T03:22:43.215Z","comments":true,"path":"posts/20240226/223923/","permalink":"https://momashanhe.com/posts/20240226/223923/","excerpt":"摘要：本文主要介绍如何设置博客主题。","text":"摘要：本文主要介绍如何设置博客主题。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 设置主题对于在GitHub上的主题，有四种方式进行设置，四种方式各有优缺点。 1. 下载并解压2. 安装3. 克隆主题作为子模块4. 克隆主题作为子项目下载并解压主题到博客目录的themes目录中。 最简单的方式，特点如下：是否支持通过命令更新主题：否，需要重新下载。本地是否存储主题代码：是，可以修改主题。远程是否存储主题代码：是，保留主题代码。 适用场景：是否需要使用新版主题：否。是否会对主题进行更改：是。安装主题到博客： bash1npm install hexo-theme-themename 最节省空间的方式，特点如下：是否支持通过命令更新主题：是，支持通过npm install命令更新主题，更新前需要在package.json中将版本号改为*。本地是否存储主题代码：否，不可以修改主题。远程是否存储主题代码：否，不保留主题代码。 适用场景：是否需要使用新版主题：是。是否会对主题进行更改：否。通过git submodule add命令将GitHub上的主题项目克隆到本地，作为博客项目的子模块： bash1git submodule add git@github.com:username/hexo-theme-themename.git themes/themename 较为兼容的方式，特点如下：是否支持通过命令更新主题：是，支持通过git pull命令更新主题。本地是否存储主题代码：是，可以修改主题。远程是否存储主题代码：否，不保留主题代码，但是会保留主题子模块链接。 适用场景：是否需要使用新版主题：是。是否会对主题进行更改：是。通过git clone命令将GitHub上的主题项目克隆到本地，作为博客项目的子项目： bash1git clone git@github.com:username/hexo-theme-themename.git themes/themename 建议使用这种方式，特点如下：是否支持通过命令更新主题：是，支持通过git pull命令更新主题。本地是否存储主题代码：是，可以修改主题。远程是否存储主题代码：否，不保留主题代码。 适用场景：是否需要使用新版主题：是。是否会对主题进行更改：是。 打开_config.yml配置文件，设置theme的值为主题中指定的名字。 根据主题说明文件，创建_config.themename.yml主题专用配置文件，按照主题说明文档修改配置即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"在文章中插入本地图片","slug":"000-建站技术/001-Hexo/001-搭建/005-在文章中插入本地图片","date":"2024-02-26T13:15:23.000Z","updated":"2024-03-17T03:22:43.784Z","comments":true,"path":"posts/20240226/211523/","permalink":"https://momashanhe.com/posts/20240226/211523/","excerpt":"摘要：本文主要介绍如何在文章中插入本地图片。","text":"摘要：本文主要介绍如何在文章中插入本地图片。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 插入图片进入博客目录，修改_config.yml配置文件，启动资源目录： _config.yml1post_asset_folder: true 在博客目录打开bash命令行，安装插件： bash1npm install hexo-image-link --save 每次创建博客时，都会创建同名目录，通过相对路径引用同名目录里的图片即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"给文章设置模板和永久链接","slug":"000-建站技术/001-Hexo/001-搭建/004-给文章设置模板和永久链接","date":"2024-02-26T12:13:52.000Z","updated":"2024-03-17T03:22:44.358Z","comments":true,"path":"posts/20240226/201352/","permalink":"https://momashanhe.com/posts/20240226/201352/","excerpt":"摘要：本文主要介绍如何给文章设置模板和永久链接。","text":"摘要：本文主要介绍如何给文章设置模板和永久链接。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 模板进入博客目录，打开scaffolds目录，修改post.md模板，这是默认模板： post.md12345678910---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:---摘要：&lt;!-- more --&gt; 进入博客目录，打开scaffolds目录，修改draft.md模板： draft.md123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:--- 2 永久链接修改博客目录下的_config.yml配置文件： _config.yml12url: https://username.com/permalink: posts/:year:month:day/:hour:minute:second/ 把url改为自己的域名即可，这种永久链接的好处是采用文章创建时间里的元素作为永久链接，即使文章路径或者文章标题发生改动，也不会对已生成的链接产生影响。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"将博客源码上传到GitHub","slug":"000-建站技术/001-Hexo/001-搭建/003-将博客源码上传到GitHub","date":"2024-02-26T09:26:37.000Z","updated":"2024-03-18T00:36:11.863Z","comments":true,"path":"posts/20240226/172637/","permalink":"https://momashanhe.com/posts/20240226/172637/","excerpt":"摘要：本文主要介绍如何将博客源码上传到GitHub。","text":"摘要：本文主要介绍如何将博客源码上传到GitHub。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 创建私有源码仓库登录GitHub，创建一个名称为username.source的公共仓库，把username改为GitHub的用户名，下同。 2 创建说明文档和许可证明进入博客目录，创建README.md说明文档，输入对项目的简单介绍，创建LICENSE许可证明，并设置许可类型。 3 同步源码进入博客目录，右键进入bash命令行，执行命令初始化为Git仓库： bash1git init 结果如下： 因为GitHub新的仓库默认分支已经改成了main，但本地还是master，所以执行命令将本地分支改为main： bash1git branch -M main 结果如下： 修改.gitignore配置文件： .gitignore12345678910.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/.deploy_git*/_multiconfig.yml.github*/ 右键进入bash命令行，设置当前目录用户名和邮箱： bash12git config --local user.name usernamegit config --local user.email username@163.com 添加至暂存： bash1git add . 提交更改并注释： bash1git commit -m &quot;init(博客): 初始化博客&quot; 添加远程仓库： bash1git remote add origin git@github.com:username/username.source.git 推送到远程仓库： bash1git push -u origin main","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://momashanhe.com/tags/GitHub/"}]},{"title":"将博客部署到GitHub","slug":"000-建站技术/001-Hexo/001-搭建/002-将博客部署到GitHub","date":"2024-02-26T07:34:29.000Z","updated":"2024-03-18T00:36:11.863Z","comments":true,"path":"posts/20240226/153429/","permalink":"https://momashanhe.com/posts/20240226/153429/","excerpt":"摘要：本文主要介绍如何将博客部署到GitHub。","text":"摘要：本文主要介绍如何将博客部署到GitHub。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 配置GitHub1.1 登录注册并登录GitHub。 1.2 生成SSH公钥打开资源管理器，在地址栏输入C:\\Users\\登录用户\\.ssh并回车进入，查看登录用户目录里有没有.ssh目录： 如果目录存在，说明以前设置过.ssh目录，如果没用了就删掉，如果还有用就需要参考SSH配置多用户，在此先不做介绍了。如果目录不存在，进入上级C:\\Users\\登录用户目录，右键进入bash命令行，执行命令生成SSH秘钥和公钥： bash1ssh-keygen -t rsa -C 个人邮箱 命令说明： -t：指定密钥类型，默认是rsa，可以省略。-C：设置注释文字，一般会设置为个人邮箱。 执行命令后，会提示置生成的秘钥和公钥名称，默认是id_rsa作为名称，回车使用默认名称。继续执行，还会提示设置密码和确认密码，回车设置为空。命令最终执行如下：此时会在登录用户目录里生成.ssh目录，打开id_rsa.pub公钥文件并复制内容。 1.3 配置SSH公钥进入GitHub点击个人头像，选择Settings进入设置页面，在左侧找到SSH and GPG keys设置，在顶部的SSH keys模块中，点击右侧的New SSH key按钮新增配置：在添加配置的页面中，设置Title的配置名称，然后设置Key中的公钥，粘贴刚刚复制的公钥文件内容，然后点击底部的Add SSH key按钮保存配置。 使用ssh -T git@github.com命令测试通过SSH能否连接到GitHub：如果提示确认输入，就按照提示输入yes然后回车即可连接成功，下次在测试就没有这个提示了，同时在.ssh目录中会增加known_hosts的配置文件。 2 部署GitHub2.1 创建仓库登录GitHub，创建一个名称为username.github.io的公共仓库，把username改为GitHub的用户名，下同。 这种仓库是GitHub Pages仓库，一个用户只能创建一个这种仓库，创建后允许用户将仓库发布为一个静态网站，网址就是username.github.io仓库名称。 2.2 安装插件进入博客目录，右键进入bash命令行，安装部署到GitHub上的插件： bash1npm install hexo-deployer-git --save 修改博客目录下的_config.yml配置文件，修改底部的deploy配置项，如果没有找到则自己添加： _config.yml12345678# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: github: url: git@github.com:username/username.github.io.git branch: main 2.3 发布进入博客目录，右键进入bash命令行，执行命令清理博客、生成博客、发布博客： bash123hexo cleanhexo generatehexo deploy 发布后如果提示未知身份：说明需要设置用户名和邮箱。 可以按照提示设置全局用户名和邮箱： bash12git config --global user.name usernamegit config --global user.email username@163.com 然后重新发布。 也可以进入博客目录下的.deploy_git发布目录，右键进入bash命令行，设置发布目录的用户名和邮箱： bash12git config --local user.name usernamegit config --local user.email username@163.com 返回上级博客目录，然后重新发布。 通过GitHub访问博客：https://username.github.io 3 域名解析3.1 域名通过阿里云或者腾讯云，或者其他服务商，都可以购买域名。 3.2 解析打开cmd命令行，输入命令查询IP地址： cmd1ping username.github.io 进入域名解析页面，配置域名解析。新增记录，主机记录为@，记录类型为A，记录值为上面查到的IP地址，TTL使用默认的600即可。新增记录，主机记录为www，记录类型为CNAME，记录值为GitHub访问博客的地址，TTL使用默认的600即可。 3.3 配置进入博客目录下的source目录，新建CNAME文件，注意不要有后缀名，打开后添加域名并保存。 进入仓库页面，点击仓库页面右上角的Settings标签，在左侧菜单栏中找到Pages配置页，找到Custom domain填入域名并保存。将博客重新发布后就可以通过域名访问了。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://momashanhe.com/tags/GitHub/"}]},{"title":"本地安装Hexo博客","slug":"000-建站技术/001-Hexo/001-搭建/001-本地安装Hexo博客","date":"2024-02-26T03:13:54.000Z","updated":"2024-03-18T00:36:11.863Z","comments":true,"path":"posts/20240226/111354/","permalink":"https://momashanhe.com/posts/20240226/111354/","excerpt":"摘要：本文主要介绍如何下载和安装Hexo。","text":"摘要：本文主要介绍如何下载和安装Hexo。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 简介Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 官网：https://hexo.io/zh-cn 2 环境2.1 安装Git由于初始化博客目录需要Git支持，并且Hexo的某些命令需要在bash命令行中执行，因此需要安装Git工具。 官网：https://git-scm.com使用最新版安装即可，也可以通过GitHub选择2.37.3版本下载，历史版本下载地址：v2.37.3.windows.1&#x2F;如果GitHub访问速度慢，也可以通过淘宝镜像下载：v2.37.3.windows.1&#x2F; 如果不太了解Git工具，可以使用默认设置安装。安装结束后，右键选择Git Bash Here进入bash命令行：输入git --version命令查看Git的安装版本： 需要注意的是，默认安装的2.37.3版本在初始化本地Git项目的时候，默认创建的分支还是master分支，可以在安装的时候自定义： 2.2 安装NodeHexo基于Node，搭建过程中还需要使用NPM（Node包管理工具，安装Node时默认安装）。 官网：https://nodejs.org/en本文使用的版本不是最新版，是18.14.0版本。下载地址：v18.14.0&#x2F;选择node-v18.14.0-x64.msi下载并安装。 使用默认配置安装结束后，打开cmd命令行，输入npm -v命令和node -v命令查询NPM版本和Node版本： NPM是包管理工具，通过命令将安装包使用的源设置为淘宝镜像，速度会快一些： bash1npm config set registry https://registry.npmmirror.com 使用命令查看安装使用的源： bash1npm config get registry 2.3 安装Hexo在cmd命令行中使用NPM安装Hexo： bash1npm install hexo-cli -g 安装结束后，使用hexo -v命令查看Hexo版本： 3 使用3.1 初始化博客目录在电脑中新建博客目录，右键进入bash命令行，使用命令初始化博客目录： bash1hexo init 结果如下： 3.2 博客预览使用hexo generate命令生成博客内容。也可以简写为hexo g命令。结果如下：使用hexo server命令启动本地预览。也可以简写为hexo s命令。结果如下：根据提示，在浏览器输入地址访问博客：http://localhost:4000/可以看到博客的默认界面： 可以使用Ctrl+C命令停止博客。 3.3 新建文章使用命令创建文章： bash1hexo new test 执行后创建标题为test的文章，在博客名录下的source目录中的_posts目录中会自动新增对应的Markdown文件： 可以通过文本编辑器修改文章，保存后在本地预览： bash1hexo clean &amp;&amp; hexo s 3.4 站点设置修改博客目录下的_config.yml配置文件，修改的Site配置项，修改站点属性。 4 分类和标签4.1 分类进入博客目录，打开bash命令行，添加分类页： bash1hexo new page categories 打开sources/categories/index.md文件，增加分类配置： index.md12345---title: 所有分类date: 2024-02-25 21:45:11type: &quot;categories&quot;--- 使用分类： index.md123---categories: --- 4.2 标签进入博客目录，打开bash命令行，添加标签页： bash1hexo new page tags 打开sources/tags/index.md文件，增加标签配置： index.md12345---title: 所有标签date: 2024-02-25 21:53:29type: &quot;tags&quot;--- 使用标签： index.md123---tags: []---","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]}],"categories":[{"name":"大前端","slug":"大前端","permalink":"https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"},{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://momashanhe.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://momashanhe.com/tags/CSS/"},{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://momashanhe.com/tags/GitHub/"},{"name":"NPM","slug":"NPM","permalink":"https://momashanhe.com/tags/NPM/"},{"name":"PicGo","slug":"PicGo","permalink":"https://momashanhe.com/tags/PicGo/"},{"name":"Vercel","slug":"Vercel","permalink":"https://momashanhe.com/tags/Vercel/"},{"name":"LeanCloud","slug":"LeanCloud","permalink":"https://momashanhe.com/tags/LeanCloud/"},{"name":"Waline","slug":"Waline","permalink":"https://momashanhe.com/tags/Waline/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://momashanhe.com/tags/MongoDB/"},{"name":"Twikoo","slug":"Twikoo","permalink":"https://momashanhe.com/tags/Twikoo/"}]}
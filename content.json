{"meta":{"title":"墨码山河","subtitle":"代码改变世界","description":"代码改变世界","author":"墨码山河","url":"https://momashanhe.com","root":"/"},"pages":[{"title":"分类","date":"2024-02-25T13:45:11.000Z","updated":"2024-03-10T03:45:36.241Z","comments":true,"path":"categories/index.html","permalink":"https://momashanhe.com/categories/index.html","excerpt":"","text":""},{"title":"专栏","date":"2024-02-29T02:12:36.000Z","updated":"2024-03-14T23:44:07.456Z","comments":true,"path":"groups/index.html","permalink":"https://momashanhe.com/groups/index.html","excerpt":"整理归纳，搭建系统。","text":"整理归纳，搭建系统。 建站技术:Hexo博客:搭建建站技术:Hexo博客:折腾"},{"title":"建站技术:Hexo博客:搭建","date":"2024-02-29T11:50:06.000Z","updated":"2024-03-14T23:44:07.458Z","comments":true,"path":"groups/001001/index.html","permalink":"https://momashanhe.com/groups/001001/index.html","excerpt":"","text":""},{"title":"标签","date":"2024-02-25T13:53:29.000Z","updated":"2024-03-10T03:12:38.918Z","comments":true,"path":"tags/index.html","permalink":"https://momashanhe.com/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2024-02-25T14:31:08.000Z","updated":"2024-03-10T03:12:17.376Z","comments":true,"path":"pages/about/index.html","permalink":"https://momashanhe.com/pages/about/index.html","excerpt":"简简单单，平平凡凡。","text":"简简单单，平平凡凡。"},{"title":"留言板","date":"2024-03-08T10:58:49.000Z","updated":"2024-03-10T03:12:22.265Z","comments":true,"path":"pages/board/index.html","permalink":"https://momashanhe.com/pages/board/index.html","excerpt":"遵纪守法，友善发言。","text":"遵纪守法，友善发言。"},{"title":"建站技术:Hexo博客:折腾","date":"2024-02-29T12:52:36.000Z","updated":"2024-03-14T23:44:07.457Z","comments":true,"path":"groups/001002/index.html","permalink":"https://momashanhe.com/groups/001002/index.html","excerpt":"","text":""},{"title":"通讯录","date":"2024-02-25T14:23:13.000Z","updated":"2024-03-10T03:12:25.670Z","comments":true,"path":"pages/friend/index.html","permalink":"https://momashanhe.com/pages/friend/index.html","excerpt":"红尘漫漫，增减随缘。","text":"红尘漫漫，增减随缘。 名片夹大佬大佬的博客Akilarの糖果屋期待您的光临！安知鱼生活明朗，万物可爱xaoxuu风暴前夕BeaCoxOn the way to be a hacker.失联失联的博客测试测试友链测试测试友链测试测试友链测试测试友链 个人名片card12345title: 墨码山河avatar: url: https://momashanhe.com/screenshot: description: 代码改变世界 建议avatar使用分辨率为200px的图片。建议screenshot使用https://image.thum.io/get/width/400/crop/800/allowJPG/wait/20/noanimate/https://momashanhe.com/网站生成的图片。 用户须知 免责声明 本站作者遵守中华人民共和国相关法律，本页内容中的网站链接仅为方便学习而创建，均为其他网站。虽然本站作者会对绝大多数的网站内容进行鉴别，并取消存在风险的网站链接。但因本站作者能力有限，无法判断网站链接指向的网站内容是否存在安全问题，并且无法判断在收录后是否增加了违法内容。故而用户在通过本页内容中的网站链接访问其他网站时，仍然无法避免风险，包括但不限于：网站链接的网站作者更换了网站链接的指向，替换成了其他内容；网站链接的网站作者修改了文章内容，增加了钓鱼网站、广告等其他无效信息；网站链接的服务器被恶意攻击、劫持、注入了其他内容；网站链接的域名到期，被不法分子改做他用；网站链接的规则不完善，对用户的隐私造成了侵害、泄漏。本页内容中的文章链接均为机器自动抓取，本站作者未经过任何审核和筛选，不能保证文章内容的安全可靠。本页内容中的网站链接指向的网站内容如果给用户造成了损失，本站作者深表歉意，建议用户如果发现问题请及时和本站作者联系，避免给更多用户造成损失。"}],"posts":[{"title":"入门","slug":"100/101001/001-入门","date":"2024-03-14T06:35:53.000Z","updated":"2024-03-14T06:38:41.805Z","comments":true,"path":"posts/20240314/143553/","permalink":"https://momashanhe.com/posts/20240314/143553/","excerpt":"摘要：","text":"摘要：","categories":[{"name":"大前端","slug":"大前端","permalink":"https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://momashanhe.com/tags/HTML/"}]},{"title":"使用GitHub图床存放博客静态资源","slug":"000/001002/007-使用GitHub图床存放博客静态资源","date":"2024-03-10T06:15:20.000Z","updated":"2024-03-16T03:45:48.709Z","comments":true,"path":"posts/20240310/141520/","permalink":"https://momashanhe.com/posts/20240310/141520/","excerpt":"摘要：本文主要介绍了如何使用GitHub图床存放静态资源，并对静态资源的获取进行加速。","text":"摘要：本文主要介绍了如何使用GitHub图床存放静态资源，并对静态资源的获取进行加速。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 简介博客暂时还没有服务器进行备案，也不想使用别人的图床，就只能自己打一个比较简陋的了。 使用GitHub作为图床，但是需要注意不要超过1G容量，超过1G的时候需要想办法进行拆分。 使用NPM加速访问，实现CDN的效果。 2 GitHubGitHub官网：https://github.com/ 如果没有注册过GitHub的话，需要注册一个账号。 创建一个用于存储静态资源的仓库。 点击右上角个人头像，在下拉列表中点击Settings进入设置界面。 点击左侧菜单栏底部的Developer Settings进入开发者界面。 点击Personal access tokens选项，然后点击Tokens (classic)菜单，并在右侧点击Generate new token下拉列表中的Generate new token (classic)按钮： 在Note中输入对Token使用的描述，把Expiration设置为No expiration永不过期，然后给下面的Select scopes勾选repo选框： 最后点击底部的Generate token创建Token，并将页面上展示的Token进行复制保存，这个Token只会出现这一次，忘记只能重新生成。 这个Token后面会在PicGo里配置。 将静态资源文件上传到仓库里。 3 NPM3.1 注册NPM官网：https://www.npmjs.com/ 注册NPM账号： 新账号注册后需要配置2FA认证： txt1You don’t have two-factor authentication (2FA) enabled on your account. Configure 2FA or visit our docs to learn more. 点击2FA认证链接，选择使用Authenticator app的方式认证： 在手机上下载Authenticator并安装，打开后选择扫描QR码然后扫描网页上的二维码，将生成的一次性密码代码输入底部的密码框中。 保存好生成的恢复代码，这里只出现一次，忘记需要重新生成。 3.2 本地仓库进入静态资源的本地仓库，执行以下命名切换回原生源： bash1npm config set registry https://registry.npmjs.org 如果是第一次使用，需要执行命令添加本地NPM用户配置，输入账户和密码以及邮箱即可： 1npm adduser 如果不是第一次使用，执行登录命令，输入账户和密码以及邮箱即可： 1npm login 如果命令行提示需要登录，在下面的网址里完成登录即可： bash1Create your account at: 在打包前准备好包名，需要事先确认包名没有重复，可以在NPM官网搜索相应包名，搜不到就说明还没被占用。 执行初始化命令，将仓库打包，按照指示进行配置： bash1npm init 根据实际情况填写，红框内的使用默认就好： 注意名称不要使用带有年月日的数字，不然会被认为垃圾名称发布失败，尽量是用-短横线分隔。 最后输入yes即可。 打包以后就可以发布了，执行命令： bash1npm publish --otp=123456 命令说明： otp：需要输入Authenticator生成的一次性密码。 发布成功提示： 发布成功后，可以寻找NPM的节点使用，比如可以按照下面的方式使用： url1https://unpkg.com/:package@:version/:file 3.3 升级仓库以后使用静态资源的时候，现在本地试用，然后将静态资源同步到GitHub上，再发布NPM升级包。 使用命令增加NPM版本，版本由3位组成，从左到右分别是： major：主要版本，左边首位，不会向后兼容的重大改动。minor：次要版本，中间位，向后兼容的新增功能。patch：补丁版本，右边首位，向后兼容的缺陷修复。 如果需要更新补丁版本，执行如下命令即可，会自动给版本的patch部分加一： bash1npm version patch 然后执行发布命令： bash1npm publish --otp=123456 发布成功后修改使用的版本就可以了。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://momashanhe.com/tags/GitHub/"},{"name":"NPM","slug":"NPM","permalink":"https://momashanhe.com/tags/NPM/"},{"name":"PicGo","slug":"PicGo","permalink":"https://momashanhe.com/tags/PicGo/"}]},{"title":"博客图床对比","slug":"000/001002/006-博客图床对比","date":"2024-03-10T03:31:45.000Z","updated":"2024-03-14T08:09:34.486Z","comments":true,"path":"posts/20240310/113145/","permalink":"https://momashanhe.com/posts/20240310/113145/","excerpt":"摘要：本文主要介绍了不同图床之间的区别。","text":"摘要：本文主要介绍了不同图床之间的区别。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 对比图床一般用来加速对博客图片的访问，实际上是一种专门存储图片的服务器，大致分为：个人图床，平台图床。 1.1 个人图床由个人搭建的图床，搭建之后将其公开，允许公众使用的图床。 代表：SM.MS图床：土豪兽兽建的图床，2015年开始正式运营，烧风自建的CDN，支持HTTPS地址。路过图床：老牌图床，2011年开放，提供全球CDN，支持HTTPS地址。去不图床：杜老师创建的图床，部署在腾讯云上，需要搭配CDN。 1.2 平台图床由大型服务商搭建的图床，安全性要比个人图床好，但也更贵一些，可能会有一些限制。 代表：GitHub：支持存储1G以内图片，稳定可靠，需要额外配置CDN。腾讯云：稳定可靠，就是贵。阿里云：稳定可靠，就是贵。又拍云：需要在网站底部添加LOGO和官网链接，每月10G免费空间，每月10G免费CDN。七牛云：免费流量不支持HTTPS地址，每月10G免费空间，每月15G免费CDN。多吉云：域名需要在服务器进行ICP备案，每月10G免费空间，每月20G免费CDN。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"给博客加装Waline评论","slug":"000/001002/005-给博客加装Waline评论","date":"2024-03-09T02:08:21.000Z","updated":"2024-03-16T03:45:48.627Z","comments":true,"path":"posts/20240309/100821/","permalink":"https://momashanhe.com/posts/20240309/100821/","excerpt":"摘要：本文主要介绍了通过使用LeanCloud数据库和Vercel服务器将Waline评论部署到Hexo博客。","text":"摘要：本文主要介绍了通过使用LeanCloud数据库和Vercel服务器将Waline评论部署到Hexo博客。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 Waline评论1.1 简介详情查看官方文档：Waline官方文档 - 快速上手 2 使用LeanCloud2.1 简介LeanCloud是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage数据存储、LeanMessage通信服务、LeanAnalytics统计分析、LeanModules拓展模块等四大类型的后端云服务，加速应用开发。 加装Waline评论主要使用LeanCloud的LeanStorage数据存储功能。 LeanCloud的中文官网：https://www.leancloud.cn/ 2.2 注册账号并创建应用注册LeanCloud账号，分为中国大陆版和国际版，区别是中国大陆版需要绑定手机、实名认证、备案域名，国际版不需要，这里注册国际版就能满足要求。 国际版注册链接：https://console.leancloud.app/register 输入注册信息，然后在邮箱中验证邮件完成注册。 点击创建应用并选择免费的开发版，创建用于Waline的应用： 进入应用，在左侧的导航栏内进入设置下的应用凭证界面，记录认证信息以便后续使用： 3 使用Vercel3.1 创建项目创建账户并登录到Vercel，在Waline提供的文档里找到快速创建Vercel项目的链接：部署Waline到Vercel 输入GitHub项目名称后会自动在GitHub上创建项目，然后会在Vercel上自动部署，首次部署后需要设置环境变量。 3.2 配置项目进入刚刚创建的项目界面，切换到Settings标签。 在左侧导航栏点击Environment Variables设置，配置LEAN_ID、LEAN_KEY、LEAN_MASTER_KEY三个环境变量，值为上面LeanCloud里的应用凭证里的认证信息： 如果使用LeanCloud国内版，需要额外配置LEAN_SERVER环境变量，值为绑定的域名。 切换到Deployments标签，点击任意一项后面的...并在下拉选项中选择Redeploy，点击弹出界面下方的Redeploy重新部署。 在Domains中的https://xxx.vercel.app地址即为环境ID。 4 前端部署4.1 选择评论系统在主题的配置文件中选择Waline作为评论系统。 特殊配置参考官方文档即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"Vercel","slug":"Vercel","permalink":"https://momashanhe.com/tags/Vercel/"},{"name":"LeanCloud","slug":"LeanCloud","permalink":"https://momashanhe.com/tags/LeanCloud/"},{"name":"Waline","slug":"Waline","permalink":"https://momashanhe.com/tags/Waline/"}]},{"title":"给博客加装Twikoo评论","slug":"000/001002/004-给博客加装Twikoo评论","date":"2024-03-03T07:21:02.000Z","updated":"2024-03-16T03:45:48.721Z","comments":true,"path":"posts/20240303/152102/","permalink":"https://momashanhe.com/posts/20240303/152102/","excerpt":"摘要：本文主要介绍了通过使用MongoDB数据库和Vercel服务器将Twikoo评论部署到Hexo博客。","text":"摘要：本文主要介绍了通过使用MongoDB数据库和Vercel服务器将Twikoo评论部署到Hexo博客。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 Twikoo评论1.1 简介详情查看官方文档：Twikoo官方文档 - 快速上手 2 使用MongoDB2.1 简介MongoDB是一款流行的开源文档型数据库，用于存储文档类型的数据，比如博客产生的评论。 MongoDB的中文官网：https://www.mongodb.com/zh-cn/ 如果有云服务器，可以在服务器上使用MongoDB本地数据库，如果没有云服务器，可以使用MongoDB Atlas云数据库。 2.2 注册账号并创建集群注册MongoDB账号，然后在邮箱中验证邮件完成注册。 在Overview界面中可以设置组织名和项目名，然后创建一个集群： 在区域选择界面，选择免费的，提供商Provider选择AWS亚马逊即可，区域Region选择N. Virginia (us-east-1)弗吉尼亚州，也可以选择其他的。 继续设置Name集群名称，默认使用Cluster0作为集群名称，可以自定义，一旦设定不可修改。 继续设置Tag标签，这是可选的。 点击页面下方的Create创建免费集群。 2.3 创建用户进入Database Access界面，创建用户。 选择Password作为认证方式，输入用户和密码，这个用户是用来登录云数据库的，因此密码尽量设置的难一些： 继续设置用户权限，点击Add Built In Role并选择Atlas Admin选项： 点击页面下方的Add User创建用户。 2.4 设置IP地址进入Network Access界面，添加能访问云数据库的IP地址。 点击Allow Access from Anywhere或者在Access List Entry输入0.0.0.0/0表示允许所有IP地址的连接，点击Confirm保存设置： 2.5 查看如何连接进入Database界面，点击集群后面的Connect建立连接，连接方式选择Drivers使用驱动连接： 使用Driver默认的Node.js作为驱动，使用Version默认的5.5 or later作为版本： 复制下方mongodb+srv开头的字符串，并将&lt;password&gt;修改为创建用户时设置的密码，将这个数据库连接字符串复制并保存，后面需要用到。 点击页面下方的Close关闭退出即可。 3 使用Vercel3.1 创建项目创建账户并登录到Vercel，在Twikoo提供的文档里找到快速创建Vercel项目的链接：部署Twikoo到Vercel 输入GitHub项目名称后会自动在GitHub上创建项目，然后会在Vercel上自动部署，首次部署后会提示需要设置MONGODB_URI环境变量。 3.2 配置项目进入刚刚创建的项目界面，切换到Settings标签。 在左侧导航栏点击Environment Variables设置，在Key中输入MONGODB_URI，在Value中输入前面设置MongoDB保存的数据库连接字符串，点击Save保存： 在左侧导航栏点击Environment Variables设置，将Vercel Authentication设置为Disable，点击Save保存，这是关闭对项目的登录保护，支持任何人访问项目： 切换到Deployments标签，点击任意一项后面的...并在下拉选项中选择Redeploy，点击弹出界面下方的Redeploy重新部署，如果环境配置正确，可以看到提示： 在Domains中的https://xxx.vercel.app地址即为环境ID。 4 前端部署4.1 选择评论系统在主题的配置文件中选择Twikoo作为评论系统。 特殊配置参考官方文档即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"Vercel","slug":"Vercel","permalink":"https://momashanhe.com/tags/Vercel/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://momashanhe.com/tags/MongoDB/"},{"name":"Twikoo","slug":"Twikoo","permalink":"https://momashanhe.com/tags/Twikoo/"}]},{"title":"博客评论系统对比","slug":"000/001002/003-博客评论系统对比","date":"2024-03-03T05:12:51.000Z","updated":"2024-03-14T08:09:34.489Z","comments":true,"path":"posts/20240303/131251/","permalink":"https://momashanhe.com/posts/20240303/131251/","excerpt":"摘要：本文主要介绍了不同评论系统之间的区别。","text":"摘要：本文主要介绍了不同评论系统之间的区别。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 对比Hexo博客支持的评论系统有很多，大致分为：GitHub系列，Vercel系列，云服务器系列。 1.1 GitHub系列这种方式基于GitHub，使用Discussions功能或者Issue功能实现评论。 代表：Giscus：基于GitHub的Discussions功能。Gitalk：基于GitHub的Issue功能。Beaudar：基于GitHub的Issue功能。Utterances：基于GitHub的Issue功能。 优点是使用简单，不用注册额外数据库和服务器。 缺点是数据管理不方便，不能通过数据库维护评论。 出于数据管理方面的考虑，不太推荐这种方式。 1.2 Vercel系列这种方式基于Vercel服务器，借助免费版的Vercel服务器，以及免费版的云数据库，将评论系统部署到Vercel服务器，将评论存储到数据库中。 代表：Twikoo：支持多种部署方式，支持自动填写浏览数，支持获取评论数。Waline：支持多种部署方式，支持自动填写浏览数和评论数。 优点是免费，免费版的资源足够个人使用了，而且有一些额外功能，比如统计浏览数和评论数。 缺点是需要注册相关账户，使用额外功能需要进行额外配置。 在不考虑购买服务器的情况下，推荐这种方式。 1.3 云服务器系列这种方式基于云服务器，需要购买云服务器资源，然后在云服务器上安装数据库，将评论系统部署到云服务器，将评论存储到数据库中。 代表：Artalk：部署在服务器上，功能强大的评论系统。 优点是安全，评论系统提供的功能更为强大。 缺点是需要购买云服务器资源，有一定的开销，并且需要对数据库和服务器有一定的了解。 不差钱的情况下，推荐这种方式。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"使用Vercel托管博客","slug":"000/001002/002-使用Vercel托管博客","date":"2024-03-03T03:23:21.000Z","updated":"2024-03-16T03:45:48.721Z","comments":true,"path":"posts/20240303/112321/","permalink":"https://momashanhe.com/posts/20240303/112321/","excerpt":"摘要：本文主要介绍了如何将博客托管到Vercel云平台。","text":"摘要：本文主要介绍了如何将博客托管到Vercel云平台。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 使用Vercel1.1 简介Vercel是一个云服务平台，可以用于部署静态网站，也用于部署一些没有接口数据交互的动态网站。 对于个人博客，在Vercel上部署类似于在GitHub Pages上进行部署，但是Vercel的访问速度要比GitHub Pages好太多，因此许多博主都将博客部署在Vercel上。 Vercel的官网：https://vercel.com/ 1.2 注册在注册时选择私人目的，不要选择商业目的： 选择邮箱注册，在邮箱收到链接后验证完成注册。 1.3 部署1. 通过本地手动部署2. 通过GitHub Pages博客项目自动部署3. 通过GitHub博客源码项目自动部署这种方式不需要访问GitHub，是通过本地命令的方式进行部署的。 类似于将本地博客部署到GitHub Pages需要安装插件，将本地博客部署到Vercel也需要安装插件。 在博客目录打开bash命令行，安装Vercel插件，需要进行全局安装： bash1npm install vercel -g 执行命令将博客部署到平台，首次执行会登录Vercel平台，然后进行一些设置，可以直接回车使用默认设置： bash1vercel 部署完成后会提示生成的链接，通过链接可以访问博客。 还有一些常用命令，可以在官网学习。 推荐方式之一，从本地可以直接部署到Vercel平台，简单快速。进入Vercel项目管理界面，打开Overview并在右侧点击Add New...下拉列表中的Project选项： 在导入项目管理界面点击Continue with GitHub并在弹出的界面上完成GitHub授权： 在导入项目管理界面可以看到刚刚导入的项目，点击项目后面的Install并在弹出的界面上选择Only select repositories选项，在Select repositories下拉列表中选择GitHub Pages博客项目，点击Install执行安装，输入GitHub密码将项目从GitHub复制到Vercel上。 在导入项目管理界面点击项目右侧的Import，进入设置和部署界面： 设置Vercel中的项目名，可以使用默认的。 设置框架，自动识别为Other框架，可以使用默认的，因为项目中只有静态文件，不需要使用框架部署。 检查并设置部署命令，可以使用默认配置，点击Deploy在Vercel上进行部署。 等到部署结束，会跳转到祝贺页面，能够看到博客的缩略图，点击即可通过Vercel提供的链接访问博客。 当对GitHub Pages博客项目进行推送时，会触发Vercel的自动部署。 推荐方式之一，不需要对现有流程进行更改，不需要考虑在Vercel上部署带来的一系列问题。进入Vercel项目管理界面，打开Overview并在右侧点击Add New...下拉列表中的Project选项： 在导入项目管理界面点击Continue with GitHub并在弹出的界面上完成GitHub授权： 在导入项目管理界面可以看到刚刚导入的项目，点击项目后面的Install并在弹出的界面上选择Only select repositories选项，在Select repositories下拉列表中选择GitHub博客源码项目，点击Install执行安装，输入GitHub密码将项目从GitHub复制到Vercel上。 在导入项目管理界面点击项目右侧的Import，进入设置和部署界面： 设置Vercel中的项目名，可以使用默认的。 设置框架，支持自动识别比如Hexo框架，如果不对可以修改。 检查并设置部署命令，可以使用默认配置，点击Deploy在Vercel上进行部署。 等到部署结束，会跳转到祝贺页面，能够看到博客的缩略图，点击即可通过Vercel提供的链接访问博客。 当对GitHub博客源码项目进行推送时，会触发Vercel的自动部署。 不推荐这种方式，在某些情况下会出现问题，将主题项目作为子模块或者子项目，会导致部署后进入博客白屏。 1.4 设置域名进入Vercel项目管理界面，点击创建的博客项目进入项目界面，切换到Settings标签，在左侧导航栏点击Domains设置： 在输入框中输入购买的域名，点击Add添加。 根据提示去域名服务商配置域名解析，将指向GitHub Pages改为指向Vercel。 之后等待域名生效即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"Vercel","slug":"Vercel","permalink":"https://momashanhe.com/tags/Vercel/"}]},{"title":"给博客添加徽标","slug":"000/001002/001-给博客添加徽标","date":"2024-03-03T02:25:43.000Z","updated":"2024-03-16T03:37:49.327Z","comments":true,"path":"posts/20240303/102543/","permalink":"https://momashanhe.com/posts/20240303/102543/","excerpt":"摘要：本文主要介绍了如何给博客添加自定义徽标。","text":"摘要：本文主要介绍了如何给博客添加自定义徽标。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 静态徽标1.1 语法徽标生成网站：https://shields.io/ 通过访问特定链接就能生成自定义徽标，特定链接的语法： url1https://img.shields.io/badge/前缀-后缀-颜色?参数 特定链接使用-短横线分隔，如果用到了特殊字符需要转义： 需要 空格，则使用_下划线或者%20表示。需要_下划线，则使用__双下划线表示。需要-短横线，则使用--双短横线表示。 颜色支持十六进制、RGB、RGBA、HSL、HSLA和CSS进行表达。 样式： 可以通过img引用，也可以通过object引用： 1. img2. object不支持点击徽标跳转链接，需要仿写跳转链接。 写法： html1&lt;img src=&quot;https://img.shields.io/badge/left-right-blue&quot;&gt;支持点击徽标跳转链接。 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-blue&quot;&gt;&lt;/object&gt; 1.2 参数1.2.1 类型类型参数名为style，类型参数值支持多种。 1. flat2. flat-square3. plastic4. for-the-badge5. social扁平，默认，样式： 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-blue?style=flat&quot;&gt;&lt;/object&gt;方角扁平，样式： 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-blue?style=flat-square&quot;&gt;&lt;/object&gt;塑料质感，样式： 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-blue?style=plastic&quot;&gt;&lt;/object&gt;放大版，同时字母大写，样式： 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-blue?style=for-the-badge&quot;&gt;&lt;/object&gt;后缀改为聊天气泡，样式： 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-blue?style=social&quot;&gt;&lt;/object&gt; 1.2.2 标签左侧标签参数名为label，左侧标签颜色参数名为labelColor，右侧标签颜色参数名为color，支持重写左侧标签和自定义两侧标签颜色。 样式： 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-90EE90?label=edit&amp;labelColor=A9A9A9&amp;color=FF0000&quot;&gt;&lt;/object&gt; 1.2.3 链接链接参数名为link，链接参数值支持自定义链接，用于点击徽标进行跳转。 样式： 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-90EE90?link=https://hexo.io/zh-cn/index.html&quot;&gt;&lt;/object&gt; 1.2.4 LOGOLOGO参数名为logo，LOGO颜色参数名为logoColor，参数值支持从网站获取：https://simpleicons.org/ 在上述网站中可以找到支持的LOGO名称和颜色，也可以复制下载SVG格式的图标。 样式： 写法： html1&lt;object data=&quot;https://img.shields.io/badge/left-right-90EE90?logo=hexo&amp;logoColor=0E83CD&quot;&gt;&lt;/object&gt; 2 动态徽标2.1 通过URL获取的文件内容语法： url1https://img.shields.io/badge/dynamic/类型?参数 支持的文件类型有： jsontomlxmlyaml 参数沿用静态徽标的参数，并且新增了url参数和query参数，用于指定文件地址和属性名，属性名前使用$.作为前缀。 样式： 写法： html1&lt;object data=&quot;https://img.shields.io/badge/dynamic/json?url=https://github.com/badges/shields/raw/master/package.json&amp;query=$.name&quot;&gt;&lt;/object&gt; 2.2 通过URL获取的响应内容语法： url1https://img.shields.io/endpoint?参数 参数沿用静态徽标的参数，并且新增了url参数，用于请求地址。 请求地址需要响应的内容： schemaVersion：版本，必填，总是设置为1。style：类型，非必填，默认是flat。label：左侧标签内容，可以设置为空字符串，必填。message：右侧标签内容，不能设置为空字符串，必填。labelColor：左侧标签颜色，非必填，默认是grey。color：右侧标签颜色，非必填，默认是lightgrey。namedLogo：LOGO对应名字，非必填，默认不传。logoSvg：LOGO对应的SVG字符串，非必填，默认不传。logoColor：LOGO颜色，非必填，默认不传。isError：非必填，默认否， 请求url得到的响应内容： json1&#123; &quot;schemaVersion&quot;: 1, &quot;label&quot;: &quot;is it monday&quot;, &quot;message&quot;: &quot;no&quot;, &quot;color&quot;: &quot;orange&quot; &#125; 样式： 写法： html1&lt;object data=&quot;https://img.shields.io/endpoint?url=https://shields.redsparr0w.com/2473/monday&quot;&gt;&lt;/object&gt;","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"设置博客主题","slug":"000/001001/006-设置博客主题","date":"2024-02-26T14:39:23.000Z","updated":"2024-03-14T08:09:34.649Z","comments":true,"path":"posts/20240226/223923/","permalink":"https://momashanhe.com/posts/20240226/223923/","excerpt":"摘要：本文主要介绍如何设置博客主题。","text":"摘要：本文主要介绍如何设置博客主题。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 设置主题对于在GitHub上的主题，有四种方式进行设置，四种方式各有优缺点。 1. 下载并解压2. 安装3. 克隆主题作为子模块4. 克隆主题作为子项目下载并解压主题到博客目录的themes目录中。 最简单的方式，特点如下：是否支持通过命令更新主题：否，需要重新下载。本地是否存储主题代码：是，可以修改主题。远程是否存储主题代码：是，保留主题代码。 适用场景：是否需要使用新版主题：否。是否会对主题进行更改：是。安装主题到博客： bash1npm install hexo-theme-themename 最节省空间的方式，特点如下：是否支持通过命令更新主题：是，支持通过npm install命令更新主题，更新前需要在package.json中将版本号改为*。本地是否存储主题代码：否，不可以修改主题。远程是否存储主题代码：否，不保留主题代码。 适用场景：是否需要使用新版主题：是。是否会对主题进行更改：否。通过git submodule add命令将GitHub上的主题项目克隆到本地，作为博客项目的子模块： bash1git submodule add git@github.com:username/hexo-theme-themename.git themes/themename 较为兼容的方式，特点如下：是否支持通过命令更新主题：是，支持通过git pull命令更新主题。本地是否存储主题代码：是，可以修改主题。远程是否存储主题代码：否，不保留主题代码，但是会保留主题子模块链接。 适用场景：是否需要使用新版主题：是。是否会对主题进行更改：是。通过git clone命令将GitHub上的主题项目克隆到本地，作为博客项目的子项目： bash1git clone git@github.com:username/hexo-theme-themename.git themes/themename 建议使用这种方式，特点如下：是否支持通过命令更新主题：是，支持通过git pull命令更新主题。本地是否存储主题代码：是，可以修改主题。远程是否存储主题代码：否，不保留主题代码。 适用场景：是否需要使用新版主题：是。是否会对主题进行更改：是。 打开_config.yml配置文件，设置theme的值为主题中指定的名字。 根据主题说明文件，创建_config.themename.yml主题专用配置文件，按照主题说明文档修改配置即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"在文章中插入本地图片","slug":"000/001001/005-在文章中插入本地图片","date":"2024-02-26T13:15:23.000Z","updated":"2024-03-14T08:09:34.732Z","comments":true,"path":"posts/20240226/211523/","permalink":"https://momashanhe.com/posts/20240226/211523/","excerpt":"摘要：本文主要介绍如何在文章中插入本地图片。","text":"摘要：本文主要介绍如何在文章中插入本地图片。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 插入图片进入博客目录，修改_config.yml配置文件，启动资源目录： _config.yml1post_asset_folder: true 在博客目录打开bash命令行，安装插件： bash1npm install hexo-image-link --save 每次创建博客时，都会创建同名目录，通过相对路径引用同名目录里的图片即可。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"给文章设置模板和永久链接","slug":"000/001001/004-给文章设置模板和永久链接","date":"2024-02-26T12:13:52.000Z","updated":"2024-03-14T08:09:34.628Z","comments":true,"path":"posts/20240226/201352/","permalink":"https://momashanhe.com/posts/20240226/201352/","excerpt":"摘要：本文主要介绍如何给文章设置模板和永久链接。","text":"摘要：本文主要介绍如何给文章设置模板和永久链接。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 模板进入博客目录，打开scaffolds目录，修改post.md模板，这是默认模板： post.md12345678910---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:---摘要：&lt;!-- more --&gt; 进入博客目录，打开scaffolds目录，修改draft.md模板： draft.md123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:--- 2 永久链接修改博客目录下的_config.yml配置文件： _config.yml12url: https://username.com/permalink: posts/:year:month:day/:hour:minute:second/ 把url改为自己的域名即可，这种永久链接的好处是采用文章创建时间里的元素作为永久链接，即使文章路径或者文章标题发生改动，也不会对已生成的链接产生影响。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]},{"title":"将博客源码上传到GitHub","slug":"000/001001/003-将博客源码上传到GitHub","date":"2024-02-26T09:26:37.000Z","updated":"2024-03-16T03:45:48.627Z","comments":true,"path":"posts/20240226/172637/","permalink":"https://momashanhe.com/posts/20240226/172637/","excerpt":"摘要：本文主要介绍如何将博客源码上传到GitHub。","text":"摘要：本文主要介绍如何将博客源码上传到GitHub。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 创建私有源码仓库登录GitHub，创建一个名称为username.source的公共仓库，把username改为GitHub的用户名，下同。 2 创建说明文档和许可证明进入博客目录，创建README.md说明文档，输入对项目的简单介绍，创建LICENSE许可证明，并设置许可类型。 3 同步源码进入博客目录，右键进入bash命令行，执行命令初始化为Git仓库： bash1git init 结果如下： 因为GitHub新的仓库默认分支已经改成了main，但本地还是master，所以执行命令将本地分支改为main： bash1git branch -M main 结果如下： 修改.gitignore配置文件： .gitignore12345678910.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/.deploy_git*/_multiconfig.yml.github*/ 右键进入bash命令行，设置当前目录用户名和邮箱： bash12git config --local user.name usernamegit config --local user.email username@163.com 添加至暂存： bash1git add . 提交更改并注释： bash1git commit -m &quot;init(博客): 初始化博客&quot; 添加远程仓库： bash1git remote add origin git@github.com:username/username.source.git 推送到远程仓库： bash1git push -u origin main","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://momashanhe.com/tags/GitHub/"}]},{"title":"将博客部署到GitHub","slug":"000/001001/002-将博客部署到GitHub","date":"2024-02-26T07:34:29.000Z","updated":"2024-03-16T03:45:48.633Z","comments":true,"path":"posts/20240226/153429/","permalink":"https://momashanhe.com/posts/20240226/153429/","excerpt":"摘要：本文主要介绍如何将博客部署到GitHub。","text":"摘要：本文主要介绍如何将博客部署到GitHub。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 配置GitHub1.1 登录注册并登录GitHub。 1.2 生成SSH公钥打开资源管理器，在地址栏输入C:\\Users\\登录用户\\.ssh并回车进入，查看登录用户目录里有没有.ssh目录： 如果目录存在，说明以前设置过.ssh目录，如果没用了就删掉，如果还有用就需要参考SSH配置多用户，在此先不做介绍了。如果目录不存在，进入上级C:\\Users\\登录用户目录，右键进入bash命令行，执行命令生成SSH秘钥和公钥： bash1ssh-keygen -t rsa -C 个人邮箱 命令说明： -t：指定密钥类型，默认是rsa，可以省略。-C：设置注释文字，一般会设置为个人邮箱。 执行命令后，会提示置生成的秘钥和公钥名称，默认是id_rsa作为名称，回车使用默认名称。继续执行，还会提示设置密码和确认密码，回车设置为空。命令最终执行如下：此时会在登录用户目录里生成.ssh目录，打开id_rsa.pub公钥文件并复制内容。 1.3 配置SSH公钥进入GitHub点击个人头像，选择Settings进入设置页面，在左侧找到SSH and GPG keys设置，在顶部的SSH keys模块中，点击右侧的New SSH key按钮新增配置：在添加配置的页面中，设置Title的配置名称，然后设置Key中的公钥，粘贴刚刚复制的公钥文件内容，然后点击底部的Add SSH key按钮保存配置。 使用ssh -T git@github.com命令测试通过SSH能否连接到GitHub：如果提示确认输入，就按照提示输入yes然后回车即可连接成功，下次在测试就没有这个提示了，同时在.ssh目录中会增加known_hosts的配置文件。 2 部署GitHub2.1 创建仓库登录GitHub，创建一个名称为username.github.io的公共仓库，把username改为GitHub的用户名，下同。 这种仓库是GitHub Pages仓库，一个用户只能创建一个这种仓库，创建后允许用户将仓库发布为一个静态网站，网址就是username.github.io仓库名称。 2.2 安装插件进入博客目录，右键进入bash命令行，安装部署到GitHub上的插件： bash1npm install hexo-deployer-git --save 修改博客目录下的_config.yml配置文件，修改底部的deploy配置项，如果没有找到则自己添加： _config.yml12345678# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: github: url: git@github.com:username/username.github.io.git branch: main 2.3 发布进入博客目录，右键进入bash命令行，执行命令清理博客、生成博客、发布博客： bash123hexo cleanhexo generatehexo deploy 发布后如果提示未知身份：说明需要设置用户名和邮箱。 可以按照提示设置全局用户名和邮箱： bash12git config --global user.name usernamegit config --global user.email username@163.com 然后重新发布。 也可以进入博客目录下的.deploy_git发布目录，右键进入bash命令行，设置发布目录的用户名和邮箱： bash12git config --local user.name usernamegit config --local user.email username@163.com 返回上级博客目录，然后重新发布。 通过GitHub访问博客：https://username.github.io 3 域名解析3.1 域名通过阿里云或者腾讯云，或者其他服务商，都可以购买域名。 3.2 解析打开cmd命令行，输入命令查询IP地址： cmd1ping username.github.io 进入域名解析页面，配置域名解析。新增记录，主机记录为@，记录类型为A，记录值为上面查到的IP地址，TTL使用默认的600即可。新增记录，主机记录为www，记录类型为CNAME，记录值为GitHub访问博客的地址，TTL使用默认的600即可。 3.3 配置进入博客目录下的source目录，新建CNAME文件，注意不要有后缀名，打开后添加域名并保存。 进入仓库页面，点击仓库页面右上角的Settings标签，在左侧菜单栏中找到Pages配置页，找到Custom domain填入域名并保存。将博客重新发布后就可以通过域名访问了。","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://momashanhe.com/tags/GitHub/"}]},{"title":"本地安装Hexo博客","slug":"000/001001/001-本地安装Hexo博客","date":"2024-02-26T03:13:54.000Z","updated":"2024-03-16T03:45:48.486Z","comments":true,"path":"posts/20240226/111354/","permalink":"https://momashanhe.com/posts/20240226/111354/","excerpt":"摘要：本文主要介绍如何下载和安装Hexo。","text":"摘要：本文主要介绍如何下载和安装Hexo。 环境 Windows 10 企业版 LTSC 21H2Node 18.14.0NPM 9.3.1Git 2.37.3Hexo 4.3.1 1 简介Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 官网：https://hexo.io/zh-cn 2 环境2.1 安装Git由于初始化博客目录需要Git支持，并且Hexo的某些命令需要在bash命令行中执行，因此需要安装Git工具。 官网：https://git-scm.com使用最新版安装即可，也可以通过GitHub选择2.37.3版本下载，历史版本下载地址：v2.37.3.windows.1&#x2F;如果GitHub访问速度慢，也可以通过淘宝镜像下载：v2.37.3.windows.1&#x2F; 如果不太了解Git工具，可以使用默认设置安装。安装结束后，右键选择Git Bash Here进入bash命令行：输入git --version命令查看Git的安装版本： 需要注意的是，默认安装的2.37.3版本在初始化本地Git项目的时候，默认创建的分支还是master分支，可以在安装的时候自定义： 2.2 安装NodeHexo基于Node，搭建过程中还需要使用NPM（Node包管理工具，安装Node时默认安装）。 官网：https://nodejs.org/en本文使用的版本不是最新版，是18.14.0版本。下载地址：v18.14.0&#x2F;选择node-v18.14.0-x64.msi下载并安装。 使用默认配置安装结束后，打开cmd命令行，输入npm -v命令和node -v命令查询NPM版本和Node版本： NPM是包管理工具，通过命令将安装包使用的源设置为淘宝镜像，速度会快一些： bash1npm config set registry https://registry.npmmirror.com 使用命令查看安装使用的源： bash1npm config get registry 2.3 安装Hexo在cmd命令行中使用NPM安装Hexo： bash1npm install hexo-cli -g 安装结束后，使用hexo -v命令查看Hexo版本： 3 使用3.1 初始化博客目录在电脑中新建博客目录，右键进入bash命令行，使用命令初始化博客目录： bash1hexo init 结果如下： 3.2 博客预览使用hexo generate命令生成博客内容。也可以简写为hexo g命令。结果如下：使用hexo server命令启动本地预览。也可以简写为hexo s命令。结果如下：根据提示，在浏览器输入地址访问博客：http://localhost:4000/可以看到博客的默认界面： 可以使用Ctrl+C命令停止博客。 3.3 新建文章使用命令创建文章： bash1hexo new test 执行后创建标题为test的文章，在博客名录下的source目录中的_posts目录中会自动新增对应的Markdown文件： 可以通过文本编辑器修改文章，保存后在本地预览： bash1hexo clean &amp;&amp; hexo s 3.4 站点设置修改博客目录下的_config.yml配置文件，修改的Site配置项，修改站点属性。 4 分类和标签4.1 分类进入博客目录，打开bash命令行，添加分类页： bash1hexo new page categories 打开sources/categories/index.md文件，增加分类配置： index.md12345---title: 所有分类date: 2024-02-25 21:45:11type: &quot;categories&quot;--- 使用分类： index.md123---categories: --- 4.2 标签进入博客目录，打开bash命令行，添加标签页： bash1hexo new page tags 打开sources/tags/index.md文件，增加标签配置： index.md12345---title: 所有标签date: 2024-02-25 21:53:29type: &quot;tags&quot;--- 使用标签： index.md123---tags: []---","categories":[{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"}]}],"categories":[{"name":"大前端","slug":"大前端","permalink":"https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"},{"name":"建站技术","slug":"建站技术","permalink":"https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://momashanhe.com/tags/HTML/"},{"name":"Hexo","slug":"Hexo","permalink":"https://momashanhe.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://momashanhe.com/tags/GitHub/"},{"name":"NPM","slug":"NPM","permalink":"https://momashanhe.com/tags/NPM/"},{"name":"PicGo","slug":"PicGo","permalink":"https://momashanhe.com/tags/PicGo/"},{"name":"Vercel","slug":"Vercel","permalink":"https://momashanhe.com/tags/Vercel/"},{"name":"LeanCloud","slug":"LeanCloud","permalink":"https://momashanhe.com/tags/LeanCloud/"},{"name":"Waline","slug":"Waline","permalink":"https://momashanhe.com/tags/Waline/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://momashanhe.com/tags/MongoDB/"},{"name":"Twikoo","slug":"Twikoo","permalink":"https://momashanhe.com/tags/Twikoo/"}]}
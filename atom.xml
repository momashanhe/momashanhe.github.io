<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨码山河</title>
  
  <subtitle>代码改变世界</subtitle>
  <link href="https://momashanhe.com/atom.xml" rel="self"/>
  
  <link href="https://momashanhe.com/"/>
  <updated>2025-03-21T11:02:41.253Z</updated>
  <id>https://momashanhe.com/</id>
  
  <author>
    <name>墨码山河</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>修改Git终端提示样式</title>
    <link href="https://momashanhe.com/posts/20250321/190205/"/>
    <id>https://momashanhe.com/posts/20250321/190205/</id>
    <published>2025-03-21T11:02:05.000Z</published>
    <updated>2025-03-21T11:02:41.253Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：</p><span id="more"></span><p>.bash_profile文件</p><h1 id="获取分支名称"><a href="#获取分支名称" class="headerlink" title="获取分支名称"></a>获取分支名称</h1><p>parse_git_branch() {<br>  git branch 2&gt; &#x2F;dev&#x2F;null | sed -e ‘&#x2F;^[^*]&#x2F;d’ -e ‘s&#x2F;* (.*)&#x2F; (\1)&#x2F;‘<br>}</p><h1 id="设置提示信息"><a href="#设置提示信息" class="headerlink" title="设置提示信息"></a>设置提示信息</h1><h1 id="033-33m-背景色-前景色m字符串-033-00m"><a href="#033-33m-背景色-前景色m字符串-033-00m" class="headerlink" title="[\033[33m]背景色;前景色m字符串[\033[00m]"></a>[\033[33m]背景色;前景色m字符串[\033[00m]</h1><h1 id="前景色-背景色-对应颜色"><a href="#前景色-背景色-对应颜色" class="headerlink" title="前景色  背景色  对应颜色"></a>前景色  背景色  对应颜色</h1><h1 id="30-40-黑色"><a href="#30-40-黑色" class="headerlink" title="30      40      黑色"></a>30      40      黑色</h1><h1 id="31-41-红色"><a href="#31-41-红色" class="headerlink" title="31      41      红色"></a>31      41      红色</h1><h1 id="32-42-绿色"><a href="#32-42-绿色" class="headerlink" title="32      42      绿色"></a>32      42      绿色</h1><h1 id="33-43-黄色"><a href="#33-43-黄色" class="headerlink" title="33      43      黄色"></a>33      43      黄色</h1><h1 id="34-44-蓝色"><a href="#34-44-蓝色" class="headerlink" title="34      44      蓝色"></a>34      44      蓝色</h1><h1 id="35-45-紫红色"><a href="#35-45-紫红色" class="headerlink" title="35      45      紫红色"></a>35      45      紫红色</h1><h1 id="36-46-青蓝色"><a href="#36-46-青蓝色" class="headerlink" title="36      46      青蓝色"></a>36      46      青蓝色</h1><h1 id="37-47-白色"><a href="#37-47-白色" class="headerlink" title="37      47      白色"></a>37      47      白色</h1><h1 id="H-主机完整名称"><a href="#H-主机完整名称" class="headerlink" title="\H 主机完整名称"></a>\H 主机完整名称</h1><h1 id="h-主机首个名称"><a href="#h-主机首个名称" class="headerlink" title="\h 主机首个名称"></a>\h 主机首个名称</h1><h1 id="u-用户名"><a href="#u-用户名" class="headerlink" title="\u 用户名"></a>\u 用户名</h1><h1 id="w-绝对目录"><a href="#w-绝对目录" class="headerlink" title="\w 绝对目录"></a>\w 绝对目录</h1><h1 id="W-当前目录"><a href="#W-当前目录" class="headerlink" title="\W 当前目录"></a>\W 当前目录</h1><h1 id="提示字符，root用户为-，普通用户为"><a href="#提示字符，root用户为-，普通用户为" class="headerlink" title="$ 提示字符，root用户为#，普通用户为$"></a>$ 提示字符，root用户为#，普通用户为$</h1><p>export PS1&#x3D;”[\033[32m]MoMaShanHe@DESKTOP[\033[00m] [\033[33m]\W[\033[00m][\033[36m]$(parse_git_branch)[\033[00m] $ “</p><h1 id="用户-主机-当前目录"><a href="#用户-主机-当前目录" class="headerlink" title="用户@主机 当前目录"></a>用户@主机 当前目录</h1><h1 id="export-PS1-”-033-32m-u-h-033-00m-W-033-32m-parse-git-branch-033-00m-“"><a href="#export-PS1-”-033-32m-u-h-033-00m-W-033-32m-parse-git-branch-033-00m-“" class="headerlink" title="export PS1&#x3D;”[\033[32m]\u@\h[\033[00m] \W[\033[32m]$(parse_git_branch)[\033[00m] $ “"></a>export PS1&#x3D;”[\033[32m]\u@\h[\033[00m] \W[\033[32m]$(parse_git_branch)[\033[00m] $ “</h1><h1 id="当前目录"><a href="#当前目录" class="headerlink" title="当前目录"></a>当前目录</h1><h1 id="export-PS1-”-033-33m-W-033-00m-033-32m-parse-git-branch-033-00m-“"><a href="#export-PS1-”-033-33m-W-033-00m-033-32m-parse-git-branch-033-00m-“" class="headerlink" title="export PS1&#x3D;”[\033[33m]\W[\033[00m][\033[32m]$(parse_git_branch)[\033[00m] $ “"></a>export PS1&#x3D;”[\033[33m]\W[\033[00m][\033[32m]$(parse_git_branch)[\033[00m] $ “</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>操作符</title>
    <link href="https://momashanhe.com/posts/20250321/091553/"/>
    <id>https://momashanhe.com/posts/20250321/091553/</id>
    <published>2025-03-21T01:15:53.000Z</published>
    <updated>2025-03-23T14:09:40.578Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了查询操作符和更新操作符。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MongoDB 6.0.21</p>              </div>            </details><h2 id="1-查询操作符"><a href="#1-查询操作符" class="headerlink" title="1 查询操作符"></a>1 查询操作符</h2><h3 id="1-1-比较查询"><a href="#1-1-比较查询" class="headerlink" title="1.1 比较查询"></a>1.1 比较查询</h3><p>比较查询：</p><table>  <tr>    <th>操作符</th>    <th>描述</th>    <th>示例</th>  </tr>  <tr>    <td><code>$eq</code></td>    <td>等于</td>    <td>      查询age等于25的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $eq: 25 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$ne</code></td>    <td>不等于</td>    <td>      查询age不等于25的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $ne: 25 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$gt</code></td>    <td>大于</td>    <td>      查询age大于25的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $gt: 25 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$lt</code></td>    <td>小于</td>    <td>      查询age小于25的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $lt: 25 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$gte</code></td>    <td>大于等于</td>    <td>      查询age大于等于25的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $gte: 25 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$lte</code></td>    <td>小于等于</td>    <td>      查询age小于等于25的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $lte: 25 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$gte</code></td>    <td>包含</td>    <td>      查询age包含25和35的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $in: [ 25, 35 ] &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$lte</code></td>    <td>不包含</td>    <td>      查询age不包含25和35的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $nin: [ 25, 35 ] &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr></table><h3 id="1-2-逻辑查询"><a href="#1-2-逻辑查询" class="headerlink" title="1.2 逻辑查询"></a>1.2 逻辑查询</h3><p>逻辑查询:</p><table>  <tr>    <th>操作符</th>    <th>描述</th>    <th>示例</th>  </tr>  <tr>    <td><code>$and</code></td>    <td>逻辑与</td>    <td>      查询age等于25且sex为女的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; $and: [</span><br><span class="line">    &#123; age: &#123; $eq: 25 &#125; &#125;,</span><br><span class="line">    &#123; sex: &quot;女&quot; &#125;</span><br><span class="line">  ] &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$or</code></td>    <td>逻辑或</td>    <td>      查询age等于25或sex为女的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; $or: [</span><br><span class="line">    &#123; age: &#123; $eq: 25 &#125; &#125;,</span><br><span class="line">    &#123; sex: &quot;女&quot; &#125;</span><br><span class="line">  ] &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$nor</code></td>    <td>逻辑非或</td>    <td>      查询age不等于25且sex不为女的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; $nor: [</span><br><span class="line">    &#123; age: &#123; $eq: 25 &#125; &#125;,</span><br><span class="line">    &#123; sex: &quot;女&quot; &#125;</span><br><span class="line">  ] &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$not</code></td>    <td>逻辑非</td>    <td>      查询age不等于25的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $not: &#123; $eq: 25 &#125; &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>      等价于：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $ne: 25 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr></table><h3 id="1-3-元素查询"><a href="#1-3-元素查询" class="headerlink" title="1.3 元素查询"></a>1.3 元素查询</h3><p>元素查询：</p><table>  <tr>    <th>操作符</th>    <th>描述</th>    <th>示例</th>  </tr>  <tr>    <td><code>$exists</code></td>    <td>是否存在</td>    <td>      查询包含age字段的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $exists: true &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$type</code></td>    <td>数据类型</td>    <td>      查询age字段类型为整数的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; age: &#123; $type: &quot;int&quot; &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr></table><h3 id="1-4-评估查询"><a href="#1-4-评估查询" class="headerlink" title="1.4 评估查询"></a>1.4 评估查询</h3><p>评估查询：</p><table>  <tr>    <th>操作符</th>    <th>描述</th>    <th>示例</th>  </tr>  <tr>    <td><code>$regex</code></td>    <td>支持正则表达式</td>    <td>      查询address以北京市开头的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; address: &#123; $regex: /^北京市/ &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr></table><h3 id="1-5-数组查询"><a href="#1-5-数组查询" class="headerlink" title="1.5 数组查询"></a>1.5 数组查询</h3><p>数组查询：</p><table>  <tr>    <th>操作符</th>    <th>描述</th>    <th>示例</th>  </tr>  <tr>    <td><code>$all</code></td>    <td>数组中所有元素都满足条件</td>    <td>      查询tags数组中同时包含age和sex的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; tags: &#123; $all: [&quot;age&quot;, &quot;sex&quot;] &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$elemMatch</code></td>    <td>匹配数组中的元素</td>    <td>      查询scores数组中存在大于80的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; scores: &#123; $elemMatch: &#123; $gt: 80 &#125; &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$size</code></td>    <td>数组的大小</td>    <td>      查询book数组大小为2的文档：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(</span><br><span class="line">  &#123; book: &#123; $size: 2 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr></table><h2 id="2-更新操作符"><a href="#2-更新操作符" class="headerlink" title="2 更新操作符"></a>2 更新操作符</h2><h3 id="2-1-字段更新"><a href="#2-1-字段更新" class="headerlink" title="2.1 字段更新"></a>2.1 字段更新</h3><p>字段更新：</p><table>  <tr>    <th>操作符</th>    <th>描述</th>    <th>示例</th>  </tr>  <tr>    <td><code>$rename</code></td>    <td>更新字段名</td>    <td>      将name为张三的location字段名设置为address：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $rename: &#123; &quot;location&quot;: &quot;address&quot; &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$set</code></td>    <td>更新字段值</td>    <td>      将name为张三的age字段值设置为30：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $set: &#123; age: 30 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$unset</code></td>    <td>删除字段</td>    <td>      将name为张三的age字段删除：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $unset: &#123; age: 0 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$inc</code></td>    <td>将字段按指定值相加</td>    <td>      将name为张三的age字段减1：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $inc: &#123; age: -1 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$mul</code></td>    <td>将字段按指定值相乘</td>    <td>      将name为张三的age字段乘2：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $mul: &#123; age: 2 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$min</code></td>    <td>设置最大值，当指定值小于字段值，更新为指定值</td>    <td>      将name为张三的age字段的最大值更新为16：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $min: &#123; age: 16 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$max</code></td>    <td>设置最小值，当指定值大于字段值，更新为指定值</td>    <td>      将name为张三的age字段的最小值更新为18：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $max: &#123; age: 18 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr></table><h3 id="2-2-数组更新"><a href="#2-2-数组更新" class="headerlink" title="2.2 数组更新"></a>2.2 数组更新</h3><p>数组更新：</p><table>  <tr>    <th>操作符</th>    <th>描述</th>    <th>示例</th>  </tr>  <tr>    <td><code>$pop</code></td>    <td>从数组的开头或结尾移除元素，末尾是1，开头是-1</td>    <td>      将name为张三的scores数组移除末尾元素：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $pop: &#123; score: 1 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$push</code></td>    <td>将元素添加到数组的末尾</td>    <td>      将name为张三的scores数组末尾添加100元素：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $push: &#123; score: 100 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$pull</code></td>    <td>从数组中移除所有匹配的元素</td>    <td>      将name为张三的scores数组移除90元素：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $pull: &#123; score: 90 &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr>  <tr>    <td><code>$pullAll</code></td>    <td>从数组中移除所有匹配的元素，支持多个</td>    <td>      将name为张三的scores数组移除70元素和80元素：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $pullAll: &#123; score: [ 70, 80 ] &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>      等价于：      <figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot; &#125;, &#123; $pull: &#123; score: &#123; $in: [ 70, 80 ] &#125; &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>    </td>  </tr></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了查询操作符和更新操作符。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MongoDB" scheme="https://momashanhe.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>基本操作</title>
    <link href="https://momashanhe.com/posts/20250319/120828/"/>
    <id>https://momashanhe.com/posts/20250319/120828/</id>
    <published>2025-03-19T04:08:28.000Z</published>
    <updated>2025-03-23T03:50:32.389Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了常用的操作，包括对数据库和用户的管理，对集合的管理，以及对文档的增删改查。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MongoDB 6.0.21</p>              </div>            </details><h2 id="1-通用命令"><a href="#1-通用命令" class="headerlink" title="1 通用命令"></a>1 通用命令</h2><h3 id="1-1-帮助"><a href="#1-1-帮助" class="headerlink" title="1.1 帮助"></a>1.1 帮助</h3><p>执行<code>show dbs</code>命令查看数据库。</p><p>执行<code>use 数据库</code>命令切换到指定数据库。</p><p>执行<code>show collections</code>命令查看当前数据库的集合。</p><p>执行<code>show users</code>命令查看当前数据库的用户。</p><h3 id="1-2-数据库命令"><a href="#1-2-数据库命令" class="headerlink" title="1.2 数据库命令"></a>1.2 数据库命令</h3><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand(&#123; 数据库命令 &#125;)</span><br><span class="line">db.adminCommand(&#123; 数据库命令 &#125;)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>runCommand针对当前数据库运行命令。</li><li>adminCommand针对admin数据库运行管理命令。</li></ul><p>大部分方法都封装了对应的数据库命令，以方便开发人员使用数据库。</p><h2 id="2-数据库管理"><a href="#2-数据库管理" class="headerlink" title="2 数据库管理"></a>2 数据库管理</h2><h3 id="2-1-显示数据库"><a href="#2-1-显示数据库" class="headerlink" title="2.1 显示数据库"></a>2.1 显示数据库</h3><p>使用<code>show dbs</code>命令查看数据库。</p><h3 id="2-2-切换数据库"><a href="#2-2-切换数据库" class="headerlink" title="2.2 切换数据库"></a>2.2 切换数据库</h3><p>使用<code>use 数据库</code>命令切换到指定数据库。</p><p>使用<code>db</code>命令查看当前数据库。</p><p>允许使用<code>use 数据库</code>进入不存在的数据库，在插入文档后会自动创建数据库和集合。</p><h3 id="2-3-删除数据库"><a href="#2-3-删除数据库" class="headerlink" title="2.3 删除数据库"></a>2.3 删除数据库</h3><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure><h2 id="3-用户管理"><a href="#3-用户管理" class="headerlink" title="3 用户管理"></a>3 用户管理</h2><h3 id="3-1-显示用户"><a href="#3-1-显示用户" class="headerlink" title="3.1 显示用户"></a>3.1 显示用户</h3><p>使用<code>show users</code>命令查看当前数据库的用户。</p><h3 id="3-2-创建用户"><a href="#3-2-创建用户" class="headerlink" title="3.2 创建用户"></a>3.2 创建用户</h3><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;用户名&quot;,</span><br><span class="line">    pwd: &quot;密码&quot;,</span><br><span class="line">    customData: &#123; 用户信息 &#125;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: &quot;角色&quot;, db: &quot;数据库&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>user</td>      <td>字符串</td>      <td>用户的名称。</td>    </tr>    <tr>      <td>pwd</td>      <td>字符串</td>      <td>用户的密码。使用明文字符串表示用户密码，或使用passwordPrompt()方法提示输入用户密码。</td>    </tr>    <tr>      <td>customData</td>      <td>文档</td>      <td>可选。用户信息。此字段可用于存储管理员希望与此特定用户关联的任何数据。</td>    </tr>    <tr>      <td>roles</td>      <td>集合</td>      <td>用户的角色。可以指定一个空数组创建无角色的用户。可以省略数据库，默认为当前数据库。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;xz&quot;,</span><br><span class="line">    pwd: &quot;123456&quot;,</span><br><span class="line">    customData: &#123; name: &quot;校长&quot; &#125;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: &quot;readWrite&quot;, db: &quot;school&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>用户的角色包括内置角色和自定义角色，内置角色如下：</p><table>  <thead>    <tr>      <th>类型</th>      <th>角色</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>数据库用户角色</td>      <td>read</td>      <td>允许用户获取指定数据库的读权限。</td>    </tr>    <tr>      <td>数据库用户角色</td>      <td>readWrite</td>      <td>允许用户获取指定数据库的读写权限。</td>    </tr>    <tr>      <td>数据库管理角色</td>      <td>dbAdmin</td>      <td>允许用户获取指定数据库的管理权限。</td>    </tr>    <tr>      <td>数据库管理角色</td>      <td>userAdmin</td>      <td>允许用户获取指定数据库的用户管理权限。</td>    </tr>    <tr>      <td>数据库管理角色</td>      <td>dbOwner</td>      <td>允许用户对数据库执行任何管理操作。包含readWrite角色、dbAdmin角色、userAdmin角色。</td>    </tr>    <tr>      <td>        集群管理角色<br>        只在admin数据库中可用<br>      </td>      <td>clusterAdmin</td>      <td>提供最大的集群管理访问权限。包含clusterManager角色、clusterMonitor角色、hostManager角色。还提供dropDatabase操作。</td>    </tr>    <tr>      <td>        备份和恢复角色<br>        只在admin数据库中可用<br>      </td>      <td>backup</td>      <td>提供备份数据所需的最低特权。</td>    </tr>    <tr>      <td>        备份和恢复角色<br>        只在admin数据库中可用<br>      </td>      <td>restore</td>      <td>提供数据恢复所需权限。</td>    </tr>    <tr>      <td>        全数据库角色<br>        只在admin数据库中可用，适用于除local和config的数据库<br>      </td>      <td>readAnyDatabase</td>      <td>提供所有数据库的读权限。</td>    </tr>    <tr>      <td>        全数据库角色<br>        只在admin数据库中可用，适用于除local和config的数据库<br>      </td>      <td>readWriteAnyDatabase</td>      <td>提供所有数据库的读写权限。</td>    </tr>    <tr>      <td>        全数据库角色<br>        只在admin数据库中可用，适用于除local和config的数据库<br>      </td>      <td>dbAdminAnyDatabase</td>      <td>提供所有数据库的管理权限。</td>    </tr>    <tr>      <td>        全数据库角色<br>        只在admin数据库中可用，适用于除local和config的数据库<br>      </td>      <td>userAdminAnyDatabase</td>      <td>提供所有数据库的用户管理权限。</td>    </tr>    <tr>      <td>        超级用户角色<br>        只在admin数据库中可用，适用于除local和config的数据库<br>      </td>      <td>root</td>      <td>提供所有权限。</td>    </tr>  </tbody></table><h3 id="3-3-删除用户"><a href="#3-3-删除用户" class="headerlink" title="3.3 删除用户"></a>3.3 删除用户</h3><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropUser(&quot;用户名&quot;)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropUser(&quot;xz&quot;);</span><br></pre></td></tr></table></figure><h3 id="3-4-更新用户"><a href="#3-4-更新用户" class="headerlink" title="3.4 更新用户"></a>3.4 更新用户</h3><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.updateUser(</span><br><span class="line">  &quot;用户名&quot;,</span><br><span class="line">  &#123;</span><br><span class="line">    pwd: &quot;密码&quot;,</span><br><span class="line">    customData: &#123; 用户信息 &#125;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: &quot;角色&quot;, db: &quot;数据库&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>pwd</td>      <td>字符串</td>      <td>用户的密码。使用明文字符串表示用户密码，或使用passwordPrompt()方法提示输入用户密码。</td>    </tr>    <tr>      <td>customData</td>      <td>文档</td>      <td>可选。用户信息。此字段可用于存储管理员希望与此特定用户关联的任何数据。</td>    </tr>    <tr>      <td>roles</td>      <td>集合</td>      <td>用户的角色。可以指定一个空数组创建无角色的用户。可以省略数据库，默认为当前数据库。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.updateUser(</span><br><span class="line">  &quot;xz&quot;,</span><br><span class="line">  &#123;</span><br><span class="line">    pwd: &quot;123456&quot;,</span><br><span class="line">    customData: &#123; name: &quot;校长&quot; &#125;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: &quot;readWrite&quot;, db: &quot;school&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-5-查询用户"><a href="#3-5-查询用户" class="headerlink" title="3.5 查询用户"></a>3.5 查询用户</h3><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getUser(&quot;用户名&quot;)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getUser(&quot;xz&quot;);</span><br></pre></td></tr></table></figure><h3 id="3-6-验证用户"><a href="#3-6-验证用户" class="headerlink" title="3.6 验证用户"></a>3.6 验证用户</h3><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(&quot;用户名&quot;, &quot;密码&quot;)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(&quot;xz&quot;, &quot;123456&quot;);</span><br></pre></td></tr></table></figure><h2 id="4-集合管理"><a href="#4-集合管理" class="headerlink" title="4 集合管理"></a>4 集合管理</h2><h3 id="4-1-显示集合"><a href="#4-1-显示集合" class="headerlink" title="4.1 显示集合"></a>4.1 显示集合</h3><p>执行<code>show collections</code>命令查看当前数据库的集合。</p><h3 id="4-2-创建集合"><a href="#4-2-创建集合" class="headerlink" title="4.2 创建集合"></a>4.2 创建集合</h3><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&quot;集合名&quot;)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&quot;student&quot;);</span><br></pre></td></tr></table></figure><h3 id="4-3-删除集合"><a href="#4-3-删除集合" class="headerlink" title="4.3 删除集合"></a>4.3 删除集合</h3><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.drop()</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.student.drop();</span><br></pre></td></tr></table></figure><h2 id="5-文档管理"><a href="#5-文档管理" class="headerlink" title="5 文档管理"></a>5 文档管理</h2><h3 id="5-1-插入文档"><a href="#5-1-插入文档" class="headerlink" title="5.1 插入文档"></a>5.1 插入文档</h3><h4 id="5-1-1-插入单个文档"><a href="#5-1-1-插入单个文档" class="headerlink" title="5.1.1 插入单个文档"></a>5.1.1 插入单个文档</h4><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.insertOne(document)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>document</td>      <td>文档</td>      <td>要插入的文档。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.student.insertOne(&#123; name: &quot;张三&quot;, sex: &quot;男&quot;, age: 16 &#125;);</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>如果插入的文档不包含<code>_id</code>字段，会默认创建<code>_id</code>字段并分配唯一的<code>ObjectId()</code>值。如果插入的文档包含<code>_id</code>字段，会使用传入的字段，要求该字段必须是唯一值，否则会引发异常。</li><li>插入后会将结果通过<code>acknowledged</code>返回，使用true表示插入成功，使用false表示插入失败。同时将<code>_id</code>字段通过<code>insertedId</code>返回。</li></ul><h4 id="5-1-2-插入多个文档"><a href="#5-1-2-插入多个文档" class="headerlink" title="5.1.2 插入多个文档"></a>5.1.2 插入多个文档</h4><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.insertMany(</span><br><span class="line">  documents,</span><br><span class="line">  &#123; ordered: &quot;是否按顺序插入&quot; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>documents</td>      <td>文档</td>      <td>要插入的文档数组。</td>    </tr>    <tr>      <td>ordered</td>      <td>布尔</td>      <td>可选。指定执行有序插入还是无序插入，默认为true，true表示有序，false表示无序。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.student.insertMany(</span><br><span class="line">  [</span><br><span class="line">    &#123; _id: 1, name: &quot;张三&quot;, sex: &quot;男&quot;, age: 16 &#125;,</span><br><span class="line">    &#123; _id: 2, name: &quot;李四&quot;, sex: &quot;女&quot;, age: 28 &#125;,</span><br><span class="line">    &#123; _id: 3, name: &quot;王五&quot;, sex: &quot;男&quot;, age: 32 &#125;,</span><br><span class="line">    &#123; _id: 4, name: &quot;赵六&quot;, sex: &quot;女&quot;, age: 54 &#125;</span><br><span class="line">  ],</span><br><span class="line">  &#123; ordered: false &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>如果使用有序插入，当插入某个文档失败时，不会继续插入文档。如果使用无序插入，当插入某个文档失败时，会跳过继续插入其他文档。</li><li>每组中的操作次数不得超过数据库的<code>maxWriteBatchSize</code>值，默认值为100000个。该值会显示在<code>hello.maxWriteBatchSize</code>字段中。</li></ul><h3 id="5-2-查询文档"><a href="#5-2-查询文档" class="headerlink" title="5.2 查询文档"></a>5.2 查询文档</h3><h4 id="5-2-1-查询单个文档"><a href="#5-2-1-查询单个文档" class="headerlink" title="5.2.1 查询单个文档"></a>5.2.1 查询单个文档</h4><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.findOne(query)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>query</td>      <td>文档</td>      <td>可选。要查询的文档，如果为空则查询第一个文档，支持通过查询操作符匹配。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.student.findOne(&#123; name: &quot;张三&quot; &#125;);</span><br></pre></td></tr></table></figure><h4 id="5-2-2-查询多个文档"><a href="#5-2-2-查询多个文档" class="headerlink" title="5.2.2 查询多个文档"></a>5.2.2 查询多个文档</h4><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(query)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>query</td>      <td>文档</td>      <td>可选。要查询的文档，如果为空则查询全部文档，支持通过查询操作符匹配。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.student.find(&#123; name: &quot;张三&quot;, sex: &quot;男&quot; &#125;);</span><br></pre></td></tr></table></figure><h3 id="5-3-删除文档"><a href="#5-3-删除文档" class="headerlink" title="5.3 删除文档"></a>5.3 删除文档</h3><h4 id="5-3-1-删除单个文档"><a href="#5-3-1-删除单个文档" class="headerlink" title="5.3.1 删除单个文档"></a>5.3.1 删除单个文档</h4><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.deleteOne(filter)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>filter</td>      <td>文档</td>      <td>要删除的文档，如果为<code>&#123;&#125;</code>则删除第一个文档，支持通过查询操作符匹配。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.student.deleteOne(&#123; name: &quot;张三&quot;, sex: &quot;男&quot; &#125;);</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>删除后会将结果通过<code>acknowledged</code>返回，使用true表示插入成功，使用false表示插入失败。同时将删除个数通过<code>deletedCount</code>返回。</li><li>如果匹配到多个文档，只会删除第一个文档。</li></ul><h4 id="5-3-2-删除多个文档"><a href="#5-3-2-删除多个文档" class="headerlink" title="5.3.2 删除多个文档"></a>5.3.2 删除多个文档</h4><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.deleteMany(filter)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>filter</td>      <td>文档</td>      <td>要删除的文档，如果为<code>&#123;&#125;</code>则删除全部文档，支持通过查询操作符匹配。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.student.deleteMany(&#123; name: &quot;张三&quot;, sex: &quot;男&quot; &#125;);</span><br></pre></td></tr></table></figure><h3 id="5-4-更新文档"><a href="#5-4-更新文档" class="headerlink" title="5.4 更新文档"></a>5.4 更新文档</h3><h4 id="5-4-1-更新单个文档"><a href="#5-4-1-更新单个文档" class="headerlink" title="5.4.1 更新单个文档"></a>5.4.1 更新单个文档</h4><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.updateOne(</span><br><span class="line">  filter,</span><br><span class="line">  update,</span><br><span class="line">  &#123; upsert: &quot;是否插入文档&quot; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>filter</td>      <td>文档</td>      <td>要更新的文档，如果为<code>&#123;&#125;</code>则更新第一个文档，支持通过查询操作符匹配。</td>    </tr>    <tr>      <td>update</td>      <td>文档或管道</td>      <td>要应用更新的修改，只能使用更新操作符或管道。</td>    </tr>    <tr>      <td>upsert</td>      <td>布尔</td>      <td>可选。指定未匹配时是否插入文档，默认为false，false表示不插入，true表示插入。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateOne(</span><br><span class="line">  &#123; name: &quot;张三&quot;, sex: &quot;男&quot; &#125;,</span><br><span class="line">  &#123; $set: &#123; sex: &quot;女&quot; &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>更新后会将结果通过<code>acknowledged</code>返回，使用true表示更新成功，使用false表示更新失败。同时将匹配个数通过<code>matchedCount</code>返回，将更新个数通过<code>modifiedCount</code>返回。</li><li>如果匹配到多个文档，只会更新第一个文档。</li></ul><h4 id="5-4-2-更新多个文档"><a href="#5-4-2-更新多个文档" class="headerlink" title="5.4.2 更新多个文档"></a>5.4.2 更新多个文档</h4><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.updateMany(</span><br><span class="line">  filter,</span><br><span class="line">  update,</span><br><span class="line">  &#123; upsert: &quot;是否插入文档&quot; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>filter</td>      <td>文档</td>      <td>要更新的文档，如果为<code>&#123;&#125;</code>则更新全部文档，支持通过查询操作符匹配。</td>    </tr>    <tr>      <td>update</td>      <td>文档或管道</td>      <td>要应用更新的修改，只能使用更新操作符或管道。</td>    </tr>    <tr>      <td>upsert</td>      <td>布尔</td>      <td>可选。指定未匹配时是否插入文档，默认为false，false表示不插入，true表示插入。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.student.updateMany(</span><br><span class="line">  &#123; name: &quot;张三&quot;, sex: &quot;男&quot; &#125;,</span><br><span class="line">  &#123; $set: &#123; name: &quot;赵六&quot; &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="5-4-3-替换单个文档"><a href="#5-4-3-替换单个文档" class="headerlink" title="5.4.3 替换单个文档"></a>5.4.3 替换单个文档</h4><p>语法：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.replaceOne(</span><br><span class="line">  filter,</span><br><span class="line">  replacement,</span><br><span class="line">  &#123; upsert: &quot;是否插入文档&quot; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>字段：</p><table>  <thead>    <tr>      <th>字段</th>      <th>类型</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>filter</td>      <td>文档</td>      <td>要替换的文档，如果为<code>&#123;&#125;</code>则替换第一个文档，支持通过查询操作符匹配。</td>    </tr>    <tr>      <td>replacement</td>      <td>文档</td>      <td>要应用替换的文档，只能使用文档。</td>    </tr>    <tr>      <td>upsert</td>      <td>布尔</td>      <td>可选。指定未匹配时是否插入文档，默认为false，false表示不插入，true表示插入。</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.student.replaceOne(</span><br><span class="line">  &#123; name: &quot;张三&quot;, sex: &quot;男&quot; &#125;,</span><br><span class="line">  &#123; name: &quot;赵六&quot; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>替换后会将结果通过<code>acknowledged</code>返回，使用true表示替换成功，使用false表示替换失败。同时将匹配个数通过<code>matchedCount</code>返回，将替换个数通过<code>modifiedCount</code>返回。</li><li>如果匹配到多个文档，只会替换第一个文档。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了常用的操作，包括对数据库和用户的管理，对集合的管理，以及对文档的增删改查。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MongoDB" scheme="https://momashanhe.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>安装</title>
    <link href="https://momashanhe.com/posts/20250318/094513/"/>
    <id>https://momashanhe.com/posts/20250318/094513/</id>
    <published>2025-03-18T01:45:13.000Z</published>
    <updated>2025-03-23T03:26:09.134Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了MongoDB的下载和安装，以及在安装后进行配置和开启权限验证。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MongoDB 6.0.21</p>              </div>            </details><h2 id="1-下载和安装"><a href="#1-下载和安装" class="headerlink" title="1 下载和安装"></a>1 下载和安装</h2><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h3><p>官方下载地址：</p><ul><li><a href="https://www.mongodb.com/try/download/community">最新版本</a></li><li><a href="https://www.mongodb.com/try/download/community-edition/releases/archive">历史版本</a></li></ul><h3 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h3><p>建议下载<code>zip</code>版本，在安装目录新建<code>MongoDB</code>目录，将<code>mongodb-windows-x86_64-6.0.21.zip</code>解压到<code>MongoDB</code>目录并重命名为<code>mongodb-6.0.21</code>。</p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h2><h3 id="2-1-数据目录"><a href="#2-1-数据目录" class="headerlink" title="2.1 数据目录"></a>2.1 数据目录</h3><p>在<code>mongodb-6.0.21</code>目录下创建<code>data</code>目录，进入<code>data</code>目录并创建<code>db</code>目录和<code>log</code>目录。</p><p>使用<code>db</code>目录存储数据文件，使用<code>log</code>目录存储日志。</p><h3 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h3><p>在<code>mongodb-6.0.21</code>目录下创建<code>mongod.conf</code>文件：</p><figure class="highlight txt"><figcaption><span>mongod.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># mongod.conf</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  # 进程存储数据目录，对mongod进程有效，对mongos进程无效</span><br><span class="line">  dbPath: D:\Work\MongoDB\mongodb-6.0.21\data</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  # 日志输出目的地，表示输出到日志文件，如果不指定，则会输出到标准输出中</span><br><span class="line">  destination: file</span><br><span class="line">  # 重启后如何记录日志，如果为true则将日志添加到尾部，如果为false则备份日志并创建新文件，默认为false</span><br><span class="line">  logAppend: true</span><br><span class="line">  # 日志路径，启动后自动创建</span><br><span class="line">  path: D:\Work\MongoDB\mongodb-6.0.21\data\log\mongod.log</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  # 设置MongoDB的端口</span><br><span class="line">  port: 27017</span><br><span class="line">  # 设置可以访问的ip地址，多个用逗号分隔</span><br><span class="line">  bindIp: 127.0.0.1</span><br><span class="line">  # 最大连接数</span><br><span class="line">  maxIncomingConnections: 10000</span><br></pre></td></tr></table></figure><h3 id="2-3-服务"><a href="#2-3-服务" class="headerlink" title="2.3 服务"></a>2.3 服务</h3><p>使用管理员身份打开cmd命令行，执行命令安装服务：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc create MongoDB binPath= &quot;D:\Work\MongoDB\mongodb-<span class="number">6</span>.<span class="number">0</span>.<span class="number">21</span>\bin\mongod.exe --service --config=D:\Work\MongoDB\mongodb-<span class="number">6</span>.<span class="number">0</span>.<span class="number">21</span>\mongod.conf&quot; <span class="built_in">start</span>= &quot;auto&quot; Displayname= &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure><p>如果想要删除服务，需要执行命令：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc delete MongoDB</span><br></pre></td></tr></table></figure><p>打开服务，在列表找到刚刚创建的<code>MongoDB</code>服务，右键执行启动。</p><p>创建服务的好处就是可以让服务运行在后台，不需要通过命令行保持运行。</p><h2 id="3-连接工具"><a href="#3-连接工具" class="headerlink" title="3 连接工具"></a>3 连接工具</h2><p>从<code>5.0.0</code>开始，取消了自带的命令行工具。</p><p>因为在命令行编写语句时需要注意换行的问题，所以建议使用其他工具连接数据库。</p><p>官方推荐的工具下载地址：<a href="https://www.mongodb.com/try/download/tools">下载地址</a></p><p>建议使用Navicat工具，兼容其他数据库，使用方便。</p><p>打开Navicat并新建连接：<br><img src="/@image/301001/002-20250323103953.jpg" alt="20250323103953-新建连接"></p><p>点击测试连接提示连接成功，点击确定保存连接。</p><p>双击新建的连接，并点击新建查询，即可编写语句并执行。</p><h2 id="4-权限验证"><a href="#4-权限验证" class="headerlink" title="4 权限验证"></a>4 权限验证</h2><p>在未使用权限验证的情况下任何人都可以访问数据库，存在安全风险，建议通过配置增加权限验证。</p><p>修改<code>mongod.conf</code>配置文件，增加配置：</p><figure class="highlight txt"><figcaption><span>mongod.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">security:</span><br><span class="line">  # 开启强制身份验证，需要配置用户名和密码信息</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><p>修改配置文件后需要重启MongoDB数据库服务。</p><p>使用命令进入admin数据库：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin;</span><br></pre></td></tr></table></figure><p>使用命令创建root用户：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user: &quot;root&quot;, pwd: &quot;123456&quot;, roles: [&quot;root&quot;] &#125;);</span><br></pre></td></tr></table></figure><p>修改连接，将验证方式改为Password表示通过账号密码登录，修改验证数据库为admin，填写账号密码，测试连接并保存。</p><p>重新连接并新建查询，执行查看数据库列表：</p><figure class="highlight plaintext"><figcaption><span>bson</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了MongoDB的下载和安装，以及在安装后进行配置和开启权限验证。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MongoDB" scheme="https://momashanhe.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>简介</title>
    <link href="https://momashanhe.com/posts/20250317/130918/"/>
    <id>https://momashanhe.com/posts/20250317/130918/</id>
    <published>2025-03-17T05:09:18.000Z</published>
    <updated>2025-03-23T01:03:10.572Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了数据库的定义和分类，以及MongoDB数据库的基本知识。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MongoDB 6.0.21</p>              </div>            </details><h2 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1 数据库"></a>1 数据库</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>数据库是按照数据结构来组织、存储和管理数据的仓库。</p><p>程序是在内存中运行的，一旦程序运行结束或者计算机断电，程序运行中的数据都会丢失。所以需要将一些程序运行的数据持久化到硬盘之中，以确保数据的安全性。而数据库就是数据持久化的最佳选择。</p><p>比较简单的数据库就是类似LowDB这种使用文本存储的数据库，使用比较简单，单功能也比较有限。</p><h3 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h3><p>如果按数据模型分类，可以将数据库分为关系型数据库和非关系型数据库。</p><h4 id="1-2-1-关系型数据库"><a href="#1-2-1-关系型数据库" class="headerlink" title="1.2.1 关系型数据库"></a>1.2.1 关系型数据库</h4><p>通常适用SQL（Structured Query Language）表示。</p><p>以表格的形式组织数据，表格之间通过关系相连，使用SQL语言进行数据操作。</p><p>常见的数据库有：MySQL、Oracle、SQL Server、PostgreSQL等等。</p><p>适用于需要复杂查询和事务处理的场景，比如银行系统和企业资源规划系统等等。</p><h4 id="1-2-2-非关系型数据库"><a href="#1-2-2-非关系型数据库" class="headerlink" title="1.2.2 非关系型数据库"></a>1.2.2 非关系型数据库</h4><p>通常使用NoSQL（Not only SQL）表示。</p><p>非关系型数据库根据存储形式不同还可以进一步分类。</p><h5 id="1-2-2-1-键值存储数据库"><a href="#1-2-2-1-键值存储数据库" class="headerlink" title="1.2.2.1 键值存储数据库"></a>1.2.2.1 键值存储数据库</h5><p>以键值对的形式存储数据，键是唯一的，值可以是任意类型的数据。</p><p>常见的数据库有：Redis、Riak。</p><p>适用于需要快速读写操作的场景，比如缓存系统和会话存储。</p><h5 id="1-2-2-2-文档型数据库"><a href="#1-2-2-2-文档型数据库" class="headerlink" title="1.2.2.2 文档型数据库"></a>1.2.2.2 文档型数据库</h5><p>以文档的形式存储数据，文档可以是JSON和XML等格式，每个文档都是独立的。</p><p>常见的数据库有：MongoDB、CouchDB。</p><p>适用于需要灵活的数据结构和快速的读写操作，比如内容管理系统和实时分析系统。</p><h5 id="1-2-2-3-列族数据库"><a href="#1-2-2-3-列族数据库" class="headerlink" title="1.2.2.3 列族数据库"></a>1.2.2.3 列族数据库</h5><p>以列族为单位存储数据，适合存储大量稀疏数据。</p><p>常见的数据库有：HBase、Cassandra。</p><p>适用于需要处理海量数据和高写入速率的场景，如物联网数据存储、日志分析。</p><h5 id="1-2-2-4-图数据库"><a href="#1-2-2-4-图数据库" class="headerlink" title="1.2.2.4 图数据库"></a>1.2.2.4 图数据库</h5><p>以图的形式存储数据，擅长处理实体之间的关系。</p><p>常见的数据库有：Neo4j、OrientDB。</p><p>适用于需要处理复杂关系的数据，如社交网络、知识图谱。</p><h2 id="2-简介"><a href="#2-简介" class="headerlink" title="2 简介"></a>2 简介</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>MongoDB是一种流行的开源文档型数据库，属于NoSQL数据库的一种。它以其灵活的数据模型、高性能和可扩展性而闻名，特别适合处理大量结构化和非结构化数据的应用程序。</p><p>官网网站：</p><ul><li>官网地址：<a href="https://www.mongodb.com/">https://www.mongodb.com/</a></li><li>文档地址：<a href="https://www.mongodb.com/zh-cn/docs/">https://www.mongodb.com/zh-cn/docs/</a></li></ul><h3 id="2-2-原理"><a href="#2-2-原理" class="headerlink" title="2.2 原理"></a>2.2 原理</h3><p>MongoDB使用BSON（Binary JSON）格式存储数据，这种格式是JSON的二进制表示，具有更高的存储效率和处理速度。每个文档都可以包含不同数量和类型的字段，使得数据模型更加灵活。</p><p>在MongoDB中，数据被组织成集合（Collection）和文档（Document）。集合是文档的集合，类似于关系型数据库中的表，但不需要预先定义固定的模式。文档则是数据的基本单位，由键值对组成，类似于JSON对象。</p><p>所有存储在集合中的数据都是BSON格式，BSON是一种类似JSON的二进制形式的存储格式，是Binary JSON的简称。</p><h3 id="2-3-特点"><a href="#2-3-特点" class="headerlink" title="2.3 特点"></a>2.3 特点</h3><ul><li>高可用性：通过复制集（Replica Set）机制，实现数据的自动备份和故障转移。复制集由多个节点组成，包括一个主节点和多个从节点，数据在这些节点之间自动同步。</li><li>模式自由：使用动态模式（Schema-less）架构，同一集合中的文档可拥有不同字段，开发过程中可随时调整结构，减少迁移成本。</li><li>高性能：利用内存映射文件加速数据访问，支持多种索引类型（如复合、全文、地理空间）。</li><li>水平扩展：支持分片（Sharding）技术，允许将数据集拆分成多个部分，每个部分存储在不同的服务器上，从而提高系统的处理能力和存储容量。</li><li>复杂查询：支持复杂的查询表达式和操作符，包括聚合（Aggregation）、文本搜索（Text Search）和地理空间查询（Geospatial Queries）等，使得数据的检索和处理更加方便。</li><li>事务支持：在4.0版本后支持跨文档事务，满足一致性要求较高的场景，但需权衡性能。</li><li>多语言驱动：支持多种编程语言的驱动，比如Ruby、Java、C#、JavaScript、C、C++、PHP、Perl和Python等，方便开发者在不同的编程环境中使用。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了数据库的定义和分类，以及MongoDB数据库的基本知识。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MongoDB" scheme="https://momashanhe.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>LowDB</title>
    <link href="https://momashanhe.com/posts/20250316/124242/"/>
    <id>https://momashanhe.com/posts/20250316/124242/</id>
    <published>2025-03-16T04:42:42.000Z</published>
    <updated>2025-03-21T06:51:50.719Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了什么是LowDB数据库，如何在Node项目中实现对数据的增删改查。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12<br>LowDB 1.0.0</p>              </div>            </details><h2 id="1-初识"><a href="#1-初识" class="headerlink" title="1 初识"></a>1 初识</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>LowDB是一个轻量级的本地JSON数据库，专为Node环境设计。它使用简单的JSON文件作为数据存储，提供了一个方便的API来读写数据。</p><h3 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h3><p>主要特点：</p><ul><li>简单易用：API设计简洁直观，上手容易。</li><li>轻量级：整个库非常小巧，不会给项目增加太多负担。</li><li>灵活性：支持自定义存储适配器，可以轻松切换存储方式。</li><li>Lodash支持：内置Lodash，提供强大的数据操作能力。</li><li>类型安全：提供TypeScript支持，增强代码的可靠性。</li></ul><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h2><p>使用<code>npm install lowdb@1.0.0</code>命令安装。</p><p>因为最新版本需要通过ES模块引入，所以需要安装早起版本以便能通过CommonJS模块引入。</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h2><p>初始化数据库：</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> low = <span class="built_in">require</span>(<span class="string">&#x27;lowdb&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FileSync</span> = <span class="built_in">require</span>(<span class="string">&#x27;lowdb/adapters/FileSync&#x27;</span>);</span><br><span class="line"><span class="comment">// 指定数据文件</span></span><br><span class="line"><span class="keyword">const</span> file = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;db.json&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建同步适配器</span></span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> <span class="title class_">FileSync</span>(file);</span><br><span class="line"><span class="comment">// 创建LowDB实例</span></span><br><span class="line"><span class="keyword">const</span> db = <span class="title function_">low</span>(adapter);</span><br></pre></td></tr></table></figure><p>在命令行执行<code>node app.js</code>命令会在当前目录生成个<code>db.json</code>文件，存储了默认数据：</p><figure class="highlight json"><figcaption><span>db.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;posts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>默认数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">defaults</span>(&#123;<span class="attr">posts</span>: [], <span class="attr">user</span>: &#123;&#125;, <span class="attr">count</span>: <span class="number">0</span> &#125;).<span class="title function_">write</span>();</span><br></pre></td></tr></table></figure><p>写入数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从尾部写入</span></span><br><span class="line">db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">push</span>(&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;天气不错&#x27;</span>&#125;).<span class="title function_">write</span>();</span><br><span class="line"><span class="comment">// 从头部写入</span></span><br><span class="line">db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">unshift</span>(&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;天气不错&#x27;</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;天气不好&#x27;</span>&#125;).<span class="title function_">write</span>();</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除对象属性</span></span><br><span class="line">db.<span class="title function_">get</span>(<span class="string">&#x27;user&#x27;</span>).<span class="title function_">unset</span>(<span class="string">&#x27;name&#x27;</span>).<span class="title function_">write</span>();</span><br><span class="line"><span class="comment">// 删除列表单条或多条</span></span><br><span class="line">db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">remove</span>(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;).<span class="title function_">write</span>();</span><br><span class="line"><span class="comment">// 删除列表所有数据</span></span><br><span class="line">db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">remove</span>().<span class="title function_">write</span>();</span><br></pre></td></tr></table></figure><p>更新数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置对象属性</span></span><br><span class="line">db.<span class="title function_">get</span>(<span class="string">&#x27;user&#x27;</span>).<span class="title function_">set</span>(<span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>).<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>).<span class="title function_">write</span>();</span><br><span class="line"><span class="comment">// 设置列表记录</span></span><br><span class="line">db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">find</span>(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;).<span class="title function_">assign</span>(&#123;<span class="attr">title</span>: <span class="string">&#x27;天气很好&#x27;</span>&#125;).<span class="title function_">write</span>();</span><br></pre></td></tr></table></figure><p>查询单条数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">find</span>(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;).<span class="title function_">value</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// &#123; id: 1, title: &#x27;天气不错&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>查询多条数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">filter</span>(&#123;<span class="attr">title</span>: <span class="string">&#x27;天气不错&#x27;</span>&#125;).<span class="title function_">value</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; id: 2, title: &#x27;天气不错&#x27; &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; id: 1, title: &#x27;天气不错&#x27; &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>查询所有数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">value</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; id: 2, title: &#x27;天气不错&#x27; &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; id: 3, title: &#x27;天气不好&#x27; &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; id: 1, title: &#x27;天气不错&#x27; &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>排序：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">orderBy</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;asc&#x27;</span>).<span class="title function_">value</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; id: 1, title: &#x27;天气很好&#x27; &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; id: 2, title: &#x27;天气不错&#x27; &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; id: 3, title: &#x27;天气不好&#x27; &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>查询数据条数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = db.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">size</span>().<span class="title function_">value</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);<span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了什么是LowDB数据库，如何在Node项目中实现对数据的增删改查。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
    <category term="LowDB" scheme="https://momashanhe.com/tags/LowDB/"/>
    
  </entry>
  
  <entry>
    <title>Express</title>
    <link href="https://momashanhe.com/posts/20250312/140523/"/>
    <id>https://momashanhe.com/posts/20250312/140523/</id>
    <published>2025-03-12T06:05:23.000Z</published>
    <updated>2025-03-21T16:55:11.171Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Express框架，包括安装和简单使用，以及如何防盗链和使用模板引擎渲染页面等等。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12<br>Express 4.21.2<br>EJS 3.1.10<br>Formidable 3.5.2</p>              </div>            </details><h2 id="1-初识"><a href="#1-初识" class="headerlink" title="1 初识"></a>1 初识</h2><p>Express是一个基于Node平台的极简且灵活的Web应用框架，它提供了强大且丰富的功能，如路由定义、中间件使用、静态文件服务等，帮助开发者快速构建Web应用和API接口。</p><p>官方网址：<a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h2><p>创建项目目录并使用<code>npm init</code>命令初始化。</p><p>使用<code>npm install express</code>命令安装Express框架。</p><p>在项目根目录创建<code>app.js</code>文件：</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在命令行执行<code>node app.js</code>命令启动服务，在浏览器访问<code>http://127.0.0.1:3000/</code>请求服务。</p><h2 id="3-路由"><a href="#3-路由" class="headerlink" title="3 路由"></a>3 路由</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>路由是指根据不同的URL路径和请求方法，将请求映射到相应的处理函数。</p><p>在Express中，路由定义是应用的核心部分，它决定了如何响应客户端的请求。</p><h3 id="3-2-初体验"><a href="#3-2-初体验" class="headerlink" title="3.2 初体验"></a>3.2 初体验</h3><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">method</span>(path, handler)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>app：是Express的一个实例。</li><li>method：小写的请求方法。</li><li>path：服务器上的路径。</li><li>handler：路由匹配时执行的函数。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建get默认路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建get路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建post路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建公共路由，允许所有请求方法</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;search&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 匹配所有路由规则</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-3-路由参数"><a href="#3-3-路由参数" class="headerlink" title="3.3 路由参数"></a>3.3 路由参数</h3><p>路由参数是指在定义路由时，在路径中指定的动态部分，用于捕获URL中的特定值。这些参数可以被路由处理函数访问，用于根据动态值生成响应。</p><p>路由参数在路径中以<code>:</code>开头，后面跟参数名称，用来获取URL中对应位置的数据。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [&#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;, &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;];</span><br><span class="line"><span class="comment">// 路由参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/search/:id/:name&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>);</span><br><span class="line">  <span class="comment">// 获取路由参数</span></span><br><span class="line">  <span class="keyword">let</span> params = req.<span class="property">params</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;路由参数: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params));</span><br><span class="line">  <span class="comment">// 根据路由参数查询数据</span></span><br><span class="line">  <span class="keyword">let</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">id</span> == params.<span class="property">id</span> &amp;&amp; user.<span class="property">name</span> == params.<span class="property">name</span>);</span><br><span class="line">  <span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询用户: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查无此人&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;查无此人&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在浏览器访问<code>http://127.0.0.1:3000/search/1/张三</code>请求服务，控制台信息：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">路由参数: &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br><span class="line">查询用户: &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-优化请求参数"><a href="#3-4-优化请求参数" class="headerlink" title="3.4 优化请求参数"></a>3.4 优化请求参数</h3><p>在原生<code>http</code>模块的基础上增加了获取请求信息的方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得请求协议类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">protocol</span>);</span><br><span class="line"><span class="comment">// 获取请求URL中的路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">path</span>);</span><br><span class="line"><span class="comment">// 获得请求URL中的查询字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line"><span class="comment">// 获得请求头的数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="title function_">get</span>(<span class="string">&#x27;host&#x27;</span>));</span><br><span class="line"><span class="comment">// 获得请求路由参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>);</span><br></pre></td></tr></table></figure><h3 id="3-5-优化响应参数"><a href="#3-5-优化响应参数" class="headerlink" title="3.5 优化响应参数"></a>3.5 优化响应参数</h3><p>在原生<code>http</code>模块的基础上增加了设置响应内容的方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置响应状态码，默认是200</span></span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>);</span><br><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">res.<span class="title function_">set</span>(<span class="string">&#x27;Content-Test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置响应体，无需设置UTF-8中文也不会乱码</span></span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;搜索&#x27;</span>);</span><br></pre></td></tr></table></figure><p>也支持支持链式调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时设置响应状态码、响应头、响应体</span></span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">set</span>(<span class="string">&#x27;Content-Test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>).<span class="title function_">send</span>(<span class="string">&#x27;搜索&#x27;</span>);</span><br></pre></td></tr></table></figure><p>不能同时使用Node原生方式和Express新增方式返回响应。</p><p>除了使用<code>send</code>方法，还支持其他响应设置：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取路由参数</span></span><br><span class="line"><span class="keyword">let</span> params = req.<span class="property">params</span>;</span><br><span class="line"><span class="comment">// 根据路由参数设置响应</span></span><br><span class="line"><span class="keyword">switch</span> (params.<span class="property">type</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;redirect&#x27;</span>:</span><br><span class="line">    <span class="comment">// 设置重定向</span></span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;download&#x27;</span>:</span><br><span class="line">    <span class="comment">// 设置下载</span></span><br><span class="line">    res.<span class="title function_">download</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;index.html&#x27;</span>));</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">    <span class="comment">// 设置JSON</span></span><br><span class="line">    res.<span class="title function_">json</span>(&#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">    <span class="comment">// 设置文件，根据文件后缀自动设置MIME类型</span></span><br><span class="line">    res.<span class="title function_">sendFile</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;index.html&#x27;</span>));</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="comment">// 设置默认方式</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;不支持的响应类型&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-中间件"><a href="#4-中间件" class="headerlink" title="4 中间件"></a>4 中间件</h2><h3 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h3><p>中间件是一种回调函数，可以访问请求对象、响应对象以及指向下一个中间件。</p><p>中间件用于执行各种任务，如日志记录、身份验证、数据解析等。</p><h3 id="4-2-分类"><a href="#4-2-分类" class="headerlink" title="4.2 分类"></a>4.2 分类</h3><p>按照使用位置，可以分为全局中间件和路由中间件：</p><ul><li>全局中间件：定义在应用里，对所有路由生效。</li><li>路由中间件：定义在路由上，对当前路由生效。</li></ul><p>按照处理类型，可以分为静态中间件和动态中间件：</p><ul><li>静态中间件：对静态资源生效，静态中间件一般都是全局中间件。</li><li>动态中间件：对非静态的资源生效。</li></ul><p>按照创建类型，可以分为自定义中间件和内置中间件：</p><ul><li>内置中间件：内置的中间件，比如静态中间件。</li><li>自定义中间件：自定义或者第三方创建的中间件。</li></ul><h3 id="4-3-使用"><a href="#4-3-使用" class="headerlink" title="4.3 使用"></a>4.3 使用</h3><h4 id="4-3-1-全局中间件"><a href="#4-3-1-全局中间件" class="headerlink" title="4.3.1 全局中间件"></a>4.3.1 全局中间件</h4><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 创建方法作为中间件，接收参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">operateLog</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 记录日志</span></span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>();</span><br><span class="line">  <span class="keyword">let</span> path = req.<span class="property">path</span>.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`操作日志: <span class="subst">$&#123;date&#125;</span> <span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 继续执行后续的中间件和路由</span></span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用方法作为中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(operateLog);</span><br><span class="line"><span class="comment">// 新增操作</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/insert&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;新增成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 查询操作</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/select&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;查询成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-3-2-路由中间件"><a href="#4-3-2-路由中间件" class="headerlink" title="4.3.2 路由中间件"></a>4.3.2 路由中间件</h4><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 创建方法作为中间件，接收参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertLog</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 记录日志</span></span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>();</span><br><span class="line">  <span class="keyword">let</span> path = req.<span class="property">path</span>.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新增日志: <span class="subst">$&#123;date&#125;</span> <span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 继续执行后续的中间件和路由</span></span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增操作，调用方法作为路由中间件</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/insert&#x27;</span>, insertLog, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;新增成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 查询操作</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/select&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;查询成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-3-3-静态中间件"><a href="#4-3-3-静态中间件" class="headerlink" title="4.3.3 静态中间件"></a>4.3.3 静态中间件</h4><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 使用内置的static()方法作为中间件，指定静态文件目录</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>).<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;home&#x27;</span>)));</span><br><span class="line"><span class="comment">// 其他请求</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;处理成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果访问的是静态文件目录的文件资源，会通过静态中间件找到文件并返回。如果访问的是其他资源，会判断其他路由并返回。</p><p>在浏览器访问<code>http://127.0.0.1:3000/</code>默认会在静态资源目录寻找<code>index.html</code>文件，所以可以将<code>index.html</code>文件作为首页。</p><h4 id="4-3-4-组合中间件"><a href="#4-3-4-组合中间件" class="headerlink" title="4.3.4 组合中间件"></a>4.3.4 组合中间件</h4><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源使用静态中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>).<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;home&#x27;</span>)));</span><br><span class="line"><span class="comment">// 创建自定义中间件</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">check</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">password</span> == <span class="number">123456</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;密码验证失败&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他请求使用自定义中间件</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, check, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;处理成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>组合匹配的情况下，按照代码顺序匹配路由。</p><h3 id="4-4-解析请求体"><a href="#4-4-解析请求体" class="headerlink" title="4.4 解析请求体"></a>4.4 解析请求体</h3><p>支持两种方式解析请求体：</p><ul><li>使用<code>express.urlencoded(&#123;extended: false&#125;)</code>获得解析<code>application/x-www-form-urlencoded</code>格式请求体的中间件。</li><li>使用<code>express.json()</code>获得解析<code>application/json</code>格式请求体的中间件。</li></ul><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 使用中间件解析请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">// 解析后会在req的body中添加请求数据</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;处理成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-5-模块化"><a href="#4-5-模块化" class="headerlink" title="4.5 模块化"></a>4.5 模块化</h3><p>将路由分成多个模块，统一进行导入和使用。</p><p>示例：</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 导入路由器模块</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;routes/userRouter.js&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> adminRouter = <span class="built_in">require</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;routes/adminRouter.js&#x27;</span>));</span><br><span class="line"><span class="comment">// 设置全局中间件，挂载路由器</span></span><br><span class="line">app.<span class="title function_">use</span>(userRouter);</span><br><span class="line">app.<span class="title function_">use</span>(adminRouter);</span><br><span class="line"><span class="comment">// 处理业务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;处理成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>编写<code>userRouter.js</code>文件，示例：</p><figure class="highlight js"><figcaption><span>userRouter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="comment">// 处理业务</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;登录&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 暴露路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>编写<code>adminRouter.js</code>文件，示例：</p><figure class="highlight js"><figcaption><span>adminRouter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="comment">// 处理业务</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/setting&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;设置&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 暴露路由</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>在挂载路由器模块的时候，如果该模块拥有共同访问前缀，可以在挂载的时候进行设置：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置全局中间件，挂载路由器，使用前缀</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user&#x27;</span>, userRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/admin&#x27;</span>, adminRouter);</span><br></pre></td></tr></table></figure><p>使用前缀后，访问的时候需要拼接前缀访问。</p><h3 id="4-6-错误处理"><a href="#4-6-错误处理" class="headerlink" title="4.6 错误处理"></a>4.6 错误处理</h3><p>在Express中，路由的回调方法中除了可以传入<code>req</code>对象和<code>res</code>对象，还支持传入<code>next</code>方法，使用<code>next</code>方法处理路由错误。</p><h4 id="4-6-1-异步代码错误"><a href="#4-6-1-异步代码错误" class="headerlink" title="4.6.1 异步代码错误"></a>4.6.1 异步代码错误</h4><p>异步代码中的错误需要使用<code>next</code>方法手动处理，默认会将请求挂起直至超时：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 处理请求，传入next处理错误</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/read&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 使用next将错误返回前端并打印到控制台</span></span><br><span class="line">      <span class="title function_">next</span>(err);</span><br><span class="line">      <span class="comment">// 避免执行后续逻辑</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-6-2-同步代码错误"><a href="#4-6-2-同步代码错误" class="headerlink" title="4.6.2 同步代码错误"></a>4.6.2 同步代码错误</h4><p>同步代码中发生的错误不需要手动处理，默认会将错误返回前端并打印到控制台：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 处理请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/read&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./info.txt&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也可以手动捕获错误并使用<code>next</code>方法处理错误：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 处理请求，传入next处理错误</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/read&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 使用try-catch捕获错误</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./info.txt&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 使用next将错误返回前端并打印到控制台</span></span><br><span class="line">    <span class="title function_">next</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-6-3-错误处理中间件"><a href="#4-6-3-错误处理中间件" class="headerlink" title="4.6.3 错误处理中间件"></a>4.6.3 错误处理中间件</h4><p>错误处理中间件需要四个参数，三个参数的中间件将被解释为常规中间件，无法处理错误。</p><p>在路由方法中或者在常规中间件中如果使用<code>next</code>方法处理了错误，会忽略之后的常规中间件，只调用错误处理中间件。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">error</span>: <span class="string">&#x27;服务器内部错误&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: err.<span class="property">message</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意要让错误处理中间件最后执行：</p><ul><li>对于全局中间件来说，根据从上到下的执行规则，要将错误处理中间件写在最下面，保证经过所有路由后再执行错误处理中间件。</li><li>对于局部中间件来说，根据从左到右的执行规则，要将错误处理中间件挂载到路由链的末尾，保证最后执行。</li></ul><h2 id="5-防盗链"><a href="#5-防盗链" class="headerlink" title="5 防盗链"></a>5 防盗链</h2><p>为了防止外部网站盗用网站资源，可以对网站的资源做防盗链处理，防止直接复制图片地址进行下载。</p><p>请求头里的<code>referer</code>参数会携带当前域名和协议及其端口进行请求，根据这个特点就可以进行防盗链处理。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 拦截列表</span></span><br><span class="line"><span class="keyword">const</span> extArr = [<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.gif&#x27;</span>, <span class="string">&#x27;bmp&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> urlArr = [<span class="string">&#x27;127.0.0.1&#x27;</span>];</span><br><span class="line"><span class="comment">// 使用中间件防盗链</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断是否属于资源文件</span></span><br><span class="line">  <span class="keyword">if</span> (!extArr.<span class="title function_">includes</span>(path.<span class="title function_">extname</span>(req.<span class="property">url</span>))) &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获得referer参数</span></span><br><span class="line">  <span class="keyword">const</span> referer = req.<span class="title function_">get</span>(<span class="string">&#x27;referer&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (referer) &#123;</span><br><span class="line">    <span class="comment">// 如果存在referer参数，判断referer的host是否为本机</span></span><br><span class="line">    <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(referer);</span><br><span class="line">    <span class="keyword">if</span> (urlArr.<span class="title function_">includes</span>(url.<span class="property">hostname</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不存在referer参数，判断accept参数是否以image起始</span></span><br><span class="line">    <span class="keyword">const</span> accept = req.<span class="title function_">get</span>(<span class="string">&#x27;accept&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (accept &amp;&amp; !accept.<span class="title function_">startsWith</span>(<span class="string">&#x27;image&#x27;</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;本资源涉嫌盗链，请访问原网站&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 使用中间件处理静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;home&#x27;</span>)));</span><br><span class="line"><span class="comment">// 使用路由处理动态数据</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;处理成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-模板引擎"><a href="#6-模板引擎" class="headerlink" title="6 模板引擎"></a>6 模板引擎</h2><h3 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h3><p>模板引擎是分离用户界面和业务数据的一种技术，可以将后端的JS文件和前端的HTML文件结合起来，生成最终的网页或视图，发送给客户端。</p><p>模板引擎用于将前端和后端分离，但现在已经能够通过其他技术做到分离了，所以模版引擎用得较少了。</p><p>Express支持多种常用的模板引擎，以下是几种常见的模板引擎及其特点：</p><ul><li>EJS（Embedded JavaScript）：EJS使用纯JS语法作为模板语言，易于上手和学习，支持逻辑控制和模板继承等功能。</li><li>Pug（原名Jade）：Pug是一种类似于缩进的模板语言，使用简洁的语法来定义HTML结构，减少了标签的书写，适合编写简洁和易读的模板。</li><li>Handlebars：Handlebars提供了灵活的模板语法，支持条件判断、循环、局部块等功能，适合构建复杂的模板结构。</li></ul><h3 id="6-2-EJS"><a href="#6-2-EJS" class="headerlink" title="6.2 EJS"></a>6.2 EJS</h3><h4 id="6-2-1-安装"><a href="#6-2-1-安装" class="headerlink" title="6.2.1 安装"></a>6.2.1 安装</h4><p>官网：</p><ul><li><a href="https://ejs.co/">英文官方</a></li><li><a href="https://ejs.bootcss.com/">中文</a></li></ul><p>使用<code>npm install ejs</code>命令安装。</p><h4 id="6-2-2-使用"><a href="#6-2-2-使用" class="headerlink" title="6.2.2 使用"></a>6.2.2 使用</h4><p>创建<code>views</code>目录存放模板文件，并在<code>views</code>目录中创建<code>welcome.ejs</code>模板文件：</p><figure class="highlight plaintext"><figcaption><span>welcome.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;p&gt;欢迎 &lt;%= user %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;课程：&lt;/p&gt;</span><br><span class="line">  &lt;% if (classes &amp;&amp; classes.length &gt; 0) &#123; %&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;% for (item of classes) &#123; %&gt;</span><br><span class="line">    &lt;li&gt;&lt;%= item %&gt;&lt;/p&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 设置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置模板文件目录</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"><span class="comment">// 处理业务</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/welcome&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// 读取数据</span></span><br><span class="line">  <span class="keyword">let</span> data = &#123;<span class="attr">user</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">classes</span>:[<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]&#125;;</span><br><span class="line">  <span class="comment">// 渲染数据</span></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;welcome&#x27;</span>, data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在浏览器访问<code>http://127.0.0.1:3000/welcome</code>会看到渲染后的页面。</p><h2 id="7-文件上传"><a href="#7-文件上传" class="headerlink" title="7 文件上传"></a>7 文件上传</h2><h3 id="7-1-安装"><a href="#7-1-安装" class="headerlink" title="7.1 安装"></a>7.1 安装</h3><p>使用<code>npm install formidable</code>命令安装。</p><h3 id="7-2-使用"><a href="#7-2-使用" class="headerlink" title="7.2 使用"></a>7.2 使用</h3><p>使用<code>formidable</code>的<code>formidable</code>方法创建表单对象并指定文件存储位置，然后使用表单对象的<code>parse</code>方法解析上传文件，得到存储的地址并返回前端。</p><p>示例：</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 设置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置模板文件目录</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"><span class="comment">// 模板文件路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/info&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 文件上传路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/info&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 创建表单对象</span></span><br><span class="line">  <span class="keyword">const</span> form = formidable.<span class="title function_">formidable</span>(&#123;</span><br><span class="line">    <span class="comment">// 文件保存路径</span></span><br><span class="line">    <span class="attr">uploadDir</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>),</span><br><span class="line">    <span class="comment">// 保留文件扩展名</span></span><br><span class="line">    <span class="attr">keepExtensions</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 过滤器</span></span><br><span class="line">    <span class="attr">filter</span>: <span class="function">(<span class="params">&#123;name, mimetype&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 只允许图片类型</span></span><br><span class="line">      <span class="keyword">return</span> mimetype &amp;&amp; mimetype.<span class="title function_">includes</span>(<span class="string">&#x27;image&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 使用表单对象解析上传文件</span></span><br><span class="line">  form.<span class="title function_">parse</span>(req, <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="title function_">next</span>(err);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解析上传文件</span></span><br><span class="line">    <span class="keyword">let</span> urls = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">entries</span>(files).<span class="title function_">map</span>(</span><br><span class="line">        <span class="function">(<span class="params">[name, value]</span>) =&gt;</span> [name, value.<span class="title function_">map</span>(<span class="function"><span class="params">file</span> =&gt;</span> <span class="string">`/uploads/<span class="subst">$&#123;file.newFilename&#125;</span>`</span>)]</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 打印并返回</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fields);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(urls);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;fields, urls&#125;));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>views</code>目录中创建<code>info.ejs</code>模板文件：</p><figure class="highlight plaintext"><figcaption><span>info.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;form action=&quot;/info&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    居住地：&lt;input type=&quot;text&quot; name=&quot;address&quot;&gt;&lt;br&gt;</span><br><span class="line">    头像：&lt;input type=&quot;file&quot; name=&quot;portrait&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="8-快速构建"><a href="#8-快速构建" class="headerlink" title="8 快速构建"></a>8 快速构建</h2><p>使用<code>npm install express-generator -g</code>命令全局安装构建工具。</p><p>安装后可以执行<code>express -h</code>命令查看帮助。</p><p>使用<code>express -e 目录名</code>设置构建项目的目录。</p><p>进入目录后执行<code>npm install</code>命令重新安装项目所需要的依赖。</p><p>查看<code>package.json</code>文件查看命令，启动项目。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Express框架，包括安装和简单使用，以及如何防盗链和使用模板引擎渲染页面等等。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
    <category term="Express" scheme="https://momashanhe.com/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>网络通信</title>
    <link href="https://momashanhe.com/posts/20250310/151012/"/>
    <id>https://momashanhe.com/posts/20250310/151012/</id>
    <published>2025-03-10T07:10:12.000Z</published>
    <updated>2025-03-21T16:50:43.380Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要解释了网络通信的背景知识，以及如何在Node项目中使用网络通信功能。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><h3 id="1-1-网络通信"><a href="#1-1-网络通信" class="headerlink" title="1.1 网络通信"></a>1.1 网络通信</h3><p>网络通信就是在两个或两个以上的设备之间传输数据。</p><p>计算机网络将分布在不同地理区域的计算机与外部设备连成一个巨大的网络系统，从而使众多的计算机可以方便地互相传递信息。</p><p>实现网络通信需要解决两个问题：</p><ol><li>如何准确地定位网络上一台或多台主机，如何定位主机上的特定的应用。</li><li>找到主机后如何可靠高效地进行数据传输。</li></ol><p>解决办法：</p><ol><li>使用IP地址和端口号识别网络上的每个设备。</li><li>使用网络通讯协议保证设备之间数据传输的安全可靠。</li></ol><p>说明：</p><ul><li>IP地址：网络设备唯一的数字标识，解决了设备在网络上的识别问题。</li><li>域名：为了方便记忆IP地址而创建的概念，一个IP地址可以对应多个域名，一个域名只能对应一个IP地址。</li><li>域名解析服务（DNS，Domain Name Service）：在实际传输数据前将域名解析为IP地址的功能。</li><li>域名解析服务器（DNS，Domain Name Server）：实现域名解析的服务器，当用户在浏览器输入域名时，浏览器首先通过DNS服务器将域名转换为IP地址，然后在浏览器根据IP地址进行实际的数据传输。</li><li>端口：计算机上每个应用进行网络通信的唯一标识，解决了应用在计算机上的识别问题。</li><li>网络通讯协议：规定了网络上的设备传输数据的格式。</li></ul><h3 id="1-2-网络模型"><a href="#1-2-网络模型" class="headerlink" title="1.2 网络模型"></a>1.2 网络模型</h3><p>网络模型规定了网络上的计算机之间以何种规则进行通信。</p><p>常见的网络模型对比如下：</p><table>  <thead>    <tr>      <th>OSI七层网络模型</th>      <th>TCP/IP四层网络模型</th>      <th>TCP/IP五层网络模型</th>      <th>网络协议</th>      <th>工作设备</th>    </tr>  </thead>  <tbody>    <tr>      <td>应用层</td>      <td rowspan="3">应用层</td>      <td rowspan="3">应用层</td>      <td rowspan="3">HTTP HTTPS FTP SMTP POP3</td>      <td rowspan="3">计算机及应用</td>    </tr>    <tr>      <td>表示层</td>    </tr>    <tr>      <td>会话层</td>    </tr>    <tr>      <td>传输层</td>      <td>传输层</td>      <td>传输层</td>      <td>TCP UDP</td>      <td>四层交换机 四层路由器</td>    </tr>    <tr>      <td>网络层</td>      <td>网络层</td>      <td>网络层</td>      <td>IP ICMP ARP RARP</td>      <td>三层交换机 路由器 网关</td>    </tr>    <tr>      <td>数据链路层</td>      <td rowspan="2">网络接口层</td>      <td>数据链路层</td>      <td>Ethernet PPP</td>      <td>交换机 网桥</td>    </tr>    <tr>      <td>物理层</td>      <td>物理层</td>      <td>USB</td>      <td>中继器 集线器</td>    </tr>  </tbody></table><h3 id="1-3-HTTP协议"><a href="#1-3-HTTP协议" class="headerlink" title="1.3 HTTP协议"></a>1.3 HTTP协议</h3><p>HTTP全称为Hyper Text Transport Protocol，中文名称为超文本传输协议。</p><p>HTTP是一种基于TCP&#x2F;IP的应用层通信协议，协议详细规定了浏览器和万维网服务器之间互相通信的规则。</p><p>协议中主要规定了两个方面的内容：</p><ul><li>客户端：用来向服务器发送数据，可以将发送的数据称为请求报文。</li><li>服务端：向客户端返回数据，可以将返回的数据称为响应报文。</li></ul><h3 id="1-4-请求报文"><a href="#1-4-请求报文" class="headerlink" title="1.4 请求报文"></a>1.4 请求报文</h3><p>请求报文是客户端向服务器发送的请求信息，用于在客户端和服务器之间进行通信，是HTTP协议的重要组成部分。</p><p>组成部分：</p><ol><li>请求行：包含请求方法、请求的资源路径和HTTP协议版本。</li><li>请求头：包含客户端发送给服务器的额外信息，如客户端类型、接受的媒体类型等。</li><li>空行：用于分隔请求头和请求体。</li><li>请求体：可选部分，用于包含要发送给服务器的数据，如表单数据、JSON数据等。</li></ol><p>示例：</p><figure class="highlight txt"><figcaption><span>txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /login HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class="line">Accept: text/html,application/xhtml+xml</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 29</span><br><span class="line"></span><br><span class="line">username=JohnDoe&amp;password=12345</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>请求行<code>POST /login HTTP/1.1</code>由三部分组成：</li></ol><ul><li><code>POST</code>是请求方法，表示以何种方法请求获取指定的资源，比如GET&#x2F;POST&#x2F;PUT&#x2F;DELETE等。</li><li><code>/login</code>是URL统一资源定位符，表示请求资源的位置。</li><li><code>HTTP/1.1</code>是协议版本，表示使用的协议版本。</li></ul><ol start="2"><li>请求头：</li></ol><ul><li>Host：表示请求的主机名，即服务器的域名。</li><li>User-Agent：表示客户端的用户代理信息，包括浏览器类型、版本、操作系统等，用于服务器识别客户端的环境。</li><li>Accept：表示客户端可以接受的媒体类型。</li><li>Accept-Language：表示客户端可以接受的语言。</li><li>Accept-Encoding：表示客户端可以接受的编码方式。</li><li>Connection：表示客户端希望在请求完成后的连接方式。使用keep-alive表示保持连接，使用close表示关闭连接。</li><li>Content-Type：表示请求体中的数据类型是表单数据。</li><li>Content-Length：表示请求体的长度，使用字节作为单位。</li></ul><ol start="3"><li>空行：</li></ol><ul><li>分隔请求头和请求体。</li></ul><ol start="4"><li>请求体：</li></ol><ul><li>如果是GET请求，通常不包含请求体。如果是POST或PUT请求，可能会包含表单数据、JSON数据等，用于向服务器提交信息。</li></ul><p>常见的请求方法：</p><table>  <thead>    <tr>      <th>请求方法</th>      <th>功能</th>      <th>传参位置</th>      <th>安全性</th>      <th>使用场景</th>    </tr>  </thead>  <tbody>    <tr>      <td>GET</td>      <td>获取资源</td>      <td>参数在URL中</td>      <td>较低</td>      <td>获取数据，如搜索用户</td>    </tr>    <tr>      <td>POST</td>      <td>提交数据创建或更新资源</td>      <td>参数在请求体中</td>      <td>较高</td>      <td>提交数据，如表单提交用户信息</td>    </tr>    <tr>      <td>PUT</td>      <td>上传全部数据更新资源</td>      <td>参数在请求体中</td>      <td>较高</td>      <td>更新整个资源，如更新用户信息</td>    </tr>    <tr>      <td>DELETE</td>      <td>删除资源</td>      <td>参数在URL中或请求体中</td>      <td>较低</td>      <td>删除资源，如删除用户</td>    </tr>  </tbody></table><p>传参限制：</p><ul><li>如果是在URL传参，受URL长度限制，参数长度最大为2K。</li><li>如果是在请求体传参，参数长度没有限制，但长度过长会受网速影响导致页面加载异常。</li></ul><h3 id="1-5-响应报文"><a href="#1-5-响应报文" class="headerlink" title="1.5 响应报文"></a>1.5 响应报文</h3><p>响应报文是服务器在接收到客户端的请求后，向客户端返回的响应信息。</p><p>组成部分：</p><ol><li>状态行：包含HTTP协议版本、状态码和状态消息，用于告知客户端请求的处理结果。</li><li>响应头：包含服务器发送给客户端的额外信息，如服务器类型、内容类型、内容长度等。</li><li>空行：用于分隔响应头和响应体。</li><li>响应体：可选部分，包含服务器返回给客户端的资源内容，如HTML页面、JSON数据等。</li></ol><p>示例：</p><figure class="highlight txt"><figcaption><span>txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 15 Nov 2022 12:34:56 GMT</span><br><span class="line">Server: Apache/2.4.41 (Ubuntu)</span><br><span class="line">Content-Type: application/json; charset=UTF-8</span><br><span class="line">Content-Length: 75</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;&quot;status&quot;: &quot;success&quot;, &quot;message&quot;: &quot;Data retrieved successfully&quot;, &quot;data&quot;: &#123;&quot;id&quot;: 1, &quot;name&quot;: &quot;John Doe&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>状态行<code>HTTP/1.1 200 OK</code>由三部分组成：</li></ol><ul><li><code>HTTP/1.1</code>是协议版本，表示使用的协议版本。</li><li><code>200</code>是状态码，表示请求的结果，比如200表示成功等。</li><li><code>OK</code>是状态消息，表示对状态码的文本描述，比如OK表示成功等。</li></ul><ol start="2"><li>请求头：</li></ol><ul><li>Date：表示服务器发送响应的日期和时间。</li><li>Server：表示服务器的软件信息。</li><li>Content-Type：表示响应体的内容类型和编码方式。</li><li>Content-Length：表示响应体的长度，使用字节作为单位。</li><li>Connection：表示服务器希望在发送完响应后的连接方式。使用keep-alive表示保持连接，使用close表示关闭连接。</li></ul><ol start="3"><li>空行：</li></ol><ul><li>分隔响应头和响应体。</li></ul><ol start="4"><li>请求体：</li></ol><ul><li>如果是HTML页面，就解析并显示页面。如果是JSON数据，就解析并处理数据。</li></ul><p>状态码的含义可以在网站上查看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">HTTP 响应状态码</a></p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><p>使用Node中内置的<code>http</code>模块，可以实现网络通信的功能。</p><h3 id="2-1-简单使用"><a href="#2-1-简单使用" class="headerlink" title="2.1 简单使用"></a>2.1 简单使用</h3><p>示例：</p><figure class="highlight js"><figcaption><span>server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="keyword">let</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 忽略特殊请求</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span> == <span class="string">&#x27;/favicon.ico&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获得请求方法</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>);</span><br><span class="line">  <span class="comment">// 获得请求URL，只包含路径和查询字符串，不包含协议和域名</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line">  <span class="comment">// 获得请求头，属性名被转为小写</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line">  <span class="comment">// 获得请求头中的属性值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>.<span class="property">host</span>);</span><br><span class="line">  <span class="comment">// 实例化URL类</span></span><br><span class="line">  <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1:9000&#x27;</span>);</span><br><span class="line">  <span class="comment">// 获得请求URL</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(url);</span><br><span class="line">  <span class="comment">// 获得请求URL中的路径</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">pathname</span>);</span><br><span class="line">  <span class="comment">// 获得请求URL中的查询字符串</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">search</span>);</span><br><span class="line">  <span class="comment">// 获得请求URL中的查询字符串中指定属性名对应的属性值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">  <span class="comment">// 获得请求体，使用文件流读取</span></span><br><span class="line">  <span class="keyword">let</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">    body += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 获得请求体，读取后的处理</span></span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">    <span class="comment">// 设置响应状态码，默认是200</span></span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// 设置响应状态码描述，默认是OK</span></span><br><span class="line">    res.<span class="property">statusMessage</span> = <span class="string">&#x27;OK&#x27;</span>;</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>);</span><br><span class="line">    <span class="comment">// 设置响应体，可以不用或使用多次write方法</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    <span class="comment">// 设置响应体，可以不用或使用多次write方法</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">    <span class="comment">// 设置响应体，必须使用并且只能使用一次end方法</span></span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:9000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在命令行执行<code>node server.js</code>命令启动服务，在浏览器访问<code>http://127.0.0.1:9000/</code>请求服务。</p><p>注意：</p><ol><li>在命令行使用<code>node server.js</code>启动服务。</li><li>在命令行按下<code>Ctrl + C</code>停止服务。</li><li>当服务启动后，更新代码后必须重启服务才能生效。</li></ol><p>端口号被占用报错：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: listen EADDRINUSE: address already <span class="keyword">in</span> use :::9000</span><br></pre></td></tr></table></figure><p>端口号被占用解决办法：</p><ol><li>关闭当前正在运行监听端口的服务，推荐使用这种方式。</li><li>使用其他端口号。</li></ol><p>默认端口：</p><ul><li>HTTP协议默认端口是80，可以省略。</li><li>HTTPS协议的默认端口是443，可以省略。</li></ul><h3 id="2-2-创建服务"><a href="#2-2-创建服务" class="headerlink" title="2.2 创建服务"></a>2.2 创建服务</h3><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.<span class="title function_">createServer</span>([options][, requestListener])</span><br></pre></td></tr></table></figure><p>返回：</p><ul><li>Object对象，封装了HTTP服务信息。</li></ul><p>参数：</p><ul><li>options：配置对象，封装了多个服务配置，可选。</li><li>requestListener：请求监听器，封装了请求和响应的方法，可选。</li></ul><h3 id="2-3-监听服务"><a href="#2-3-监听服务" class="headerlink" title="2.3 监听服务"></a>2.3 监听服务</h3><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>([port[, host[, backlog]]][, callback])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>port：监听端口号。</li><li>host：监听主机地址。</li><li>backlog：监听日志。</li><li>callback：监听回调方法。</li></ul><h3 id="2-4-获得请求"><a href="#2-4-获得请求" class="headerlink" title="2.4 获得请求"></a>2.4 获得请求</h3><p>获得请求：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得请求方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>);</span><br><span class="line"><span class="comment">// 获得请求URL，只包含路径和查询字符串，不包含协议和域名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line"><span class="comment">// 获得请求头，属性名被转为小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line"><span class="comment">// 获得请求头中的属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>.<span class="property">host</span>);</span><br></pre></td></tr></table></figure><p>获得请求URL的路径和字符串有两种方式：</p><div class="tabs" id="tab-tab-id-1"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1-1">使用类</a></li><li class="tab"><a class="#tab-id-1-2">使用模块</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1-1"><p>使用URL类获得请求URL的信息：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化URL类</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1:9000&#x27;</span>);</span><br><span class="line"><span class="comment">// 获得请求URL</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url);</span><br><span class="line"><span class="comment">// 获得请求URL中的路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">pathname</span>);</span><br><span class="line"><span class="comment">// 获得请求URL中的查询字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">search</span>);</span><br><span class="line"><span class="comment">// 获得请求URL中的查询字符串中指定属性名对应的属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>));</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-id-1-2"><p>使用<code>url</code>模块获得请求URL的信息：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="comment">// 获得请求URL</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">parse</span>(req.<span class="property">url</span>));</span><br><span class="line"><span class="comment">// 获得请求URL中的路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>);</span><br><span class="line"><span class="comment">// 获得请求URL中的查询字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">query</span>);</span><br><span class="line"><span class="comment">// 获得请求URL中的查询字符串中指定属性名对应的属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>).<span class="property">query</span>.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>这种方式已经过时了，不建议使用。</p></div></div></div><p>使用文件流读取请求体数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得请求体，使用文件流读取</span></span><br><span class="line"><span class="keyword">let</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">  body += chunk;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获得请求体，读取后的处理</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-5-返回响应"><a href="#2-5-返回响应" class="headerlink" title="2.5 返回响应"></a>2.5 返回响应</h3><p>返回响应：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置响应状态码，默认是200</span></span><br><span class="line">res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line"><span class="comment">// 设置响应状态码描述，默认是OK</span></span><br><span class="line">res.<span class="property">statusMessage</span> = <span class="string">&#x27;OK&#x27;</span>;</span><br><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置响应体，可以不用或使用多次write方法</span></span><br><span class="line">res.<span class="title function_">write</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置响应体，可以不用或使用多次write方法</span></span><br><span class="line">res.<span class="title function_">write</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置响应体，必须使用并且只能使用一次end方法</span></span><br><span class="line">res.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><h2 id="3-网页加载"><a href="#3-网页加载" class="headerlink" title="3 网页加载"></a>3 网页加载</h2><h3 id="3-1-原理"><a href="#3-1-原理" class="headerlink" title="3.1 原理"></a>3.1 原理</h3><p>网页资源的加载都是循序渐进的，首先获取HTML的内容， 然后发送获取其他资源的请求，比如CSS、JS、图片等。</p><p>资源分类：</p><ul><li>静态资源是指那些内容固定不变的文件，如HTML、CSS、JS、图片等。这些文件在创建后，内容不会随着用户请求或时间的变化而改变。</li><li>动态资源是指那些内容会根据用户请求、时间或其他条件变化的资源。它们通常由服务器端的程序生成，动态资源的内容在每次请求时可能会不同。</li></ul><h3 id="3-2-网站根目录"><a href="#3-2-网站根目录" class="headerlink" title="3.2 网站根目录"></a>3.2 网站根目录</h3><p>网站根目录是指在网站文件结构中最高层级的目录，它包含了网站的所有文件和子目录。</p><p>当用户在浏览器中输入网站的域名时，服务器会从网站根目录中查找默认的首页文件，然后将其发送给用户。</p><h3 id="3-3-URL路径"><a href="#3-3-URL路径" class="headerlink" title="3.3 URL路径"></a>3.3 URL路径</h3><p>网址中的URL路径分为绝对路径和相对路径：</p><ul><li>绝对路径是指从网站的根目录开始的完整路径，它包含了从根目录到目标资源的所有层级信息。绝对路径以<code>/</code>开头，表示从根目录开始。</li><li>相对路径是指相对于当前页面或资源的位置的路径。它不以<code>/</code>开头，而是根据当前页面的位置来确定目标资源的位置。</li></ul><h3 id="3-4-媒体类型"><a href="#3-4-媒体类型" class="headerlink" title="3.4 媒体类型"></a>3.4 媒体类型</h3><p>媒体类型（MIME，Multipurpose Internet Mail Extensions）是一种标准，用来表示文档、文件或字节流的性质和格式。它在互联网通信中广泛使用，特别是在HTTP协议中，用于指定请求和响应的内容类型。</p><p>MIME类型由两个主要部分组成，它们之间用<code>/</code>分隔：</p><ol><li>类型（Type）：表示媒体的通用类别，例如文本、图像、音频、视频等。</li><li>子类型（Subtype）：指定类型中的具体格式或编码方式，例如html、css、png等。</li></ol><p>下面是常见的MIME类型：</p><table>  <thead>    <tr>      <th>类型</th>      <th>子类型</th>      <th>MIME类型</th>    </tr>  </thead>  <tbody>    <tr>      <td>文本</td>      <td>纯文本文件</td>      <td>text/plain</td>    </tr>    <tr>      <td>文本</td>      <td>HTML页面</td>      <td>text/html</td>    </tr>    <tr>      <td>文本</td>      <td>CSS样式</td>      <td>text/css</td>    </tr>    <tr>      <td>文本</td>      <td>JS脚本</td>      <td>text/javascript</br>application/javascript</td>    </tr>    <tr>      <td>图像</td>      <td>JPEG图像</td>      <td>image/jpeg</td>    </tr>    <tr>      <td>图像</td>      <td>PNG图像</td>      <td>image/png</td>    </tr>    <tr>      <td>图像</td>      <td>GIF图像</td>      <td>image/gif</td>    </tr>    <tr>      <td>图像</td>      <td>SVG矢量图像</td>      <td>image/svg+xml</td>    </tr>    <tr>      <td>音频</td>      <td>MP3音频</td>      <td>audio/mpeg</td>    </tr>    <tr>      <td>音频</td>      <td>WAV音频</td>      <td>audio/wav</td>    </tr>    <tr>      <td>音频</td>      <td>AAC音频</td>      <td>audio/aac</td>    </tr>    <tr>      <td>视频</td>      <td>MP4视频</td>      <td>video/mp4</td>    </tr>    <tr>      <td>视频</td>      <td>MPEG视频</td>      <td>video/mpeg</td>    </tr>    <tr>      <td>应用</td>      <td>PDF文档</td>      <td>application/pdf</td>    </tr>    <tr>      <td>应用</td>      <td>JSON数据</td>      <td>application/json</td>    </tr>    <tr>      <td>应用</td>      <td>XML数据</td>      <td>application/xml</td>    </tr>    <tr>      <td>应用</td>      <td>ZIP压缩</td>      <td>application/zip</td>    </tr>    <tr>      <td>应用</td>      <td>JS脚本</td>      <td>application/javascript</td>    </tr>    <tr>      <td>混合</td>      <td>表单数据，常见于文件上传</td>      <td>multipart/form-data</td>    </tr>    <tr>      <td>未知</td>      <td>未知类型，建议独立存储</td>      <td>application/octet-stream</td>    </tr>  </tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要解释了网络通信的背景知识，以及如何在Node项目中使用网络通信功能。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>在VSCode右键运行代码</title>
    <link href="https://momashanhe.com/posts/20250310/092819/"/>
    <id>https://momashanhe.com/posts/20250310/092819/</id>
    <published>2025-03-10T01:28:19.000Z</published>
    <updated>2025-03-10T01:28:19.527Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>路径管理</title>
    <link href="https://momashanhe.com/posts/20250309/205946/"/>
    <id>https://momashanhe.com/posts/20250309/205946/</id>
    <published>2025-03-09T12:59:46.000Z</published>
    <updated>2025-03-21T17:20:48.350Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了如何在编写代码时规范使用路径。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>在处理路径时，涉及到两个概念：</p><ul><li>相对路径：以当前工作目录为起点的路径，表示从当前目录到目标文件或目录的相对位置。示例：</li></ul><ol><li>使用<code>./file.txt</code>表示当前目录下的<code>file.txt</code>文件，也可以使用<code>file.txt</code>表示，可以省略前面的<code>./</code>符号。</li><li>使用<code>../file.txt</code>表示当前目录的上级目录下的<code>file.txt</code>文件，不能省略前面的<code>../</code>符号。</li></ol><ul><li>绝对路径：从根目录开始的完整路径，表示从根目录到目标文件或目录的确切位置。示例：</li></ul><ol><li>在Windows系统中，使用<code>D:\file.txt</code>表示D盘根目录下的<code>file.txt</code>文件。</li><li>在Linux系统中，使用<code>/file.txt</code>表示根目录下的<code>file.txt</code>文件。</li></ol><p>不同操作系统在管理路径存在差异：</p><ul><li>在Linux系统中，使用<code>/</code>表示根目录，将<code>/</code>作为目录的间隔符号。</li><li>在Windows系统中，使用<code>D:\</code>表示D盘根目录，将<code>\</code>作为目录的间隔符号。但是在一些编程语言里兼容了Linux系统的规则，支持使用<code>/</code>表示当前盘的根目录，支持将<code>/</code>作为目录的间隔符号。</li></ul><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2 问题"></a>2 问题</h2><p>在涉及路径的开发过程中，如果使用相对路径，会导致相同的代码在不同路径执行得到结果不一致。</p><p>创建<code>file</code>目录作为当前目录，在当前目录创建<code>file.js</code>文件和<code>file.txt</code>文件，在<code>file.js</code>文件编写代码：</p><figure class="highlight js"><figcaption><span>file.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">statSync</span>(<span class="string">&#x27;./file.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><p>在当前目录执行命令<code>node file.js</code>成功，因为当前目录存在<code>file.txt</code>文件，在上级目录执行<code>node file/file.js</code>失败，因为上级目录没有<code>file.txt</code>文件。</p><p>为了解决这个问题，建议使用绝对路径，保证代码执行的结果和预期一致：</p><ul><li>使用<code>__filename</code>变量可以获得代码文件绝对路径。</li><li>使用<code>__dirname</code>变量可以获得代码文件所在目录的绝对路径。</li></ul><p>修改当前目录的<code>file.js</code>文件，使用<code>__dirname</code>变量拼接<code>file.txt</code>文件的绝对路径：</p><figure class="highlight js"><figcaption><span>file.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__filename);<span class="comment">// D:\momashanhe\file\file.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname);<span class="comment">// D:\momashanhe\file</span></span><br><span class="line"><span class="keyword">let</span> path = __dirname + <span class="string">&#x27;/file.txt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path);<span class="comment">// D:\momashanhe\file/file.txt</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">statSync</span>(path);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><p>无论是在当前目录还是在上级目录执行，都会在<code>file.js</code>文件所在的目录查找<code>file.txt</code>文件。</p><p>在拼接时建议使用<code>/</code>作为分隔符，不能使用<code>\</code>作为分隔符，因为<code>\</code>单独使用表示转义字符，需要使用转义后的<code>\\</code>表示<code>\</code>作为分隔符：</p><figure class="highlight js"><figcaption><span>file.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> path = __dirname + <span class="string">&#x27;\\file.txt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path);<span class="comment">// D:\momashanhe\file\file.txt</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">statSync</span>(path);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h2><p>Node中内置的<code>path</code>模块简化了对路径的操作。</p><h3 id="3-1-拼接路径"><a href="#3-1-拼接路径" class="headerlink" title="3.1 拼接路径"></a>3.1 拼接路径</h3><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">resolve</span>([...paths])</span><br></pre></td></tr></table></figure><p>返回：</p><ul><li>String对象。</li></ul><p>参数：</p><ul><li>paths：文件路径，支持多个拼接。如果参数是绝对路径，则清空前面的参数，拼接后面的参数。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;file.txt&#x27;</span>));<span class="comment">// D:\momashanhe\file\file.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;/momashanhe&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>));<span class="comment">// D:\momashanhe\file\file.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;/momashanhe&#x27;</span>, <span class="string">&#x27;/file&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>));<span class="comment">// D:\file\file.txt</span></span><br></pre></td></tr></table></figure><h3 id="3-2-获取分隔符"><a href="#3-2-获取分隔符" class="headerlink" title="3.2 获取分隔符"></a>3.2 获取分隔符</h3><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="property">sep</span></span><br></pre></td></tr></table></figure><p>返回：</p><ul><li>String对象。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="property">sep</span>);<span class="comment">// \</span></span><br></pre></td></tr></table></figure><h3 id="3-3-解析路径"><a href="#3-3-解析路径" class="headerlink" title="3.3 解析路径"></a>3.3 解析路径</h3><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[, suffix])<span class="comment">// 获取路径基础名称</span></span><br><span class="line">path.<span class="title function_">dirname</span>(path)<span class="comment">// 获取路径目录名称</span></span><br><span class="line">path.<span class="title function_">extname</span>(path)<span class="comment">// 获取路径扩展名称</span></span><br></pre></td></tr></table></figure><p>返回：</p><ul><li>String对象。</li></ul><p>参数：</p><ul><li>path：文件路径。</li><li>suffix：要删除的可选后缀。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(<span class="string">&#x27;D:\\momashanhe\\file\\file.txt&#x27;</span>));<span class="comment">// file.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(<span class="string">&#x27;D:\\momashanhe\\file\\file.txt&#x27;</span>));<span class="comment">// D:\momashanhe\file</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(<span class="string">&#x27;D:\\momashanhe\\file\\file.txt&#x27;</span>));<span class="comment">// .txt</span></span><br></pre></td></tr></table></figure><h3 id="3-4-解析路径返回对象"><a href="#3-4-解析路径返回对象" class="headerlink" title="3.4 解析路径返回对象"></a>3.4 解析路径返回对象</h3><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">parse</span>(path)</span><br></pre></td></tr></table></figure><p>返回：</p><ul><li>Object对象，封装了对象信息。</li></ul><p>参数：</p><ul><li>path：文件路径。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">parse</span>(<span class="string">&#x27;D:\\momashanhe\\file\\file.txt&#x27;</span>));</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   root: &#x27;D:\\&#x27;,</span></span><br><span class="line"><span class="comment">//   dir: &#x27;D:\\momashanhe\\file&#x27;,</span></span><br><span class="line"><span class="comment">//   base: &#x27;file.txt&#x27;,</span></span><br><span class="line"><span class="comment">//   ext: &#x27;.txt&#x27;,</span></span><br><span class="line"><span class="comment">//   name: &#x27;file&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-解析对象返回路径"><a href="#3-5-解析对象返回路径" class="headerlink" title="3.5 解析对象返回路径"></a>3.5 解析对象返回路径</h3><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">format</span>(pathObject)</span><br></pre></td></tr></table></figure><p>返回：</p><ul><li>String对象。</li></ul><p>参数：</p><ul><li>pathObject：文件对象。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">format</span>(&#123;</span><br><span class="line">  <span class="attr">dir</span>: <span class="string">&#x27;D:\\momashanhe\\file&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&#x27;file.txt&#x27;</span>,</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// D:\momashanhe\file\file.txt</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了如何在编写代码时规范使用路径。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>文件系统</title>
    <link href="https://momashanhe.com/posts/20250306/235429/"/>
    <id>https://momashanhe.com/posts/20250306/235429/</id>
    <published>2025-03-06T15:54:29.000Z</published>
    <updated>2025-03-21T06:49:51.871Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node处理文件和目录的相关接口，包括读取、写入、复制，以及移动和重命名。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>文件系统是计算机用于管理数据的一种系统，负责在存储设备上进行文件的存储、检索和更新操作。</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><p>Node中内置了<code>fs</code>模块，可以对计算机中的数据进行操作。</p><h3 id="2-1-文件写入"><a href="#2-1-文件写入" class="headerlink" title="2.1 文件写入"></a>2.1 文件写入</h3><h4 id="2-1-1-异步写入"><a href="#2-1-1-异步写入" class="headerlink" title="2.1.1 异步写入"></a>2.1.1 异步写入</h4><p>主线程不会等待异步线程，执行效率高。</p><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(file, data[, options], callback)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>file：文件名。</li><li>data：待写入的数据。</li><li>options：选项，可选。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="string">&#x27;异步写入数据&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 写入失败传入错误对象，写入成功传入null</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步写入失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步写入成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><p>可以在选项中使用flag标志：</p><table>  <thead>    <tr>      <th>标志</th>      <th>说明</th>      <th>是否创建文件</th>    </tr>  </thead>  <tbody>    <tr>      <td>r</td>      <td>此标志打开文件进行读取</td>      <td>否</td>    </tr>    <tr>      <td>r+</td>      <td>此标志打开文件进行读写</td>      <td>否</td>    </tr>    <tr>      <td>w+</td>      <td>此标志打开文件进行读写，并将流定位在文件开头</td>      <td>是</td>    </tr>    <tr>      <td>a+</td>      <td>此标志打开文件进行读写，并将流定位在文件末尾</td>      <td>是</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="string">&#x27;异步写入数据&#x27;</span>, &#123; <span class="attr">flag</span>:<span class="string">&#x27;a+&#x27;</span> &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 写入失败传入错误对象，写入成功传入null</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步写入失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步写入成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-1-2-同步写入"><a href="#2-1-2-同步写入" class="headerlink" title="2.1.2 同步写入"></a>2.1.2 同步写入</h4><p>主线程等待同步线程，程序执行过程易于理解。</p><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFileSync</span>(file, data[, options])</span><br></pre></td></tr></table></figure><p>参数与<code>writeFile()</code>方法一致，只是没有callback参数。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="string">&#x27;同步写入数据&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步写入成功&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-1-3-异步追加写入"><a href="#2-1-3-异步追加写入" class="headerlink" title="2.1.3 异步追加写入"></a>2.1.3 异步追加写入</h4><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">appendFile</span>(path, data[, options], callback)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path：文件路径。</li><li>data：待写入的数据。</li><li>options：选项，可选。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="string">&#x27;异步追加写入数据&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步追加写入失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步追加写入成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-1-4-同步追加写入"><a href="#2-1-4-同步追加写入" class="headerlink" title="2.1.4 同步追加写入"></a>2.1.4 同步追加写入</h4><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">appendFileSync</span>(path, data[, options])</span><br></pre></td></tr></table></figure><p>参数：与<code>appendFile()</code>方法一致，只是没有callback参数。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">appendFileSync</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="string">&#x27;同步追加写入数据&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步追加写入成功&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-1-5-流式写入"><a href="#2-1-5-流式写入" class="headerlink" title="2.1.5 流式写入"></a>2.1.5 流式写入</h4><p>程序打开一个文件是需要消耗资源的，流式写入可以减少打开关闭文件的次数，适用于大文件写入或者频繁写入的场景。</p><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">createWriteStream</span>(path[, options])</span><br></pre></td></tr></table></figure><p>返回：</p><ul><li>Object对象，封装了文件流。</li></ul><p>参数：</p><ul><li>path：文件路径。</li><li>options：选项，可选。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./info.txt&#x27;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;456&#x27;</span>);</span><br><span class="line">ws.<span class="title function_">end</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;流式写入成功&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-2-文件读取"><a href="#2-2-文件读取" class="headerlink" title="2.2 文件读取"></a>2.2 文件读取</h3><h4 id="2-2-1-异步读取"><a href="#2-2-1-异步读取" class="headerlink" title="2.2.1 异步读取"></a>2.2.1 异步读取</h4><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path[, options], callback)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path：文件路径。</li><li>options：选项，可选。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步读取失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步读取成功&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-2-2-同步读取"><a href="#2-2-2-同步读取" class="headerlink" title="2.2.2 同步读取"></a>2.2.2 同步读取</h4><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFileSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p>返回：</p><ul><li>Buffer对象，封装了文件内容。</li></ul><p>参数：与<code>readFile()</code>方法一致，只是没有callback参数。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./info.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步读取成功&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-2-3-流式读取"><a href="#2-2-3-流式读取" class="headerlink" title="2.2.3 流式读取"></a>2.2.3 流式读取</h4><p>流式读取可以减少打开关闭文件的次数，适用于大文件读取或者频繁读取的场景。</p><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">createReadStream</span>(path[, options])</span><br></pre></td></tr></table></figure><p>返回：</p><ul><li>Object对象，封装了文件流。</li></ul><p>参数：</p><ul><li>path：文件路径。</li><li>options：选项，可选。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./info.txt&#x27;</span>);</span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">trunk</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(trunk.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;流式读取成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-3-文件复制"><a href="#2-3-文件复制" class="headerlink" title="2.3 文件复制"></a>2.3 文件复制</h3><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./img.jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./img_back.jpg&#x27;</span>);</span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">trunk</span> =&gt;</span> &#123;</span><br><span class="line">  ws.<span class="title function_">write</span>(trunk);</span><br><span class="line">&#125;);</span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ws.<span class="title function_">end</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;流式复制成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><p>也可以使用<code>pipe()</code>方法进行复制：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./img.jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./img_back.jpg&#x27;</span>);</span><br><span class="line">rs.<span class="title function_">pipe</span>(ws);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-4-文件重命名和移动"><a href="#2-4-文件重命名和移动" class="headerlink" title="2.4 文件重命名和移动"></a>2.4 文件重命名和移动</h3><p>文件重命名和移动可以用同一个方法实现，也有异步和同步两种方式，同步方法比异步方法少了callback参数。</p><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(oldPath, newPath, callback)</span><br><span class="line">fs.<span class="title function_">renameSync</span>(oldPath, newPath)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>oldPath：原文件路径。</li><li>newPath：新文件路径。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="string">&#x27;./info_new.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步重命名失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步重命名成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// fs.renameSync(&#x27;./info.txt&#x27;, &#x27;./info_new.txt&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(&#x27;同步重命名成功&#x27;);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-5-文件删除"><a href="#2-5-文件删除" class="headerlink" title="2.5 文件删除"></a>2.5 文件删除</h3><p>文件删除也有异步和同步两种方式，同步方法比异步方法少了callback参数。</p><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(path, callback)</span><br><span class="line">fs.<span class="title function_">unlinkSync</span>(path)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path：文件路径。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步删除失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步删除成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// fs.unlinkSync(&#x27;./info.txt&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(&#x27;同步删除成功&#x27;);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><p>从14.14.0版本开始，还可以使用<code>rm()</code>和<code>rmSync()</code>方法实现。</p><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rm</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">rmSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path：文件路径。</li><li>options：选项，可选。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">rm</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步删除失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步删除成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// fs.rmSync(&#x27;./info.txt&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(&#x27;同步删除成功&#x27;);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-6-目录管理"><a href="#2-6-目录管理" class="headerlink" title="2.6 目录管理"></a>2.6 目录管理</h3><h4 id="2-6-1-创建目录"><a href="#2-6-1-创建目录" class="headerlink" title="2.6.1 创建目录"></a>2.6.1 创建目录</h4><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path：文件路径。</li><li>options：选项，可选。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./info&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步创建目录失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步创建目录成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// fs.mkdirSync(&#x27;./info&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(&#x27;同步创建目录成功&#x27;);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><p>支持递归创建目录：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./info/1/2/3&#x27;</span>, &#123; <span class="attr">recursive</span>:<span class="literal">true</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;递归创建目录失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;递归创建目录成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-6-2-读取目录"><a href="#2-6-2-读取目录" class="headerlink" title="2.6.2 读取目录"></a>2.6.2 读取目录</h4><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readdir</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">readdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path：文件路径。</li><li>options：选项，可选。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./info&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步读取目录失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步读取目录成功&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// let data = fs.readdirSync(&#x27;./info&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(&#x27;同步读取目录成功&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(data);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-6-3-删除目录"><a href="#2-6-3-删除目录" class="headerlink" title="2.6.3 删除目录"></a>2.6.3 删除目录</h4><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">rmdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path：文件路径。</li><li>options：选项，可选。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./info&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步删除目录失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步删除目录成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// fs.rmdirSync(&#x27;./info&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(&#x27;同步删除目录成功&#x27;);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><p>支持递归删除目录：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./info&#x27;</span>, &#123; <span class="attr">recursive</span>:<span class="literal">true</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;递归删除目录失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;递归删除目录成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><p>由于该方法已经被标记为过期了，建议使用<code>rm()</code>和<code>rmSync()</code>方法实现。</p><h3 id="2-7-查看资源状态"><a href="#2-7-查看资源状态" class="headerlink" title="2.7 查看资源状态"></a>2.7 查看资源状态</h3><p>语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">stat</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">statSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path：文件路径。</li><li>options：选项，可选。</li><li>callback：回调方法。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步查看资源状态失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步查看资源状态成功&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// let data = fs.statSync(&#x27;./info.txt&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(&#x27;同步查看资源状态成功&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(data);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><p>判断资源类型：</p><ul><li>使用<code>isFile()</code>命令判断资源是否文件。</li><li>使用<code>isDirectory()</code>命令判断资源是否目录。</li></ul><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;./info.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;异步查看资源状态失败: &#x27;</span> + err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步查看资源状态成功&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;判断资源是否文件: &#x27;</span> + data.<span class="title function_">isFile</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;判断资源是否目录: &#x27;</span> + data.<span class="title function_">isDirectory</span>());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主方法执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node处理文件和目录的相关接口，包括读取、写入、复制，以及移动和重命名。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>缓冲器</title>
    <link href="https://momashanhe.com/posts/20250306/190456/"/>
    <id>https://momashanhe.com/posts/20250306/190456/</id>
    <published>2025-03-06T11:04:56.000Z</published>
    <updated>2025-03-21T06:49:46.828Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node的缓冲器，包括其特点和使用。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>缓冲器即Buffer，是一个类似于数组的对象，用于表示固定长度的字节序列。</p><p>Buffer的本质是一段内存空间，用于处理二进制数据，所以常在文件操作、网络通信、图像处理等场景中使用。</p><h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2 特点"></a>2 特点</h2><p>Buffer大小固定且无法调整。</p><p>Buffer中每个元素的大小为1字节，1个字节能够存储8个比特的二进制数据，也就是2的8次方，即从0到255。</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h2><p>Node中创建Buffer的方式主要如下几种：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了一个长度为10字节的Buffer，相当于申请了10字节的内存空间，每个字节的值为0。</span></span><br><span class="line"><span class="keyword">let</span> buf_1 = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_1);<span class="comment">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br><span class="line"><span class="comment">// 创建了一个长度为10字节的Buffer，创建速度比上面的快。Unsafe说明可能存在旧的数据，可能会影响执行结果。</span></span><br><span class="line"><span class="keyword">let</span> buf_2 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2);<span class="comment">// &lt;Buffer 80 a5 ab ae ... more bytes&gt;</span></span><br><span class="line"><span class="comment">// 通过字符串创建。</span></span><br><span class="line"><span class="keyword">let</span> buf_3 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3);<span class="comment">// &lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line"><span class="comment">// 通过数组创建。</span></span><br><span class="line"><span class="keyword">let</span> buf_4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_4);<span class="comment">// &lt;Buffer 01 02 03 04 05&gt;</span></span><br></pre></td></tr></table></figure><p>打印的结果是基于十六进制显示的，这是为了节省显示的空间。</p><p>使用<code>toString()</code>方法将Buffer转为字符串：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);<span class="comment">// &lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>());<span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>通过使用显式的字符编码，可以在Buffer实例与字符串之间进行相互转换，默认使用<code>utf8</code>字符编码。：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf_1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_1);<span class="comment">// &lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_1.<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>));<span class="comment">// hello</span></span><br><span class="line"><span class="keyword">let</span> buf_2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2);<span class="comment">// &lt;Buffer 85 e9 65&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>));<span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>使用数组下标读取和设置Buffer元素：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);<span class="comment">// &lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf[<span class="number">0</span>]);<span class="comment">// 104，即h字母在utf8编码中对应的十进制数字是104</span></span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">360</span>;<span class="comment">// 对应二进制为000101101000，一个元素存储一个字节，即八个比特，左边的高位被舍弃</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf[<span class="number">0</span>]);<span class="comment">// 104，左边的高位在舍弃后，等同于104</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node的缓冲器，包括其特点和使用。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>管理工具</title>
    <link href="https://momashanhe.com/posts/20250306/121736/"/>
    <id>https://momashanhe.com/posts/20250306/121736/</id>
    <published>2025-03-06T04:17:36.000Z</published>
    <updated>2025-03-22T03:21:56.189Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node的管理工具，包括NPM和NVM，以及NRM，还介绍了Yarn管理工具，并比较了NPM和Yarn的区别。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><h3 id="1-1-NPM（Node-Package-Manager）"><a href="#1-1-NPM（Node-Package-Manager）" class="headerlink" title="1.1 NPM（Node Package Manager）"></a>1.1 NPM（Node Package Manager）</h3><p>NPM是Node的默认包管理工具，用于安装、更新、卸载和管理JS包。它还支持依赖管理、脚本运行等功能，并且是Node安装时自带的一部分。</p><p>包是特殊的模块，将根目录包含<code>package.json</code>文件的模块称为包，并且包通常由多个模块组成。</p><h3 id="1-2-NRM（NPM-Registry-Manager）"><a href="#1-2-NRM（NPM-Registry-Manager）" class="headerlink" title="1.2 NRM（NPM Registry Manager）"></a>1.2 NRM（NPM Registry Manager）</h3><p>NRM是NPM的镜像源管理工具，用于快速切换NPM的镜像源。由于NPM默认的镜像源在国外，访问速度可能较慢，NRM可以帮助开发者切换到国内镜像源，从而提高包的下载速度。</p><h3 id="1-3-NVM（Node-Version-Manager）"><a href="#1-3-NVM（Node-Version-Manager）" class="headerlink" title="1.3 NVM（Node Version Manager）"></a>1.3 NVM（Node Version Manager）</h3><p>NVM是Node版本管理工具，用于在同一台机器上安装、管理和切换多个Node版本。它解决了不同项目对不同Node版本的需求，避免版本冲突。</p><h2 id="2-NPM"><a href="#2-NPM" class="headerlink" title="2 NPM"></a>2 NPM</h2><h3 id="2-1-查看版本和配置信息"><a href="#2-1-查看版本和配置信息" class="headerlink" title="2.1 查看版本和配置信息"></a>2.1 查看版本和配置信息</h3><p>在安装Node时会自动安装NPM工具。</p><p>使用<code>npm -v</code>命令查看NPM的版本：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ npm -v</span><br><span class="line">9.3.1</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><p>使用<code>npm config list</code>命令查看Node和NPM的版本信息及其他信息。</p><h3 id="2-2-包管理"><a href="#2-2-包管理" class="headerlink" title="2.2 包管理"></a>2.2 包管理</h3><h4 id="2-2-1-初始化包"><a href="#2-2-1-初始化包" class="headerlink" title="2.2.1 初始化包"></a>2.2.1 初始化包</h4><p>创建包对应的目录，使用<code>npm init</code>命令初始化包：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ npm init</span><br><span class="line">...</span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (momashanhe)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">...</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><p>支持交互式的创建<code>package.json</code>文件，该文件是包的配置文件，每个包都必须存在：</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;momashanhe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>文件内容说明如下：</p><ul><li>name是包名，默认是目录名。</li><li>version是包版本，默认从<code>1.0.0</code>开始。</li><li>description是包的描述，说明包有什么功能。</li><li>main是包的入口文件，默认是目录下的<code>index.js</code>文件。</li><li>scripts是脚本配置，用于执行脚本。</li><li>author是包的作者。</li><li>license是包的开源证书。</li></ul><p>注意事项：</p><ul><li>包名不能使用中文和大写。</li><li>版本要求<code>x.x.x</code>的格式，并且全为数字。</li><li>可以手动创建<code>package.json</code>文件，只要有这个文件就可以将该目录作为包。</li><li>可以使用<code>npm init -y</code>或<code>npm init --yes</code>跳过交互快速创建<code>package.json</code>文件，使用这种方式要求目录不能使用中文和大写。</li></ul><h4 id="2-2-2-搜索包"><a href="#2-2-2-搜索包" class="headerlink" title="2.2.2 搜索包"></a>2.2.2 搜索包</h4><p>搜索包的方式有两种：</p><ul><li>在命令行使用<code>npm search 关键字</code>搜索包含指定关键字的包。</li><li>在NPM网站搜索：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li></ul><p>也可以使用<code>npm view 包名 versions</code>命令搜索包版本。</p><h4 id="2-2-3-下载并安装包"><a href="#2-2-3-下载并安装包" class="headerlink" title="2.2.3 下载并安装包"></a>2.2.3 下载并安装包</h4><p>下载和安装包需要在包目录中执行，需要有<code>package.json</code>文件。</p><p>使用<code>npm install 包名</code>命令下载并安装包，也可以使用<code>npm add 包名</code>命令。</p><p>支持多个包同时下载和安装，只需要将多个包名用空格分开即可。</p><p>在下载并安装后，会在当前包目录下增加两个资源：</p><ul><li>node_modules用于存放下载的包。</li><li>package-lock.json用于锁定包依赖的精确版本，确保在不同环境中安装依赖时结果完全一致。</li></ul><p>依赖指的是当前包安装的其他包，可以认为当前包依赖了其他包，将其他包看做是当前包的依赖包。</p><p>在安装指定包时，安装命令会在<code>node_modules</code>目录先安装指定包的依赖包，然后再安装指定包。</p><p>如果需要指定包的版本，可以使用<code>npm install 包名@版本</code>命令下载并安装指定版本的包。</p><p>默认使用国外的镜像源，使用<code>npm get registry</code>命令查看当前使用的镜像源。</p><p>使用<code>npm config set registry https://registry.npmmirror.com/</code>命令设置为淘宝镜像源可以加速下载。</p><p>使用<code>npm config set registry https://registry.npmjs.org/</code>命令设置为默认的官方镜像源。</p><h4 id="2-2-4-使用包"><a href="#2-2-4-使用包" class="headerlink" title="2.2.4 使用包"></a>2.2.4 使用包</h4><p>使用包的方式同使用模块一样：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;模块&#x27;</span>);</span><br></pre></td></tr></table></figure><p>导入模块后就能使用暴露的资源了，在导入时遵循以下流程：<br><img src="/@image/104001/005-20250308102018.jpg" alt="20250308102018-流程"></p><h4 id="2-2-5-根据环境安装"><a href="#2-2-5-根据环境安装" class="headerlink" title="2.2.5 根据环境安装"></a>2.2.5 根据环境安装</h4><p>在安装包时可以将包安装到不同的环境：</p><ul><li>生产环境：默认安装的环境就是生产环境，支持在生产环境和开发环境使用，可以使用<code>npm install 包名 -S</code>命令指定，其中的<code>-S</code>是<code>--save</code>的简写。</li><li>开发环境：开发环境的包仅支持在开发环境使用，在生产环境会被忽略，需要使用<code>npm install 包名 -D</code>命令指定，其中的<code>-D</code>是<code>--save-dev</code>的简写。</li></ul><p>在<code>package.json</code>文件中存储的位置也不一样：</p><ul><li>生产环境：包信息存储在<code>dependencies</code>属性中。</li><li>开发环境：包信息存储在<code>devDependencies</code>属性中。</li></ul><h4 id="2-2-6-根据作用范围安装"><a href="#2-2-6-根据作用范围安装" class="headerlink" title="2.2.6 根据作用范围安装"></a>2.2.6 根据作用范围安装</h4><p>在安装包时可以选择安装位置：</p><ul><li>本地安装：将包安装到当前包的<code>node_modules</code>目录，默认安装到本地。</li><li>全局安装：将包安装到全局的<code>node_modules</code>目录，使用<code>npm install 包名 -g</code>命令安装到全局，其中的<code>-g</code>是<code>--global</code>的简写。</li></ul><p>查看安装列表：</p><ul><li>本地安装：使用<code>npm list</code>命令可以查看安装在本地的包有哪些。</li><li>全局安装：使用<code>npm list -g</code>命令可以查看安装在全局的包有哪些。</li></ul><p>查看安装目录：</p><ul><li>本地目录：使用<code>npm root</code>命令可以查看本地的<code>node_modules</code>目录。</li><li>全局目录：使用<code>npm root -g</code>命令可以查看全局的<code>node_modules</code>目录。</li></ul><p>全局安装的包可以在任何目录执行，本地安装的包只能在本地目录中执行。</p><p>全局安装的包版本由NPM管理，不会在项目的<code>package.json</code>文件中体现。这意味着全局安装的包可能在不同项目之间共享，但也可能因为版本冲突而导致问题。</p><h4 id="2-2-7-删除包"><a href="#2-2-7-删除包" class="headerlink" title="2.2.7 删除包"></a>2.2.7 删除包</h4><p>删除包需要在包目录中执行，需要有<code>package.json</code>文件。</p><p>使用<code>npm uninstall 包名</code>命令删除依赖包，也可以使用<code>npm remove 包名</code>命令。</p><p>使用<code>npm uninstall 包名 -g</code>命令删除全局依赖包。</p><h4 id="2-2-8-重新安装包"><a href="#2-2-8-重新安装包" class="headerlink" title="2.2.8 重新安装包"></a>2.2.8 重新安装包</h4><p>在上传提交项目代码到Git仓库时，不会提交<code>node_modules</code>目录，因为该目录占用的磁盘空间比较大，并且该目录可以重新生成。</p><p>当下载项目后，就需要执行<code>npm install</code>命令重新安装依赖包，重新生成<code>node_modules</code>目录。</p><h3 id="2-3-命令别名"><a href="#2-3-命令别名" class="headerlink" title="2.3 命令别名"></a>2.3 命令别名</h3><p>通过配置命令别名可以更简单的执行命令，只需要配置<code>package.json</code>文件中的<code>scripts</code>属性：</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>即可通过<code>npm run 别名</code>命令执行，其作用和别名对应的命令一样。</p><p>注意：</p><ul><li>最后一个别名后面不需要有逗号，非最后一个别名后面必须要有逗号。</li><li>别名对应的命令有自动向上查找的功能，只要上级目录是包目录并且有对应的资源就能执行。</li><li>当别名是<code>start</code>时，可以直接通过<code>npm start</code>命令执行，这是其他命令别名没有的执行方式，所以常用<code>start</code>别名启动项目。</li><li>对于新项目，可以通过<code>scripts</code>属性查看项目的一些命令。</li></ul><h3 id="2-4-版本管理"><a href="#2-4-版本管理" class="headerlink" title="2.4 版本管理"></a>2.4 版本管理</h3><p>在使用NPM管理包的版本时，使用的是<code>x.x.x</code>格式：</p><ul><li>第一个数字是主版本，当进行了不兼容的API修改时，需要更新主版本。</li><li>第二个数字是次版本，当添加了向下兼容的新功能时，应该更新次版本。</li><li>第三个数字是补丁版本，当进行了向下兼容的问题修正时，应该更新补丁版本。</li></ul><p>除了常规的版本外，NPM还支持使用特定的符号来指定版本范围或选择策略：</p><ul><li>使用<code>^1.2.3</code>表示只允许安装主版本相同的其他版本，仅允许安装<code>1.x.x</code>的任何版本。</li><li>使用<code>~1.2.3</code>表示只允许安装次版本相同的其他版本，仅允许安装<code>1.2.x</code>的任何版本。</li><li>使用<code>*</code>表示允许安装任意版本的版本，这是不推荐的，因为可能导致安装到不兼容的版本。</li><li>使用<code>&gt;1.2.3</code>表示只允许安装指定版本之后的其他版本。</li><li>使用<code>&lt;1.2.3</code>表示只允许安装指定版本之前的其他版本。</li></ul><p>精确控制版本：</p><ul><li>在NPM的5版本之前，如果需要记录包的精确版本，需要使用<code>npm shrinkwrap</code>命令生成<code>npm-shrinkwrap.json</code>文件用于记录包的精确版本。</li><li>在NPM的5版本中，加入了新特性，在初始化包时会创建<code>package-lock.json</code>文件，每次安装包时都会记录包的精确版本。</li></ul><h3 id="2-5-发布服务包"><a href="#2-5-发布服务包" class="headerlink" title="2.5 发布服务包"></a>2.5 发布服务包</h3><p>可以将自己开发的工具包发布到NPM服务上，方便自己和其他开发者使用：</p><ol><li>创建包目录并完成初始化，起一个有意义的包名，否则会被NPM识别为垃圾包，不允许发布。</li><li>在包中创建<code>index.js</code>文件，编写代码，使用<code>module.exports</code>暴露数据。</li><li>访问<a href="https://www.npmjs.com/">NPM官网</a>注册账号，并使用邮箱激活账号。</li><li>确保正在使用的镜像源是官方的镜像源，否则无法发布到NPM服务器。</li><li>使用<code>npm login</code>命令登录到NPM服务器，填写用户名和密码，以及邮箱收到的验证码。</li><li>使用<code>npm publish</code>命令将包发布到NPM服务器。</li></ol><h3 id="2-6-更新服务包"><a href="#2-6-更新服务包" class="headerlink" title="2.6 更新服务包"></a>2.6 更新服务包</h3><p>后续可以对自己发布的包进行更新，操作步骤如下：</p><ol><li>更新包中的代码。</li><li>测试代码功能是否正常可用。</li><li>更新<code>package.json</code>文件中的版本，参考版本更新规则。</li><li>使用<code>npm publish</code>命令将包发布到NPM服务器。</li></ol><h3 id="2-7-删除服务包"><a href="#2-7-删除服务包" class="headerlink" title="2.7 删除服务包"></a>2.7 删除服务包</h3><p>NPM官方建议如果是为了鼓励用户升级，或者不想维护了，可以考虑使用<code>deprecate</code>命令。</p><p>如果在发布后72小时内，需要满足条件：</p><ul><li>没有其他包依赖。</li><li>只有一个维护者。</li></ul><p>如果在发布后超过了72小时，需要满足条件：</p><ul><li>没有其他包依赖。</li><li>只有一个维护者。</li><li>每周小于300下载量。</li></ul><p>某些条件可能随时间发生变化，建议参考官方文档：<a href="https://docs.npmjs.com/policies/unpublish">https://docs.npmjs.com/policies/unpublish</a></p><p>删除服务包有两种方式，一种是在NPM官网上删除包，一种是通过命令行的方式。</p><p>通过命令行删除：</p><ul><li>删除指定版本：使用<code>npm unpublish 包名@版本</code>删除指定版本的包。</li><li>删除全部版本：使用<code>npm unpublish 包名 -f</code>命令删除全部版本的包，其中的<code>-f</code>是<code>--force</code>的简写。</li></ul><p>如果使用了2FA验证，还需要在命令后面增加<code>--otp=2FA验证码</code>参数，只要2FA验证码正确后才能删除。</p><p>注意：</p><ul><li>删除是不可逆的，一旦删除将无法撤销。</li><li>即使删除了包的某个版本，在以后发布版本的时候，也不能发布该版本，必须发布新版本。</li><li>如果删除包的所有版本，则要等到24小时后才能重新发布该包。</li></ul><h2 id="3-NPX"><a href="#3-NPX" class="headerlink" title="3 NPX"></a>3 NPX</h2><h3 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用"></a>3.1 作用</h3><p>对于只在某个项目中使用的包，如果也将其安装到全局目录，势必会造成全局目录的混乱和冗余。</p><p>如果将包安装到本地目录，在使用包里的命令时就不能在命令行直接执行，需要指明所在的目录才能执行。</p><p>使用NPX的主要目的就是为了解决在将包安装到本地目录后，调用包里的命令时不能在命令行直接执行的问题。</p><p>在安装了NPX以后，对于安装在本地目录的包，也可以在命令行通过NPX直接执行包里的命令。</p><p>另外，如果既没有在全局安装，也没用在本地安装，在通过NPX使用的时候，会自动从远程下载，并将包进行临时安装，在使用后会自动删除临时安装的包。</p><h3 id="3-2-下载安装"><a href="#3-2-下载安装" class="headerlink" title="3.2 下载安装"></a>3.2 下载安装</h3><p>从NPM的5.2.0版本开始，安装NPM的时候会同时将NPX自动安装，不需要手动安装。</p><p>也可以使用<code>npm install npx -g</code>命令手动安装。</p><h3 id="3-3-原理"><a href="#3-3-原理" class="headerlink" title="3.3 原理"></a>3.3 原理</h3><p>使用NPX执行命令的原理：</p><ol><li>查找本地目录中是否有指定的命令，如果有就直接使用，如果没有就继续查找。</li><li>查找全局目录中是否有指定的命令，如果有就直接使用，如果没有就继续查找。</li><li>查找远程仓库中是否有指定的命令，如果有就临时安装，如果没有就返回错误。</li></ol><h3 id="3-4-使用"><a href="#3-4-使用" class="headerlink" title="3.4 使用"></a>3.4 使用</h3><p>使用<code>npx 命令</code>执行指定命令。</p><p>使用<code>npx --no-install 命令</code>执行指定命令，如果本地目录没有就返回作错误，不从远程仓库安装。</p><p>使用<code>npx --ignore-existing 命令</code>执行指定命令，强制从远程仓库安装，忽略本地目录中安装的包。</p><p>使用<code>npx -p 命令1 -p 命令2</code>安装多个命令。</p><h2 id="4-NRM"><a href="#4-NRM" class="headerlink" title="4 NRM"></a>4 NRM</h2><h3 id="4-1-下载安装"><a href="#4-1-下载安装" class="headerlink" title="4.1 下载安装"></a>4.1 下载安装</h3><p>除了在NPM使用命令修改配置切换镜像源，还可以使用NRM切换，更推荐使用这种方式。</p><p>NRM依赖NPM，可以管理NPM使用的镜像源。</p><p>使用<code>npm install nrm -g</code>命令将NRM安装到全局目录。</p><h3 id="4-2-常用命令"><a href="#4-2-常用命令" class="headerlink" title="4.2 常用命令"></a>4.2 常用命令</h3><h4 id="4-2-1-查看镜像源"><a href="#4-2-1-查看镜像源" class="headerlink" title="4.2.1 查看镜像源"></a>4.2.1 查看镜像源</h4><p>安装后可以使用<code>nrm ls</code>命令查看镜像源：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ nrm <span class="built_in">ls</span></span><br><span class="line">  npm ---------- https://registry.npmjs.org/</span><br><span class="line">  yarn --------- https://registry.yarnpkg.com/</span><br><span class="line">  tencent ------ https://mirrors.tencent.com/npm/</span><br><span class="line">  cnpm --------- https://r.cnpmjs.org/</span><br><span class="line">  taobao ------- https://registry.npmmirror.com/</span><br><span class="line">  npmMirror ---- https://skimdb.npmjs.com/registry/</span><br><span class="line">  huawei ------- https://repo.huaweicloud.com/repository/npm/</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><h4 id="4-2-2-切换镜像源"><a href="#4-2-2-切换镜像源" class="headerlink" title="4.2.2 切换镜像源"></a>4.2.2 切换镜像源</h4><p>使用<code>nrm use taobao</code>命令切换到淘宝的镜像源，淘宝是国内的镜像源，可以提高下载包的速度：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ nrm use taobao</span><br><span class="line"> SUCCESS  The registry has been changed to <span class="string">&#x27;taobao&#x27;</span>.</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><p>再次查看镜像源列表，正在使用的镜像源会在前面添加<code>*</code>符号进行提示：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ nrm <span class="built_in">ls</span></span><br><span class="line">  npm ---------- https://registry.npmjs.org/</span><br><span class="line">  yarn --------- https://registry.yarnpkg.com/</span><br><span class="line">  tencent ------ https://mirrors.tencent.com/npm/</span><br><span class="line">  cnpm --------- https://r.cnpmjs.org/</span><br><span class="line">* taobao ------- https://registry.npmmirror.com/</span><br><span class="line">  npmMirror ---- https://skimdb.npmjs.com/registry/</span><br><span class="line">  huawei ------- https://repo.huaweicloud.com/repository/npm/</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><p>需要注意的是，淘宝的镜像源是只读的，只能下载和安装包，不能上传包。如果想要上传包，还需要切换回原来的镜像源进行上传。</p><h2 id="5-NVM"><a href="#5-NVM" class="headerlink" title="5 NVM"></a>5 NVM</h2><h3 id="5-1-下载安装"><a href="#5-1-下载安装" class="headerlink" title="5.1 下载安装"></a>5.1 下载安装</h3><p>NVM主要用于管理Node和NPM版本的工具，用来切换不同版本的Node和NPM以便适配不同的软件开发工具。</p><p>NVM仅支持Linux系统和Mac系统，如果想在Windows系统使用，需要使用和NVM类似的<code>nvm-windows</code>软件。</p><p>GitHub下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a></p><p>下载<code>nvm-setup.exe</code>并安装即可。</p><p>重新打开命令行，输入命令查询版本：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ nvm -v</span><br><span class="line">1.1.12</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><p>在安装NVM后，会将Node的原安装目录迁移到NVM的安装目录，并在Node的原安装目录的父级目录创建一个指向新安装目录的链接。</p><p>使用<code>nvm root</code>命令可以查看NVM下载安装Node的目录，在该目录下有Node的原安装目录。</p><h3 id="5-2-常用命令"><a href="#5-2-常用命令" class="headerlink" title="5.2 常用命令"></a>5.2 常用命令</h3><h4 id="5-2-1-查看已安装"><a href="#5-2-1-查看已安装" class="headerlink" title="5.2.1 查看已安装"></a>5.2.1 查看已安装</h4><p>使用<code>nvm list</code>命令查看已安装的Node列表：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ nvm list</span><br><span class="line">  * 18.14.0 (Currently using 64-bit executable)</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><h4 id="5-2-2-查看可安装"><a href="#5-2-2-查看可安装" class="headerlink" title="5.2.2 查看可安装"></a>5.2.2 查看可安装</h4><p>使用<code>nvm list available</code>命令查看可以安装的Node列表：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ nvm list available</span><br><span class="line">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |</span><br><span class="line">|--------------|--------------|--------------|--------------|</span><br><span class="line">|    23.6.0    |   22.11.0    |   0.12.14    |   0.11.12    |</span><br><span class="line">|    23.5.0    |   20.18.3    |   0.12.13    |   0.11.11    |</span><br><span class="line">|    23.4.0    |   20.18.2    |   0.12.12    |   0.11.10    |</span><br><span class="line">|    23.3.0    |   20.18.1    |   0.12.11    |    0.11.9    |</span><br><span class="line">|    23.2.0    |   20.18.0    |   0.12.10    |    0.11.8    |</span><br><span class="line">|    23.1.0    |   20.17.0    |    0.12.9    |    0.11.7    |</span><br><span class="line">|    23.0.0    |   20.16.0    |    0.12.8    |    0.11.6    |</span><br><span class="line">...</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><h4 id="5-2-3-安装Node"><a href="#5-2-3-安装Node" class="headerlink" title="5.2.3 安装Node"></a>5.2.3 安装Node</h4><p>使用<code>nvm install 版本</code>命令安装指定版本的Node：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ nvm install 23.1.0</span><br><span class="line">Downloading node.js version 23.1.0 (64-bit)...</span><br><span class="line">Extracting node and npm...</span><br><span class="line">Complete</span><br><span class="line">npm v10.9.0 installed successfully.</span><br><span class="line">...</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><h4 id="5-2-4-切换Node"><a href="#5-2-4-切换Node" class="headerlink" title="5.2.4 切换Node"></a>5.2.4 切换Node</h4><p>使用<code>nvm use 版本</code>命令切换指定版本的Node：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ nvm use 23.1.0</span><br><span class="line">Now using node v23.1.0 (64-bit)</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><h4 id="5-2-5-卸载Node"><a href="#5-2-5-卸载Node" class="headerlink" title="5.2.5 卸载Node"></a>5.2.5 卸载Node</h4><p>使用<code>nvm uninstall 版本</code>命令卸载指定版本的Node：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ nvm uninstall 23.1.0</span><br><span class="line">Uninstalling node v23.1.0... <span class="keyword">done</span></span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><h2 id="6-Yarn"><a href="#6-Yarn" class="headerlink" title="6 Yarn"></a>6 Yarn</h2><h3 id="6-1-下载安装"><a href="#6-1-下载安装" class="headerlink" title="6.1 下载安装"></a>6.1 下载安装</h3><p>Yarn是由Facebook、Google、Exponent和Tilde联合推出了一个新的JS包管理工具，目的是为了弥补NPM的一些缺陷。</p><p>官网地址：<a href="https://yarnpkg.com/">https://yarnpkg.com/</a></p><p>Yarn的优点：</p><ul><li>并行安装：使用NPM安装软件包时采用顺序执行。使用Yarn安装软件包时采用并行执行，提高了性能。</li><li>离线模式：使用NPM再次安装已经安装过的软件包时需要从网络下载。使用Yarn再次安装已经安装过的软件包时直接从缓存中获取，节省了时间。</li><li>输出简洁：使用NPM打印的输出信息比较冗长，不容易识别报错的信息。使用Yarn打印的输出信息比较简洁，只打印出必要的信息，更加易读。</li></ul><p>使用NPM命令安装Yarn到全局：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ npm install yarn -g</span><br><span class="line">added 1 package <span class="keyword">in</span> 949ms</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><h3 id="6-2-常用命令"><a href="#6-2-常用命令" class="headerlink" title="6.2 常用命令"></a>6.2 常用命令</h3><h4 id="6-2-1-查看版本和配置信息"><a href="#6-2-1-查看版本和配置信息" class="headerlink" title="6.2.1 查看版本和配置信息"></a>6.2.1 查看版本和配置信息</h4><p>使用<code>yarn -v</code>命令查看NPM的版本：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ yarn -v</span><br><span class="line">1.22.22</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><p>使用<code>yarn config list</code>命令查看配置信息。</p><h4 id="6-2-2-初始化包"><a href="#6-2-2-初始化包" class="headerlink" title="6.2.2 初始化包"></a>6.2.2 初始化包</h4><p>使用<code>yarn init</code>命令或<code>yarn init -y</code>命令初始化包。</p><h4 id="6-2-3-下载并安装包"><a href="#6-2-3-下载并安装包" class="headerlink" title="6.2.3 下载并安装包"></a>6.2.3 下载并安装包</h4><p>使用<code>yarn add 包名</code>命令下载并安装包，默认安装到生产环境。</p><p>使用<code>yarn add 包名 -S</code>命令下载并安装包，安装到生产环境，支持开发环境和生产环境使用。</p><p>使用<code>yarn add 包名 -D</code>命令下载并安装包，安装到开发环境，仅支持开发环境使用。</p><p>使用<code>yarn global add 包名</code>命令安装到全局。</p><p>使用<code>yarn list</code>命令可以查看安装在本地的包有哪些。</p><p>使用<code>yarn global list</code>命令可以查看安装在全局的包有哪些。</p><p>使用<code>yarn bin</code>命令可以查看本地的bin目录。</p><p>使用<code>yarn global bin</code>命令可以查看全局的bin目录。</p><p>需要将全局的bin目录配置到环境变量，这样才能使用全局安装的包附带的命令。</p><p>默认使用国外的镜像源，使用<code>yarn config get registry</code>命令查看当前使用的镜像源。</p><p>使用<code>yarn config set registry https://registry.npmmirror.com/</code>命令设置为淘宝镜像源可以加速下载。</p><p>使用<code>yarn config set registry https://registry.yarnpkg.com</code>命令设置为默认的官方镜像源。</p><h4 id="6-2-4-删除包"><a href="#6-2-4-删除包" class="headerlink" title="6.2.4 删除包"></a>6.2.4 删除包</h4><p>使用<code>yarn remove 包名</code>命令删除依赖包。</p><p>使用<code>yarn global remove 包名</code>命令删除全局依赖包。</p><h4 id="6-2-5-重新安装包"><a href="#6-2-5-重新安装包" class="headerlink" title="6.2.5 重新安装包"></a>6.2.5 重新安装包</h4><p>使用<code>yarn</code>命令重新安装依赖包，重新生成<code>node_modules</code>目录。</p><h4 id="6-2-6-命令别名"><a href="#6-2-6-命令别名" class="headerlink" title="6.2.6 命令别名"></a>6.2.6 命令别名</h4><p>在<code>package.json</code>文件中配置好命令别名后，使用<code>yarn 别名</code>命令执行，不需要使用<code>run</code>参数。</p><h4 id="6-2-7-发布服务包"><a href="#6-2-7-发布服务包" class="headerlink" title="6.2.7 发布服务包"></a>6.2.7 发布服务包</h4><p>使用<code>yarn login</code>命令登录到NPM服务器，填写用户名和密码，以及邮箱收到的验证码。</p><p>使用<code>yarn publish</code>命令将包发布到NPM服务器。</p><h4 id="6-2-8-更新服务包"><a href="#6-2-8-更新服务包" class="headerlink" title="6.2.8 更新服务包"></a>6.2.8 更新服务包</h4><p>使用<code>yarn publish</code>命令将包发布到NPM服务器。</p><h4 id="6-2-9-删除服务包"><a href="#6-2-9-删除服务包" class="headerlink" title="6.2.9 删除服务包"></a>6.2.9 删除服务包</h4><p>Yarn不支持删除服务包，建议使用NPM删除服务包。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node的管理工具，包括NPM和NVM，以及NRM，还介绍了Yarn管理工具，并比较了NPM和Yarn的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>模块化</title>
    <link href="https://momashanhe.com/posts/20250306/100822/"/>
    <id>https://momashanhe.com/posts/20250306/100822/</id>
    <published>2025-03-06T02:08:22.000Z</published>
    <updated>2025-03-22T02:18:03.169Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node的模块化，比较了CommonJS模块和ES模块的区别，以及缓存和分类。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>模块是一个封装了特定功能的独立文件以便在其他文件中引入和使用，模块化是将一个复杂的程序文件依据一定规则或规范拆分成多个文件的过程。如果在开发时是按照模块开发的，那么整个项目就是模块化项目。</p><p>模块的内部数据是私有的，可以暴露内部数据让其他模块引用。</p><p>每个文件都可以作为一个模块，默认处于独立的作用域内。每个模块都包含一组相关的函数、对象或变量，通过这种方式，可以使用结构化的方法来管理大型应用程序，让代码更加清晰和易于维护。</p><p>Node支持以下几种模块：</p><ul><li>内置模块：Node自带的模块，如fs、http、path等。</li><li>用户自定义模块：由开发者创建的模块。</li><li>第三方模块：通过命令安装的模块，如express、lodash等。</li></ul><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><p>在使用模块时遵循CommonJS模块规范，简称CJS模块，也支持ES模块规范，简称EJS模块。</p><h3 id="2-1-CommonJS模块"><a href="#2-1-CommonJS模块" class="headerlink" title="2.1 CommonJS模块"></a>2.1 CommonJS模块</h3><h4 id="2-1-1-导入模块"><a href="#2-1-1-导入模块" class="headerlink" title="2.1.1 导入模块"></a>2.1.1 导入模块</h4><p>导入模块的方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;路径&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>导入自己创建的模块时，导入时路径建议写相对路径，不能省略<code>./</code>和<code>../</code>。</li><li>导入内置模块或第三方模块时，导入时直接写模块的名字即可，可以省略<code>./</code>和<code>../</code>。</li></ul><p>导入的文件类型说明：</p><ul><li>导入JS和JSON文件时可以不用写后缀，导入C和C++编写的Node扩展文件也可以不写后缀，但是一般用不到。</li><li>导入其他类型的文件会以JS文件进行处理。</li><li>导入文件夹会先检测该文件夹下的<code>package.json</code>文件中<code>main</code>属性对应的文件，如果对应的文件存在则导入，如果对应的文件不存在会报错。如果<code>package.json</code>文件不存在，或者<code>main</code>属性不存在，则会尝试导入文件夹下的<code>index.js</code>文件和<code>index.json</code>文件，如果还是没找到，就会报错。</li></ul><p>如果要使用第三方模块，需要先试用<code>npm install 模块名</code>命令进行安装，然后才能在代码里导入。</p><h4 id="2-1-2-暴露模块"><a href="#2-1-2-暴露模块" class="headerlink" title="2.1.2 暴露模块"></a>2.1.2 暴露模块</h4><p>如果需要让外部模块使用模块内的数据，就需要将模块内的数据暴露出去。</p><p>模块暴露数据的方式有两种：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = 数据;</span><br><span class="line"><span class="built_in">exports</span>.属性名 = 属性值;</span><br></pre></td></tr></table></figure><p>两种方式的区别：</p><ul><li><code>module.exports</code>是导出对象的真正引用，<code>exports</code>是导出对象的快捷方式。</li><li>不能直接赋值<code>exports = 数据</code>，这样会导致断开<code>exports</code>对<code>module.exports</code>的引用。</li></ul><p>如果暴露的属性名重复的话，后面的会覆盖前面的。</p><h4 id="2-1-3-示例"><a href="#2-1-3-示例" class="headerlink" title="2.1.3 示例"></a>2.1.3 示例</h4><p>暴露模块：</p><figure class="highlight js"><figcaption><span>tool.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sex</span> = sex;</span><br></pre></td></tr></table></figure><p>导入模块：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tools = <span class="built_in">require</span>(<span class="string">&#x27;./tools.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tools.<span class="property">sex</span>);<span class="comment">// 男</span></span><br></pre></td></tr></table></figure><h3 id="2-2-ES模块"><a href="#2-2-ES模块" class="headerlink" title="2.2 ES模块"></a>2.2 ES模块</h3><p>如果要在Node中使用ES模块，包括使用<code>import</code>加载和<code>export</code>输出，就需要将文件扩展名设置为<code>mjs</code>表示这是一个ES模块，启用严格模式。</p><p>如果不想修改文件的扩展名，也可以在项目的<code>package.json</code>文件中将<code>type</code>字段指定为<code>module</code>表示将JS都作为ES模块。一旦设置了以后，该目录里面的JS脚本都会被解释用ES模块。如果此时还想在项目中使用CommonJS模块，就需要将文件扩展名改为<code>cjs</code>表示这是一个CommonJS模块。</p><p>注意，ES模块与CommonJS模块尽量不要混用，一个项目里面尽量统一一种规范。</p><h3 id="2-3-比较"><a href="#2-3-比较" class="headerlink" title="2.3 比较"></a>2.3 比较</h3><p>语法上面：</p><ul><li>CommonJS模块使用<code>require()</code>加载和<code>module.exports</code>输出。</li><li>ES模块使用<code>import</code>加载和<code>export</code>输出。</li></ul><p>用法上面：</p><ul><li>CommonJS模块的<code>require()</code>是同步加载，后面的代码必须等待这个命令执行完，才会执行。</li><li>ES模块的<code>import</code>则是异步加载。或者更准确地说，ES模块有一个独立的静态解析阶段，依赖关系的分析是在那个阶段完成的，最底层的模块第一个执行。</li></ul><p>加载方式：</p><ul><li>扩展名为<code>mjs</code>的文件总是以ES模块加载。</li><li>扩展名为<code>cjs</code>的文件总是以CommonJS模块加载。</li><li>扩展名为<code>js</code>的文件加载取决于<code>package.json</code>里面<code>type</code>字段的设置，默认使用CommonJS模块加载。</li></ul><h3 id="2-4-混用"><a href="#2-4-混用" class="headerlink" title="2.4 混用"></a>2.4 混用</h3><h4 id="2-4-1-CommonJS模块加载ES模块"><a href="#2-4-1-CommonJS模块加载ES模块" class="headerlink" title="2.4.1 CommonJS模块加载ES模块"></a>2.4.1 CommonJS模块加载ES模块</h4><p>不能在CommonJS模块中使用<code>require()</code>加载ES模块，否则会报错，可以使用<code>import()</code>加载ES模块。</p><p>在<code>mjs</code>文件中暴露ES模块：</p><figure class="highlight js"><figcaption><span>tool.mjs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; sex &#125;;</span><br></pre></td></tr></table></figure><p>在<code>js</code>文件CommonJS模块中使用<code>import()</code>加载<code>mjs</code>文件ES模块：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> tools = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./tools.mjs&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(tools.<span class="property">sex</span>);<span class="comment">// 男</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>不能使用<code>require()</code>加载ES模块的原因是CommonJS的模块是同步加载，而ES模块内部使用的是顶层<code>await</code>命令，导致无法被同步加载。</p><h4 id="2-4-2-ES模块加载CommonJS模块"><a href="#2-4-2-ES模块加载CommonJS模块" class="headerlink" title="2.4.2 ES模块加载CommonJS模块"></a>2.4.2 ES模块加载CommonJS模块</h4><p>ES模块的<code>import</code>可以加载CommonJS模块。</p><p>在<code>js</code>文件中暴露CommonJS模块：</p><figure class="highlight js"><figcaption><span>tool.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sex</span> = sex;</span><br></pre></td></tr></table></figure><p>在<code>mjs</code>文件ES模块中使用<code>import</code>加载<code>js</code>文件CommonJS模块：</p><figure class="highlight js"><figcaption><span>test.mjs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tools <span class="keyword">from</span> <span class="string">&#x27;./tools.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tools.<span class="property">sex</span>);<span class="comment">// 男</span></span><br></pre></td></tr></table></figure><h2 id="3-缓存"><a href="#3-缓存" class="headerlink" title="3 缓存"></a>3 缓存</h2><p>Node会缓存已加载的模块，而不必每次都重新加载。</p><p>如果要重新加载模块，可以删除缓存：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.<span class="property">cache</span>[<span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;./tools.js&#x27;</span>)];</span><br><span class="line"><span class="keyword">let</span> tools = <span class="built_in">require</span>(<span class="string">&#x27;./tools.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tools.<span class="property">sex</span>);<span class="comment">// 男</span></span><br></pre></td></tr></table></figure><h2 id="4-分类"><a href="#4-分类" class="headerlink" title="4 分类"></a>4 分类</h2><p>根据模块的来源、作用范围可以分为4钟类别：</p><ul><li>内置模块：Node内置的模块，无需额外安装，通过<code>require(模块名)</code>引入。</li><li>自定义模块：开发者创建的模块，通过<code>require(路径)</code>引入。</li><li>本地模块：通过<code>npm install 模块</code>安装在本地<code>node_modules</code>目录的第三方模块，通过<code>require(模块名)</code>引入。</li><li>全局模块：通过<code>npm install 模块 -g</code>安装在全局<code>node_modules</code>目录的第三方模块，通过<code>require(模块名)</code>引入。</li></ul><p>将内置模块以外的3种模块称为文件模块。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node的模块化，比较了CommonJS模块和ES模块的区别，以及缓存和分类。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>初体验</title>
    <link href="https://momashanhe.com/posts/20250305/221745/"/>
    <id>https://momashanhe.com/posts/20250305/221745/</id>
    <published>2025-03-05T14:17:45.000Z</published>
    <updated>2025-03-21T15:51:48.697Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了如何使用Node编写和运行程序。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-编写"><a href="#1-编写" class="headerlink" title="1 编写"></a>1 编写</h2><p>新建<code>hello.js</code>文件并输入内容保存：</p><figure class="highlight js"><figcaption><span>hello.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure><p>该命令的作用是在控制台打印一行字符串。</p><h2 id="2-运行"><a href="#2-运行" class="headerlink" title="2 运行"></a>2 运行</h2><p>在VSCode编辑器中打开文件，并在终端里使用<code>node</code>命令运行文件：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ node hello.js </span><br><span class="line">hello world</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure><p>回车后，能够在终端中看到打印的字符串。</p><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3 注意事项"></a>3 注意事项</h2><p>Node中不能使用浏览器提供的BOM和DOM等API，可以使用Node提供的后端API。</p><p>在浏览器中如果要使用全局对象，需要使用window对象。在Node中如果要使用全局对象，需要使用global对象。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了如何使用Node编写和运行程序。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>安装</title>
    <link href="https://momashanhe.com/posts/20250224/102746/"/>
    <id>https://momashanhe.com/posts/20250224/102746/</id>
    <published>2025-02-24T02:27:46.000Z</published>
    <updated>2025-03-21T15:51:37.056Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node的下载和安装。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h2><p>下载网站：</p><ul><li><a href="https://nodejs.org/">英文官方</a></li><li><a href="https://nodejs.cn/">中文</a></li></ul><p>软件分为LTS和Current两个版本：</p><ul><li>LTS：即Long Term Support，长期稳定版本，版本号较老，但胜在稳定。</li><li>Current：当前最新版本，版本号最新，能体验新特性，但可能有BUG存在。</li></ul><p>建议下载适合自己操作系统和架构的LTS版本进行安装，下载得到的是后缀为<code>.msi</code>的文件。</p><p>如果需要下载历史版本可以访问官网提供的下载页：<a href="https://nodejs.org/download/release/">历史版本</a></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h2><p>双击下载的文件安装即可。</p><p>注意这里不需要勾选，继续下一步即可：<br><img src="/@image/104001/002-20250305110812.jpg" alt="20250305110812-安装"></p><p>安装结束后打开base命令行，输入<code>node -v</code>命令查询版本：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">momashanhe@localhost momashanhe $ node -v</span><br><span class="line">v18.14.0</span><br><span class="line">momashanhe@localhost momashanhe $</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node的下载和安装。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>比较for-in和for-of两种遍历方式</title>
    <link href="https://momashanhe.com/posts/20250220/101944/"/>
    <id>https://momashanhe.com/posts/20250220/101944/</id>
    <published>2025-02-20T02:19:44.000Z</published>
    <updated>2025-03-13T02:43:43.639Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要比较了JS中for-in和for-of两种遍历方式有什么区别，以及使用场景。</p><span id="more"></span><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><h3 id="1-1-for-in"><a href="#1-1-for-in" class="headerlink" title="1.1 for-in"></a>1.1 for-in</h3><p>使用for-in可以遍历对象所有属性，基于原型链，不能保证按顺序遍历，支持遍历对象属性。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; &gt; &#x27;</span> + arr[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; &gt; &#x27;</span> + person[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-for-of"><a href="#1-2-for-of" class="headerlink" title="1.2 for-of"></a>1.2 for-of</h3><p>使用for-of可以遍历所有可迭代对象，能保证按顺序遍历，不支持遍历对象属性。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2 总结"></a>2 总结</h2><p>使用for-in可以遍历对象属性，在遍历时可以获取到索引下标，根据索引下标进行遍历，不能保证按照顺序遍历。</p><p>如果需要遍历对象属性，或者需要获取索引下标，可以使用for-in的方式。</p><p>使用for-of可以遍历可迭代对象，在遍历时直接获取值，能保证按照顺序遍历。</p><p>如果需要按顺序遍历，并且不是遍历对象属性，也不需要索引下标，可以使用for-of的方式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要比较了JS中for-in和for-of两种遍历方式有什么区别，以及使用场景。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>简写优化技术</title>
    <link href="https://momashanhe.com/posts/20250220/092707/"/>
    <id>https://momashanhe.com/posts/20250220/092707/</id>
    <published>2025-02-20T01:27:07.000Z</published>
    <updated>2025-02-24T01:13:35.016Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了JS中可以简写和优化的代码。</p><span id="more"></span><h2 id="1-多个条件"><a href="#1-多个条件" class="headerlink" title="1 多个条件"></a>1 多个条件</h2><p>在多个条件的判断语句中可以使用<code>include()</code>方法简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">if</span> (x === <span class="string">&#x27;abc&#x27;</span> || x === <span class="string">&#x27;def&#x27;</span> || x === <span class="string">&#x27;ghi&#x27;</span> || x ===<span class="string">&#x27;jkl&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">//代码逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;ghi&#x27;</span>, <span class="string">&#x27;jkl&#x27;</span>].<span class="title function_">includes</span>(x)) &#123;</span><br><span class="line">  <span class="comment">//代码逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-判断语句"><a href="#2-判断语句" class="headerlink" title="2 判断语句"></a>2 判断语句</h2><p>在简单的判断语句中可以使用三元运算符简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;未知&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">  result = <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  result = <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> result = score &gt;= <span class="number">60</span> ? <span class="string">&#x27;及格&#x27;</span> : <span class="string">&#x27;不及格&#x27;</span>;</span><br></pre></td></tr></table></figure><p>支持嵌套条件的场景：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;未知&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    result = <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  result = <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> result = score &gt;= <span class="number">60</span> ? score &gt;= <span class="number">90</span> ? <span class="string">&#x27;优秀&#x27;</span> : <span class="string">&#x27;及格&#x27;</span> : <span class="string">&#x27;不及格&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-声明多个变量"><a href="#3-声明多个变量" class="headerlink" title="3 声明多个变量"></a>3 声明多个变量</h2><p>在声明多个变量时可以简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="4-非空判断"><a href="#4-非空判断" class="headerlink" title="4 非空判断"></a>4 非空判断</h2><p>在判断变量是否为空时可以简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; x !== <span class="literal">undefined</span> &amp;&amp; x !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  result = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">  result = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">  result = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> result = x || <span class="string">&#x27;error&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="5-Switch判断简写"><a href="#5-Switch判断简写" class="headerlink" title="5 Switch判断简写"></a>5 Switch判断简写</h2><p>在使用Switch判断语句时可以简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">switch</span> (data) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="title function_">test1</span>();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="title function_">test2</span>();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="title function_">test3</span>();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">  <span class="number">1</span>: test1,</span><br><span class="line">  <span class="number">2</span>: test2,</span><br><span class="line">  <span class="number">3</span>: test3</span><br><span class="line">&#125;;</span><br><span class="line">test[data] &amp;&amp; test[data]();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了JS中可以简写和优化的代码。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>简介</title>
    <link href="https://momashanhe.com/posts/20250214/102820/"/>
    <id>https://momashanhe.com/posts/20250214/102820/</id>
    <published>2025-02-14T02:28:20.000Z</published>
    <updated>2025-03-21T06:49:21.764Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文介绍了Node是什么，与浏览器的区别，以及其优势和作用。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>Node是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。</p><p>Node采用Google开发的V8引擎运行JS代码，使用事件驱动、非阻塞和异步I&#x2F;O模型等技术来提高性能，可优化应用程序的传输量和规模。</p><p>简单来说，Node是一个让JavaScript运行在服务器端的开发平台，它让JavaScript的触角伸到了服务器端。</p><h2 id="2-与JavaScript和浏览器的区别"><a href="#2-与JavaScript和浏览器的区别" class="headerlink" title="2 与JavaScript和浏览器的区别"></a>2 与JavaScript和浏览器的区别</h2><p>JavaScript是一种高级编程语言，严格来说是指ECMAScript，不包含BOM和DOM。</p><p>浏览器提供了JavaScript的运行环境，包括全局对象、BOM、DOM等工具方便JavaScript脚本的解析和执行，浏览器是客户端的一种。</p><p>浏览器都有两个引擎：一个是渲染引擎，一个是JavaScript解析执行引擎。比如Chrome浏览器的V8引擎就是专门用来解析和执行JavaScript代码的。</p><p>Node是一个开源的、跨平台的JavaScript运行环境，允许JavaScript在服务器端运行。</p><p>以前的JavaScript只能在客户端运行，Node将Chrome浏览器里的V8引擎移植到自己的环境当中，在这个环境之上构建了一系列的底层API，提供了一些特定环境的编程接口。</p><p>虽然Node不提供BOM和DOM等客户端用到的API，但提供了丰富的服务端API，这些API是对ECMAScript的扩展，使得JavaScript能够在服务器端进行高效的开发工作。</p><h2 id="3-优势"><a href="#3-优势" class="headerlink" title="3 优势"></a>3 优势</h2><p>服务端的运行环境有很多，比如Tomcat，但Node具有其他运行环境没有的优势。</p><h3 id="3-1-非阻塞I-O模型和事件驱动架构"><a href="#3-1-非阻塞I-O模型和事件驱动架构" class="headerlink" title="3.1 非阻塞I&#x2F;O模型和事件驱动架构"></a>3.1 非阻塞I&#x2F;O模型和事件驱动架构</h3><p>Node采用非阻塞I&#x2F;O模型和事件驱动架构，这是其核心优势之一。</p><p>在传统的服务器端编程中，当一个请求需要进行I&#x2F;O操作时，采用的是阻塞I&#x2F;O模型。例如，当读取文件时，服务器会阻塞当前线程，直到操作完成。</p><p>而Node通过非阻塞I&#x2F;O模型，允许服务器在等待I&#x2F;O操作完成时继续处理其他请求。例如，当请求需要读取文件时，Node不会阻塞线程，而是将读取操作交给底层系统，同时继续处理其他请求。当文件读取完成时，会触发一个事件，通知服务器继续处理该请求的后续逻辑。</p><p>这种非阻塞I&#x2F;O和事件驱动的机制使得Node能够高效地处理大量并发请求，特别适合构建高性能的网络应用。</p><h3 id="3-2-语言统一性"><a href="#3-2-语言统一性" class="headerlink" title="3.2 语言统一性"></a>3.2 语言统一性</h3><p>Node使用JavaScript作为开发语言，这意味着开发者可以在服务器端和客户端使用相同的语言进行编程。</p><p>这种语言的统一性降低了学习成本，使得前端开发者能够更容易地进入后端开发领域，也使得代码的复用性更高，开发者可以将一些公共逻辑在客户端和服务器端共享。</p><h3 id="3-3-丰富的生态系统"><a href="#3-3-丰富的生态系统" class="headerlink" title="3.3 丰富的生态系统"></a>3.3 丰富的生态系统</h3><p>Node使用NPM作为包管理器，NPM提供了庞大的JavaScript库和模块生态系统，开发者可以轻松找到所需的工具和框架。</p><h3 id="3-4-轻量级和快速开发"><a href="#3-4-轻量级和快速开发" class="headerlink" title="3.4 轻量级和快速开发"></a>3.4 轻量级和快速开发</h3><p>Node的轻量级特性和丰富的框架使得开发者能够快速开发和部署应用。</p><h2 id="4-作用"><a href="#4-作用" class="headerlink" title="4 作用"></a>4 作用</h2><p>开发服务器应用：开发运行在服务器上的程序。</p><p>开发工具类应用：Webpack，Vite，Babel。</p><p>开发桌面端应用：Electron，VSCode，Figma，Postman。</p><h2 id="5-官方文档"><a href="#5-官方文档" class="headerlink" title="5 官方文档"></a>5 官方文档</h2><p>官方文档地址：<a href="https://nodejs.cn/api/v18/index.html">https://nodejs.cn/api/v18/index.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文介绍了Node是什么，与浏览器的区别，以及其优势和作用。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>异步编程</title>
    <link href="https://momashanhe.com/posts/20250121/102547/"/>
    <id>https://momashanhe.com/posts/20250121/102547/</id>
    <published>2025-01-21T02:25:47.000Z</published>
    <updated>2025-03-20T06:36:03.344Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了常见的几种实现异步。</p><span id="more"></span><h2 id="1-回调函数"><a href="#1-回调函数" class="headerlink" title="1 回调函数"></a>1 回调函数</h2><p>在微任务队列出现之前，JS实现异步的主要方式就是通过回调函数，即通过AJAX请求的回调函数实现异步调用。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;/api/getData&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;调用成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种异步调用不能控制顺序，如果想在第一个回调函数执行后再执行第二个回调函数，就需要将第二个回调函数嵌套在第一个回调函数中，这种回调函数中嵌套回调函数的情况就叫做回调地狱。</p><h2 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2 Promise"></a>2 Promise</h2><p>Promise作为典型的微任务之一，它的出现可以使JS达到异步执行的效果。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">adder</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(++arg);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">adder</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="title function_">adder</span>(val))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val));</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>();<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="3-Generator"><a href="#3-Generator" class="headerlink" title="3 Generator"></a>3 Generator</h2><p>Generator和Promise都是在ES6新增的，Generator返回的是一个Iterator对象。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">add</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(++arg);<span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">yield</span> arg;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(++arg);<span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-async和await"><a href="#4-async和await" class="headerlink" title="4 async和await"></a>4 async和await</h2><p>async和await是ES7提出的关于异步的终极解决方案，进一步简化了Promise的代码。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">adder</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(++arg);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// adder(1)</span></span><br><span class="line">  <span class="comment">//   .then(val =&gt; adder(val))</span></span><br><span class="line">  <span class="comment">//   .then(val =&gt; console.log(val))</span></span><br><span class="line">  <span class="keyword">let</span> val = <span class="keyword">await</span> <span class="title function_">adder</span>(<span class="number">1</span>);</span><br><span class="line">  val = <span class="keyword">await</span> <span class="title function_">adder</span>(val);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>();<span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了常见的几种实现异步。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="异步" scheme="https://momashanhe.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
</feed>

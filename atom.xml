<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨码山河</title>
  
  <subtitle>代码改变世界</subtitle>
  <link href="https://momashanhe.com/atom.xml" rel="self"/>
  
  <link href="https://momashanhe.com/"/>
  <updated>2025-05-30T23:28:26.751Z</updated>
  <id>https://momashanhe.com/</id>
  
  <author>
    <name>墨码山河</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>管理事务</title>
    <link href="https://momashanhe.com/posts/20250525/093123/"/>
    <id>https://momashanhe.com/posts/20250525/093123/</id>
    <published>2025-05-25T01:31:23.000Z</published>
    <updated>2025-05-30T23:28:26.751Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DCL语句管理事务。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>事务是一组逻辑处理单位，可以是执行一条SQL语句，也可以是执行几个SQL语句。</p><p>事务用来保证数据由一种存储情况变为另一种存储情况，组成事务的各个单元要么都执行成功，要么都执行失败。</p><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><p>如果只是简单的一条SQL语句的执行，那么是不需要事务的，但在一些复杂的情况下，一个操作会涉及到多条SQL语句的执行，这种情况下就有必要保证所有的操作全部成功或者全部失败。</p><p>比如小明给小红转账的操作，就会涉及到从小明账户扣钱和给小红账户充钱的两个操作：</p><ul><li>只有两个操作都成功执行了整个操作才算成功，这时就可以提交整个事务，状态由转账前变为转账后。</li><li>如果任何一个操作执行失败的话整个操作都要算做失败，这时就需要恢复事务，保证两个账户上的金额和转账前是一样的，状态恢复到转账前。</li></ul><p>事务保证了一组操作的完整性和安全性。</p><h3 id="1-3-存储引擎"><a href="#1-3-存储引擎" class="headerlink" title="1.3 存储引擎"></a>1.3 存储引擎</h3><p>默认使用InnoDB引擎，支持事务。</p><p>使用命令查看数据库支持的存储引擎，以及存储引擎是否支持事务：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> engines;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+---------+--------------+------+------------+</span></span><br><span class="line"><span class="operator">|</span> Engine             <span class="operator">|</span> Support <span class="operator">|</span> Comment <span class="operator">|</span> Transactions <span class="operator">|</span> XA   <span class="operator">|</span> Savepoints <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+---------+--------------+------+------------+</span></span><br><span class="line"><span class="operator">|</span> InnoDB             <span class="operator">|</span> <span class="keyword">DEFAULT</span> <span class="operator">|</span> ...     <span class="operator">|</span> YES          <span class="operator">|</span> YES  <span class="operator">|</span> YES        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MRG_MYISAM         <span class="operator">|</span> YES     <span class="operator">|</span> ...     <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MEMORY             <span class="operator">|</span> YES     <span class="operator">|</span> ...     <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLACKHOLE          <span class="operator">|</span> YES     <span class="operator">|</span> ...     <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MyISAM             <span class="operator">|</span> YES     <span class="operator">|</span> ...     <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CSV                <span class="operator">|</span> YES     <span class="operator">|</span> ...     <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ARCHIVE            <span class="operator">|</span> YES     <span class="operator">|</span> ...     <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PERFORMANCE_SCHEMA <span class="operator">|</span> YES     <span class="operator">|</span> ...     <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FEDERATED          <span class="operator">|</span> <span class="keyword">NO</span>      <span class="operator">|</span> ...     <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+---------+--------------+------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>Transactions</code>列中显示<code>YES</code>表示支持事务。</p><h3 id="1-4-基本术语"><a href="#1-4-基本术语" class="headerlink" title="1.4 基本术语"></a>1.4 基本术语</h3><p>保存点（Savepoint）指在事务执行前或者事务执行后，数据在数据库里的存储情况，有时也称为状态。</p><p>回退（Rollback）指撤销事务的操作，事务期间执行的操作都将失效，事务恢复到上个状态。</p><p>提交（Commit）指提交事务的操作，事务期间执行的操作全部生效，事务进入新的状态。</p><h3 id="1-5-事务特性"><a href="#1-5-事务特性" class="headerlink" title="1.5 事务特性"></a>1.5 事务特性</h3><p>原子性（Atomicity）指事务包含的所有操作要么全部成功提交，要么全部失败回滚。</p><p>一致性（Consistency）指事务必须使数据库的数据和资源从一个一致性状态变换到另一个一致性状态。</p><p>隔离性（Isolation）指当多个用户并发访问数据库并且操作同一张表时，数据库为每一个用户开启事务，不会被其他事务的操作干扰，多个并发事务之间相互隔离。</p><p>持久性（Durability）指一个事务一旦被提交了，对数据的改变就是永久性的，哪怕数据库遇到故障也不会丢失提交的改动。</p><h3 id="1-6-并发问题"><a href="#1-6-并发问题" class="headerlink" title="1.6 并发问题"></a>1.6 并发问题</h3><p>对事务的操作分为两类：一种是读取事务（查），另一种是修改事务（增删改）。</p><p>单个事务的情况下，不会产生并发问题。如果多个事务在同一时刻操作同一数据可能会影响最终期望的结果，产生并发问题。</p><p>常见的并发问题：</p><ul><li>脏写：更新时更新。事务一更新数据未提交，事务二更新相同数据并提交，事务一回滚，事务二提交的更新数据无效。</li><li>脏读：更新时读取。事务一更新数据未提交，事务二读取数据，事务一回滚，事务二读取的数据无效。</li><li>不可重复读：读取时更新或者删除。事务一读取数据，事务二修改数据或者删除数据，在事务二提交，事务一读取到不同的数据。</li><li>幻读：读取时插入。事务一读取数据，事务二插入数据，在事务二提交，事务一读取到插入的数据。</li></ul><p>更新丢失：</p><ul><li>第一类更新丢失：更新时更新。事务一更新数据并提交，事务二更新相同数据并回滚，事务一提交的更新数据无效。</li><li>第二类更新丢失：更新时更新。事务一更新数据并提交，事务二更新相同数据并提交，事务一提交的更新数据无效。</li></ul><p>数据库不允许第一类更新丢失问题，第二类更新丢失问题无法通过隔离级别解决，一般使用锁解决。</p><h3 id="1-7-隔离级别"><a href="#1-7-隔离级别" class="headerlink" title="1.7 隔离级别"></a>1.7 隔离级别</h3><p>为了解决不同程度的并发问题，SQL标准定义了隔离级别，每个级别都有各自的具体规则。</p><p>主要的隔离级别有四种：</p><ul><li>读未提交（RU，Read Uncommitted）：最低的隔离级别，可以看到未提交事务的执行结果，同时更新相同数据会阻塞。可避免脏写。</li><li>读已提交（RU，Read Committed）：大多数系统的默认隔离级别，但不是MySQL默认隔离级别，只能看到已提交事务的执行结果。可避免脏写、脏读。</li><li>可重复读（RR，Repeatable Read）：MySQL默认隔离级别，在事务执行期间，读取的都是相同的数据。可避免脏写、脏读、不可重复读。</li><li>串行化（S，Serializable）：最高的隔离级别，通过强制事务排序解决并发问题。在每个读操作的数据行增加共享锁，可能导致大量超时和竞争。可避免脏写、脏读、不可重复读、幻读。</li></ul><p>MySQL的默认隔离级别是RR级别，InnoDB存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了幻读的问题。</p><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-自动提交"><a href="#2-1-自动提交" class="headerlink" title="2.1 自动提交"></a>2.1 自动提交</h3><p>查询事务自动提交：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br></pre></td></tr></table></figure><p>开启自动提交：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>关闭自动提交：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-开启事务"><a href="#2-2-开启事务" class="headerlink" title="2.2 开启事务"></a>2.2 开启事务</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br></pre></td></tr></table></figure><p>也可以使用<code>begin;</code>或者<code>begin work;</code>开启事务。</p><h3 id="2-3-提交事务"><a href="#2-3-提交事务" class="headerlink" title="2.3 提交事务"></a>2.3 提交事务</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>也可以使用<code>commit work;</code>提交事务。</p><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> student <span class="keyword">set</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">904</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-回滚事务"><a href="#2-4-回滚事务" class="headerlink" title="2.4 回滚事务"></a>2.4 回滚事务</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><p>也可以使用<code>rollback work;</code>回滚事务。</p><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> student <span class="keyword">set</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">904</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-设置还原点"><a href="#2-5-设置还原点" class="headerlink" title="2.5 设置还原点"></a>2.5 设置还原点</h3><p>还原点必须要在事务内才能使用，否则会产生错误。</p><p>创建还原点：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">savepoint</span> 名称;</span><br></pre></td></tr></table></figure><p>回滚还原点：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> 名称;</span><br></pre></td></tr></table></figure><p>删除还原点：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">release</span> <span class="keyword">savepoint</span> 名称;</span><br></pre></td></tr></table></figure><h3 id="2-6-设置隔离级别"><a href="#2-6-设置隔离级别" class="headerlink" title="2.6 设置隔离级别"></a>2.6 设置隔离级别</h3><p>查看当前事务的隔离级别：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@tx_isolation</span>;</span><br></pre></td></tr></table></figure><p>设置隔离级别：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> tx_isolation <span class="operator">=</span> &quot;隔离级别名称&quot;;</span><br></pre></td></tr></table></figure><p>隔离级别名称：</p><ul><li>Read-Uncommitted：读未提交。</li><li>Read-Committed：读已提交。</li><li>Repeatable-Read：可重复读。</li><li>Serializable：串行化。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DCL语句管理事务。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>管理用户权限</title>
    <link href="https://momashanhe.com/posts/20250524/212305/"/>
    <id>https://momashanhe.com/posts/20250524/212305/</id>
    <published>2025-05-24T13:23:05.000Z</published>
    <updated>2025-05-29T01:17:33.713Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DCL语句管理用户权限。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-用户"><a href="#1-1-用户" class="headerlink" title="1.1 用户"></a>1.1 用户</h3><p>用户指的是操作和使用数据库的人，使用数据库需要用户先通过用户名和密码进行连接，然后才能进行操作，不同的用户可以设置不同的权限。</p><p>在MySQL数据库中，所有的用户信息都保存在user表中。</p><h3 id="1-2-权限"><a href="#1-2-权限" class="headerlink" title="1.2 权限"></a>1.2 权限</h3><p>权限用来控制用户对数据库的操作，可以限制用户只能访问特定的数据，或者只能执行特定的操作。</p><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-查看用户"><a href="#2-1-查看用户" class="headerlink" title="2.1 查看用户"></a>2.1 查看用户</h3><p>查看user表的结构：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type     <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Host  <span class="operator">|</span> <span class="type">char</span>(<span class="number">60</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">User</span>  <span class="operator">|</span> <span class="type">char</span>(<span class="number">32</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ...   <span class="operator">|</span> ...      <span class="operator">|</span> ...  <span class="operator">|</span> ... <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+----------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">45</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)                  </span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在MySQL数据库中，对用户的管理是通过对应的Host和User共同组成的主键来区分的。</p><p>其中，User代表用户的用户名，Host代表允许访问的客户端地址（IP地址或者是主机地址），使用<code>*</code>表示所有的客户端都可以访问。</p><p>查询user表数据：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> host, <span class="keyword">user</span>, password <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------+</span></span><br><span class="line"><span class="operator">|</span> host      <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------+</span></span><br><span class="line"><span class="operator">|</span> localhost <span class="operator">|</span> root <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ...       <span class="operator">|</span> ...  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在安装MySQL数据库的时候，如果没有创建匿名用户，那么在user表里只有一个root用户。</p><p>在创建新用户或更改密码后需要使用<code>flush privileges;</code>命令刷新权限相关表，否则会出现拒绝访问。也可以重新启动数据库使新设置生效。</p><h3 id="2-2-创建用户"><a href="#2-2-创建用户" class="headerlink" title="2.2 创建用户"></a>2.2 创建用户</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名@主机地址 identified <span class="keyword">by</span> 明文密码;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>省略<code>@主机地址</code>表示任何IP地址都可以使用这个用户。</li><li>省略<code>identified by 明文密码</code>表示不需要密码就可以登录。</li></ul><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-删除用户"><a href="#2-3-删除用户" class="headerlink" title="2.3 删除用户"></a>2.3 删除用户</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> 用户名@主机地址;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-修改密码"><a href="#2-4-修改密码" class="headerlink" title="2.4 修改密码"></a>2.4 修改密码</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> 用户名@主机地址 identified <span class="keyword">by</span> 明文密码;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-用户授权"><a href="#2-5-用户授权" class="headerlink" title="2.5 用户授权"></a>2.5 用户授权</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 库名.表名 <span class="keyword">to</span> 用户名@主机地址 indentified <span class="keyword">by</span> 明文密码 [<span class="keyword">with</span> <span class="keyword">grant</span> option] [<span class="keyword">with</span> admin option]</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>使用<code>with grant option</code>授权，在取消时会撤销连带的权限。</li><li>使用<code>with admin option</code>授权，在取消时会保留连带的权限。</li></ul><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> (id, name) <span class="keyword">on</span> demo.test <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-6-取消授权"><a href="#2-6-取消授权" class="headerlink" title="2.6 取消授权"></a>2.6 取消授权</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 库名.表名 <span class="keyword">from</span> 用户名@主机地址</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DCL语句管理用户权限。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>管理触发器</title>
    <link href="https://momashanhe.com/posts/20250524/162541/"/>
    <id>https://momashanhe.com/posts/20250524/162541/</id>
    <published>2025-05-24T08:25:41.000Z</published>
    <updated>2025-05-29T09:27:39.146Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DDL语句管理触发器。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>触发器与存储过程和函数一样，都是由SQL语句和过程式语句组成的代码片段。</p><p>触发器需要由某个事件触发某个操作，这些事件包括增删改的DML操作。当数据库执行这些语句时候，就相当于事件发生了，就会自动激发触发器执行相应的操作。</p><h3 id="1-2-比较"><a href="#1-2-比较" class="headerlink" title="1.2 比较"></a>1.2 比较</h3><p>与存储过程和函数相比，触发器有以下几个特点：</p><ul><li>触发器不需要显示调用，当事件触发时会自动调用。</li><li>触发器没有返回值，其执行结果是直接对表中的数据进行修改或对触发事件进行处理。</li><li>触发器主要用于维护数据的一致性和完整性。</li></ul><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> 触发器名称 </span><br><span class="line">触发时间 触发事件 <span class="keyword">on</span> 表名 </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line">触发器主体;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>触发器名称：指定触发器的名称。</li><li>触发时间：before表示在事件之前触发，after表示在事件之后触发。</li><li>触发事件：insert表示插入记录时触发，update表示更新记录时触发，delete表示删除记录时触发。</li><li>表名：表示触发器监控的对象。</li><li>触发器主体：触发器的主体部分，可以是单条SQL语句，也可以是被<code>begin</code>和<code>end</code>包裹的复合语句块。</li></ul><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> scoreBeforeInsert</span><br><span class="line">before <span class="keyword">insert</span> <span class="keyword">on</span> score</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score_log (action) <span class="keyword">values</span> (<span class="string">&#x27;insert&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-2-查看"><a href="#2-2-查看" class="headerlink" title="2.2 查看"></a>2.2 查看</h3><p>查看所有触发器：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> triggers;</span><br></pre></td></tr></table></figure><p>查看触发器的创建：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">trigger</span> 触发器名称;</span><br></pre></td></tr></table></figure><h3 id="2-3-修改"><a href="#2-3-修改" class="headerlink" title="2.3 修改"></a>2.3 修改</h3><p>可以通过先删除触发器，然后重新创建触发器的方法实现修改的操作。</p><h3 id="2-4-删除"><a href="#2-4-删除" class="headerlink" title="2.4 删除"></a>2.4 删除</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> 触发器名称;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">trigger</span> scoreBeforeInsert;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DDL语句管理触发器。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>管理函数</title>
    <link href="https://momashanhe.com/posts/20250523/100841/"/>
    <id>https://momashanhe.com/posts/20250523/100841/</id>
    <published>2025-05-23T02:08:41.000Z</published>
    <updated>2025-05-30T05:24:49.085Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DDL语句管理函数。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>函数是一种与存储过程十分相似的过程式数据库对象。它与存储过程一样，都是由SQL语句和过程式语句组成的代码片段，但函数可以在SQL语句中直接调用。</p><h3 id="1-2-函数与存储过程的区别"><a href="#1-2-函数与存储过程的区别" class="headerlink" title="1.2 函数与存储过程的区别"></a>1.2 函数与存储过程的区别</h3><p>函数不能拥有输出参数，因为函数自身就是输出参数，存储过程可以拥有输出参数。</p><p>函数中必须有返回值，存储过程没有返回值。</p><p>可以直接对函数进行调用而不需要使用call语句，对存储过程的调用需要使用call语句。</p><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名称([参数])</span><br><span class="line"><span class="keyword">returns</span> 类型</span><br><span class="line">函数主体</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>函数名称：指定函数的名称。注意，函数不能与存储过程具有相同的名称。</li><li>参数：指定函数的参数。这里的参数只有名称和类型，不能指定参数类型。</li><li>类型：声明函数返回值的数据类型。</li><li>函数主体：函数的主体部分，和存储主体类似，函数主体还必须包含返回值。在返回值中包含select语句时，只能是一行且只能有一列值。</li></ul><p>创建不带参数的函数：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> showMaxGrade()</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">select</span> <span class="built_in">max</span>(grade) <span class="keyword">from</span> score);</span><br></pre></td></tr></table></figure><p>创建带有参数的函数：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> showStuGrade(stu <span class="type">varchar</span>(<span class="number">45</span>))</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">select</span> grade <span class="keyword">from</span> score <span class="keyword">where</span> student <span class="operator">=</span> stu);</span><br></pre></td></tr></table></figure><p>创建带有多个语句的函数：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> showRandGrade()</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span>(<span class="number">5</span>)  </span><br><span class="line"><span class="keyword">begin</span>   </span><br><span class="line">  <span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;  </span><br><span class="line">  <span class="keyword">set</span> i <span class="operator">=</span> <span class="built_in">floor</span>(rand() <span class="operator">*</span> <span class="number">10</span>);  </span><br><span class="line">  <span class="keyword">return</span> i;  </span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 函数名称([参数]);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> showMaxGrade();</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> showMaxGrade() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-查看"><a href="#2-3-查看" class="headerlink" title="2.3 查看"></a>2.3 查看</h3><p>查看所有函数：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">function</span> status;</span><br></pre></td></tr></table></figure><p>查看函数的创建：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">function</span> 函数名称;</span><br></pre></td></tr></table></figure><h3 id="2-4-修改"><a href="#2-4-修改" class="headerlink" title="2.4 修改"></a>2.4 修改</h3><p>可以通过先删除函数，然后重新创建函数的方法实现修改的操作。</p><h3 id="2-5-删除"><a href="#2-5-删除" class="headerlink" title="2.5 删除"></a>2.5 删除</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> 函数名称;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">function</span> showMaxGrade;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-单行函数"><a href="#3-单行函数" class="headerlink" title="3 单行函数"></a>3 单行函数</h2><p>处理字符串：</p><table>  <thead>    <tr>      <th>函数</th>      <th>用法</th>    </tr>  </thead>  <tbody>    <tr>      <td>LENGTH(s)</td>      <td>返回字符串s的字节数，和字符集有关</td>    </tr>    <tr>      <td>CONCAT(s1,s2,...,sn)</td>      <td>连接s1,s2,...,sn为一个字符串</td>    </tr>    <tr>      <td>SUBSTR(s,index,len)</td>      <td>返回字符串s从index位置开始的len个字符，位置index从1开始</td>    </tr>    <tr>      <td>LOCATE(substr,s)</td>      <td>返回字符串substr在字符串s中首次出现的位置，位置从1开始，未找到返回0</td>    </tr>  </tbody></table><p>获取日期时间：</p><table>  <thead>    <tr>      <th>函数</th>      <th>用法</th>    </tr>  </thead>  <tbody>    <tr>      <td>CURDATE() / CURRENT_DATE()</td>      <td>返回当前日期，只包含年月日</td>    </tr>    <tr>      <td>CURTIME() / CURRENT_TIME()</td>      <td>返回当前时间，只包含时分秒</td>    </tr>    <tr>      <td>NOW() / LOCALTIME() / LOCALTIMESTAMP()</td>      <td>返回当前系统日期和时间</td>    </tr>    <tr>      <td>YEAR(date) / MONTH(date) / DAY(date)</td>      <td>返回指定日期的年月日</td>    </tr>    <tr>      <td>HOUR(time) / MINUTE(time) / SECOND(time)</td>      <td>返回指定时间的时分秒</td>    </tr>    <tr>      <td>MONTHNAME(date)</td>      <td>返回指定日期对应的月份</td>    </tr>    <tr>      <td>DAYNAME(date)</td>      <td>返回指定日期对应的星期</td>    </tr>    <tr>      <td>WEEKOFYEAR(date)</td>      <td>返回指定日期是一年中的第几周</td>    </tr>    <tr>      <td>DAYOFYEAR(date)</td>      <td>返回指定日期是一年中的第几天</td>    </tr>    <tr>      <td>DAYOFMONTH(date)</td>      <td>返回指定日期是一月中的第几天</td>    </tr>    <tr>      <td>DAYOFWEEK(date)</td>      <td>返回指定日期是一周中的第几天，1表示周日，2表示周一，以此类推，7表示周六</td>    </tr>  </tbody></table><p>处理日期和时间：</p><table>  <thead>    <tr>      <th>函数</th>      <th>用法</th>    </tr>  </thead>  <tbody>    <tr>      <td>DATE_FORMAT(date, fmt)</td>      <td>按照fmt格式将日期date转为字符串</td>    </tr>    <tr>      <td>TIME_FORMAT(time, fmt)</td>      <td>按照fmt格式将时间time转为字符串</td>    </tr>    <tr>      <td>STR_TO_DATE(str, fmt)</td>      <td>按照fmt格式将字符串str转为日期时间</td>    </tr>  </tbody></table><p>格式符：</p><table>  <thead>    <tr>      <th>字符</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>%Y</td>      <td>四位数字表示年份</td>    </tr>    <tr>      <td>%m</td>      <td>两位数字表示月份</td>    </tr>    <tr>      <td>%d</td>      <td>两位数字表示月中的天数</td>    </tr>    <tr>      <td>%H</td>      <td>两位数字表示24小时制的小时数</td>    </tr>    <tr>      <td>%i</td>      <td>两位数字表示分钟数</td>    </tr>    <tr>      <td>%s</td>      <td>两位数字表示秒数</td>    </tr>  </tbody></table><p>流程控制：</p><table>  <thead>    <tr>      <th>函数</th>      <th>用法</th>    </tr>  </thead>  <tbody>    <tr>      <td>IF(value,value1,value2)</td>      <td>如果value为TRUE，则返回value1，否则返回value2</td>    </tr>    <tr>      <td>IFNULL(value1, value2)</td>      <td>如果value1不为NULL，则返回value1，否则返回value2</td>    </tr>    <tr>      <td>NULLIF(value1,value2)</td>      <td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</td>    </tr>    <tr>      <td>CASE WHEN 条件1 THEN 值1 ... [ELSE 值1] END</td>      <td>依次判断条件并返回对应的值，相当于IF-ELSE判断语句</td>    </tr>    <tr>      <td>CASE 表达式 WHEN 条件1 THEN 值1 ... [ELSE 值n] END</td>      <td>依次判断表达式和条件是否相等并返回对应的值，相当于SWITCH-CASE判断语句</td>    </tr>  </tbody></table><p>加密和解密：</p><table>  <thead>    <tr>      <th>函数</th>      <th>用法</th>    </tr>  </thead>  <tbody>    <tr>      <td>PASSWORD(str)</td>      <td>返回字符串str的加密版本，加密结果不可逆，常用于密码加密</td>    </tr>    <tr>      <td>MD5(str)</td>      <td>返回字符串str经过MD5加密后的值，若参数为NULL，则会返回NULL</td>    </tr>    <tr>      <td>SHA(str)</td>      <td>返回字符串str经过SHA加密后的值，若参数为NULL，则会返回NULL，比MD5更加安全</td>    </tr>  </tbody></table><p>获取信息：</p><table>  <thead>    <tr>      <th>函数</th>      <th>用法</th>    </tr>  </thead>  <tbody>    <tr>      <td>VERSION()</td>      <td>返回当前的版本号</td>    </tr>    <tr>      <td>CONNECTION_ID()</td>      <td>返回当前的连接数</td>    </tr>    <tr>      <td>DATABASE() / SCHEMA()</td>      <td>返回当前连接的数据库</td>    </tr>    <tr>      <td>USER() / CURRENT_USER()</td>      <td>返回当前连接的用户名</td>    </tr>  </tbody></table><h2 id="4-聚合函数"><a href="#4-聚合函数" class="headerlink" title="4 聚合函数"></a>4 聚合函数</h2><p>聚合函数常用于分组后的处理：</p><table>  <thead>    <tr>      <th>函数</th>      <th>用法</th>    </tr>  </thead>  <tbody>    <tr>      <td>AVG(column)</td>      <td>对数值型数据求平均值</td>    </tr>    <tr>      <td>SUM(column)</td>      <td>对数值型数据求和</td>    </tr>    <tr>      <td>MIN(column)</td>      <td>对任意类型的数据求最小值</td>    </tr>    <tr>      <td>MAX(column)</td>      <td>对任意类型的数据求最大值</td>    </tr>    <tr>      <td>COUNT(column)</td>      <td>统计任意类型的数据记录总数</td>    </tr>  </tbody></table><p>比较COUNT(*)&#x2F;COUNT(1)&#x2F;COUNT(column)区别：</p><ul><li>对于MyISAM引擎的表没有区别，对于Innodb引擎的表有些区别。</li><li>对于Innodb引擎的表，使用COUNT(*)和COUNT(1)的时间复杂度是O(n)，优于使用COUNT(column)的时间复杂度。</li><li>使用COUNT(*)和COUNT(1)会统计值为NULL的行，使用COUNT(column)不会统计值为NULL的行。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DDL语句管理函数。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>管理存储过程</title>
    <link href="https://momashanhe.com/posts/20250522/160327/"/>
    <id>https://momashanhe.com/posts/20250522/160327/</id>
    <published>2025-05-22T08:03:27.000Z</published>
    <updated>2025-05-29T09:21:47.517Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DDL语句管理存储过程。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>存储过程是一组为了完成特定功能的SQL语句集合。</p><p>将常用或复杂的工作预先用SQL语句写好，将这些SQL存储起来，这个过程经过编译和优化后存储在数据库服务器中，因此称为存储过程。</p><h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><p>性能方面：</p><ul><li>减少网络通信：把多条SQL语句封装成存储过程，客户端调用时只需发送一个调用命令，避免逐条发送SQL语句产生的大量网络通信，减少网络延迟和带宽占用。</li><li>预编译和缓存：存储过程首次调用时被预编译并缓存，后续调用直接使用缓存的编译结果，无需重复编译，提高执行效率。</li></ul><p>安全方面：</p><ul><li>权限控制：可对存储过程设置权限，用户获得执行特定存储过程的权限后，无需拥有对底层表的直接访问权限，限制用户对数据库的访问范围，降低数据被错误修改或泄露风险。</li><li>封装敏感操作：将复杂、敏感的数据操作逻辑（如涉及多个表更新的事务、核心商业机密计算等）封装在存储过程内部，其代码在服务器端执行，不易被篡改或被恶意用户获取敏感信息。</li></ul><p>维护方面：</p><ul><li>代码重用：存储过程可被多个应用程序或用户调用，避免在每个应用程序中重复编写相同的SQL代码，提高代码可维护性。</li><li>集中管理：数据库逻辑集中在服务器端，修改业务逻辑时，只需在服务器端修改存储过程，所有依赖该存储过程的应用程序都能自动使用新的逻辑，减少维护成本。</li></ul><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h3><h4 id="2-1-1-基础"><a href="#2-1-1-基础" class="headerlink" title="2.1.1 基础"></a>2.1.1 基础</h4><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称([参数])</span><br><span class="line">存储过程主体</span><br></pre></td></tr></table></figure><p>如果开启了二进制日志会导致执行失败，有两种解决办法：</p><ul><li><p>使用命令：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：</p><figure class="highlight ini"><figcaption><span>my.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log_bin_trust_function_creators</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p>说明：</p><ul><li>存储过程名称：存储过程的名称，默认在当前数据库中创建，可以通过<code>数据库名.存储过程名</code>指定数据库创建存储过程。</li><li>参数：存储过程的参数列表。</li><li>存储过程主体：存储过程的主体部分，包含在过程调用的时候必须执行的SQL语句。可以是单条SQL语句，也可以是被<code>begin</code>和<code>end</code>包裹的复合语句块。</li></ul><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> showScore()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-参数"><a href="#2-1-2-参数" class="headerlink" title="2.1.2 参数"></a>2.1.2 参数</h4><p>参数的格式如下：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">in</span><span class="operator">|</span><span class="keyword">out</span><span class="operator">|</span><span class="keyword">inout</span>] 参数名 参数类型</span><br></pre></td></tr></table></figure><p>支持三种类型的参数：</p><ul><li>输入参数：用in关键字标识，可以传递存储过程。</li><li>输出参数：用out关键字标识，用于存储过程需要返回操作结果的情形。</li><li>输入&#x2F;输出参数：用inout关键字标识，既可以充当输入参数也可以充当输出参数。</li></ul><p>需要注意的是，参数的取名不要与数据表的列名相同，多个参数时需要用逗号分隔，没有参数时需要保留括号。</p><h4 id="2-1-3-关键字"><a href="#2-1-3-关键字" class="headerlink" title="2.1.3 关键字"></a>2.1.3 关键字</h4><p>常用关键字：</p><ul><li>delimiter：修改语句结束字符。不建议使用<code>;</code>符号，因为这是默认结束字符，该符号后面的存储过程不会执行。也不建议使用<code>\</code>符号，该符号是转义字符。</li><li>begin：存储过程开始符号。</li><li>end：存储过程结束符号。</li><li>set：变量赋值。</li><li>declare：变量定义。</li></ul><h4 id="2-1-4-流程控制"><a href="#2-1-4-流程控制" class="headerlink" title="2.1.4 流程控制"></a>2.1.4 流程控制</h4><h5 id="2-1-4-1-判断语句"><a href="#2-1-4-1-判断语句" class="headerlink" title="2.1.4.1 判断语句"></a>2.1.4.1 判断语句</h5><p>if语句：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件 <span class="keyword">then</span> 命令</span><br><span class="line">[elseif 条件 <span class="keyword">then</span> 命令]</span><br><span class="line">[<span class="keyword">else</span> 命令]</span><br><span class="line"><span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> fixSex(<span class="keyword">in</span> id <span class="type">int</span>, <span class="keyword">in</span> sex <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  if sex <span class="operator">=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">update</span> student s <span class="keyword">set</span> s.sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> s.id <span class="operator">=</span> id;</span><br><span class="line">  elseif sex <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">update</span> student s <span class="keyword">set</span> s.sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">where</span> s.id <span class="operator">=</span> id;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">update</span> student s <span class="keyword">set</span> s.sex <span class="operator">=</span> <span class="string">&#x27;未知&#x27;</span> <span class="keyword">where</span> s.id <span class="operator">=</span> id;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>case语句：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 变量</span><br><span class="line"><span class="keyword">when</span> 条件 <span class="keyword">then</span> 命令</span><br><span class="line">[...]</span><br><span class="line"><span class="keyword">else</span> 命令</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> fixSex(<span class="keyword">in</span> id <span class="type">int</span>, <span class="keyword">in</span> sex <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">case</span> sex</span><br><span class="line">  <span class="keyword">when</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">update</span> student s <span class="keyword">set</span> s.sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> s.id <span class="operator">=</span> id;</span><br><span class="line">  <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">update</span> student s <span class="keyword">set</span> s.sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">where</span> s.id <span class="operator">=</span> id;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">update</span> student s <span class="keyword">set</span> s.sex <span class="operator">=</span> <span class="string">&#x27;未知&#x27;</span> <span class="keyword">where</span> s.id <span class="operator">=</span> id;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h5 id="2-1-4-2-循环语句"><a href="#2-1-4-2-循环语句" class="headerlink" title="2.1.4.2 循环语句"></a>2.1.4.2 循环语句</h5><p>while语句，当条件成立时执行循环：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 条件 do</span><br><span class="line">命令</span><br><span class="line"><span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> addStudent(<span class="keyword">in</span> <span class="keyword">start</span> <span class="type">int</span>, <span class="keyword">in</span> num <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  while i <span class="operator">&lt;</span> num do</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> student(id) <span class="keyword">values</span> (<span class="keyword">start</span> <span class="operator">+</span> i);</span><br><span class="line">    <span class="keyword">set</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>repeat语句，当条件成立时结束循环：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat</span><br><span class="line">命令</span><br><span class="line">until 条件</span><br><span class="line"><span class="keyword">end</span> repeat;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> addStudent(<span class="keyword">in</span> <span class="keyword">start</span> <span class="type">int</span>, <span class="keyword">in</span> num <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  repeat</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> student(id) <span class="keyword">values</span> (<span class="keyword">start</span> <span class="operator">+</span> i);</span><br><span class="line">    <span class="keyword">set</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    until i <span class="operator">&gt;=</span> num</span><br><span class="line">  <span class="keyword">end</span> repeat;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>loop语句，可以在循环里判断，可以使用leave跳出循环，也可以使用iterate结束循环：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">循环名称: loop</span><br><span class="line">命令</span><br><span class="line">if 条件 <span class="keyword">then</span></span><br><span class="line">leave 循环名称;</span><br><span class="line">iterate 循环名称;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span> loop 循环名称;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> addStudent(<span class="keyword">in</span> <span class="keyword">start</span> <span class="type">int</span>, <span class="keyword">in</span> num <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  ADD_STUDENT: loop</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> student(id) <span class="keyword">values</span> (<span class="keyword">start</span> <span class="operator">+</span> i);</span><br><span class="line">    <span class="keyword">set</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    if i <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      iterate ADD_STUDENT;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    if i <span class="operator">&gt;=</span> num <span class="keyword">then</span></span><br><span class="line">      leave ADD_STUDENT;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">  <span class="keyword">end</span> loop ADD_STUDENT;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> 存储过程名称([参数]);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> showScore();</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">53</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">73</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> 孙七    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">94</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 周八    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 周八    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 吴九    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> 吴九    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">55</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-查看"><a href="#2-3-查看" class="headerlink" title="2.3 查看"></a>2.3 查看</h3><p>查看所有存储过程：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> status;</span><br></pre></td></tr></table></figure><p>查看存储过程的创建：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称;</span><br></pre></td></tr></table></figure><h3 id="2-4-修改"><a href="#2-4-修改" class="headerlink" title="2.4 修改"></a>2.4 修改</h3><p>可以通过先删除存储过程，然后重新创建存储过程的方法实现修改的操作。</p><h3 id="2-5-删除"><a href="#2-5-删除" class="headerlink" title="2.5 删除"></a>2.5 删除</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> 存储过程名称;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">procedure</span> showScore;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DDL语句管理存储过程。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>管理视图</title>
    <link href="https://momashanhe.com/posts/20250522/113208/"/>
    <id>https://momashanhe.com/posts/20250522/113208/</id>
    <published>2025-05-22T03:32:08.000Z</published>
    <updated>2025-05-22T05:37:35.269Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DDL语句管理视图。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>视图是从表或者视图中导出的虚拟表，包含一系列带有名称的数据列和若干条数据行。</p><h3 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h3><p>视图不是数据库中真实的表，而是一张虚拟表，其结构和数据是建立在对数据中真实表的查询基础上的。</p><p>视图是查看数据表的一种方法，可以查询数据表中某些列构成的数据，只是一些SQL语句的集合。从安全的角度来看，视图的数据安全性更高，使用视图的用户不接触数据表，不知道表结构。</p><p>视图的建立和删除只影响视图本身，不影响对应的基本表。</p><h3 id="1-3-注意"><a href="#1-3-注意" class="headerlink" title="1.3 注意"></a>1.3 注意</h3><p>视图不包含数据，所以每次使用视图时，都必须执行查询操作。</p><p>如果用多个连接和过滤条件创建了复杂的视图，可能会发现系统运行性能下降得十分严重。在部署大量视图应用时，应该进行系统测试。</p><p>修改视图数据的语句实际上是通过修改表的数据实现的，对于可修改的视图，视图中的行和基本表的行之间必须具有一对一的关系。</p><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名 (列<span class="number">1</span>, 列<span class="number">2</span>, ..., 列n) <span class="keyword">as</span> 查询语句;</span><br></pre></td></tr></table></figure><p>列名可以任意取名，但数量必须和查询的列名相等，如果不指明视图的列名，默认使用查询语句的列名。</p><p>创建一个简单的视图：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">view</span> score_view <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>创建视图并指定列：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">view</span> score_view (编号, 学生, 科目, 成绩) <span class="keyword">as</span> <span class="keyword">select</span> id, student, course, grade <span class="keyword">from</span> score;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-查看"><a href="#2-2-查看" class="headerlink" title="2.2 查看"></a>2.2 查看</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 视图名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> score_view;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> 编号   <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 学生   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 科目   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 成绩   <span class="operator">|</span> <span class="type">int</span>(<span class="number">10</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>Field：列名。</li><li>Type：类型。</li><li>Null：表示该列是否可以存储NULL值。</li><li>Key：表示该列是否已编制索引。PRI表示该列是主键的一部分，UNI表示该列是UNIQUE索引的一部分，MUL表示在列中某个给定值允许出现多次。</li><li>Default：表示该列是否有默认值，如果有，值是多少。</li><li>Extra：表示可以获取的与给定列有关的附加信息，如：AUTO_INCREMENT等。</li></ul><h3 id="2-3-修改"><a href="#2-3-修改" class="headerlink" title="2.3 修改"></a>2.3 修改</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> 视图名 (列<span class="number">1</span>, 列<span class="number">2</span>, ..., 列n) <span class="keyword">as</span> 查询语句;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">view</span> score_view (学生, 课程, 成绩) <span class="keyword">as</span> <span class="keyword">select</span> student, course, grade <span class="keyword">from</span> score;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-删除"><a href="#2-4-删除" class="headerlink" title="2.4 删除"></a>2.4 删除</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">view</span> score_view;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DDL语句管理视图。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>查询数据</title>
    <link href="https://momashanhe.com/posts/20250521/151347/"/>
    <id>https://momashanhe.com/posts/20250521/151347/</id>
    <published>2025-05-21T07:13:47.000Z</published>
    <updated>2025-05-30T05:25:00.864Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DQL语句查询数据。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-查询"><a href="#1-查询" class="headerlink" title="1 查询"></a>1 查询</h2><p>查询数据：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">distinct</span>] 列<span class="number">1</span> [<span class="keyword">as</span> <span class="string">&#x27;别名1&#x27;</span>], ..., 列n [<span class="keyword">as</span> <span class="string">&#x27;别名n&#x27;</span>]</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line">[<span class="keyword">where</span> 表达式]</span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> 表达式]</span><br><span class="line">[<span class="keyword">having</span> 表达式]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> 表达式]</span><br><span class="line">[limit 起始编号, 查询条数];</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>select：指定查询的字段，多个字段用<code>,</code>分隔，全部字段使用<code>*</code>号代替，使用<code>distinct</code>关键字对结果去重，使用<code>as</code>关键字设置结果显示的别名，可以省略<code>as</code>关键字。</li><li>from：指定查询的表，可以是单个或多个，多个表名用<code>,</code>分隔。</li><li>where：可选，指定查询的条件。</li><li>group by：可选，指定对结果按哪些字段分组。</li><li>having：可选，指定分组后查询的条件，用于使用聚合函数的查询条件。</li><li>order by：可选，指定排序的方式，使用<code>asc</code>按升序排列，使用<code>desc</code>按降序排列，默认按升序排列。</li><li>limit：可选，指定查询的起始编号和查询条数，起始编号可以省略，默认从0开始查询。</li></ul><p>查询虚拟表，虚拟表可以省略：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">1</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">as</span> sum <span class="keyword">from</span> dual;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> sum <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询所有字段：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">53</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">73</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> 孙七    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">94</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 周八    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 周八    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 吴九    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> 吴九    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">55</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询指定字段：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> student, course, grade <span class="keyword">from</span> score;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> 张三    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张三    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">53</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 李四    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 李四    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王五    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵六    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵六    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵六    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">73</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 孙七    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">94</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 周八    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 周八    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 吴九    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 吴九    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">55</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+-------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询课程并去重：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">distinct</span> course <span class="keyword">from</span> score;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> course <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 计算机 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 英语   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 中文   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询指定字段并设置显示别名：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> student <span class="string">&#x27;姓名&#x27;</span>, course <span class="string">&#x27;课程&#x27;</span>, grade <span class="string">&#x27;成绩&#x27;</span> <span class="keyword">from</span> score;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> 姓名 <span class="operator">|</span> 课程   <span class="operator">|</span> 成绩 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> 张三 <span class="operator">|</span> 计算机 <span class="operator">|</span>   <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张三 <span class="operator">|</span> 英语   <span class="operator">|</span>   <span class="number">53</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 李四 <span class="operator">|</span> 计算机 <span class="operator">|</span>   <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 李四 <span class="operator">|</span> 中文   <span class="operator">|</span>   <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王五 <span class="operator">|</span> 中文   <span class="operator">|</span>   <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵六 <span class="operator">|</span> 计算机 <span class="operator">|</span>   <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵六 <span class="operator">|</span> 英语   <span class="operator">|</span>   <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵六 <span class="operator">|</span> 中文   <span class="operator">|</span>   <span class="number">73</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 孙七 <span class="operator">|</span> 英语   <span class="operator">|</span>   <span class="number">94</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 周八 <span class="operator">|</span> 计算机 <span class="operator">|</span>   <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 周八 <span class="operator">|</span> 英语   <span class="operator">|</span>   <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 吴九 <span class="operator">|</span> 计算机 <span class="operator">|</span>   <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 吴九 <span class="operator">|</span> 中文   <span class="operator">|</span>   <span class="number">55</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询指定条数的数据：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score limit <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">53</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询课程的成绩并从高到低排序：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score <span class="keyword">where</span> course <span class="operator">=</span> <span class="string">&#x27;中文&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> grade <span class="keyword">desc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">73</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> 吴九    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">55</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询成绩并按课程分组，最后计算每个课程的平均分：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> course, <span class="built_in">avg</span>(grade) <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> course;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> course <span class="operator">|</span> <span class="built_in">avg</span>(grade) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> 中文   <span class="operator">|</span> <span class="number">65.2500</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 英语   <span class="operator">|</span> <span class="number">81.0000</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 计算机 <span class="operator">|</span> <span class="number">79.2000</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询成绩并按课程分组，最后计算每个课程的平均分，只显示平均分大于70的结果：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> course, <span class="built_in">avg</span>(grade) <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> course <span class="keyword">having</span> <span class="built_in">avg</span>(grade) <span class="operator">&gt;</span> <span class="number">70</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> course <span class="operator">|</span> <span class="built_in">avg</span>(grade) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> 英语   <span class="operator">|</span> <span class="number">81.0000</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 计算机 <span class="operator">|</span> <span class="number">79.2000</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询计算机课程的成绩：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score <span class="keyword">where</span> course <span class="operator">=</span> <span class="string">&#x27;计算机&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 周八    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 吴九    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-连接查询"><a href="#2-连接查询" class="headerlink" title="2 连接查询"></a>2 连接查询</h2><h3 id="2-1-内连接查询"><a href="#2-1-内连接查询" class="headerlink" title="2.1 内连接查询"></a>2.1 内连接查询</h3><p>内连接查询返回的是同时满足两个结果集的记录。</p><p>使用<code>inner join</code>内连接两个表，可以省略<code>inner</code>关键字。</p><p>查询学生信息以及计算机课程的成绩：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> stu.<span class="operator">*</span>, sco.course, sco.grade</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">from</span> student stu</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">join</span> score sco <span class="keyword">on</span> stu.name <span class="operator">=</span> sco.student <span class="keyword">and</span> sco.course <span class="operator">=</span> <span class="string">&#x27;计算机&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+-----+-------+------------+--------------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span> name <span class="operator">|</span> sex <span class="operator">|</span> birth <span class="operator">|</span> department <span class="operator">|</span> address      <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+-----+-------+------------+--------------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> 张三 <span class="operator">|</span> 女  <span class="operator">|</span>  <span class="number">1990</span> <span class="operator">|</span> 中文系     <span class="operator">|</span> 湖南省永州市 <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span> 李四 <span class="operator">|</span> 男  <span class="operator">|</span>  <span class="number">1990</span> <span class="operator">|</span> 英语系     <span class="operator">|</span> 辽宁省阜新市 <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">106</span> <span class="operator">|</span> 周八 <span class="operator">|</span> 男  <span class="operator">|</span>  <span class="number">1986</span> <span class="operator">|</span> 中文系     <span class="operator">|</span> 北京市昌平区 <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">107</span> <span class="operator">|</span> 吴九 <span class="operator">|</span> 女  <span class="operator">|</span>  <span class="number">1996</span> <span class="operator">|</span> 中文系     <span class="operator">|</span> 湖北省武汉市 <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+-----+-------+------------+--------------+--------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>结果仅显示有计算机课程成绩的记录，没有成绩的不显示。</p><h3 id="2-2-外连接查询"><a href="#2-2-外连接查询" class="headerlink" title="2.2 外连接查询"></a>2.2 外连接查询</h3><p>外连接分为左外连接和右外连接，分别以左表和右表作为主表匹配，保留主表中存在的数据。</p><p>使用<code>left join</code>建立左外连接，使用<code>right join</code>建立右外连接。</p><p>查询学生信息以及计算机课程的成绩：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> stu.<span class="operator">*</span>, sco.course, sco.grade</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">from</span> student stu</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">left</span> <span class="keyword">join</span> score sco <span class="keyword">on</span> stu.name <span class="operator">=</span> sco.student <span class="keyword">and</span> sco.course <span class="operator">=</span> <span class="string">&#x27;计算机&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+-----+-------+------------+--------------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span> name <span class="operator">|</span> sex <span class="operator">|</span> birth <span class="operator">|</span> department <span class="operator">|</span> address      <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+-----+-------+------------+--------------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> 张三 <span class="operator">|</span> 女  <span class="operator">|</span>  <span class="number">1990</span> <span class="operator">|</span> 中文系     <span class="operator">|</span> 湖南省永州市 <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span> 李四 <span class="operator">|</span> 男  <span class="operator">|</span>  <span class="number">1990</span> <span class="operator">|</span> 英语系     <span class="operator">|</span> 辽宁省阜新市 <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">106</span> <span class="operator">|</span> 周八 <span class="operator">|</span> 男  <span class="operator">|</span>  <span class="number">1986</span> <span class="operator">|</span> 中文系     <span class="operator">|</span> 北京市昌平区 <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">107</span> <span class="operator">|</span> 吴九 <span class="operator">|</span> 女  <span class="operator">|</span>  <span class="number">1996</span> <span class="operator">|</span> 中文系     <span class="operator">|</span> 湖北省武汉市 <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span> <span class="operator">|</span> 王五 <span class="operator">|</span> 女  <span class="operator">|</span>  <span class="number">1991</span> <span class="operator">|</span> 英语系     <span class="operator">|</span> 福建省厦门市 <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span> <span class="operator">|</span> 王六 <span class="operator">|</span> 男  <span class="operator">|</span>  <span class="number">1988</span> <span class="operator">|</span> 计算机系   <span class="operator">|</span> 湖南省衡阳市 <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span> <span class="operator">|</span> 孙七 <span class="operator">|</span> 男  <span class="operator">|</span>  <span class="number">1985</span> <span class="operator">|</span> 计算机系   <span class="operator">|</span> 北京市海淀区 <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+-----+-------+------------+--------------+--------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>结果仅显示有计算机课程成绩的记录，没有成绩的数据使用Null表示。</p><h2 id="3-子查询"><a href="#3-子查询" class="headerlink" title="3 子查询"></a>3 子查询</h2><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，子查询结果作为外层另一个查询的过滤条件，查询可以基于一个表或者多个表。</p><h3 id="3-1-in子查询"><a href="#3-1-in子查询" class="headerlink" title="3.1 in子查询"></a>3.1 in子查询</h3><p>in子查询主要用于判断指定字段的值是否存在于子查询的结果集中。</p><p>如果子查询的记录较少，主查询的记录较多时使用in，因为这时用到了主表上的索引。</p><p>查询所有英语系的学生成绩：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score <span class="keyword">where</span> student <span class="keyword">in</span> (<span class="keyword">select</span> name <span class="keyword">from</span> student <span class="keyword">where</span> department <span class="operator">=</span> <span class="string">&#x27;英语系&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-exists子查询"><a href="#3-2-exists子查询" class="headerlink" title="3.2 exists子查询"></a>3.2 exists子查询</h3><p>exists子查询主要用于判断子查询的结果集是否为空。</p><p>如果子查询的记录较多，主查询的记录较少时使用exists，因为这时用到了子表上的索引。</p><p>查询是否存在数学系的学生成绩：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> id <span class="keyword">from</span> student <span class="keyword">where</span> department <span class="operator">=</span> <span class="string">&#x27;数学系&#x27;</span>);</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询是否存在英语系的学生成绩：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score sco <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> stu.id <span class="keyword">from</span> student stu <span class="keyword">where</span> stu.department <span class="operator">=</span> <span class="string">&#x27;英语系&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">53</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">70</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 赵六    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">73</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> 孙七    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">94</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 周八    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 周八    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 吴九    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> 吴九    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">55</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>查询所有英语系的学生成绩：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score sco <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> stu.id <span class="keyword">from</span> student stu <span class="keyword">where</span> sco.student <span class="operator">=</span> stu.name <span class="keyword">and</span> stu.department <span class="operator">=</span> <span class="string">&#x27;英语系&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">48</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 李四    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 王五    <span class="operator">|</span> 中文   <span class="operator">|</span>    <span class="number">95</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-比较运算符子查询"><a href="#3-3-比较运算符子查询" class="headerlink" title="3.3 比较运算符子查询"></a>3.3 比较运算符子查询</h3><p>使用比较运算符判断子查询是否满足：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score sco <span class="keyword">where</span> sco.student <span class="operator">=</span> (<span class="keyword">select</span> stu.name <span class="keyword">from</span> student stu <span class="keyword">where</span> stu.id <span class="operator">=</span> <span class="number">101</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> student <span class="operator">|</span> course <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 计算机 <span class="operator">|</span>    <span class="number">98</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 张三    <span class="operator">|</span> 英语   <span class="operator">|</span>    <span class="number">53</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+--------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DQL语句查询数据。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>管理数据</title>
    <link href="https://momashanhe.com/posts/20250520/130426/"/>
    <id>https://momashanhe.com/posts/20250520/130426/</id>
    <published>2025-05-20T05:04:26.000Z</published>
    <updated>2025-05-26T02:41:57.102Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DML语句管理数据。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-插入"><a href="#1-插入" class="headerlink" title="1 插入"></a>1 插入</h2><p>通过传入数据插入：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 [(列名<span class="number">1</span>, ..., 列名n)]</span><br><span class="line"><span class="keyword">values</span> (值<span class="number">1</span>, ..., 值n);</span><br></pre></td></tr></table></figure><p>通过查询数据插入：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 [(列<span class="number">1</span>, ..., 列n)]</span><br><span class="line"><span class="keyword">select</span> 列<span class="number">1</span>, ..., 列n <span class="keyword">from</span> 目标表;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> score <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;计算机&#x27;</span>, <span class="number">98</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-更新"><a href="#2-更新" class="headerlink" title="2 更新"></a>2 更新</h2><p>更新数据：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名</span><br><span class="line"><span class="keyword">set</span> 字段<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>, ..., 字段n <span class="operator">=</span> 值n</span><br><span class="line">[<span class="keyword">where</span> 表达式];</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> score <span class="keyword">set</span> grade <span class="operator">=</span> <span class="number">99</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span> Changed: <span class="number">1</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-删除"><a href="#3-删除" class="headerlink" title="3 删除"></a>3 删除</h2><p>删除数据：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line">[<span class="keyword">where</span> 表达式];</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> score <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DML语句管理数据。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>使用索引</title>
    <link href="https://momashanhe.com/posts/20250519/203501/"/>
    <id>https://momashanhe.com/posts/20250519/203501/</id>
    <published>2025-05-19T12:35:01.000Z</published>
    <updated>2025-05-21T06:58:22.482Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DDL语句使用索引。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>索引是一个排序的列表，存储着索引的值和包含这个值的数据所在行的物理地址。</p><p>在数据十分庞大的时候，使用索引可以大大加快查询速度。这是因为使用索引后不需要扫描全表定位数据，而是通过索引表找到数据对应的物理地址然后访问数据。</p><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><p>索引的主要功能是排序和筛选。</p><h3 id="1-3-优缺点"><a href="#1-3-优缺点" class="headerlink" title="1.3 优缺点"></a>1.3 优缺点</h3><p>优点：</p><ul><li>可以快速检索，减少I&#x2F;O次数，加快检索速度。</li><li>在分组和排序的时候如果使用索引，可以加快分组和排序。</li></ul><p>缺点：</p><ul><li>索引本身也是表，因此会占用存储空间，一般来说，索引表占用的空间的数据表的1.5倍。</li><li>索引表的维护和创建需要时间成本，这个成本随着数据量增大而增大。</li><li>构建索引会降低数据表的修改操作（删除，添加，修改）的效率，因为在修改数据表的同时还需要修改索引表。</li></ul><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-主键索引"><a href="#2-1-主键索引" class="headerlink" title="2.1 主键索引"></a>2.1 主键索引</h3><h4 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h4><p>根据主键约束自动生成的索引，不允许重复值，不允许空值。</p><h4 id="2-1-2-使用"><a href="#2-1-2-使用" class="headerlink" title="2.1.2 使用"></a>2.1.2 使用</h4><p>创建主键索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">primary</span> key(字段名);</span><br></pre></td></tr></table></figure><p>删除主键索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><h3 id="2-2-唯一索引"><a href="#2-2-唯一索引" class="headerlink" title="2.2 唯一索引"></a>2.2 唯一索引</h3><h4 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1 定义"></a>2.2.1 定义</h4><p>根据唯一约束自动生成的索引，不允许重复值。</p><h4 id="2-2-2-使用"><a href="#2-2-2-使用" class="headerlink" title="2.2.2 使用"></a>2.2.2 使用</h4><p>创建唯一索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">unique</span> 索引名(字段名);</span><br></pre></td></tr></table></figure><p>删除唯一索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> index 索引名;</span><br></pre></td></tr></table></figure><h3 id="2-3-普通索引"><a href="#2-3-普通索引" class="headerlink" title="2.3 普通索引"></a>2.3 普通索引</h3><h4 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2.3.1 定义"></a>2.3.1 定义</h4><p>使用表中普通的列构建索引。</p><h4 id="2-3-2-使用"><a href="#2-3-2-使用" class="headerlink" title="2.3.2 使用"></a>2.3.2 使用</h4><p>创建普通索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> index 索引名(字段名);</span><br></pre></td></tr></table></figure><p>删除普通索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> index 索引名;</span><br></pre></td></tr></table></figure><h3 id="2-4-组合索引"><a href="#2-4-组合索引" class="headerlink" title="2.4 组合索引"></a>2.4 组合索引</h3><h4 id="2-4-1-定义"><a href="#2-4-1-定义" class="headerlink" title="2.4.1 定义"></a>2.4.1 定义</h4><p>用多个列组合构建的索引，这多个列中的值不允许有空值。</p><h4 id="2-4-2-使用"><a href="#2-4-2-使用" class="headerlink" title="2.4.2 使用"></a>2.4.2 使用</h4><p>创建组合索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> index 索引名(字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ... 字段名n);</span><br></pre></td></tr></table></figure><p>删除组合索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> index 索引名;</span><br></pre></td></tr></table></figure><h3 id="2-5-全文索引"><a href="#2-5-全文索引" class="headerlink" title="2.5 全文索引"></a>2.5 全文索引</h3><h4 id="2-5-1-定义"><a href="#2-5-1-定义" class="headerlink" title="2.5.1 定义"></a>2.5.1 定义</h4><p>用大文本对象的列构建的索引。</p><h4 id="2-5-2-使用"><a href="#2-5-2-使用" class="headerlink" title="2.5.2 使用"></a>2.5.2 使用</h4><p>创建全文索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> fulltext index 索引名(字段名);</span><br></pre></td></tr></table></figure><p>删除全文索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> fulltext index 索引名;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DDL语句使用索引。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>使用约束</title>
    <link href="https://momashanhe.com/posts/20250519/152824/"/>
    <id>https://momashanhe.com/posts/20250519/152824/</id>
    <published>2025-05-19T07:28:24.000Z</published>
    <updated>2025-05-22T03:28:19.712Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DDL语句使用约束。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>约束是在创建表时，为某些列添加特定的规则，保证数据满足用户的要求。</p><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><p>约束添加后，在向表中添加和更新数据时，必须要满足约束，否则不能执行操作。</p><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-主键约束"><a href="#2-1-主键约束" class="headerlink" title="2.1 主键约束"></a>2.1 主键约束</h3><h4 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h4><p>主键约束是一个列或者多个列，其值能唯一地标识表中的每一行，这样的一列或多列称为表的主键。</p><p>主键约束相当于唯一约束和非空约束的组合，主键约束列不允许重复，也不允许出现空值。</p><p>当创建主键约束时，系统默认会建立对应的唯一索引。</p><h4 id="2-1-2-自增"><a href="#2-1-2-自增" class="headerlink" title="2.1.2 自增"></a>2.1.2 自增</h4><p>数据库提供了一个自增的数字，专门用来自动生成主键值，不需要用户维护，自增数从1开始，以1递增。</p><h4 id="2-1-3-使用"><a href="#2-1-3-使用" class="headerlink" title="2.1.3 使用"></a>2.1.3 使用</h4><p>使用<code>primary key</code>添加主键约束，使用<code>auto_increment</code>设置主键自增。</p><p>在创建表时添加单列主键约束，主键自增：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在创建表时添加联合主键约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span>(<span class="number">11</span>) comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">primary</span> key(id, name)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改表时添加主键约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改表时删除主键约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-外键约束"><a href="#2-2-外键约束" class="headerlink" title="2.2 外键约束"></a>2.2 外键约束</h3><h4 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1 定义"></a>2.2.1 定义</h4><p>外键约束用来在两个表的数据之间建立链接，它可以是一列或者多列，一个表可以有一个或多个外键。</p><p>外键可以为空值，若不为空值，则每一个外键的值必须等于另一个表中主键的某个值。</p><p>主表和子表：</p><ul><li>主表：对于两个具有关联关系的表而言，存储主要信息的表就是主表。</li><li>子表：对于两个具有关联关系的表而言，存储详细信息的表就是子表。</li></ul><p>比如一个订单主表对应多个订单子表，以及一个信息主表对应一个信息详情表。</p><h4 id="2-2-2-使用"><a href="#2-2-2-使用" class="headerlink" title="2.2.2 使用"></a>2.2.2 使用</h4><p>使用<code>foreign key</code>添加外键约束。</p><p>创建主表并定义主键约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> man (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;主表&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在创建子表时添加外键约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> child (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> m_id <span class="type">int</span>(<span class="number">11</span>) comment <span class="string">&#x27;主表编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">constraint</span> fk_m_id <span class="keyword">foreign</span> key(m_id) <span class="keyword">references</span> man(id)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;子表&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改子表时添加外键约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> child <span class="keyword">add</span> <span class="keyword">constraint</span> fk_m_id <span class="keyword">foreign</span> key(m_id) <span class="keyword">references</span> man(id);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改子表时删除外键约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> child <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_m_id;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-唯一约束"><a href="#2-3-唯一约束" class="headerlink" title="2.3 唯一约束"></a>2.3 唯一约束</h3><h4 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2.3.1 定义"></a>2.3.1 定义</h4><p>唯一约束要求该列唯一，允许为空，但只能出现一个空值。</p><p>唯一约束可以确保一列或者几列不出现重复值。</p><h4 id="2-3-2-使用"><a href="#2-3-2-使用" class="headerlink" title="2.3.2 使用"></a>2.3.2 使用</h4><p>使用<code>unique</code>添加唯一约束。</p><p>在创建表时添加单列唯一约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">unique</span> comment <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在创建表时添加联合唯一约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">constraint</span> uk_id_name <span class="keyword">unique</span>(id, name)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改表时添加唯一约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">add</span> <span class="keyword">unique</span> uk_name(name);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改表时删除唯一约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">drop</span> index uk_name;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-非空约束"><a href="#2-4-非空约束" class="headerlink" title="2.4 非空约束"></a>2.4 非空约束</h3><h4 id="2-4-1-定义"><a href="#2-4-1-定义" class="headerlink" title="2.4.1 定义"></a>2.4.1 定义</h4><p>非空约束可以用来约束该列的取值不能为空，对于使用了非空约束的字段，如果用户在添加数据时没有指定值，数据库系统就会报错。</p><h4 id="2-4-2-使用"><a href="#2-4-2-使用" class="headerlink" title="2.4.2 使用"></a>2.4.2 使用</h4><p>使用<code>not null</code>添加非空约束。</p><p>在创建表时添加非空约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改表时添加非空约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test change <span class="keyword">column</span> name name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改表时删除非空约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test change <span class="keyword">column</span> name name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="keyword">null</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-默认值约束"><a href="#2-5-默认值约束" class="headerlink" title="2.5 默认值约束"></a>2.5 默认值约束</h3><h4 id="2-5-1-定义"><a href="#2-5-1-定义" class="headerlink" title="2.5.1 定义"></a>2.5.1 定义</h4><p>默认值约束用来指定某列的默认值。</p><h4 id="2-5-2-使用"><a href="#2-5-2-使用" class="headerlink" title="2.5.2 使用"></a>2.5.2 使用</h4><p>使用<code>default</code>添加默认值约束。</p><p>在创建表时添加默认值约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">&#x27;none&#x27;</span> comment <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改表时添加默认值约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test change <span class="keyword">column</span> name name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">1</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在修改表时删除默认值约束：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test change <span class="keyword">column</span> name name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="keyword">null</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">1</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DDL语句使用约束。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>管理表</title>
    <link href="https://momashanhe.com/posts/20250518/112838/"/>
    <id>https://momashanhe.com/posts/20250518/112838/</id>
    <published>2025-05-18T03:28:38.000Z</published>
    <updated>2025-05-29T09:26:38.512Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DDL语句管理表。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>表是数据库中存储数据的具体结构，它由行和列组成。</p><p>表中的每一行代表一条记录，包含了按列组织的数据。</p><p>表中的每一列代表一种数据，定义了该列可以存储的数据种类。</p><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><p>表是数据库中实际存储数据的载体，能够将数据以一种结构化的方式组织起来，便于数据的管理。</p><p>表与表之间可以通过特定的字段建立关联，从而实现复杂的数据关系。</p><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 [表定义选项] [表选项];</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>表定义选项：用来创建定义表的结构，由列名（col_name）、列的定义（column_definition）以及可能的空值说明、完整性约束或表索引组成。</li></ul><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-查看"><a href="#2-2-查看" class="headerlink" title="2.2 查看"></a>2.2 查看</h3><p>查看所有表：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>查看表的创建：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>查看表的状态：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> status [<span class="keyword">like</span> <span class="string">&#x27;模糊查询表名&#x27;</span>] <span class="keyword">from</span> 数据库 \G</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>使用<code>\G</code>符号可以垂直显示内容，并且使用<code>\G</code>后不需要使用<code>;</code>结束。</li></ul><p>使用describe命令查看表的结构，可以使用desc简写：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">describe</span> 表名;</span><br><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><p>使用desc命令示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> test;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>Field：列名。</li><li>Type：类型。</li><li>Null：表示该列是否可以存储NULL值。</li><li>Key：表示该列是否已编制索引。PRI表示该列是主键的一部分，UNI表示该列是UNIQUE索引的一部分，MUL表示在列中某个给定值允许出现多次。</li><li>Default：表示该列是否有默认值，如果有，值是多少。</li><li>Extra：表示可以获取的与给定列有关的附加信息，比如AUTO_INCREMENT等。</li></ul><p>使用show命令查看表的字段：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>使用show命令查看表的索引：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="2-3-复制"><a href="#2-3-复制" class="headerlink" title="2.3 复制"></a>2.3 复制</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 旧表名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test_bak <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-修改"><a href="#2-4-修改" class="headerlink" title="2.4 修改"></a>2.4 修改</h3><p>添加列：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 新列名 [数据类型] [约束条件] [<span class="keyword">first</span> <span class="operator">|</span> after 已存在的列名];</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">add</span> <span class="keyword">column</span> age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">null</span> comment <span class="string">&#x27;年龄&#x27;</span> after name;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>修改列：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change <span class="keyword">column</span> 旧列名 新列名 [新数据类型];</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test change <span class="keyword">column</span> name name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;none&#x27;</span> comment <span class="string">&#x27;姓名&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>删除列：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">drop</span> age;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-删除"><a href="#2-5-删除" class="headerlink" title="2.5 删除"></a>2.5 删除</h3><p>删除表会删除表结构，再次使用需要重新创建。</p><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] 表名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-清空"><a href="#2-6-清空" class="headerlink" title="2.6 清空"></a>2.6 清空</h3><p>清空表不会删除表结构，但是会释放表空间，重置自增序列从1开始记录。</p><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">truncate</span> <span class="keyword">table</span> test;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DDL语句管理表。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>管理数据库</title>
    <link href="https://momashanhe.com/posts/20250517/130915/"/>
    <id>https://momashanhe.com/posts/20250517/130915/</id>
    <published>2025-05-17T05:09:15.000Z</published>
    <updated>2025-05-26T02:42:51.202Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用DDL语句管理数据库。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>数据库是最高层次的存储结构，它可以包含多个表、视图、存储过程、触发器等数据库对象。</p><p>一个数据库对应一个独立的命名空间，不同的数据库中可以存在同名的表。</p><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><p>数据库用于逻辑上组织和管理相关的数据表和其他对象。</p><h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2 操作"></a>2 操作</h2><h3 id="2-1-创建数据库"><a href="#2-1-创建数据库" class="headerlink" title="2.1 创建数据库"></a>2.1 创建数据库</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名</span><br><span class="line">[<span class="keyword">default</span>] <span class="type">character</span> <span class="keyword">set</span> 字符集名</span><br><span class="line">[<span class="keyword">default</span>] <span class="keyword">collate</span> 校对规则名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> demo</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> utf8</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">default</span> <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-查看数据库创建"><a href="#2-2-查看数据库创建" class="headerlink" title="2.2 查看数据库创建"></a>2.2 查看数据库创建</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database demo;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> database demo;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Database <span class="operator">|</span> <span class="keyword">Create</span> Database                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> demo     <span class="operator">|</span> <span class="keyword">CREATE</span> DATABASE `demo` <span class="comment">/*!40100 DEFAULT CHARACTER SET gb2312 */</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-查询所有数据库"><a href="#2-3-查询所有数据库" class="headerlink" title="2.3 查询所有数据库"></a>2.3 查询所有数据库</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> demo               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-修改数据库"><a href="#2-4-修改数据库" class="headerlink" title="2.4 修改数据库"></a>2.4 修改数据库</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> database 数据库名</span><br><span class="line">[<span class="keyword">default</span>] <span class="type">character</span> <span class="keyword">set</span> 字符集名</span><br><span class="line">[<span class="keyword">default</span>] <span class="keyword">collate</span> 校对规则名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> database demo</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="type">character</span> <span class="keyword">set</span> gb2312</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">collate</span> gb2312_chinese_ci;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-删除数据库"><a href="#2-5-删除数据库" class="headerlink" title="2.5 删除数据库"></a>2.5 删除数据库</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [if <span class="keyword">exists</span>] 数据库名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database demo;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">2</span> warnings (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-选择数据库"><a href="#2-6-选择数据库" class="headerlink" title="2.6 选择数据库"></a>2.6 选择数据库</h3><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use demo;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use demo;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用DDL语句管理数据库。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在控制台发送HTTP请求</title>
    <link href="https://momashanhe.com/posts/20250514/152151/"/>
    <id>https://momashanhe.com/posts/20250514/152151/</id>
    <published>2025-05-14T07:21:51.000Z</published>
    <updated>2025-05-15T01:19:40.779Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：。</p><span id="more"></span><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1 说明"></a>1 说明</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>通用语法</title>
    <link href="https://momashanhe.com/posts/20250513/094614/"/>
    <id>https://momashanhe.com/posts/20250513/094614/</id>
    <published>2025-05-13T01:46:14.000Z</published>
    <updated>2025-05-30T01:16:21.119Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了SQL语言中的通用语法。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-基本规范"><a href="#1-基本规范" class="headerlink" title="1 基本规范"></a>1 基本规范</h2><ol><li>支持单行和多行书写，以分号结尾。</li><li>可以使用空格和缩进来增强语句的可读性。  </li><li>不区分大小写，建议关键字使用大写。</li></ol><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2 注释"></a>2 注释</h2><p>支持单行注释和多行注释：</p><ul><li>单行注释：使用<code>--</code>符号或者<code>#</code>符号会注释之后到行末尾之间的单行内容。</li><li>多行注释：使用<code>/*</code>符号和<code>*/</code>符号注释之间的多行内容。</li></ul><h2 id="3-着重号"><a href="#3-着重号" class="headerlink" title="3 着重号"></a>3 着重号</h2><p>如果在定义表或者字段等其他实体时命名与保留字和关键字有冲突，在不想更改命名的情况下可以使用<code>``</code>着重号将名称包裹起来，这样就不会被识别为关键字和保留字。</p><h2 id="4-语句分类"><a href="#4-语句分类" class="headerlink" title="4 语句分类"></a>4 语句分类</h2><p>根据SQL语句的功能，主要分为四类：</p><ul><li>DDL（Data Definition Language）：数据定义语言，用来定义数据库对象，比如数据库，以及表和字段。</li><li>DML（Data Manipulation Language）：数据操作语言，用来对数据库表中的数据进行增删改。</li><li>DQL（Data Query Language）：数据查询语言，用来查询数据库中表的记录。</li><li>DCL（Data Control Language）：数据控制语言，用来创建数据库用户以及控制用户对数据库的访问权限。</li></ul><h2 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5 数据类型"></a>5 数据类型</h2><h3 id="5-1-整数类型"><a href="#5-1-整数类型" class="headerlink" title="5.1 整数类型"></a>5.1 整数类型</h3><p>整数类型的属性字段可以添加auto_increment自增约束条件。</p><p>整数类型：</p><table>  <thead>    <tr>      <th>类型名称</th>      <th>存储需求</th>    </tr>  </thead>  <tbody>    <tr>      <td>tinyint</td>      <td>1字节</td>    </tr>    <tr>      <td>smallint</td>      <td>2字节</td>    </tr>    <tr>      <td>mediumint</td>      <td>3字节</td>    </tr>    <tr>      <td>int</td>      <td>4字节</td>    </tr>    <tr>      <td>bigint</td>      <td>8字节</td>    </tr>  </tbody></table><p>定义整型的写法是<code>int(N)</code>，这种写法只需要记住两点：</p><ol><li>无论N等于多少，int永远占4个字节。</li><li>N表示的是显示宽度，不足的用0补足，超过的无视长度而直接显示整个数字，但这要整型设置了<code>unsigned zerofill</code>才有效。</li></ol><h3 id="5-2-浮点类型"><a href="#5-2-浮点类型" class="headerlink" title="5.2 浮点类型"></a>5.2 浮点类型</h3><p>浮点类型有两种，分别是单精度浮点数（float）和双精度浮点数（double）。</p><p>浮点类型：</p><table>  <thead>    <tr>      <th>类型名称</th>      <th>存储需求</th>    </tr>  </thead>  <body>    <tr>      <td>float</td>      <td>4字节</td>    </tr>    <tr>      <td>double</td>      <td>8字节</td>    </tr>  </body></table><p>定义浮点类型可以用<code>(M,D)</code>来表示，其中M称为精度，表示总共的位数，D称为标度，表示小数的位数。</p><h3 id="5-3-定点类型"><a href="#5-3-定点类型" class="headerlink" title="5.3 定点类型"></a>5.3 定点类型</h3><p>浮点型的float和double存在精度丢失问题，即写入数据库的数据未必是插入数据库的数据。</p><p>由此引入了decimal类型，无论写入数据中的数据是多少，都不会存在精度丢失问题。</p><p>定点类型：</p><table>  <thead>    <tr>      <th>类型名称</th>      <th>存储需求</th>    </tr>  </thead>  <body>    <tr>      <td>decimal</td>      <td>总位数M+2字节</td>    </tr>  </body></table><p>常见于银行系统和互联网金融系统等对小数点后的数字比较敏感的系统中。</p><p>定义定点类型可以用<code>(M,D)</code>来表示，和定义浮点类型相同，但区别在浮点类型没有指定参数时默认按照实际精度来处理，而定点类型在没有指定参数时默认使用<code>(10,0)</code>作为参数。</p><h3 id="5-4-日期和时间类型"><a href="#5-4-日期和时间类型" class="headerlink" title="5.4 日期和时间类型"></a>5.4 日期和时间类型</h3><p>支持五种形式的日期类型：</p><table>  <thead>    <tr>      <th>类型名称</th>      <th>日期格式</th>      <th>日期范围</th>      <th>存储需求</th>    </tr>  </thead>  <tbody>    <tr>      <td>year</td>      <td>YYYY</td>      <td>1901 ~ 2155</td>      <td>1字节</td>    </tr>    <tr>      <td>time</td>      <td>HH:MM:SS</td>      <td>-838:59:59 ~ 838:59:59</td>      <td>3字节</td>    </tr>    <tr>      <td>date</td>      <td>YYYY-MM-DD</td>      <td>1000-01-01 ~ 9999-12-03</td>      <td>3字节</td>    </tr>    <tr>      <td>datetime</td>      <td>YYYY-MM-DD HH:MM:SS</td>      <td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>      <td>8字节</td>    </tr>    <tr>      <td>timestamp</td>      <td>YYYY-MM-DD HH:MM:SS</td>      <td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>      <td>4字节</td>    </tr>  </tbody></table><p>其中datetime与timestamp两种类型的区别：</p><ul><li>datetime占8个字节，timestamp占4个字节。</li><li>由于大小的区别，datetime与timestamp能存储的时间范围也不同。</li><li>datetime默认值为空，当插入的值为null时，该列的值就是null。timestamp默认值不为空，当插入的值为null时，该列的值取当前时间。</li><li>datetime存储的时间与时区无关，timestamp存储的时间及显示的时间都依赖于当前时区。</li></ul><p>在实际工作中，一张表往往会有两个默认字段，一个记录创建时间而另一个记录最新一次的更新时间，这种时候可以使用timestamp类型来实现。</p><h3 id="5-5-字符串类型"><a href="#5-5-字符串类型" class="headerlink" title="5.5 字符串类型"></a>5.5 字符串类型</h3><p>字符串类型用来存储字符串数据，还可以存储图片和声音的二进制数据，支持使用正则表达式进行匹配查找。</p><p>字符串类型众多，括号中的M表示可以为其指定长度：</p><table>  <thead>    <tr>      <th>类型名称</th>      <th>存储需求</th>    </tr>  </thead>  <tbody>    <tr>      <td>char(M)</td>      <td>M字节，1<=M<=255</td>    </tr>    <tr>      <td>varchar(M)</td>      <td>L+1字节，L<=M并且1<=M<=65535</td>    </tr>    <tr>      <td>tinytext</td>      <td>L+1字节，L<2^8</td>    </tr>    <tr>      <td>text</td>      <td>L+2字节，L<2^16</td>    </tr>    <tr>      <td>mediumtext</td>      <td>L+3字节，L<2^24</td>    </tr>    <tr>      <td>longtext</td>      <td>L+4字节，L<2^32</td>    </tr>    <tr>      <td>enum</td>      <td>1字节或2字节，取决于枚举值的数目，最大值65535</td>    </tr>    <tr>      <td>set</td>      <td>最大8字节，取决于集合成员数量，最多64个成员</td>    </tr>  </tbody></table><h4 id="5-5-1-char"><a href="#5-5-1-char" class="headerlink" title="5.5.1 char"></a>5.5.1 char</h4><p>使用<code>char(M)</code>表示固定长度的字符串，存储时在右侧填充空格以达到指定的长度，查询时会删除尾部的空格。</p><h4 id="5-5-2-varchar"><a href="#5-5-2-varchar" class="headerlink" title="5.5.2 varchar"></a>5.5.2 varchar</h4><p>使用<code>varchar(M)</code>表示可变长度的字符串，存储的是字符串的实际内容。</p><h4 id="5-5-3-text"><a href="#5-5-3-text" class="headerlink" title="5.5.3 text"></a>5.5.3 text</h4><p>使用<code>text</code>表示可变长度的字符串，保存非二进制字符串，如文章内容和评论等。</p><p>支持四种类型：</p><ul><li>tinytext</li><li>text</li><li>mediumtext</li><li>longtext</li></ul><h4 id="5-5-4-enum"><a href="#5-5-4-enum" class="headerlink" title="5.5.4 enum"></a>5.5.4 enum</h4><p>使用<code>enum</code>表示字符串对象，值为表创建时设定的枚举值，最多可以有65535个元素。</p><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名 enum(<span class="string">&#x27;值1&#x27;</span>, <span class="string">&#x27;值1&#x27;</span>, ..., <span class="string">&#x27;值n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>字段名是将要定义的字段，值n指枚举列表中第n个值。</p><p>enum类型的字段在取值时，能在指定的枚举列表中获取，而且一次只能取一个。如果创建的成员中有空格，尾部的空格将自动被删除。</p><p>enum值依照列索引顺序排列，并且空字符串排在非空字符串前，null值排在其他所有枚举值前。</p><p>enum列总有一个默认值。如果将enum列声明为null，null值则为该列的一个有效值，并且默认值为null。如果enum列被声明为not null，其默认值为允许的值列表的第1个元素。</p><h4 id="5-5-5-set"><a href="#5-5-5-set" class="headerlink" title="5.5.5 set"></a>5.5.5 set</h4><p>使用<code>set</code>表示字符串的对象，值为表创建时规定的一列值，最多可以有64个成员。</p><p>语法：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名 <span class="keyword">set</span>(<span class="string">&#x27;值1&#x27;</span>, <span class="string">&#x27;值2&#x27;</span>, ..., <span class="string">&#x27;值n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>与enum类型相同，set值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，尾部空格将自动删除。</p><p>与enum类型不同的是，enum类型的字段只能从定义的列值中选择一个值插入，而set类型的列可从定义的列值中选择多个字符的联合。</p><p>如果插入set字段中的列值有重复，则自动删除重复的值。并且插入set字段的值的顺序并不重要，在存入数据库时，按照定义的顺序显示。如果插入了不正确的值，默认情况下，会忽视这些值并警告。</p><h3 id="5-6-二进制类型"><a href="#5-6-二进制类型" class="headerlink" title="5.6 二进制类型"></a>5.6 二进制类型</h3><p>用于存储二进制形式的值，支持多种类型，括号中的M表示长度：</p><table>  <thead>    <tr>      <th>类型名称</th>      <th>存储需求</th>    </tr>  </thead>  <tbody>    <tr>      <td>bit(M)</td>      <td>大约(M+7)/8字节</td>    </tr>    <tr>      <td>binary(M)</td>      <td>M字节</td>    </tr>    <tr>      <td>varbinary(M)</td>      <td>M+1字节</td>    </tr>    <tr>      <td>tinyblob</td>      <td>L+1字节，L<2^8</td>    </tr>    <tr>      <td>blob</td>      <td>L+2字节，L<2^16</td>    </tr>    <tr>      <td>mediumblob</td>      <td>L+3字节，L<2^24</td>    </tr>    <tr>      <td>longblob</td>      <td>L+4字节，L<2^32</td>    </tr>  </tbody></table><h4 id="5-6-1-数字"><a href="#5-6-1-数字" class="headerlink" title="5.6.1 数字"></a>5.6.1 数字</h4><p>使用<code>bit(M)</code>表示二进制位数为M的数字，范围为1~64，默认值为1。如果长度小于M位，在值的左边使用<code>0</code>填充。</p><p>例如保存的值为3，二进制形式为<code>0101</code>，在这里需要M至少为4，大于二进制形式<code>1111</code>的数据不能插入。</p><h4 id="5-6-2-字符串"><a href="#5-6-2-字符串" class="headerlink" title="5.6.2 字符串"></a>5.6.2 字符串</h4><p>使用<code>binary(M)</code>表示固定长度的二进制字符串。如果长度小于M位，在值的右边使用<code>\0</code>填充。</p><p>使用<code>varbinary(M)</code>表示可变长度的二进制字符串。</p><h4 id="5-6-3-大对象"><a href="#5-6-3-大对象" class="headerlink" title="5.6.3 大对象"></a>5.6.3 大对象</h4><p>用于存储可变数量的二进制大对象，比如音频和视频等，根据可容纳值的最大长度分为四种：</p><ul><li>tinyblob</li><li>blob</li><li>mediumblob</li><li>longblob</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了SQL语言中的通用语法。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>安装</title>
    <link href="https://momashanhe.com/posts/20250512/215937/"/>
    <id>https://momashanhe.com/posts/20250512/215937/</id>
    <published>2025-05-12T13:59:37.000Z</published>
    <updated>2025-05-12T15:45:00.999Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何在Windows中安装MySQL。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-检查"><a href="#1-检查" class="headerlink" title="1 检查"></a>1 检查</h2><p>在cmd窗口中输入<code>services.msc</code>命令打开服务，如果能找到MySQL服务，说明已经安装了MySQL数据库。</p><h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2 下载"></a>2 下载</h2><p>官方下载地址：</p><ul><li><a href="https://dev.mysql.com/downloads/mysql/">最新版本</a></li><li><a href="https://downloads.mysql.com/archives/community/">历史版本</a></li></ul><p>根据系统运行环境和操作系统位数选择下载相应的软件。</p><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3 安装"></a>3 安装</h2><p>将下载得到的压缩包放在软件安装目录，直接解压即可安装完成。</p><h2 id="4-配置"><a href="#4-配置" class="headerlink" title="4 配置"></a>4 配置</h2><h3 id="4-1-配置环境变量"><a href="#4-1-配置环境变量" class="headerlink" title="4.1 配置环境变量"></a>4.1 配置环境变量</h3><h4 id="4-1-1-MYSQL-HOME"><a href="#4-1-1-MYSQL-HOME" class="headerlink" title="4.1.1 MYSQL_HOME"></a>4.1.1 MYSQL_HOME</h4><p>将解压后的目录作为安装目录，添加到环境变量。</p><p>打开环境变量窗口，新建环境变量，变量名为<code>MYSQL_HOME</code>，变量值为安装目录地址。</p><h4 id="4-1-2-Path"><a href="#4-1-2-Path" class="headerlink" title="4.1.2 Path"></a>4.1.2 Path</h4><p>需要把安装目录下的<code>bin</code>目录增加到现有的<code>PATH</code>变量中，<code>bin</code>目录中包含经常要用到的可执行文件，设置后可以在任何目录下执行命令。</p><p>打开环境变量窗口，在下方的系统环境变量里找到<code>Path</code>环境变量并编辑，新建变量<code>%MYSQL_HOME%\bin</code>并保存。</p><h3 id="4-2-配置系统文件"><a href="#4-2-配置系统文件" class="headerlink" title="4.2 配置系统文件"></a>4.2 配置系统文件</h3><p>从5.7.18版本开始，不在压缩包中提供<code>my-default.ini</code>文件，在安装目录下创建<code>my.ini</code>文件：</p><figure class="highlight ini"><figcaption><span>my.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\Work\MySQL\mysql-<span class="number">5.7</span>.<span class="number">40</span></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\Work\MySQL\mysql-<span class="number">5.7</span>.<span class="number">40</span>\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">1024</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端默认字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 设置导入导出文件夹</span></span><br><span class="line"><span class="attr">secure-file-priv</span>=D:\Work\MySQL\file</span><br><span class="line"><span class="comment"># default_authentication_plugin</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="comment"># sql_mode</span></span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"><span class="comment"># explicit_defaults_for_timestamp</span></span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span>=<span class="literal">true</span></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 客户端连接服务端时默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure><h3 id="4-3-配置服务"><a href="#4-3-配置服务" class="headerlink" title="4.3 配置服务"></a>4.3 配置服务</h3><p>使用超级管理员的权限打开cmd窗口，进入安装目录的bin文件夹里。</p><p>初始化数据库，设置root密码为空：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>使用initialize设置root密码为随机数。</li><li>使用initialize-insecure设置root密码为空。</li></ul><p>安装服务，默认自动启动：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --install</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>使用install安装服务，默认自动启动。</li><li>使用install-manual安装服务，设置手动启动。</li><li>使用remove删除服务。</li></ul><p>启动服务：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>使用start启动服务。</li><li>使用stop停止服务。</li></ul><h2 id="5-登录测试"><a href="#5-登录测试" class="headerlink" title="5 登录测试"></a>5 登录测试</h2><h3 id="5-1-登录"><a href="#5-1-登录" class="headerlink" title="5.1 登录"></a>5.1 登录</h3><p>打开cmd窗口，输入<code>mysql -u root -p</code>使用root用户登录，回车后提示输入密码，因为之前配置的时候设置了root用户的密码为空，所以直接回车即可登录成功了：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">2</span></span><br><span class="line">Server version: <span class="number">5</span>.<span class="number">7</span>.<span class="number">40</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2022</span>, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line"><span class="built_in">Type</span> &#x27;<span class="built_in">help</span>;&#x27; or &#x27;\h&#x27; <span class="keyword">for</span> <span class="built_in">help</span>. <span class="built_in">Type</span> &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-修改密码"><a href="#5-2-修改密码" class="headerlink" title="5.2 修改密码"></a>5.2 修改密码</h3><p>将root用户的密码改为123456：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(&#x27;<span class="number">123456</span>&#x27;);</span><br></pre></td></tr></table></figure><p>使用<code>exit</code>命令退出登录，以后登录就需要输入刚刚设置的密码了。</p><h2 id="6-使用工具"><a href="#6-使用工具" class="headerlink" title="6 使用工具"></a>6 使用工具</h2><p>建议使用Navicat工具连接数据库。</p><p>打开Navicat并新建连接：<br><img src="/@image/302001/002-20250512234303.jpg" alt="20250512234303-新建连接"></p><p>点击测试连接提示连接成功，点击确定保存连接。</p><p>双击新建的连接，并点击新建查询，即可编写语句并执行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何在Windows中安装MySQL。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>入门</title>
    <link href="https://momashanhe.com/posts/20250512/155558/"/>
    <id>https://momashanhe.com/posts/20250512/155558/</id>
    <published>2025-05-12T07:55:58.000Z</published>
    <updated>2025-05-18T03:28:26.711Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文了解了MySQL关系型数据库和SQL语言的基本知识。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>MySQL 5.7.40</p>              </div>            </details><h2 id="1-MySQL数据库"><a href="#1-MySQL数据库" class="headerlink" title="1 MySQL数据库"></a>1 MySQL数据库</h2><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。</p><p>MySQL使用的SQL语言是用于访问数据库的最常用的标准化语言。</p><p>特性：</p><ul><li>使用C和C++编写，并使用多种编译器进行测试，保证源代码的可移植性。</li><li>支持AIX、Linux、MacOS、Solaris、Windows等多种操作系统。</li><li>为多种编程语言提供了API，包括C、C++、Python、Java、Perl、PHP和Ruby等。</li><li>提供TCP&#x2F;IP、ODBC和JDBC等多种数据库连接途径。</li><li>支持多线程，充分利用CPU资源。</li><li>优化的SQL查询算法，有效地提高查询速度。</li><li>既能够作为一个单独的应用程序应用在客户端服务器网络环境中，也能够作为一个库而嵌入其他的软件中。</li><li>提供多语言支持，常见的编码如中文的GB2312、BIG5，日文的Shift_JIS等都可以用作数据表名和数据列名。</li><li>提供用于管理、检查、优化数据库操作的管理工具。</li><li>支持大型的数据库，可以处理拥有上千万条记录的大型数据库。</li><li>支持多种存储引擎。</li></ul><p>概念：</p><ul><li>数据库（Database）：是按照一定结构组织存储在一起的相关数据的集合，这些数据可以被多个用户和应用程序共享。</li><li>表（Table）：是数据库中存储数据的基本单位，由行和列组成，对应记录和字段。例如，一个学生表可以包含学号和姓名等字段，每一行代表一条学生记录。</li><li>字段（Field）：是表中的一列，具有特定的数据类型。例如，姓名字段的数据类型可能是字符串。</li><li>记录（Record）：是表中的一行，包含字段的具体值。一个学生记录包含该学生的学号和姓名等实际信息。</li></ul><h2 id="2-SQL语言"><a href="#2-SQL语言" class="headerlink" title="2 SQL语言"></a>2 SQL语言</h2><p>SQL（Structured Query Language，结构化查询语言）是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p><p>与其他程序设计语言（如C、Java等）不同的是，SQL由很少的关键字组成，每个SQL语句通过一个或多个关键字构成。</p><p>优点：</p><ul><li>一体化：SQL集数据定义、数据操作和数据控制于一体，可以完成数据库中的全部工作。</li><li>使用方式灵活：SQL具有两种使用方式，可以直接以命令方式交互使用，也可以嵌入使用，嵌入C、C++、Fortran、COBOL、Java等语言中使用。</li><li>非过程化：只提操作要求，不必描述操作步骤，也不需要导航。使用时只需要告诉计算机做什么，而不需要告诉它怎么做。</li><li>语言简洁、语法简单、好学好用：在ANSI标准中，只包含94个英文单词，核心功能只用6个动词，语法接近英语口语。</li></ul><p>注意：</p><ul><li>SQL语句不区分大小写，许多SQL开发人员习惯对关键字进行大写，而对表或者列的名称使用小写，这样可以提高代码的可阅读性和可维护性。</li><li>大多数数据库都支持通用的SQL语句，同时不同的数据库具有各自特有的SQL语言特性。</li><li>某些数据库系统要求在每条SQL命令的末端使用分号。分号是在数据库系统中分隔每条SQL语句的标准方法，这样就可以在对服务器的相同请求中执行一条以上的语句。</li></ul><h2 id="3-范式"><a href="#3-范式" class="headerlink" title="3 范式"></a>3 范式</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>但是有些时候一昧的追求范式减少冗余，反而会降低数据读写的效率，这个时候就要反范式，利用空间来换时间。</p><h3 id="3-2-名词"><a href="#3-2-名词" class="headerlink" title="3.2 名词"></a>3.2 名词</h3><p>想要正确理解范式的知识，必须先对涉及到的概念名词有一定的了解。</p><ul><li>实体：可以理解为表，一张表可以看做是一种实体。</li><li>属性：可以理解为表的字段，一个字段可以看做是一个属性。</li><li>元组：可以理解为表的记录，一条记录可以看做是一个元组。</li><li>主属性：候选键中的所有属性，所有候选键中的所有属性。</li><li>非主属性：不在候选键中的所有属性。</li></ul><h3 id="3-3-说明"><a href="#3-3-说明" class="headerlink" title="3.3 说明"></a>3.3 说明</h3><p>目前关系数据库有六种范式：</p><ul><li>第一范式（1NF）</li><li>第二范式（2NF）</li><li>第三范式（3NF）</li><li>巴斯-科德范式（BCNF，又称为修正的第三范式）</li><li>第四范式（4NF）</li><li>第五范式（5NF，又称完美范式）</li></ul><p>满足最低要求的范式是第一范式（1NF），在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。</p><p>一般说来，数据库只需满足第三范式（3NF）就行了。</p><h4 id="3-3-1-第一范式（1NF）"><a href="#3-3-1-第一范式（1NF）" class="headerlink" title="3.3.1 第一范式（1NF）"></a>3.3.1 第一范式（1NF）</h4><p>要求每个属性都是原子数据项，即每个属性只包含一个值，并且不能有重复的属性。</p><p>第一范式确保表中的每个属性都是不可分割的基本数据项。</p><p>违背第一范式的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>姓名</th>      <th>课程</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>张三</td>      <td>语文;数学</td>    </tr>    <tr>      <td>201011</td>      <td>李四</td>      <td>语文</td>    </tr>  </tbody></table><p>在课程中存在多个值的情况，违背了第一范式。</p><p>修改后的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>姓名</th>      <th>课程</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>张三</td>      <td>语文</td>    </tr>    <tr>      <td>201010</td>      <td>张三</td>      <td>数学</td>    </tr>    <tr>      <td>201011</td>      <td>李四</td>      <td>语文</td>    </tr>  </tbody></table><h4 id="3-3-2-第二范式（2NF）"><a href="#3-3-2-第二范式（2NF）" class="headerlink" title="3.3.2 第二范式（2NF）"></a>3.3.2 第二范式（2NF）</h4><p>要求在满足第一范式的基础上，非主属性完全依赖候选键，不能只依赖候选键的一部分。</p><p>第二范式确保在候选键为属性组的情况下，表中没有部分依赖问题。</p><p>违背第二范式的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>姓名</th>      <th>课程</th>      <th>成绩</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>张三</td>      <td>语文</td>      <td>97</td>    </tr>    <tr>      <td>201010</td>      <td>张三</td>      <td>数学</td>      <td>99</td>    </tr>    <tr>      <td>201011</td>      <td>李四</td>      <td>语文</td>      <td>94</td>    </tr>  </tbody></table><p>将学号和课程作为候选键，共同决定成绩，但姓名只依赖学号，存在部分依赖的情况，违背了第二范式。</p><p>修改后的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>课程</th>      <th>成绩</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>语文</td>      <td>97</td>    </tr>    <tr>      <td>201010</td>      <td>数学</td>      <td>99</td>    </tr>    <tr>      <td>201011</td>      <td>语文</td>      <td>94</td>    </tr>  </tbody></table><p>将学号和姓名单独拆分出来：</p><table>  <thead>    <tr>      <th>学号</th>      <th>姓名</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>张三</td>    </tr>    <tr>      <td>201011</td>      <td>李四</td>    </tr>  </tbody></table><h4 id="3-3-3-第三范式（3NF）"><a href="#3-3-3-第三范式（3NF）" class="headerlink" title="3.3.3 第三范式（3NF）"></a>3.3.3 第三范式（3NF）</h4><p>要求在满足第二范式的基础上，非主属性只能依赖主属性，不能依赖其他非主属性。</p><p>第三范式确保表中没有传递依赖问题。</p><p>违背第三范式的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>姓名</th>      <th>目标</th>      <th>省市</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>张三</td>      <td>山东大学</td>      <td>山东省</td>    </tr>    <tr>      <td>201011</td>      <td>李四</td>      <td>北京大学</td>      <td>北京市</td>    </tr>  </tbody></table><p>将学号作为主键，学号决定报考的目标，报考的目标决定所在的省市，存在传递依赖的情况，违背了第三范式。</p><p>修改后的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>姓名</th>      <th>目标</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>张三</td>      <td>山东大学</td>    </tr>    <tr>      <td>201011</td>      <td>李四</td>      <td>北京大学</td>    </tr>  </tbody></table><p>将目标和省市单独拆分出来：</p><table>  <thead>    <tr>      <th>目标</th>      <th>省市</th>    </tr>  </thead>  <tbody>    <tr>      <td>山东大学</td>      <td>山东省</td>    </tr>    <tr>      <td>北京大学</td>      <td>北京市</td>    </tr>  </tbody></table><h4 id="3-3-4-巴斯-科德范式（BCNF）"><a href="#3-3-4-巴斯-科德范式（BCNF）" class="headerlink" title="3.3.4 巴斯-科德范式（BCNF）"></a>3.3.4 巴斯-科德范式（BCNF）</h4><p>要求在满足第三范式的基础上，非主属性只能完全依赖主属性，不能部分依赖主属性，也不能依赖其他非主属性。</p><p>巴斯-科德范式确保在候选键为属性组的情况下，表中没有部分依赖和传递依赖问题。</p><p>违背巴斯-科德范式的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>课程</th>      <th>教师</th>      <th>成绩</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>语文</td>      <td>语文老师</td>      <td>93</td>    </tr>    <tr>      <td>201010</td>      <td>数学</td>      <td>数学老师</td>      <td>96</td>    </tr>    <tr>      <td>201011</td>      <td>语文</td>      <td>语文老师</td>      <td>91</td>    </tr>  </tbody></table><p>将学号和课程作为主键，同时学号和教师作为候选键，都能决定成绩，但是课程也能决定教师，存在主属性部分依赖主键的情况，违背了巴斯-科德范式。</p><p>修改后的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>课程</th>      <th>成绩</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>语文</td>      <td>93</td>    </tr>    <tr>      <td>201010</td>      <td>数学</td>      <td>96</td>    </tr>    <tr>      <td>201011</td>      <td>语文</td>      <td>91</td>    </tr>  </tbody></table><p>将课程和教师单独拆分出来：</p><table>  <thead>    <tr>      <th>课程</th>      <th>教师</th>    </tr>  </thead>  <tbody>    <tr>      <td>语文</td>      <td>语文老师</td>    </tr>    <tr>      <td>数学</td>      <td>数学老师</td>    </tr>  </tbody></table><h4 id="3-3-5-第四范式（4NF）"><a href="#3-3-5-第四范式（4NF）" class="headerlink" title="3.3.5 第四范式（4NF）"></a>3.3.5 第四范式（4NF）</h4><p>要求在满足巴斯-科德范式的基础上，当某个属性的值确定时，只能有一条记录与之对应。</p><p>第四范式确保表中没有多值依赖问题。</p><p>违背第四范式的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>课程</th>      <th>爱好</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>语文</td>      <td>跑步</td>    </tr>    <tr>      <td>201010</td>      <td>数学</td>      <td>游泳</td>    </tr>    <tr>      <td>201011</td>      <td>语文</td>      <td>游泳</td>    </tr>  </tbody></table><p>将学号作为主键，同时对应多个课程和多个爱好，并且课程和爱好之间没有关联，存在多值依赖的情况，违背了第四范式。</p><p>修改后的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>课程</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>语文</td>    </tr>    <tr>      <td>201010</td>      <td>数学</td>    </tr>    <tr>      <td>201011</td>      <td>语文</td>    </tr>  </tbody></table><p>将学号和爱好单独拆分出来：</p><table>  <thead>    <tr>      <th>学号</th>      <th>爱好</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>跑步</td>    </tr>    <tr>      <td>201010</td>      <td>游泳</td>    </tr>    <tr>      <td>201011</td>      <td>游泳</td>    </tr>  </tbody></table><h4 id="3-3-6-第五范式（5NF）"><a href="#3-3-6-第五范式（5NF）" class="headerlink" title="3.3.6 第五范式（5NF）"></a>3.3.6 第五范式（5NF）</h4><p>要求在满足第四范式的基础上，不存在任何通过连接操作生成的冗余数据，即不存在多对多关系。</p><p>第五范式确保表中没有连接依赖问题。</p><p>违背第五范式的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>课程</th>      <th>考试</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>语文</td>      <td>期中</td>    </tr>    <tr>      <td>201010</td>      <td>数学</td>      <td>期末</td>    </tr>    <tr>      <td>201011</td>      <td>语文</td>      <td>期末</td>    </tr>  </tbody></table><p>将学号作为主键，同时对应多个课程和多种考试，并且课程和考试之间存在多对多的关系，存在连接依赖的情况，违背了第五范式。</p><p>修改后的数据：</p><table>  <thead>    <tr>      <th>学号</th>      <th>课程</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>语文</td>    </tr>    <tr>      <td>201010</td>      <td>数学</td>    </tr>    <tr>      <td>201011</td>      <td>语文</td>    </tr>  </tbody></table><p>将学号和考试单独拆分出来：</p><table>  <thead>    <tr>      <th>学号</th>      <th>考试</th>    </tr>  </thead>  <tbody>    <tr>      <td>201010</td>      <td>期中</td>    </tr>    <tr>      <td>201010</td>      <td>期末</td>    </tr>    <tr>      <td>201011</td>      <td>期末</td>    </tr>  </tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文了解了MySQL关系型数据库和SQL语言的基本知识。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="https://momashanhe.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="MySQL" scheme="https://momashanhe.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>流式处理</title>
    <link href="https://momashanhe.com/posts/20250508/103413/"/>
    <id>https://momashanhe.com/posts/20250508/103413/</id>
    <published>2025-05-08T02:34:13.000Z</published>
    <updated>2025-05-12T06:39:05.816Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了流式处理，使用新增方法操作集合，以及通过Optional类判断空值。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Java 1.8</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>从JDK1.8开始，新增了一系列Stream相关的API用于流式处理，这些API都在<code>java.util.stream</code>包下，通过Stream可以编写函数式编程风格的代码，使代码更加高效简洁。</p><h3 id="1-2-操作方式"><a href="#1-2-操作方式" class="headerlink" title="1.2 操作方式"></a>1.2 操作方式</h3><p>流式处理可以分为三个部分：</p><ul><li>转换成流：将原始数据转换成流对象，以便进行后续操作。</li><li>中间操作：将原始的Stream经过逻辑处理，生成新的Stream用于继续处理。</li><li>终止操作：产生结果或者执行其他操作。</li></ul><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><h3 id="2-1-转换成流"><a href="#2-1-转换成流" class="headerlink" title="2.1 转换成流"></a>2.1 转换成流</h3><p>创建空的Stream对象：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> Stream.empty();</span><br></pre></td></tr></table></figure><p>通过集合类中的<code>stream()</code>方法或者<code>parallelStream()</code>方法创建Stream对象：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> list.stream();<span class="comment">// 获取串行的Stream对象</span></span><br><span class="line"><span class="type">Stream</span> <span class="variable">parallelStream</span> <span class="operator">=</span> list.parallelStream();<span class="comment">// 获取并行的Stream对象</span></span><br></pre></td></tr></table></figure><p>通过数组工具类Arrays类的<code>stream()</code>方法创建Stream对象：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(arr);</span><br></pre></td></tr></table></figure><p>通过Stream类中的<code>of()</code>方法创建Stream对象：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过Stream类中的<code>iterate()</code>方法创建有序的Stream对象：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">iterate</span><span class="params">(<span class="keyword">final</span> T seed, <span class="keyword">final</span> UnaryOperator&lt;T&gt; f)</span>;</span><br></pre></td></tr></table></figure><p>通过Stream类中的<code>generate()</code>方法创建无序的Stream对象：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">generate</span><span class="params">(Supplier&lt;T&gt; s)</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-中间操作"><a href="#2-2-中间操作" class="headerlink" title="2.2 中间操作"></a>2.2 中间操作</h3><p>多个中间操作可以连接起来形成流水线，在终止操作时进行处理并返回结果，称为<code>惰性求值</code>，是函数式编程中的一种策略。</p><h4 id="2-2-1-过滤"><a href="#2-2-1-过滤" class="headerlink" title="2.2.1 过滤"></a>2.2.1 过滤</h4><p>对Stream对象按指定的Predicate进行筛选，将符合条件的元素组成新的Stream对象返回。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>).filter(i -&gt; i &gt; <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 为了看到效果，使用终止操作forEach()方法进行打印</span></span><br><span class="line">stream.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-截取"><a href="#2-2-2-截取" class="headerlink" title="2.2.2 截取"></a>2.2.2 截取</h4><p>获取指定的前几个元素组成新的Stream对象返回。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">limit</span><span class="params">(<span class="type">long</span> maxSize)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>).limit(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 为了看到效果，使用终止操作forEach()方法进行打印</span></span><br><span class="line">stream.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-跳过"><a href="#2-2-3-跳过" class="headerlink" title="2.2.3 跳过"></a>2.2.3 跳过</h4><p>跳过指定的前几个元素，将剩下的元素组成新的Stream对象返回。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">skip</span><span class="params">(<span class="type">long</span> n)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>).skip(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 为了看到效果，使用终止操作forEach()方法进行打印</span></span><br><span class="line">stream.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-去重"><a href="#2-2-4-去重" class="headerlink" title="2.2.4 去重"></a>2.2.4 去重</h4><p>调用元素的<code>equals()</code>方法进行比较，将去重后的元素组成新的Stream对象返回。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">distinct</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>).distinct();</span><br><span class="line"><span class="comment">// 为了看到效果，使用终止操作forEach()方法进行打印</span></span><br><span class="line">stream.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="2-2-5-排序"><a href="#2-2-5-排序" class="headerlink" title="2.2.5 排序"></a>2.2.5 排序</h4><p>调用传入比较器进行比较，将排序后的元素组成新的Stream对象返回。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">sorted</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> T&gt; comparator)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>).sorted((m, n) -&gt; m - n);</span><br><span class="line"><span class="comment">// 为了看到效果，使用终止操作forEach()方法进行打印</span></span><br><span class="line">stream.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="2-2-6-映射"><a href="#2-2-6-映射" class="headerlink" title="2.2.6 映射"></a>2.2.6 映射</h4><p>将Stream中的元素转换成其他元素或者提取信息，调用传入的函数处理每个元素，将处理后的元素组成新的Stream对象返回。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; Stream&lt;R&gt; <span class="title function_">map</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends R&gt; mapper)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>).map(i -&gt; i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 为了看到效果，使用了终止操作forEach()方法进行打印</span></span><br><span class="line">stream.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="2-2-7-扁平映射"><a href="#2-2-7-扁平映射" class="headerlink" title="2.2.7 扁平映射"></a>2.2.7 扁平映射</h4><p>将Stream中的元素转换成Stream对象，调用传入的函数处理每个Steam对象，将处理后的Stream对象组成新的Stream对象返回。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; Stream&lt;R&gt; <span class="title function_">flatMap</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;1 8&quot;</span>, <span class="string">&quot;5 8&quot;</span>).flatMap(s -&gt; Stream.of(s.split(<span class="string">&quot; &quot;</span>)));</span><br><span class="line"><span class="comment">// 为了看到效果，使用了终止操作forEach()方法进行打印</span></span><br><span class="line">stream.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="2-3-终止操作"><a href="#2-3-终止操作" class="headerlink" title="2.3 终止操作"></a>2.3 终止操作</h3><p>终端操作会使用流水线生成结果，一旦执行终端操作，流就被使用使用了，无法再被使用。</p><h4 id="2-3-1-遍历元素"><a href="#2-3-1-遍历元素" class="headerlink" title="2.3.1 遍历元素"></a>2.3.1 遍历元素</h4><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">stream.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-检查是否所有元素匹配"><a href="#2-3-2-检查是否所有元素匹配" class="headerlink" title="2.3.2 检查是否所有元素匹配"></a>2.3.2 检查是否所有元素匹配</h4><p>如果所有元素都满足条件，那么返回true，否则返回false。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">allMatch</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;aa11&quot;</span>, <span class="string">&quot;bb11&quot;</span>).allMatch(e -&gt; e.contains(<span class="string">&quot;11&quot;</span>));</span><br><span class="line">System.out.println(match);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-检查是否任意元素匹配"><a href="#2-3-3-检查是否任意元素匹配" class="headerlink" title="2.3.3 检查是否任意元素匹配"></a>2.3.3 检查是否任意元素匹配</h4><p>如果任意元素满足条件，就返回true，否则返回false。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">anyMatch</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;aa11&quot;</span>, <span class="string">&quot;bb11&quot;</span>).anyMatch(e -&gt; e.contains(<span class="string">&quot;aa&quot;</span>));</span><br><span class="line">System.out.println(match);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-检查是否没有元素匹配"><a href="#2-3-4-检查是否没有元素匹配" class="headerlink" title="2.3.4 检查是否没有元素匹配"></a>2.3.4 检查是否没有元素匹配</h4><p>如果没有元素满足条件，返回true，否则返回false。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">noneMatch</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;aa11&quot;</span>, <span class="string">&quot;bb11&quot;</span>).noneMatch(e -&gt; e.contains(<span class="string">&quot;cc&quot;</span>));</span><br><span class="line">System.out.println(match);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="2-3-5-返回首个元素"><a href="#2-3-5-返回首个元素" class="headerlink" title="2.3.5 返回首个元素"></a>2.3.5 返回首个元素</h4><p>返回首个元素，使用Optional对象封装。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;T&gt; <span class="title function_">findFirst</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; find = Stream.of(<span class="string">&quot;aa11&quot;</span>, <span class="string">&quot;bb11&quot;</span>).findFirst();</span><br><span class="line">System.out.println(find);<span class="comment">// Optional[aa11]</span></span><br></pre></td></tr></table></figure><h4 id="2-3-6-返回任意元素"><a href="#2-3-6-返回任意元素" class="headerlink" title="2.3.6 返回任意元素"></a>2.3.6 返回任意元素</h4><p>返回任意元素，通常是处理最快的那个元素，使用Optional对象封装。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;T&gt; <span class="title function_">findAny</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; find = Stream.of(<span class="string">&quot;aa11&quot;</span>, <span class="string">&quot;bb11&quot;</span>).findAny();</span><br><span class="line">System.out.println(find);<span class="comment">// Optional[aa11]</span></span><br></pre></td></tr></table></figure><h4 id="2-3-7-返回元素个数"><a href="#2-3-7-返回元素个数" class="headerlink" title="2.3.7 返回元素个数"></a>2.3.7 返回元素个数</h4><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">count</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;aa11&quot;</span>, <span class="string">&quot;bb11&quot;</span>).count();</span><br><span class="line">System.out.println(count);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="2-3-8-返回元素最大值"><a href="#2-3-8-返回元素最大值" class="headerlink" title="2.3.8 返回元素最大值"></a>2.3.8 返回元素最大值</h4><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;T&gt; <span class="title function_">max</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> T&gt; comparator)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; max = Stream.of(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>).max((m, n) -&gt; m - n);</span><br><span class="line">System.out.println(max);<span class="comment">// Optional[8]</span></span><br></pre></td></tr></table></figure><h4 id="2-3-9-返回元素最小值"><a href="#2-3-9-返回元素最小值" class="headerlink" title="2.3.9 返回元素最小值"></a>2.3.9 返回元素最小值</h4><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;T&gt; <span class="title function_">min</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> T&gt; comparator)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; min = Stream.of(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>).min((m, n) -&gt; m - n);</span><br><span class="line">System.out.println(min);<span class="comment">// Optional[1]</span></span><br></pre></td></tr></table></figure><h4 id="2-3-10-收集元素"><a href="#2-3-10-收集元素" class="headerlink" title="2.3.10 收集元素"></a>2.3.10 收集元素</h4><p>将流中的元素进行汇总，使用集合收集元素。</p><p>可以使用Collectors类提供的静态方法，将流中的元素通过集合收集。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R, A&gt; R <span class="title function_">collect</span><span class="params">(Collector&lt;? <span class="built_in">super</span> T, A, R&gt; collector)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">Set&lt;Integer&gt; set = list.stream().collect(Collectors.toSet());</span><br><span class="line">System.out.println(set);<span class="comment">// [1, 5, 8]</span></span><br></pre></td></tr></table></figure><h4 id="2-3-11-规约元素"><a href="#2-3-11-规约元素" class="headerlink" title="2.3.11 规约元素"></a>2.3.11 规约元素</h4><p>将流中的元素反复结合，最终生成单一的结果。</p><p>语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T <span class="title function_">reduce</span><span class="params">(T identity, BinaryOperator&lt;T&gt; accumulator)</span>;</span><br><span class="line">Optional&lt;T&gt; <span class="title function_">reduce</span><span class="params">(BinaryOperator&lt;T&gt; accumulator)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">Optional&lt;Integer&gt; sum = list.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">System.out.println(sum);<span class="comment">// Optional[22]</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sumWith0</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line">System.out.println(sumWith0);<span class="comment">// 22</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sumWith5</span> <span class="operator">=</span> list.stream().reduce(<span class="number">5</span>, (x, y) -&gt; x + y);</span><br><span class="line">System.out.println(sumWith5);<span class="comment">// 27</span></span><br></pre></td></tr></table></figure><h2 id="3-Optional类"><a href="#3-Optional类" class="headerlink" title="3 Optional类"></a>3 Optional类</h2><p>为了避免产生NullPointException异常，通常的做法是进行if条件判断，但如果代码里面充满了大量的null判断会让程序变的不再优雅。</p><p>从JDK1.8开始，可以使用Optional类处理可能为null的变量，在减少NullPointException的同时，也提升了代码的美观度。</p><h3 id="3-1-获取"><a href="#3-1-获取" class="headerlink" title="3.1 获取"></a>3.1 获取</h3><p>创建空的Optional对象：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.empty();</span><br></pre></td></tr></table></figure><p>包装不为null的对象，如果对象为null，则抛出NullPointException异常：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.of(str);</span><br></pre></td></tr></table></figure><p>包装可以为null的对象，如果对象为null，则创建空的Optional对象：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(str);</span><br></pre></td></tr></table></figure><h3 id="3-2-常用方法"><a href="#3-2-常用方法" class="headerlink" title="3.2 常用方法"></a>3.2 常用方法</h3><h4 id="3-2-1-判断是否为空"><a href="#3-2-1-判断是否为空" class="headerlink" title="3.2.1 判断是否为空"></a>3.2.1 判断是否为空</h4><p>使用<code>isPresent()</code>方法判断Optional对象是否为空，如果为空则返回true，如果不为空则返回false。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">System.out.println(name.isPresent());<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-安全执行方法"><a href="#3-2-2-安全执行方法" class="headerlink" title="3.2.2 安全执行方法"></a>3.2.2 安全执行方法</h4><p>使用<code>ifPresent()</code>方法安全的执行传入的方法，如果不为空则执行方法，如果为空则什么也不做。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">name.ifPresent(System.out::println);<span class="comment">// name</span></span><br></pre></td></tr></table></figure><h4 id="3-2-3-获取值"><a href="#3-2-3-获取值" class="headerlink" title="3.2.3 获取值"></a>3.2.3 获取值</h4><p>使用<code>get()</code>方法获取Optional对象的值，如果不为空则返回值，如果为空则抛出NoSuchElementException异常。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(name.get());<span class="comment">// name</span></span><br></pre></td></tr></table></figure><h4 id="3-2-4-获取值或默认值"><a href="#3-2-4-获取值或默认值" class="headerlink" title="3.2.4 获取值或默认值"></a>3.2.4 获取值或默认值</h4><p>使用<code>orElse()</code>方法获取Optional对象的值，如果不为空则返回值，如果为空则返回指定的值。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">System.out.println(name.orElse(<span class="string">&quot;null&quot;</span>));<span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="3-2-5-获取值或执行方法"><a href="#3-2-5-获取值或执行方法" class="headerlink" title="3.2.5 获取值或执行方法"></a>3.2.5 获取值或执行方法</h4><p>使用<code>orElseGet()</code>方法获取Optional对象的值，如果不为空则返回值，如果为空则返回执行方法得到的值。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">System.out.println(name.orElseGet(() -&gt; <span class="string">&quot;null&quot;</span>));<span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="3-2-6-获取值或抛出异常"><a href="#3-2-6-获取值或抛出异常" class="headerlink" title="3.2.6 获取值或抛出异常"></a>3.2.6 获取值或抛出异常</h4><p>使用<code>orElseThrow()</code>方法获取Optional对象的值，如果不为空则返回值，如果为空则抛出指定的异常，默认抛出NoSuchElementException异常。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">System.out.println(name.orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">NullPointerException</span>()));<span class="comment">// java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure><h4 id="3-2-7-过滤"><a href="#3-2-7-过滤" class="headerlink" title="3.2.7 过滤"></a>3.2.7 过滤</h4><p>使用<code>filter()</code>方法过滤Optional对象的值，判断是否满足传入的条件，如果满足则返回原来的Optional对象，如果不满足则创建空的Optional对象返回。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="string">&quot;name&quot;</span>).filter(e -&gt; e != <span class="literal">null</span>);</span><br><span class="line">System.out.println(name);<span class="comment">// Optional[name]</span></span><br></pre></td></tr></table></figure><h4 id="3-2-8-映射"><a href="#3-2-8-映射" class="headerlink" title="3.2.8 映射"></a>3.2.8 映射</h4><p>使用<code>map()</code>方法处理Optional对象的值，如果不为空则使用传入的方法处理并将返回值封装为Optional对象返回，如果为空则创建空的Optional对象返回。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; length = Optional.ofNullable(<span class="string">&quot;name&quot;</span>).map(e -&gt; e.length());</span><br><span class="line">System.out.println(length);<span class="comment">// Optional[4]</span></span><br></pre></td></tr></table></figure><h4 id="3-2-9-扁平映射"><a href="#3-2-9-扁平映射" class="headerlink" title="3.2.9 扁平映射"></a>3.2.9 扁平映射</h4><p>使用<code>flatMap()</code>方法处理Optional对象的值，如果不为空则使用传入的方法处理并将Optional对象返回，如果为空则创建空的Optional对象返回。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; length = Optional.ofNullable(<span class="string">&quot;name&quot;</span>).flatMap(e -&gt; Optional.ofNullable(e.length()));</span><br><span class="line">System.out.println(length);<span class="comment">// Optional[4]</span></span><br></pre></td></tr></table></figure><h3 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h3><p>比较orElse()方法和orElseGet()方法：</p><ul><li>当Optional对象不为空时，返回的都是原对象。当Optional对象为空时，orElse()方法返回指定的值，orElseGet()方法返回的是接口调用的返回值。</li><li>并且当Optional对象不为空时，orElse()方法也会执行，orElseGet()方法不会执行。如果两个方法都返回新对象，orElse()方法会执行初始化，orElseGet()方法不会执行初始化。</li></ul><p>比较map()方法和flatMap()方法：</p><ul><li>如果Optional对象为空，都会创建空对象返回。</li><li>如果Optional对象不为空，map()方法会将执行方法得到的返回值包装为Optional对象，flatMap()方法会直接返回执行方法得到的Optional对象。</li></ul><h2 id="4-集合增强"><a href="#4-集合增强" class="headerlink" title="4 集合增强"></a>4 集合增强</h2><h3 id="4-1-工具类"><a href="#4-1-工具类" class="headerlink" title="4.1 工具类"></a>4.1 工具类</h3><h4 id="4-1-1-Collector"><a href="#4-1-1-Collector" class="headerlink" title="4.1.1 Collector"></a>4.1.1 Collector</h4><p>可以将Collector接口看做是用来处理流的工具，在Collectors类里面封装了很多Collector工具。</p><h4 id="4-1-2-Collectors"><a href="#4-1-2-Collectors" class="headerlink" title="4.1.2 Collectors"></a>4.1.2 Collectors</h4><p>Collectors类是一个提供了多种Collector接口的工具类。</p><h5 id="4-1-2-1-集合"><a href="#4-1-2-1-集合" class="headerlink" title="4.1.2.1 集合"></a>4.1.2.1 集合</h5><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;521&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;228&quot;</span>, <span class="string">&quot;838&quot;</span>, <span class="string">&quot;250&quot;</span>, <span class="string">&quot;345&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">// [123, 521, 100, 228, 838, 250, 345]</span></span><br><span class="line"><span class="comment">// 使用toCollection()方法收集到Collection返回</span></span><br><span class="line">LinkedList&lt;String&gt; newCollection = list.stream().collect(Collectors.toCollection(LinkedList::<span class="keyword">new</span>));</span><br><span class="line">System.out.println(newCollection);<span class="comment">// [123, 521, 100, 228, 838, 250, 345]</span></span><br><span class="line"><span class="comment">// 使用toList()方法收集到List返回，默认为ArrayList</span></span><br><span class="line">List&lt;String&gt; newList = list.stream().collect(Collectors.toList());</span><br><span class="line">System.out.println(newList);<span class="comment">// [123, 521, 100, 228, 838, 250, 345]</span></span><br><span class="line"><span class="comment">// 使用toSet()方法收集到Set返回，默认为HashSet</span></span><br><span class="line">Set&lt;String&gt; newSet = list.stream().collect(Collectors.toSet());</span><br><span class="line">System.out.println(newSet);<span class="comment">// [100, 123, 521, 345, 228, 838, 250]</span></span><br><span class="line"><span class="comment">// 使用toMap()方法收集到Map返回，主键冲突时默认抛出异常，默认为HashMap</span></span><br><span class="line">Map&lt;String, String&gt; newMap = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 传入主键冲突时的处理方法，保留先插入的值，默认对主键由小到大排序</span></span><br><span class="line">newMap = list.stream().collect(Collectors.toMap(e -&gt; e.substring(<span class="number">0</span>, <span class="number">1</span>), e -&gt; e, (m, n) -&gt; m));</span><br><span class="line">System.out.println(newMap);<span class="comment">// &#123;1=123, 2=228, 3=345, 5=521, 8=838&#125;</span></span><br><span class="line"><span class="comment">// 传入主键冲突时的处理方法，保留后插入的值，设置对主键按照插入顺序排序</span></span><br><span class="line">newMap = list.stream().collect(Collectors.toMap(e -&gt; e.substring(<span class="number">0</span>, <span class="number">1</span>), e -&gt; e, (m, n) -&gt; n, LinkedHashMap::<span class="keyword">new</span>));</span><br><span class="line">System.out.println(newMap);<span class="comment">// &#123;1=100, 5=521, 2=250, 8=838, 3=345&#125;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-2-拼接"><a href="#4-1-2-2-拼接" class="headerlink" title="4.1.2.2 拼接"></a>4.1.2.2 拼接</h5><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;521&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;228&quot;</span>, <span class="string">&quot;838&quot;</span>, <span class="string">&quot;250&quot;</span>, <span class="string">&quot;345&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">// [123, 521, 100, 228, 838, 250, 345]</span></span><br><span class="line"><span class="comment">// 使用joining()方法将流中的元素拼接为字符串，可以指定连接符，也可以指定前后缀</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">str = list.stream().collect(Collectors.joining());</span><br><span class="line">System.out.println(str);<span class="comment">// 123521100228838250345</span></span><br><span class="line">str = list.stream().collect(Collectors.joining(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">System.out.println(str);<span class="comment">// 123-521-100-228-838-250-345</span></span><br><span class="line">str = list.stream().collect(Collectors.joining(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>));</span><br><span class="line">System.out.println(str);<span class="comment">// &lt;123-521-100-228-838-250-345&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-3-数学"><a href="#4-1-2-3-数学" class="headerlink" title="4.1.2.3 数学"></a>4.1.2.3 数学</h5><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;521&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;228&quot;</span>, <span class="string">&quot;838&quot;</span>, <span class="string">&quot;250&quot;</span>, <span class="string">&quot;345&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">// [123, 521, 100, 228, 838, 250, 345]</span></span><br><span class="line"><span class="comment">// 使用counting()方法统计流中元素的个数</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().collect(Collectors.counting());</span><br><span class="line">System.out.println(count);<span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 使用maxBy()方法获取流中元素的最大值</span></span><br><span class="line">Optional&lt;String&gt; max = list.stream().collect(Collectors.maxBy((m, n) -&gt; Integer.valueOf(m) - Integer.valueOf(n)));</span><br><span class="line">System.out.println(max);<span class="comment">// Optional[838]</span></span><br><span class="line"><span class="comment">// 使用minBy()方法获取流中元素的最小值</span></span><br><span class="line">Optional&lt;String&gt; min = list.stream().collect(Collectors.minBy((m, n) -&gt; Integer.valueOf(m) - Integer.valueOf(n)));</span><br><span class="line">System.out.println(min);<span class="comment">// Optional[100]</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-4-映射"><a href="#4-1-2-4-映射" class="headerlink" title="4.1.2.4 映射"></a>4.1.2.4 映射</h5><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Score&gt; scoreList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Score&gt;();</span><br><span class="line">scoreList.add(<span class="keyword">new</span> <span class="title class_">Score</span>(<span class="string">&quot;201010&quot;</span>, <span class="string">&quot;张三&quot;</span>));</span><br><span class="line">scoreList.add(<span class="keyword">new</span> <span class="title class_">Score</span>(<span class="string">&quot;201011&quot;</span>, <span class="string">&quot;李四&quot;</span>));</span><br><span class="line">scoreList.add(<span class="keyword">new</span> <span class="title class_">Score</span>(<span class="string">&quot;201012&quot;</span>, <span class="string">&quot;王五&quot;</span>));</span><br><span class="line"><span class="comment">// 使用mapping()方法将流中的元素进行处理，按照指定格式返回结果</span></span><br><span class="line">List&lt;String&gt; names = scoreList.stream().collect(Collectors.mapping(Score::getName, Collectors.toList()));</span><br><span class="line">System.out.println(names);<span class="comment">// [张三, 李四, 王五]</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-5-收集处理"><a href="#4-1-2-5-收集处理" class="headerlink" title="4.1.2.5 收集处理"></a>4.1.2.5 收集处理</h5><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;521&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;228&quot;</span>, <span class="string">&quot;838&quot;</span>, <span class="string">&quot;250&quot;</span>, <span class="string">&quot;345&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">// [123, 521, 100, 228, 838, 250, 345]</span></span><br><span class="line"><span class="comment">// 使用collectingAndThen()方法对收集后的结构进行进一步处理</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">size</span> <span class="operator">=</span> list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</span><br><span class="line">System.out.println(size);<span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-6-统计归纳"><a href="#4-1-2-6-统计归纳" class="headerlink" title="4.1.2.6 统计归纳"></a>4.1.2.6 统计归纳</h5><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;521&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;228&quot;</span>, <span class="string">&quot;838&quot;</span>, <span class="string">&quot;250&quot;</span>, <span class="string">&quot;345&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">// [123, 521, 100, 228, 838, 250, 345]</span></span><br><span class="line"><span class="comment">// 使用reducing()方法对流中的元素做统计归纳，有三个重载方法，和Stream里的三个方法对应，二者作用完全一致</span></span><br><span class="line">Optional&lt;Integer&gt; sum = list.stream().map(String::length).collect(Collectors.reducing(Integer::sum));</span><br><span class="line">System.out.println(sum);<span class="comment">// Optional[21]</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sumWith0</span> <span class="operator">=</span> list.stream().map(String::length).collect(Collectors.reducing(<span class="number">0</span>, Integer::sum));</span><br><span class="line">System.out.println(sumWith0);<span class="comment">// 21</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sumWith5</span> <span class="operator">=</span> list.stream().collect(Collectors.reducing(<span class="number">0</span>, String::length, Integer::sum));</span><br><span class="line">System.out.println(sumWith5);<span class="comment">// 26</span></span><br></pre></td></tr></table></figure><h5 id="4-2-1-7-分组"><a href="#4-2-1-7-分组" class="headerlink" title="4.2.1.7 分组"></a>4.2.1.7 分组</h5><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;521&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;228&quot;</span>, <span class="string">&quot;838&quot;</span>, <span class="string">&quot;250&quot;</span>, <span class="string">&quot;345&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">// [123, 521, 100, 228, 838, 250, 345]</span></span><br><span class="line"><span class="comment">// 使用groupingBy()方法按照规则将流中的数据分为多个组，有三个重载方法</span></span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; groupByFirst = list.stream().collect(Collectors.groupingBy(e -&gt; e.substring(<span class="number">0</span>, <span class="number">1</span>)));</span><br><span class="line">System.out.println(groupByFirst);<span class="comment">// &#123;1=[123, 100], 2=[228, 250], 3=[345], 5=[521], 8=[838]&#125;</span></span><br><span class="line">Map&lt;String, Set&lt;String&gt;&gt; groupByLast = list.stream().collect(Collectors.groupingBy(e -&gt; e.substring(e.length() - <span class="number">1</span>), Collectors.toSet()));</span><br><span class="line">System.out.println(groupByLast);<span class="comment">// &#123;0=[100, 250], 1=[521], 3=[123], 5=[345], 8=[228, 838]&#125;</span></span><br><span class="line">HashMap&lt;Integer, Set&lt;String&gt;&gt; groupByLength = list.stream().collect(Collectors.groupingBy(String::length, HashMap::<span class="keyword">new</span>, Collectors.toSet()));</span><br><span class="line">System.out.println(groupByLength);<span class="comment">// &#123;3=[100, 123, 521, 345, 228, 838, 250]&#125;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-8-分区"><a href="#4-1-2-8-分区" class="headerlink" title="4.1.2.8 分区"></a>4.1.2.8 分区</h5><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;521&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;228&quot;</span>, <span class="string">&quot;838&quot;</span>, <span class="string">&quot;250&quot;</span>, <span class="string">&quot;345&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">// [123, 521, 100, 228, 838, 250, 345]</span></span><br><span class="line"><span class="comment">// 使用partitioningBy()方法按照规则将流中的数据分为两个区，有两个重载方法</span></span><br><span class="line">Map&lt;Boolean, List&lt;String&gt;&gt; moreThan = list.stream().collect(Collectors.partitioningBy(e -&gt; Integer.parseInt(e) &gt; <span class="number">300</span>));</span><br><span class="line">System.out.println(moreThan);<span class="comment">// &#123;false=[123, 100, 228, 250], true=[521, 838, 345]&#125;</span></span><br><span class="line">Map&lt;Boolean, Set&lt;String&gt;&gt; lessThan = list.stream().collect(Collectors.partitioningBy(e -&gt; Integer.parseInt(e) &lt; <span class="number">300</span>, Collectors.toSet()));</span><br><span class="line">System.out.println(lessThan);<span class="comment">// &#123;false=[521, 345, 838], true=[100, 123, 228, 250]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-遍历集合"><a href="#4-1-遍历集合" class="headerlink" title="4.1 遍历集合"></a>4.1 遍历集合</h3><h4 id="4-1-1-遍历List"><a href="#4-1-1-遍历List" class="headerlink" title="4.1.1 遍历List"></a>4.1.1 遍历List</h4><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">list.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><h4 id="4-1-2-遍历Set"><a href="#4-1-2-遍历Set" class="headerlink" title="4.1.2 遍历Set"></a>4.1.2 遍历Set</h4><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">set.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">set.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><h4 id="4-1-3-遍历Map"><a href="#4-1-3-遍历Map" class="headerlink" title="4.1.3 遍历Map"></a>4.1.3 遍历Map</h4><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">map.put(<span class="number">101</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">map.put(<span class="number">102</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">map.put(<span class="number">103</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">map.put(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">map.forEach((key, value) -&gt; System.out.println(key+<span class="string">&quot;-&gt;&quot;</span>+value));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了流式处理，使用新增方法操作集合，以及通过Optional类判断空值。&lt;/p&gt;</summary>
    
    
    
    <category term="大后端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://momashanhe.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="https://momashanhe.com/posts/20250507/091326/"/>
    <id>https://momashanhe.com/posts/20250507/091326/</id>
    <published>2025-05-07T01:13:26.000Z</published>
    <updated>2025-05-09T01:01:09.582Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了网络编程的相关知识，包括TCP网络编程和UDP网络编程，以及如何使用RMI远程调用。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Java 1.8</p>              </div>            </details><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>网络编程就是在两个或两个以上的设备之间传输数据。程序员所作的事情就是把数据发送到指定的位置，或者接收到指定的数据，这个就是狭义的网络编程范畴。</p><p>网络编程的基本模型就是客户机到服务器模型，简单的说就是两个进程之间相互通讯，然后其中一个提供固定位置，而另一个则需要知道这个固定位置，就能建立两者之间的联系，然后完成数据的通讯就可以了。提供固定位置的通常称为服务器，建立联系的通常称为客户端。</p><p>Java从语言级上提供了对网络应用程序的支持，程序员能够很容易开发常见的网络应用程序，联网的底层细节被隐藏在安装系统里，由JVM进行控制。</p><h3 id="1-2-网络通信"><a href="#1-2-网络通信" class="headerlink" title="1.2 网络通信"></a>1.2 网络通信</h3><p>网络通信中的两个要素</p><ul><li>IP地址和端口号：用于在网络上找到主机地址和主机上的特定应用。</li><li>网络协议，用于可靠高效地进行数据传输，有两套参考模型：<ol><li>OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广。</li><li>TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：事实上的国际标准，还可以细分为四层和五层。</li></ol></li></ul><h4 id="1-3-1-IP地址"><a href="#1-3-1-IP地址" class="headerlink" title="1.3.1 IP地址"></a>1.3.1 IP地址</h4><p>为了解决如何在网络上找到主机地址的问题，引入了IP地址和域名（Domain Name）的概念。</p><p>使用IP地址能够在网络上唯一标识网络设备，但由于IP地址不容易记忆，又创造用于映射IP地址的域名，一个IP地址可以对应多个域名，一个域名只能对应一个IP地址。</p><p>在实际传输数据前需要将域名转换为IP地址，实现这种功能的服务器称为DNS服务器，也就是域名解析。</p><h4 id="1-3-2-端口号"><a href="#1-3-2-端口号" class="headerlink" title="1.3.2 端口号"></a>1.3.2 端口号</h4><p>为了解决如何在主机上找到特定应用的问题，引入了端口（Port）的概念。</p><p>使用端口能够在主机中唯一标识应用，在主机上可以通过端口区分发送给每个应用的数据，实现了多个网络程序在共同的主机上运行，并且不会互相干扰。</p><h4 id="1-3-3-网络协议"><a href="#1-3-3-网络协议" class="headerlink" title="1.3.3 网络协议"></a>1.3.3 网络协议</h4><p>有了IP地址和端口号以后，在进行网络通讯交换时，就可以通过IP地址查找到主机，然后通过端口标识程序，这样就可以进行网络数据的交换了。</p><p>为了解决如何保证数据交换的安全可靠，引入了网络协议（Protocol）的概念。</p><p>网络协议用于在实际进行数据交换时规定数据的格式，避免格式不同导致的数据识别错误等问题。</p><p>常见的网络模型对比如下：</p><table>  <thead>    <tr>      <th>OSI七层网络模型</th>      <th>TCP/IP四层网络模型</th>      <th>TCP/IP五层网络模型</th>      <th>网络协议</th>      <th>工作设备</th>    </tr>  </thead>  <tbody>    <tr>      <td>应用层</td>      <td rowspan="3">应用层</td>      <td rowspan="3">应用层</td>      <td rowspan="3">HTTP HTTPS FTP SMTP POP3</td>      <td rowspan="3">计算机及应用</td>    </tr>    <tr>      <td>表示层</td>    </tr>    <tr>      <td>会话层</td>    </tr>    <tr>      <td>传输层</td>      <td>传输层</td>      <td>传输层</td>      <td>TCP UDP</td>      <td>四层交换机 四层路由器</td>    </tr>    <tr>      <td>网络层</td>      <td>网络层</td>      <td>网络层</td>      <td>IP ICMP ARP RARP</td>      <td>三层交换机 路由器 网关</td>    </tr>    <tr>      <td>数据链路层</td>      <td rowspan="2">网络接口层</td>      <td>数据链路层</td>      <td>Ethernet PPP</td>      <td>交换机 网桥</td>    </tr>    <tr>      <td>物理层</td>      <td>物理层</td>      <td>USB</td>      <td>中继器 集线器</td>    </tr>  </tbody></table><p>TCP和UDP比较：</p><table>  <thead>    <tr>      <th>特性</th>      <th>TCP</th>      <th>UDP</th>    </tr>  </thead>  <tbody>    <tr>      <td>是否连接</td>      <td>面向连接。</td>      <td>无连接。</td>    </tr>    <tr>      <td>是否可靠</td>      <td>可靠传输，使用流量控制和拥塞控制。</td>      <td>不可靠传输，不使用流量控制和拥塞控制。</td>    </tr>    <tr>      <td>连接对象个数</td>      <td>只能是一对一通信。</td>      <td>支持一对一，一对多，多对一和多对多交互通信。</td>    </tr>    <tr>      <td>传输方式</td>      <td>面向字节流。</td>      <td>面向报文。</td>    </tr>    <tr>      <td>首部开销</td>      <td>首部最小20字节，最大60字节。</td>      <td>首部开销小，仅8字节。</td>    </tr>    <tr>      <td>适用场景</td>      <td>适用于要求可靠传输的应用，例如文件传输。</td>      <td>适用于实时应用，例如IP电话、视频会议。</td>    </tr>  </tbody></table><h3 id="1-3-统一资源定位符"><a href="#1-3-统一资源定位符" class="headerlink" title="1.3 统一资源定位符"></a>1.3 统一资源定位符</h3><p>统一资源定位符（URL，Uniform Resource Locator），表示网络上某一资源的地址，通过URL可以访问网络上的各种资源。</p><p>URL主要由协议和资组成，语法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传输协议:<span class="comment">//主机名:端口号/文件名#内部引用?参数列表。</span></span><br></pre></td></tr></table></figure><h4 id="1-3-1-URL"><a href="#1-3-1-URL" class="headerlink" title="1.3.1 URL"></a>1.3.1 URL</h4><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据String表示形式创建URL对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">URL</span><span class="params">(String spec)</span>;</span><br><span class="line"><span class="comment">// 根据指定protocol、host、port和file创建URL对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">URL</span><span class="params">(String protocol, String host, <span class="type">int</span> port, String file)</span>;</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取此URL的协议名称</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getProtocol</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取此URL的主机名（如果适用）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getHost</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取此URL的端口号</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取此URL的文件名</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFile</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取此URL的内部引用</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRef</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取此URL的路径部分</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 读取网络资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> InputStream <span class="title function_">openStream</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 创建URLConnection实例对象</span></span><br><span class="line"><span class="keyword">public</span> URLConnection <span class="title function_">openConnection</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://www.gamelan.com:80/Gamelan/network.html#BOTTOM&quot;</span>);</span><br><span class="line">        System.out.println(url.getProtocol());</span><br><span class="line">        System.out.println(url.getHost());</span><br><span class="line">        System.out.println(url.getPort());</span><br><span class="line">        System.out.println(url.getFile());</span><br><span class="line">        System.out.println(url.getRef());</span><br><span class="line">        System.out.println(url.getPath());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">www.gamelan.com</span><br><span class="line"><span class="number">80</span></span><br><span class="line">/Gamelan/network.html</span><br><span class="line">BOTTOM</span><br><span class="line">/Gamelan/network.html</span><br></pre></td></tr></table></figure><h4 id="1-3-2-URLConnection"><a href="#1-3-2-URLConnection" class="headerlink" title="1.3.2 URLConnection"></a>1.3.2 URLConnection</h4><p>URLConnection表示到URL所引用的远程对象的连接。当与URL建立连接时，首先要生成对应的URLConnection对象。如果连接过程失败，将产生IOException。</p><p>获取方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过URL类的方法获取URLConnection实例</span></span><br><span class="line"><span class="keyword">public</span> URLConnection <span class="title function_">openConnection</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取输入流</span></span><br><span class="line"><span class="keyword">public</span> InputStream <span class="title function_">getInputStream</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line"><span class="keyword">public</span> OutputStream <span class="title function_">getOutputStream</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="2-TCP网络编程"><a href="#2-TCP网络编程" class="headerlink" title="2 TCP网络编程"></a>2 TCP网络编程</h2><h3 id="2-1-常用类"><a href="#2-1-常用类" class="headerlink" title="2.1 常用类"></a>2.1 常用类</h3><h4 id="2-1-1-InetAddress"><a href="#2-1-1-InetAddress" class="headerlink" title="2.1.1 InetAddress"></a>2.1.1 InetAddress</h4><p>此类表示互联网协议（IP）地址。</p><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据IP地址或者域名获取InetAddress实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title function_">getByName</span><span class="params">(String host)</span>;</span><br><span class="line"><span class="comment">// 获取IP地址为本地的InetAddress实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title function_">getLocalHost</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取InetAddress实例的主机名</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getHostName</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取InetAddress实例的IP地址</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getHostAddress</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">baidu</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">local</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(baidu.getHostName());</span><br><span class="line">        System.out.println(local.getHostAddress());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.109</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-InetSocketAddress"><a href="#2-1-2-InetSocketAddress" class="headerlink" title="2.1.2 InetSocketAddress"></a>2.1.2 InetSocketAddress</h4><p>此类实现IP套接字地址（IP地址和端口号）。</p><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据端口创建本地套接字地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InetSocketAddress</span><span class="params">(<span class="type">int</span> port)</span>;</span><br><span class="line"><span class="comment">// 根据IP地址和端口号创建套接字地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InetSocketAddress</span><span class="params">(InetAddress addr, <span class="type">int</span> port)</span>;</span><br><span class="line"><span class="comment">// 根据主机名和端口号创建套接字地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InetSocketAddress</span><span class="params">(String hostname, <span class="type">int</span> port)</span>;</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取InetAddress实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> InetAddress <span class="title function_">getAddress</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取主机名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getHostName</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取端口号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 构造此InetSocketAddress的字符串表示形式（主机名/IP:端口号）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">local</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(InetAddress.getLocalHost(), <span class="number">80</span>);</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">baidu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;www.baidu.com&quot;</span>, <span class="number">80</span>);</span><br><span class="line">        System.out.println(baidu);</span><br><span class="line">        System.out.println(baidu.getHostName());</span><br><span class="line">        System.out.println(local.getAddress().getHostAddress());</span><br><span class="line">        System.out.println(local.getPort());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com/<span class="number">182.61</span><span class="number">.200</span><span class="number">.7</span>:<span class="number">80</span></span><br><span class="line">www.baidu.com</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.109</span></span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-Socket"><a href="#2-1-3-Socket" class="headerlink" title="2.1.3 Socket"></a>2.1.3 Socket</h4><p>此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。</p><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个流套接字并将其连接到指定IP地址的指定端口号</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Socket</span><span class="params">(InetAddress address, <span class="type">int</span> port)</span>;</span><br><span class="line"><span class="comment">// 创建一个流套接字并将其连接到指定主机上的指定端口号</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Socket</span><span class="params">(String host, <span class="type">int</span> port)</span>;</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回此套接字的输出流</span></span><br><span class="line"><span class="keyword">public</span> OutputStream <span class="title function_">getOutputStream</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 返回此套接字的输入流</span></span><br><span class="line"><span class="keyword">public</span> InputStream <span class="title function_">getInputStream</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭此套接字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="2-1-4-ServerSocket"><a href="#2-1-4-ServerSocket" class="headerlink" title="2.1.4 ServerSocket"></a>2.1.4 ServerSocket</h4><p>此类实现服务器套接字。服务器套接字等待请求通过网络传入。</p><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建绑定到特定端口的服务器套接字</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ServerSocket</span><span class="params">(<span class="type">int</span> port)</span>;</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 侦听并接受到此套接字的连接</span></span><br><span class="line"><span class="keyword">public</span> Socket <span class="title function_">accept</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭此套接字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2-客户端"><a href="#2-2-客户端" class="headerlink" title="2.2 客户端"></a>2.2 客户端</h3><h4 id="2-2-1-建立连接"><a href="#2-2-1-建立连接" class="headerlink" title="2.2.1 建立连接"></a>2.2.1 建立连接</h4><p>在客户端网络编程中，首先需要建立连接。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;192.168.1.103&quot;</span>, <span class="number">8800</span>);</span><br></pre></td></tr></table></figure><p>使用服务端8800号端口建立连接，如果建立连接时本机网络不通，或服务器端程序未开启，会抛出异常。</p><h4 id="2-2-2-数据交换"><a href="#2-2-2-数据交换" class="headerlink" title="2.2.2 数据交换"></a>2.2.2 数据交换</h4><p>建立连接后，需要获得输入流和输出流与服务器端进行通信。使用输出流发送数据到服务器，使用输入流接收服务器发送的数据。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();<span class="comment">// 获得输出流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();<span class="comment">// 获得输入流</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-关闭连接"><a href="#2-2-3-关闭连接" class="headerlink" title="2.2.3 关闭连接"></a>2.2.3 关闭连接</h4><p>当数据交换完成以后，关闭网络连接，释放网络连接占用的系统端口和内存等资源。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.close();</span><br></pre></td></tr></table></figure><h3 id="2-3-服务端"><a href="#2-3-服务端" class="headerlink" title="2.3 服务端"></a>2.3 服务端</h3><h4 id="2-3-1-监听端口"><a href="#2-3-1-监听端口" class="headerlink" title="2.3.1 监听端口"></a>2.3.1 监听端口</h4><p>在服务器端网络编程中，由于服务器端实现的是被动等待连接，所以首先要监听是否有客户端连接请求。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8800</span>);</span><br></pre></td></tr></table></figure><p>如果服务端8800号端口已经被别的程序占用，那么将抛出异常。</p><h4 id="2-3-2-获得连接"><a href="#2-3-2-获得连接" class="headerlink" title="2.3.2 获得连接"></a>2.3.2 获得连接</h4><p>当有客户端发起连接请求时建立连接。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br></pre></td></tr></table></figure><h4 id="2-3-3-数据交换"><a href="#2-3-3-数据交换" class="headerlink" title="2.3.3 数据交换"></a>2.3.3 数据交换</h4><p>获得连接后，需要获得输入流和输出流与客户端端进行通信。使用输入流读取客户端发送的数据，使用输出流发送数据到客户端，服务端交换数据的顺序和客户端刚好相反。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();<span class="comment">// 获得输出流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();<span class="comment">// 获得输入流</span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-关闭连接"><a href="#2-3-4-关闭连接" class="headerlink" title="2.3.4 关闭连接"></a>2.3.4 关闭连接</h4><p>当数据交换完成以后，关闭网络连接，同时关闭监听。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.close();</span><br><span class="line">ss.close();</span><br></pre></td></tr></table></figure><h3 id="2-4-发送消息"><a href="#2-4-发送消息" class="headerlink" title="2.4 发送消息"></a>2.4 发送消息</h3><p>客户端示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端已启动&quot;</span>);</span><br><span class="line">        s = <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">8800</span>);</span><br><span class="line">        os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;你好，我是客户端&quot;</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端成功发送数据&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端已启动&quot;</span>);</span><br><span class="line">        ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8800</span>);</span><br><span class="line">        s = ss.accept();</span><br><span class="line">        is = s.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] temp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(temp, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端成功接收数据：&quot;</span> + baos.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                baos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ss != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">客户端已启动</span><br><span class="line">客户端成功发送数据</span><br></pre></td></tr></table></figure><p>服务端结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务端已启动</span><br><span class="line">服务端成功接收数据：你好，我是客户端</span><br></pre></td></tr></table></figure><h3 id="2-5-响应消息"><a href="#2-5-响应消息" class="headerlink" title="2.5 响应消息"></a>2.5 响应消息</h3><p>客户端示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端已启动&quot;</span>);</span><br><span class="line">        s = <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">8800</span>);</span><br><span class="line">        os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;你好，我是客户端&quot;</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端成功发送数据&quot;</span>);</span><br><span class="line">        s.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        is = s.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] temp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(temp, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端成功接收服务端回传数据：&quot;</span> + baos.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                baos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端已启动&quot;</span>);</span><br><span class="line">        ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8800</span>);</span><br><span class="line">        s = ss.accept();</span><br><span class="line">        is = s.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] temp = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(temp, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端成功接收数据：&quot;</span> + baos.toString());</span><br><span class="line">        </span><br><span class="line">        os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;你好，我是服务端&quot;</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端成功发送回传数据&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                baos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ss != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端已启动</span><br><span class="line">客户端成功发送数据</span><br><span class="line">客户端成功接收服务端回传数据：你好，我是服务端</span><br></pre></td></tr></table></figure><p>服务端结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务端已启动</span><br><span class="line">服务端成功接收数据：你好，我是客户端</span><br><span class="line">服务端成功发送回传数据</span><br></pre></td></tr></table></figure><h2 id="3-UDP网络编程"><a href="#3-UDP网络编程" class="headerlink" title="3 UDP网络编程"></a>3 UDP网络编程</h2><h3 id="3-1-常用类"><a href="#3-1-常用类" class="headerlink" title="3.1 常用类"></a>3.1 常用类</h3><h4 id="3-1-1-DatagramSocket"><a href="#3-1-1-DatagramSocket" class="headerlink" title="3.1.1 DatagramSocket"></a>3.1.1 DatagramSocket</h4><p>此类表示用来发送和接收数据报包的套接字。</p><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数据报套接字，将其绑定到本地地址上的随机端口</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DatagramSocket</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 创建数据报套接字，将其绑定到本地地址上的指定端口</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DatagramSocket</span><span class="params">(<span class="type">int</span> port)</span>;</span><br><span class="line"><span class="comment">// 创建数据报套接字，将其绑定到指定地址上的指定端口</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DatagramSocket</span><span class="params">(<span class="type">int</span> port, InetAddress laddr)</span>;</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从此套接字发送数据报包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(DatagramPacket p)</span>;</span><br><span class="line"><span class="comment">// 从此套接字接收数据报包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(DatagramPacket p)</span>;</span><br><span class="line"><span class="comment">// 关闭此数据报套接字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-DatagramPacket"><a href="#3-1-2-DatagramPacket" class="headerlink" title="3.1.2 DatagramPacket"></a>3.1.2 DatagramPacket</h4><p>此类表示数据报包。</p><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来接收数据包</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DatagramPacket</span><span class="params">(<span class="type">byte</span> buf[], <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="comment">// 用来接收数据包</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DatagramPacket</span><span class="params">(<span class="type">byte</span> buf[], <span class="type">int</span> offset, <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="comment">// 用来将数据包发送到指定主机上的指定端口</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DatagramPacket</span><span class="params">(<span class="type">byte</span> buf[], <span class="type">int</span> length, InetAddress address, <span class="type">int</span> port)</span>;</span><br><span class="line"><span class="comment">// 用来将数据包发送到指定主机上的指定端口</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DatagramPacket</span><span class="params">(<span class="type">byte</span> buf[], <span class="type">int</span> offset, <span class="type">int</span> length, InetAddress address, <span class="type">int</span> port)</span>;</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从数据报包获得IP地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getAddress</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从数据报包获得端口号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-客户端"><a href="#3-2-客户端" class="headerlink" title="3.2 客户端"></a>3.2 客户端</h3><h4 id="3-2-1-建立连接"><a href="#3-2-1-建立连接" class="headerlink" title="3.2.1 建立连接"></a>3.2.1 建立连接</h4><p>与TCP建立连接不同，使用UDP建立连接不需要指定服务器的IP和端口号。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br></pre></td></tr></table></figure><p>可以指定客户端连接使用的端口号。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8811</span>);</span><br></pre></td></tr></table></figure><p>使用客户端8811号端口建立连接，一般在建立客户端连接时没有必要指定端口号。</p><h4 id="3-2-2-发送数据"><a href="#3-2-2-发送数据" class="headerlink" title="3.2.2 发送数据"></a>3.2.2 发送数据</h4><p>在UDP网络编程中，不需要使用IO流，将数据内容以及服务器的IP地址和端口号封装发送即可。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] buffer = <span class="string">&quot;&quot;</span>.getBytes();</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length, InetAddress.getLocalHost(), <span class="number">8800</span>);</span><br><span class="line">ds.send(dp);</span><br></pre></td></tr></table></figure><p>按照UDP协议的约定，不保证数据一定被正确传输，如果数据在传输过程中丢失，那就丢失了。</p><h4 id="3-2-3-接收数据"><a href="#3-2-3-接收数据" class="headerlink" title="3.2.3 接收数据"></a>3.2.3 接收数据</h4><p>在UDP网络编程中，不需要使用IO流，将数据内容封装接收即可。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">ds.receive(dp);</span><br></pre></td></tr></table></figure><h4 id="3-2-4-关闭连接"><a href="#3-2-4-关闭连接" class="headerlink" title="3.2.4 关闭连接"></a>3.2.4 关闭连接</h4><p>当数据交换完成以后，关闭网络连接。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ds.close();</span><br></pre></td></tr></table></figure><p>需要说明的是，和TCP建立连接的方式不同，在UDP建立连接时没有固定的IP地址和端口号，可以将数据包发送到不同的IP地址和端口号，这点是TCP无法做到的。</p><h3 id="3-3-服务端"><a href="#3-3-服务端" class="headerlink" title="3.3 服务端"></a>3.3 服务端</h3><h4 id="3-3-1-建立连接"><a href="#3-3-1-建立连接" class="headerlink" title="3.3.1 建立连接"></a>3.3.1 建立连接</h4><p>与UDP建立连接类似，但是需要指定服务端连接使用的端口号。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8800</span>);</span><br></pre></td></tr></table></figure><p>使用服务端8800号端口建立连接，由于服务器端的端口需要固定，所以一般在建立服务器端连接时都指定端口号。</p><h4 id="3-3-2-接收数据"><a href="#3-3-2-接收数据" class="headerlink" title="3.3.2 接收数据"></a>3.3.2 接收数据</h4><p>将数据内容封装接收即可。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">ds.receive(dp);</span><br></pre></td></tr></table></figure><h4 id="3-3-3-发送数据"><a href="#3-3-3-发送数据" class="headerlink" title="3.3.3 发送数据"></a>3.3.3 发送数据</h4><p>将数据内容以及客户端的IP地址和端口号封装发送即可。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] buffer = <span class="string">&quot;&quot;</span>.getBytes();</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length, InetAddress.getLocalHost(), <span class="number">8811</span>);</span><br><span class="line">ds.send(dp);</span><br></pre></td></tr></table></figure><p>建议通过前面接收数据的数据报包获取客户端的IP地址和端口号发送数据。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> dp.getAddress();</span><br><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> dp.getPort();</span><br></pre></td></tr></table></figure><h4 id="3-3-4-关闭连接"><a href="#3-3-4-关闭连接" class="headerlink" title="3.3.4 关闭连接"></a>3.3.4 关闭连接</h4><p>当数据交换完成以后，关闭网络连接。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ds.close();</span><br></pre></td></tr></table></figure><h3 id="3-4-发送消息"><a href="#3-4-发送消息" class="headerlink" title="3.4 发送消息"></a>3.4 发送消息</h3><p>客户端示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端已启动&quot;</span>);</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="string">&quot;我是客户端&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length, InetAddress.getLocalHost(), <span class="number">8800</span>);</span><br><span class="line">        ds.send(dp);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端成功发送数据&quot;</span>);</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端已启动&quot;</span>);</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8800</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">        ds.receive(dp);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端成功接收数据：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(), <span class="number">0</span>, dp.getLength()));</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">客户端已启动</span><br><span class="line">客户端成功发送数据</span><br></pre></td></tr></table></figure><p>服务端结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务端已启动</span><br><span class="line">服务端成功接收数据：我是客户端</span><br></pre></td></tr></table></figure><h3 id="3-5-响应消息"><a href="#3-5-响应消息" class="headerlink" title="3.5 响应消息"></a>3.5 响应消息</h3><p>客户端示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;顾客已上线&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8811</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scan.next();</span><br><span class="line">            <span class="type">byte</span>[] bufMes = message.getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dpMes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bufMes, <span class="number">0</span>, bufMes.length, InetAddress.getLocalHost(), <span class="number">8800</span>);</span><br><span class="line">            ds.send(dpMes);</span><br><span class="line">            <span class="type">byte</span>[] bufRec = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dpRec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bufRec, <span class="number">0</span>, bufRec.length);</span><br><span class="line">            ds.receive(dpRec);</span><br><span class="line">            <span class="type">String</span> <span class="variable">receive</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(dpRec.getData(), <span class="number">0</span>, dpRec.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;客服说：&quot;</span> + receive);</span><br><span class="line">            <span class="keyword">if</span> (message.equals(<span class="string">&quot;bye&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客服已上线&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8800</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bufRec = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dpRec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bufRec, <span class="number">0</span>, bufRec.length);</span><br><span class="line">            ds.receive(dpRec);</span><br><span class="line">            <span class="type">String</span> <span class="variable">receive</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(dpRec.getData(), <span class="number">0</span>, dpRec.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;顾客说：&quot;</span> + receive);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scan.next();</span><br><span class="line">            <span class="type">byte</span>[] bufMes = message.getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dpMes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bufMes, <span class="number">0</span>, bufMes.length, InetAddress.getLocalHost(), <span class="number">8811</span>);</span><br><span class="line">            ds.send(dpMes);</span><br><span class="line">            <span class="keyword">if</span> (message.equals(<span class="string">&quot;bye&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">顾客已上线</span><br><span class="line">客服您好！</span><br><span class="line">客服说：您好，请问有什么事情吗？</span><br><span class="line">我要退货</span><br><span class="line">客服说：好的，请填写退货单号</span><br><span class="line">退货单号已经填好了</span><br><span class="line">客服说：退货成功！请问还有其他事情吗？</span><br><span class="line">没有了，再见！</span><br><span class="line">客服说：好的，再见！</span><br><span class="line">bye</span><br><span class="line">客服说：bye</span><br></pre></td></tr></table></figure><p>服务端结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">客服已上线</span><br><span class="line">顾客说：客服您好！</span><br><span class="line">您好，请问有什么事情吗？</span><br><span class="line">顾客说：我要退货</span><br><span class="line">好的，请填写退货单号</span><br><span class="line">顾客说：退货单号已经填好了</span><br><span class="line">退货成功！请问还有其他事情吗？</span><br><span class="line">顾客说：没有了，再见！</span><br><span class="line">好的，再见！</span><br><span class="line">顾客说：bye</span><br><span class="line">bye</span><br></pre></td></tr></table></figure><h2 id="4-RMI远程调用"><a href="#4-RMI远程调用" class="headerlink" title="4 RMI远程调用"></a>4 RMI远程调用</h2><h3 id="1-1-通信方式"><a href="#1-1-通信方式" class="headerlink" title="1.1 通信方式"></a>1.1 通信方式</h3><p>常见的通信方式分为两种：</p><ul><li>基于RPC远程调用的同步方式。</li><li>基于中间件代理的异步方式。</li></ul><h4 id="1-1-1-RPC远程调用"><a href="#1-1-1-RPC远程调用" class="headerlink" title="1.1.1 RPC远程调用"></a>1.1.1 RPC远程调用</h4><p>基于RPC远程调用的同步方式：<br><img src="/@image/201002/005-20250508095219.jpg" alt="20250508095219-RPC远程调用"></p><p>RPC（Remote Procedure Call，远程过程调用）是一种服务通信的调用方式，并不是具体的协议。</p><p>在RPC远程调用方式下，不同系统之间直接调用通信，每个请求直接从调用方发送到被调用方，然后要求被调用方返回响应结果给调用方，以确定本次调用结果是否成功。</p><p>此处的同步并不代表调用方式，RPC远程调用也可以有异步非阻塞的调用方式，但本质上仍然是需要在指定时间内得到被调用方的直接响应。</p><p>RPC的实现有很多，比如最早的CORBA和RMI，以及最近的WebService和Dubbo，甚至也可以将RESTful API看做是RPC的实现。</p><h4 id="1-1-2-中间件代理"><a href="#1-1-2-中间件代理" class="headerlink" title="1.1.2 中间件代理"></a>1.1.2 中间件代理</h4><p>基于中间件代理的异步方式：<br><img src="/@image/201002/005-20250508095916.jpg" alt="20250508095916-中间件代理"></p><p>在中间件代理方式下，各子系统之间无需强耦合直接连接，调用方只需要将请求转化成异步事件（通常为异步消息）发送给中间代理，发送成功即可认为该异步链路调用完成，剩下的工作会由中间代理负责将事件可靠通知到下游的调用系统，确保任务执行完成。</p><p>中间件代理一般使用消息中间件，比如老牌的ActiveMQ和RabbitMQ，炙手可热的Kafka，以及阿里巴巴自主研发的RocketMQ。</p><h3 id="1-2-定义"><a href="#1-2-定义" class="headerlink" title="1.2 定义"></a>1.2 定义</h3><p>RMI（Remote Method Invocation，远程方法调用）是Java中的一种远程通信协议，允许程序利用序列化机制远程调用方法，可以看做是RPC的一种实现。</p><p>RMI与Socket的区别：</p><ul><li>Socket独立于开发语言，客户端和服务端可以使用不同的开发语言。RMI和Java语言绑定，客户端和服务端都必须使用Java语言开发。</li><li>Socket属于传输层协议，使用TCP协议和UDP协议进行通信。RMI属于应用层协议，传输层使用Java远程消息交换协议（JRMP，Java Remote Messaging Protocol）进行通信。</li><li>Socket更灵活，可以控制序列化机制。RMI更方便，在Socket的基础上增加了对象序列化机制。</li><li>Socket占用的带宽更少，适合需要传输大量数据的场景。RMI占用的宽带较多，适合处理需要逻辑计算的场景。</li></ul><h3 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h3><h4 id="1-3-1-公共接口"><a href="#1-3-1-公共接口" class="headerlink" title="1.3.1 公共接口"></a>1.3.1 公共接口</h4><p>编写公共接口，暴露服务：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须继承Remote接口，因为网络通信是不可靠的，所以要抛出RemoteException异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseService</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-客户端"><a href="#1-3-2-客户端" class="headerlink" title="1.3.2 客户端"></a>1.3.2 客户端</h4><p>编写客户端启动类：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base.BaseService;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 连接注册中心</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 查找BaseService服务</span></span><br><span class="line">        <span class="type">BaseService</span> <span class="variable">baseService</span> <span class="operator">=</span> (BaseService) registry.lookup(<span class="string">&quot;BaseService&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> baseService.hello();</span><br><span class="line">        <span class="comment">// 打印结果</span></span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3-服务端"><a href="#1-3-3-服务端" class="headerlink" title="1.3.3 服务端"></a>1.3.3 服务端</h4><p>编写服务端实现类：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base.BaseService;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须实现公共接口，必须继承UnicastRemoteObject类用于暴露远程服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">BaseService</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ServerServiceImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call hello()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写服务端启动类：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base.BaseService;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建注册中心</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 创建BaseService服务</span></span><br><span class="line">        <span class="type">BaseService</span> <span class="variable">baseService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerServiceImpl</span>();</span><br><span class="line">        <span class="comment">// 注册服务</span></span><br><span class="line">        registry.rebind(<span class="string">&quot;BaseService&quot;</span>, baseService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-运行"><a href="#1-3-4-运行" class="headerlink" title="1.3.4 运行"></a>1.3.4 运行</h4><p>先启动服务端启动类，然后启动客户端启动类。</p><h3 id="1-4-原理"><a href="#1-4-原理" class="headerlink" title="1.4 原理"></a>1.4 原理</h3><p>流程如下：<br><img src="/@image/201002/005-20250508164639.jpg" alt="20250508164639-RMI原理"></p><p>概念说明：</p><ul><li>Stub：客户端的代理，对开发人员屏蔽了远程方法调用的细节。</li><li>Skeleton：服务端的代理，对开发人员屏蔽了远程方法调用的细节。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了网络编程的相关知识，包括TCP网络编程和UDP网络编程，以及如何使用RMI远程调用。&lt;/p&gt;</summary>
    
    
    
    <category term="大后端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://momashanhe.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>文件操作</title>
    <link href="https://momashanhe.com/posts/20250506/203841/"/>
    <id>https://momashanhe.com/posts/20250506/203841/</id>
    <published>2025-05-06T12:38:41.000Z</published>
    <updated>2025-05-09T01:01:09.582Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用输入输出流对文件进行操作。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Java 1.8</p>              </div>            </details><h2 id="1-文件"><a href="#1-文件" class="headerlink" title="1 文件"></a>1 文件</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>File类是数据源的一种，可以表示一个文件，也可以表示一个文件目录。</p><p>File类只能对文件和目录进行创建和删除等操作，可以查看文件和目录的属性，不能读取或修改内容。如果需要读取或修改文件的内容，需要使用输入输出流。</p><p>常常将File类的对象作为参数传递到输入输出流的类的构造器中。</p><p>绝对路径和相对路径：</p><ul><li>相对路径：相对路径名必须使用取自其他路径名的信息进行解释。</li><li>绝对路径：绝对路径名是完整的路径名，不需要任何其他信息就可以定位它所表示的文件或目录。</li></ul><p>相对路径创建的实例不等于绝对路径创建的实例。</p><h3 id="1-2-常用方法"><a href="#1-2-常用方法" class="headerlink" title="1.2 常用方法"></a>1.2 常用方法</h3><p>查看文件和目录：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得文件名或目录名</span></span><br><span class="line">String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获得相对路径</span></span><br><span class="line">String <span class="title function_">getPath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获得绝对路径</span></span><br><span class="line">String <span class="title function_">getAbsolutePath</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>创建和删除文件和目录：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空文件</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">createNewFile</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 创建一个空目录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 创建指定的目录及父目录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">mkdirs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 删除文件或空目录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>常用的判断方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 判断是否目录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isDirectory</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 判断是否文件</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-常量"><a href="#1-3-常量" class="headerlink" title="1.3 常量"></a>1.3 常量</h3><h4 id="1-3-1-名称分隔符"><a href="#1-3-1-名称分隔符" class="headerlink" title="1.3.1 名称分隔符"></a>1.3.1 名称分隔符</h4><p>使用<code>File.separator</code>获取与系统有关的名称分隔符字符串，此字符串只包含separatorChar字符，用于分隔路径中的文件和目录。</p><p>separatorChar被初始化为包含系统属性file.separator值的第一个字符。在UNIX系统上对应<code>/</code>符号，在Windows系统上对应<code>\</code>符号。</p><h4 id="1-3-2-路径分隔符"><a href="#1-3-2-路径分隔符" class="headerlink" title="1.3.2 路径分隔符"></a>1.3.2 路径分隔符</h4><p>使用<code>File.sepapathSeparatorrator</code>获取与系统有关的路径分隔符字符串，此字符串只包含pathSeparatorChar字符，用于分隔以路径列表中的路径。</p><p>pathSeparatorChar被初始为包含系统属性path.separator值的第一个字符。在UNIX系统上对应<code>:</code>符号，在Windows系统上对应<code>;</code>符号。</p><h2 id="2-输入输出流"><a href="#2-输入输出流" class="headerlink" title="2 输入输出流"></a>2 输入输出流</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>流是数据在数据源（文件）和程序（内存）之间经历的路径。</p><p>输入输出流可以称为IO流，I即输入流，O即输出流。流的方向以内存为参照，如果数据流向内存流动则是输入流，反之则是输出流。</p><p>文件和目录在程序中是以流的形式来操作的，凡是与输入输出相关的都定义在<code>java.io</code>包下。</p><p>打开的资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该显式关闭。关闭流时只需要考虑关闭最外层的流即可，如果要强制关闭所有流，必须先关闭外层的流。</p><p>在JDK1.7之后，可以在<code>try-catch</code>代码块中打开流，最后程序会自动关闭流对象。</p><h3 id="2-2-分类"><a href="#2-2-分类" class="headerlink" title="2.2 分类"></a>2.2 分类</h3><p>按数据流的流向：输入流，输出流。</p><p>按操作数据单位：字节流（InputStream、OutputStream），字符流（Reader、Writer）。</p><p>按流的角色：节点流，处理流。</p><h2 id="3-文件流"><a href="#3-文件流" class="headerlink" title="3 文件流"></a>3 文件流</h2><p>文件流主要有：FileInputStream、FileOutputStream、FileReader、FileWriter。</p><p>这四个类用于操作文件流，用法高度相似，前面两个操作字节流，后面两个操作字符流。</p><p>文件流直接与操作系统底层交互，因此也被称为节点流，节点流需要关流。</p><h3 id="3-1-FileInputStream"><a href="#3-1-FileInputStream" class="headerlink" title="3.1 FileInputStream"></a>3.1 FileInputStream</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream(File file);</span><br><span class="line">FileInputStream(String name);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从输入流中读入一个字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b)</span>;</span><br><span class="line"><span class="comment">// 从输入流中将len个数据读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 关闭输入流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>读入文件到输入流：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">txt</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            txt += <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(txt);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-FileOutputStream"><a href="#3-2-FileOutputStream" class="headerlink" title="3.2 FileOutputStream"></a>3.2 FileOutputStream</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream(File file);</span><br><span class="line">FileOutputStream(File file, <span class="type">boolean</span> append);</span><br><span class="line">FileOutputStream(String name);</span><br><span class="line">FileOutputStream(String name, <span class="type">boolean</span> append);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从指定字节中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="comment">// 从数组中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span>;</span><br><span class="line"><span class="comment">// 从数组中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 刷新该流的缓冲</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭输出流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>读出文件到输出流：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line">        fos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-FileReader"><a href="#3-3-FileReader" class="headerlink" title="3.3 FileReader"></a>3.3 FileReader</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileReader(File file);</span><br><span class="line">FileReader(String fileName);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回此流使用的字符编码的名称</span></span><br><span class="line">String <span class="title function_">getEncoding</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入一个字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] cbuf)</span>;</span><br><span class="line"><span class="comment">// 从输入流中将len个数据读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] cbuf, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 关闭输入流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>读入文本到输入流：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line">        <span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">txt</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            txt = <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(txt);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-FileWriter"><a href="#3-4-FileWriter" class="headerlink" title="3.4 FileWriter"></a>3.4 FileWriter</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileWriter(File file);</span><br><span class="line">FileWriter(File file, <span class="type">boolean</span> append);</span><br><span class="line">FileWriter(String fileName);</span><br><span class="line">FileWriter(String fileName, <span class="type">boolean</span> append);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回此流使用的字符编码的名称</span></span><br><span class="line">String <span class="title function_">getEncoding</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从指定字节中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="comment">// 从数组中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span>;</span><br><span class="line"><span class="comment">// 从数组中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 从字符串中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str)</span>;</span><br><span class="line"><span class="comment">// 从字符串中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 刷新该流的缓冲</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭输出流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>读出文本到输出流：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line">        fw.write(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fw != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-复制文件"><a href="#3-5-复制文件" class="headerlink" title="3.5 复制文件"></a>3.5 复制文件</h3><p>使用字节流复制文件：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;old.jpeg&quot;</span>);</span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;new.jpeg&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用字符流复制文件：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;old.txt&quot;</span>);</span><br><span class="line">        fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;new.txt&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fw != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-缓冲流"><a href="#4-缓冲流" class="headerlink" title="4 缓冲流"></a>4 缓冲流</h2><p>缓冲流主要有：BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter。</p><p>这四个类可以封装现有的节点流，实现对数据传输的效率的提升。</p><p>缓冲流比文件流多了一个缓冲区，读取时先从缓冲区读取，当缓冲区数据读完时再把数据写入到缓冲区。因此，当每次读取的数据量很小时，文件流从硬盘读入，缓冲流从缓冲区读入。读取内存速度比读取硬盘速度快得多，因此缓冲流效率高。</p><p>缓冲流的默认缓冲区大小是8192字节，当每次读取数据量接近或远超这个值时，两者效率就没有明显差别了。</p><p>缓冲流属于处理流，处理流需要关流。</p><h3 id="4-1-BufferedInputStream"><a href="#4-1-BufferedInputStream" class="headerlink" title="4.1 BufferedInputStream"></a>4.1 BufferedInputStream</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedInputStream(InputStream in);</span><br><span class="line">BufferedInputStream(InputStream in, <span class="type">int</span> size);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从输入流中读入一个字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b)</span>;</span><br><span class="line"><span class="comment">// 从输入流中将len个数据读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 关闭输入流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="4-2-BufferedOutputStream"><a href="#4-2-BufferedOutputStream" class="headerlink" title="4.2 BufferedOutputStream"></a>4.2 BufferedOutputStream</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedOutputStream(OutputStream out);</span><br><span class="line">BufferedOutputStream(OutputStream out, <span class="type">int</span> size);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从指定字节中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="comment">// 从数组中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span>;</span><br><span class="line"><span class="comment">// 从数组中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 刷新该流的缓冲</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭输出流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="4-3-BufferedReader"><a href="#4-3-BufferedReader" class="headerlink" title="4.3 BufferedReader"></a>4.3 BufferedReader</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader(Reader in);</span><br><span class="line">BufferedReader(Reader in, <span class="type">int</span> size);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从输入流中读入一个字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] cbuf)</span>;</span><br><span class="line"><span class="comment">// 从输入流中将len个数据读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] cbuf, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 关闭输入流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="4-4-BufferedWriter"><a href="#4-4-BufferedWriter" class="headerlink" title="4.4 BufferedWriter"></a>4.4 BufferedWriter</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter(Writer out);</span><br><span class="line">BufferedWriter(Writer out, <span class="type">int</span> size);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从指定字节中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> c)</span>;</span><br><span class="line"><span class="comment">// 从数组中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf)</span>;</span><br><span class="line"><span class="comment">// 从数组中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 从字符串中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str)</span>;</span><br><span class="line"><span class="comment">// 从字符串中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 刷新该流的缓冲</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭输出流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="4-5-复制文件"><a href="#4-5-复制文件" class="headerlink" title="4.5 复制文件"></a>4.5 复制文件</h3><p>使用字节流复制文件：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;old.mp3&quot;</span>));</span><br><span class="line">        bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;new.mp3&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bis != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bos != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用字符流复制文件：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;old.txt&quot;</span>));</span><br><span class="line">        bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;new.txt&quot;</span>));</span><br><span class="line">        <span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = br.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bw.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bw != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-转换流"><a href="#5-转换流" class="headerlink" title="5 转换流"></a>5 转换流</h2><p>转换流主要有：InputStreamReader、OutputStreamWriter。</p><p>这两个流可以将文本在字节流和字符流之间进行转换，但只能处理文本文件。</p><p>转换流需要关流。</p><h3 id="5-1-InputStreamReader"><a href="#5-1-InputStreamReader" class="headerlink" title="5.1 InputStreamReader"></a>5.1 InputStreamReader</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader(InputStream in);</span><br><span class="line">InputStreamReader(InputStream in, String charsetName);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回此流使用的字符编码的名称</span></span><br><span class="line">String <span class="title function_">getEncoding</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入一个字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] cbuf)</span>;</span><br><span class="line"><span class="comment">// 从输入流中将len个数据读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] cbuf, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 关闭输入流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="5-2-OutputStreamWriter"><a href="#5-2-OutputStreamWriter" class="headerlink" title="5.2 OutputStreamWriter"></a>5.2 OutputStreamWriter</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter(OutputStream out);</span><br><span class="line">OutputStreamWriter(OutputStream out, String charsetName);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回此流使用的字符编码的名称</span></span><br><span class="line">String <span class="title function_">getEncoding</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从指定字节中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> c)</span>;</span><br><span class="line"><span class="comment">// 从数组中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf)</span>;</span><br><span class="line"><span class="comment">// 从数组中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 从字符串中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str)</span>;</span><br><span class="line"><span class="comment">// 从字符串中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 刷新该流的缓冲</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭输出流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="5-3-复制文件"><a href="#5-3-复制文件" class="headerlink" title="5.3 复制文件"></a>5.3 复制文件</h3><p>使用转换流复制文件：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;old.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);<span class="comment">// 确定解码集</span></span><br><span class="line">        osw = <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;new.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);<span class="comment">// 确定编码集</span></span><br><span class="line">        <span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            osw.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                isr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (osw != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                osw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-内存读写流"><a href="#6-内存读写流" class="headerlink" title="6 内存读写流"></a>6 内存读写流</h2><p>内存读写流主要有：ByteArrayOutputStream、ByteArrayInputStream。</p><p>内存读写流将数组当作流输入输出对象的类。</p><p>不同于指向硬盘的流，它内部是使用字节数组读内存的，这个字节数组是它的成员变量，当这个数组不再使用变成垃圾时会被回收，所以内存读写流不需要关流。</p><h3 id="6-1-ByteArrayInputStream"><a href="#6-1-ByteArrayInputStream" class="headerlink" title="6.1 ByteArrayInputStream"></a>6.1 ByteArrayInputStream</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteArrayInputStream(<span class="type">byte</span>[] b);</span><br><span class="line">ByteArrayInputStream(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从输入流中读入一个字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中将len个数据读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br></pre></td></tr></table></figure><h3 id="6-2-ByteArrayIOutputStream"><a href="#6-2-ByteArrayIOutputStream" class="headerlink" title="6.2 ByteArrayIOutputStream"></a>6.2 ByteArrayIOutputStream</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteArrayIOutputStream();</span><br><span class="line">ByteArrayIOutputStream(<span class="type">int</span> size);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从指定字节中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="comment">// 从数组中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 将缓冲区内容转换字节数组</span></span><br><span class="line"><span class="type">byte</span> <span class="title function_">toByteArray</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 将缓冲区内容转换为字符串</span></span><br><span class="line">String <span class="title function_">toString</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 将缓冲区内容转换为指定编码格式的字符串</span></span><br><span class="line">String <span class="title function_">toString</span><span class="params">(String charsetName)</span>;</span><br><span class="line"><span class="comment">// 将缓冲区内容输出到指定的输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">writeTo</span><span class="params">(OutputStream out)</span>;</span><br></pre></td></tr></table></figure><h3 id="6-3-解决乱码"><a href="#6-3-解决乱码" class="headerlink" title="6.3 解决乱码"></a>6.3 解决乱码</h3><p>当用字节数组读取字符串时，受数组长度的影响，导致产生乱码。</p><p>如果用String类型接收，则不能完全解析出正常的文字，需要使用字节数组输出流将字节数组的内容输出到缓冲区，待读取完成后再转换为String类型的字符串。</p><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bais = <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="string">&quot;测试写入内容&quot;</span>.getBytes());</span><br><span class="line">        baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">txt</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = bais.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            txt += <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;正常：&quot;</span> + baos.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;乱码：&quot;</span> + txt);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-标准流"><a href="#7-标准流" class="headerlink" title="7 标准流"></a>7 标准流</h2><h3 id="7-1-System-in"><a href="#7-1-System-in" class="headerlink" title="7.1 System.in"></a>7.1 System.in</h3><p>可以获取键盘输入的值，属于字节流。</p><p>获取方式：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> InputStream in;</span><br></pre></td></tr></table></figure><h3 id="7-2-System-out"><a href="#7-2-System-out" class="headerlink" title="7.2 System.out"></a>7.2 System.out</h3><p>可以将文本从控制台输出，属于字节流。</p><p>PrintStream是FileOutputStream下的子类，而FileOutputStream是OutputStream下的子类。</p><p>获取方式：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PrintStream out;</span><br></pre></td></tr></table></figure><h3 id="7-3-读取输入内容"><a href="#7-3-读取输入内容" class="headerlink" title="7.3 读取输入内容"></a>7.3 读取输入内容</h3><p>从控制台中读取输入内容：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的字符串为：&quot;</span> + br.readLine());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-读取文件内容"><a href="#7-4-读取文件内容" class="headerlink" title="7.4 读取文件内容"></a>7.4 读取文件内容</h3><p>从文件中读取输入内容：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.setIn(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = System.in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            str += <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-输出内容"><a href="#7-5-输出内容" class="headerlink" title="7.5 输出内容"></a>7.5 输出内容</h3><p>将内容输出到控制台和文件：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是输出到控制台的文字。&quot;</span>);</span><br><span class="line">        System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;input.txt&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;这是输出到文件里的文字。&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-对象流"><a href="#8-对象流" class="headerlink" title="8 对象流"></a>8 对象流</h2><p>对象流主要有：ObjectInputStream、ObjectOutputStream。</p><p>这两个类型都是字节流，可以处理所有文件，可以将内存中的对象保存到本地，也可以将本地的对象还原到内存中。</p><h3 id="8-1-序列化"><a href="#8-1-序列化" class="headerlink" title="8.1 序列化"></a>8.1 序列化</h3><h4 id="8-1-1-概念"><a href="#8-1-1-概念" class="headerlink" title="8.1.1 概念"></a>8.1.1 概念</h4><p>对象序列化机制允许把内存中的对象转换成平台无关的二进制流，当其它程序获取了这种二进制流，就可以恢复成原来的对象。</p><p>如果想将一个对象进行网络传输，要求是该对象必须是可序列化的，该类必须实现Serializable接口或者Externalizable接口。</p><p>不能序列化static和transient修饰的属性。</p><h4 id="8-1-2-好处"><a href="#8-1-2-好处" class="headerlink" title="8.1.2 好处"></a>8.1.2 好处</h4><p>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据，使其在保存和传输时可被还原。</p><p>序列化是远程方法调用（Remote Method Invoke）过程的参数和返回值都必须实现的机制，而RMI是系统调用的基础，因此序列化机制是系统调用的基础。</p><h4 id="8-1-3-实现"><a href="#8-1-3-实现" class="headerlink" title="8.1.3 实现"></a>8.1.3 实现</h4><p>序列化是用ObjectOutputStream类保存基本类型数据或对象的机制，因为是输出到文件里，所以是输出流。</p><p>反序列化是用ObjectInputStream类读取基本类型数据或对象的机制，因为将数据输入到内存里，所以是输入流。</p><h4 id="8-1-4-自定义"><a href="#8-1-4-自定义" class="headerlink" title="8.1.4 自定义"></a>8.1.4 自定义</h4><p>在进行序列化和反序列化时，虚拟机会首先试图调用对象里的writeObject和readObject方法，进行用户自定义的序列化和反序列化。</p><p>如果没有这样的方法，那么默认调用的是ObjectOutputStream的defaultWriteObject以及ObjectInputStream的defaultReadObject方法。</p><h4 id="8-1-5-验证版本"><a href="#8-1-5-验证版本" class="headerlink" title="8.1.5 验证版本"></a>8.1.5 验证版本</h4><p>序列化机制是通过判断类的serialVersionUID来验证版本一致性的。</p><p>在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现InvalidCastException序列化版本不一致的异常。</p><p>serialVersionUID有两种生成方式：生成默认的1L，或者生成一个64位的Hash字段。</p><h3 id="8-2-ObjectInputStream"><a href="#8-2-ObjectInputStream" class="headerlink" title="8.2 ObjectInputStream"></a>8.2 ObjectInputStream</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream(InputStream in);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从输入流中读入一个字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] buf)</span>;</span><br><span class="line"><span class="comment">// 从输入流中将len个数据读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] buf, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 使用UTF-8编码读取字符串</span></span><br><span class="line">String <span class="title function_">readUTF</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 读取要保存的变量</span></span><br><span class="line">Object <span class="title function_">readObject</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 默认的读取变量的方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">defaultReadObject</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭输入流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deserialize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;object.obj&quot;</span>));</span><br><span class="line">        System.out.println(ois.readInt());</span><br><span class="line">        System.out.println(ois.readObject());</span><br><span class="line">        System.out.println((Box) ois.readObject());</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-ObjectOutputStream"><a href="#8-3-ObjectOutputStream" class="headerlink" title="8.3 ObjectOutputStream"></a>8.3 ObjectOutputStream</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataOutputStream(OutputStream out);</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从指定字节中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="comment">// 从数组中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span>;</span><br><span class="line"><span class="comment">// 从数组中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 使用UTF-8编码写入字符串</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">writeUTF</span><span class="params">(String str)</span>;</span><br><span class="line"><span class="comment">// 写入要保存的变量</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(Object obj)</span>;</span><br><span class="line"><span class="comment">// 默认的写入变量的方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">defaultWriteObject</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 刷新该流的缓冲</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 关闭输出流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;object.obj&quot;</span>));</span><br><span class="line">        oos.writeInt(<span class="number">100</span>);</span><br><span class="line">        oos.writeObject(<span class="string">&quot;String&quot;</span>);</span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> <span class="title class_">Box</span>(<span class="string">&quot;box&quot;</span>, <span class="number">6</span>, <span class="number">8</span>));</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-随机存取文件流"><a href="#9-随机存取文件流" class="headerlink" title="9 随机存取文件流"></a>9 随机存取文件流</h2><p>随机存取文件流可以处理所有文件，既可以充当输入流，又可以充当输出流。</p><p>如果将要输出文件不存在则尝试自动创建，并将内容输出到此文件中。如果将要输出的文件存在，则将对文件内容进行覆盖。</p><h3 id="9-1-RandomAccessFile"><a href="#9-1-RandomAccessFile" class="headerlink" title="9.1 RandomAccessFile"></a>9.1 RandomAccessFile</h3><p>构造方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile(File file, String mode);</span><br><span class="line">RandomAccessFile(String name, String mode);</span><br></pre></td></tr></table></figure><p>使用mode指定文件的访问模式：</p><ul><li>r：以只读方式打开。</li><li>rw：打开以便读取和写入。</li><li>rws：还要求对文件的内容或元数据的更新都同步到底层存储设备。</li><li>rwd：还要求对文件内容的更新都同步到底层存储设备。</li></ul><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从指定字节中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span>;</span><br><span class="line"><span class="comment">// 从数组中写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="comment">// 从数组中将len个数据写出到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入一个字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 从输入流中读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b)</span>;</span><br><span class="line"><span class="comment">// 从输入流中将len个数据读入到数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 获取文件记录指针的当前位置</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">getFilePointer</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 将文件记录指针定位到pos位置</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">seek</span><span class="params">(<span class="type">long</span> pos)</span>;</span><br><span class="line"><span class="comment">// 关闭流并释放系统资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="9-2-复制文件"><a href="#9-2-复制文件" class="headerlink" title="9.2 复制文件"></a>9.2 复制文件</h3><p>使用随机存取文件流复制文件：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">w</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        r = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;read.txt&quot;</span>), <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        w = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;write.txt&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = r.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            w.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                r.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (w != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                w.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-插入内容"><a href="#9-3-插入内容" class="headerlink" title="9.3 插入内容"></a>9.3 插入内容</h3><p>使用随机存取文件流插入内容：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        raf = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;read.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        raf.seek(<span class="number">3</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = raf.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            str += <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        raf.seek(<span class="number">3</span>);</span><br><span class="line">        raf.write(<span class="string">&quot;read&quot;</span>.getBytes());</span><br><span class="line">        raf.write(str.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用输入输出流对文件进行操作。&lt;/p&gt;</summary>
    
    
    
    <category term="大后端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://momashanhe.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="https://momashanhe.com/posts/20250506/131526/"/>
    <id>https://momashanhe.com/posts/20250506/131526/</id>
    <published>2025-05-06T05:15:26.000Z</published>
    <updated>2025-05-09T01:01:09.679Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了什么是反射，以及如何使用反射。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Java 1.8</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>反射被视为动态语言的关键，反射机制允许程序在执行期借助于API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。</p><p>这个Class类型的对象就像一面镜子，可以透过这个镜子看到类的结构，所以形象的称之为反射。</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2 原理"></a>2 原理</h2><h3 id="2-1-Class"><a href="#2-1-Class" class="headerlink" title="2.1 Class"></a>2.1 Class</h3><h4 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h4><p>Class是用来描述类的类，封装了当前对象所对应的类的信息，通过Class可以得到一个类中所有被加载的结构。</p><p>将书看做一个对象，一本书有名称，作者，字数等，使用Book类描述所有书的信息。根据万物皆对象，可以将类看做一个对象，一个类中有属性，方法，构造器等，使用Class类描述所有类的信息。</p><p>Class类是一特殊的类，对于每个类而言，虚拟机都为其保留一个不变的Class类的对象。Class类的对象只能由虚拟机创建，一个类只能有一个Class类的对象。</p><p>支持Class实例的类型：类，接口，枚举，注解，数组，基本数据类型（包含Void类但不存在Null类）。</p><h4 id="2-1-2-方法"><a href="#2-1-2-方法" class="headerlink" title="2.1.2 方法"></a>2.1.2 方法</h4><p>类的信息：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取指定类名的Class对象</span></span><br><span class="line"><span class="keyword">static</span> Class&lt;?&gt; forName(String className);</span><br><span class="line"><span class="comment">// 获取该Class对象对应的类的实例</span></span><br><span class="line">T <span class="title function_">newInstance</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取全类名</span></span><br><span class="line">String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取包名</span></span><br><span class="line">Package <span class="title function_">getPackage</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取修饰符标志数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getModifiers</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取类加载器</span></span><br><span class="line">ClassLoader <span class="title function_">getClassLoader</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取读取的文件流</span></span><br><span class="line">InputStream <span class="title function_">getResourceAsStream</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><p>属性和方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取公共的指定名称的属性，包括父类的</span></span><br><span class="line">Field <span class="title function_">getField</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">// 获取指定名称的属性，不包括父类的</span></span><br><span class="line">Field <span class="title function_">getDeclaredField</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">// 获取公共的所有的属性，包括父类的</span></span><br><span class="line">Field[] getFields();</span><br><span class="line"><span class="comment">// 获取所有的属性，不包括父类的</span></span><br><span class="line">Field[] getDeclaredFields();</span><br><span class="line"><span class="comment">// 获取公共的指定名称和参数的方法，包括父类的</span></span><br><span class="line">Method <span class="title function_">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span>;</span><br><span class="line"><span class="comment">// 获取指定名称和参数的方法，不包括父类的</span></span><br><span class="line">Method <span class="title function_">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span>;</span><br><span class="line"><span class="comment">// 获取公共的所有的方法，包括父类的</span></span><br><span class="line">Method[] getMethods();</span><br><span class="line"><span class="comment">// 获取所有的方法，不包括父类的</span></span><br><span class="line">Method[] getDeclaredMethods();</span><br><span class="line"><span class="comment">// 获取公共的指定参数的构造方法</span></span><br><span class="line">Constructor&lt;T&gt; <span class="title function_">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span>;</span><br><span class="line"><span class="comment">// 获取指定参数的方法</span></span><br><span class="line">Constructor&lt;T&gt; <span class="title function_">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span>;</span><br><span class="line"><span class="comment">// 获取公共的所有的构造方法</span></span><br><span class="line">Constructor&lt;?&gt;[] getConstructors();</span><br><span class="line"><span class="comment">// 获取所有的构造方法</span></span><br><span class="line">Constructor&lt;?&gt;[] getDeclaredConstructors();</span><br></pre></td></tr></table></figure><p>继承和实现：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取公共的所有的注解</span></span><br><span class="line">Annotation[] getAnnotations();</span><br><span class="line"><span class="comment">// 获取所有的注解</span></span><br><span class="line">Annotation[] getDeclaredAnnotations();</span><br><span class="line"><span class="comment">// 获取公共的指定类型的注解</span></span><br><span class="line">&lt;A <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; A <span class="title function_">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span>;</span><br><span class="line"><span class="comment">// 获取指定类型的注解</span></span><br><span class="line">&lt;A <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; A <span class="title function_">getDeclaredAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span>;</span><br><span class="line"><span class="comment">// 获取实现的所有接口</span></span><br><span class="line">Class&lt;?&gt;[] getInterfaces();</span><br><span class="line"><span class="comment">// 获取实现的所有接口，包含泛型</span></span><br><span class="line">Type[] getGenericInterfaces();</span><br><span class="line"><span class="comment">// 获取继承的父类</span></span><br><span class="line">Class&lt;? <span class="built_in">super</span> T&gt; getSuperclass();</span><br><span class="line"><span class="comment">// 获取继承的父类，包含泛型</span></span><br><span class="line">Type <span class="title function_">getGenericSuperclass</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-获取"><a href="#2-1-3-获取" class="headerlink" title="2.1.3 获取"></a>2.1.3 获取</h4><p>Class没有公共构造方法，Class对象是在加载类时由虚拟机创建的。</p><p>获取Class类的实例有四种方式：</p><ul><li>直接调用运行时类的.class属性：<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> String.class;</span><br></pre></td></tr></table></figure></li><li>通过调用运行时类的对象的getClass()方法：<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="string">&quot;www.demo.com&quot;</span>.getClass();</span><br></pre></td></tr></table></figure></li><li>调用Class的forName()方法：<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;refl.Person&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>使用ClassLoader的loadClass()方法：<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> cl.loadClass(<span class="string">&quot;refl.Person&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>使用Class的forName()方法和使用ClassLoader的loadClass()方法都能获取指定类的Class实例，也都会进行类的加载，都能将class字节码文件加载到虚拟机中。</p><p>其区别是：</p><ul><li>在调用Class的forName()方法时，会进行类的加载以外，也会进行类的初始化，初始化静态成员变量和执行静态代码块，但不会执行构造方法创建对象。只有在调用了newInstance()方法后，才会调用空参的构造方法创建对象。</li><li>在调用ClassLoader的loadClass()方法时，只会进行类的加载，不会进行类的初始化，也不会执行构造方法创建对象。</li></ul><h3 id="2-2-ClassLoader"><a href="#2-2-ClassLoader" class="headerlink" title="2.2 ClassLoader"></a>2.2 ClassLoader</h3><h4 id="2-2-1-类的加载过程"><a href="#2-2-1-类的加载过程" class="headerlink" title="2.2.1 类的加载过程"></a>2.2.1 类的加载过程</h4><p>当程序主动使用了某个类时，该类还未被加载到内存中，那么系统会通过下面三个步骤对该类进行初始化：</p><ul><li>类的加载：将类的class文件读入内存，并为之创建一个Class对象。由类加载器完成。</li><li>类的连接：将类的二进制数据合并到JRE中。</li><li>类的初始化：JVM负责对类进行初始化。</li></ul><h4 id="2-2-2-类的初始化"><a href="#2-2-2-类的初始化" class="headerlink" title="2.2.2 类的初始化"></a>2.2.2 类的初始化</h4><p>类的主动引用一定会发生类的初始化，类的被动引用不会发生类的初始化。</p><p>类的主动引用场景：</p><ul><li>当虚拟机启动，先初始化main方法所在的类。</li><li>使用new关键字创建了一个类的对象。</li><li>调用类的静态成员（除了final常量）和静态方法。</li><li>使用java.lang.reflect包的方法对类进行反射调用。</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类。</li></ul><p>类的被动引用场景：</p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。</li><li>当通过子类引用父类的静态变量，不会导致子类初始化。</li><li>通过数组定义类引用，不会触发此类的初始化。</li><li>引用常量不会触发此类的初始化，常量在连接阶段就存入调用类的常量池中了。</li></ul><h4 id="2-2-3-类加载器的作用"><a href="#2-2-3-类加载器的作用" class="headerlink" title="2.2.3 类加载器的作用"></a>2.2.3 类加载器的作用</h4><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的Class对象，作为方法区中类数据的访问入口。</p><h4 id="2-2-4-类加载器的分类"><a href="#2-2-4-类加载器的分类" class="headerlink" title="2.2.4 类加载器的分类"></a>2.2.4 类加载器的分类</h4><p>类加载器分为三种：</p><ul><li>引导类加载器：用C++编写的，是JVM自带的类装载器，负责Java平台核心库，用来装载核心类库。无法直接获取。</li><li>扩展类加载器：负责<code>jre/lib/ext</code>目录下的JAR包或<code>–D java.ext.dirs</code>指定目录下的JAR包装入工作库。</li><li>系统类加载器：负责<code>java –classpath</code>或<code>–D java.class.path</code>所指的目录下的类与JAR包装入工作，最常用的加载器。</li></ul><h4 id="2-2-5-常用方法"><a href="#2-2-5-常用方法" class="headerlink" title="2.2.5 常用方法"></a>2.2.5 常用方法</h4><p>常用方法：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将Class文件加载到内存时，并不会执行类的初始化</span></span><br><span class="line">Class&lt;?&gt; loadClass(String name);</span><br><span class="line"><span class="comment">// 获取系统类加载器</span></span><br><span class="line"><span class="keyword">static</span> ClassLoader <span class="title function_">getSystemClassLoader</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取当前类加载器的上级类加载器</span></span><br><span class="line">ClassLoader <span class="title function_">getParent</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 和getResourceAsStream用法类似</span></span><br><span class="line"><span class="keyword">static</span> InputStream <span class="title function_">getSystemResourceAsStream</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">// 从类路径下获取资源</span></span><br><span class="line">InputStream <span class="title function_">getResourceAsStream</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-6-获取类加载器"><a href="#2-2-6-获取类加载器" class="headerlink" title="2.2.6 获取类加载器"></a>2.2.6 获取类加载器</h4><p>获取系统类加载器（可以获取）：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader.getSystemClassLoader();</span><br></pre></td></tr></table></figure><p>获取扩展类加载器（可以获取）：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader.getSystemClassLoader().getParent();</span><br></pre></td></tr></table></figure><p>获取引导类加载器（不可以获取）：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader.getSystemClassLoader().getParent().getParent();</span><br></pre></td></tr></table></figure><h4 id="2-2-7-测试类加载器"><a href="#2-2-7-测试类加载器" class="headerlink" title="2.2.7 测试类加载器"></a>2.2.7 测试类加载器</h4><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取系统类加载器</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">appClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">    System.out.println(appClassLoader);</span><br><span class="line">    <span class="comment">// 获取扩展类加载器</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">extClassLoader</span> <span class="operator">=</span> appClassLoader.getParent();</span><br><span class="line">    System.out.println(extClassLoader);</span><br><span class="line">    <span class="comment">// 获取引导类加载器</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">bootClassLoader</span> <span class="operator">=</span> extClassLoader.getParent();</span><br><span class="line">    System.out.println(bootClassLoader);</span><br><span class="line">    <span class="comment">// 自定义类使用的是系统类加载器</span></span><br><span class="line">    System.out.println(ClassLoaderTest.class.getClassLoader());</span><br><span class="line">    <span class="comment">// JDK提供的类使用的是引导类加载器</span></span><br><span class="line">    System.out.println(String.class.getClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@6d9c638</span><br><span class="line"><span class="literal">null</span></span><br><span class="line">sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line"><span class="literal">null</span></span><br></pre></td></tr></table></figure><h4 id="2-2-8-测试加载资源"><a href="#2-2-8-测试加载资源" class="headerlink" title="2.2.8 测试加载资源"></a>2.2.8 测试加载资源</h4><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InputStream is1 = ClassLoader.getSystemClassLoader().getResourceAsStream(&quot;test.txt&quot;);// null</span></span><br><span class="line"><span class="comment">// InputStream is2 = ClassLoader.getSystemClassLoader().getResourceAsStream(&quot;/com/test/test.txt&quot;);// null</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is3</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;com/test/test.txt&quot;</span>);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is4</span> <span class="operator">=</span> ClassLoader.getSystemResourceAsStream(<span class="string">&quot;com/test/test.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h2><h3 id="3-1-定义类和接口"><a href="#3-1-定义类和接口" class="headerlink" title="3.1 定义类和接口"></a>3.1 定义类和接口</h3><p>定义接口：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Home</span>&lt;H&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">location</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义父类：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">People</span>&lt;P&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do &gt;&gt;&gt; People()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">talk</span><span class="params">(String topic)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do &gt;&gt;&gt; talk() &quot;</span> + topic);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> <span class="string">&quot;age=&quot;</span> + age;</span><br><span class="line">        <span class="type">String</span> <span class="variable">nameStr</span> <span class="operator">=</span> <span class="string">&quot;name=&quot;</span> + name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> + ageStr + <span class="string">&quot;, &quot;</span> + nameStr + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">People</span>&lt;Integer&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Home&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> String teacher;</span><br><span class="line">    <span class="keyword">private</span> Integer grade;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do &gt;&gt;&gt; Student()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(Integer grade)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do &gt;&gt;&gt; Student(grade)&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacher</span><span class="params">(String teacher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getGrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrade</span><span class="params">(Integer grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">exam</span><span class="params">(String name)</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do &gt;&gt;&gt; exam() &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">98</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">location</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">teacherStr</span> <span class="operator">=</span> <span class="string">&quot;teacher=&quot;</span> + teacher;</span><br><span class="line">        <span class="type">String</span> <span class="variable">gradeStr</span> <span class="operator">=</span> <span class="string">&quot;grade=&quot;</span> + grade;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> + teacherStr + <span class="string">&quot;, &quot;</span> + gradeStr + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-测试类的信息"><a href="#3-2-测试类的信息" class="headerlink" title="3.2 测试类的信息"></a>3.2 测试类的信息</h3><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 根据类名获取类的Class实例</span></span><br><span class="line">        Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;test.Student&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用反射创建类的实例</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) cla.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;student.toString() &gt;&gt;&gt; &quot;</span> + student);</span><br><span class="line">        <span class="comment">// 获取全类名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getName() &gt;&gt;&gt; &quot;</span> + cla.getName());</span><br><span class="line">        <span class="comment">// 获取包名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getPackage() &gt;&gt;&gt; &quot;</span> + cla.getPackage());</span><br><span class="line">        <span class="comment">// 获取修饰符标志数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getModifiers() &gt;&gt;&gt; &quot;</span> + cla.getModifiers());</span><br><span class="line">        <span class="comment">// 获取翻译后的修饰符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getModifiers() &gt;&gt;&gt; &quot;</span> + Modifier.toString(cla.getModifiers()));</span><br><span class="line">        <span class="comment">// 获取加载器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getClassLoader() &gt;&gt;&gt; &quot;</span> + cla.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &gt;&gt;&gt; People()</span><br><span class="line"><span class="keyword">do</span> &gt;&gt;&gt; Student()</span><br><span class="line">student.toString() &gt;&gt;&gt; Student&#123;teacher=<span class="literal">null</span>, grade=<span class="literal">null</span>&#125;</span><br><span class="line">cla.getName() &gt;&gt;&gt; test.Student</span><br><span class="line">cla.getPackage() &gt;&gt;&gt; <span class="keyword">package</span> test</span><br><span class="line">cla.getModifiers() &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">cla.getModifiers() &gt;&gt;&gt; <span class="keyword">public</span></span><br><span class="line">cla.getClassLoader() &gt;&gt;&gt; sun.misc.Launcher$AppClassLoader@18b4aac2</span><br></pre></td></tr></table></figure><h3 id="3-3-测试类的继承和实现"><a href="#3-3-测试类的继承和实现" class="headerlink" title="3.3 测试类的继承和实现"></a>3.3 测试类的继承和实现</h3><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取父类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getSuperclass() &gt;&gt;&gt; &quot;</span> + cla.getSuperclass().getName());</span><br><span class="line">        <span class="comment">// 获取父类，包含泛型</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> cla.getGenericSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getGenericSuperclass() &gt;&gt;&gt; &quot;</span> + genericSuperclass.getTypeName());</span><br><span class="line">        <span class="comment">// 获取父类，查看泛型</span></span><br><span class="line">        <span class="type">ParameterizedType</span> <span class="variable">paramType</span> <span class="operator">=</span> (ParameterizedType) genericSuperclass;</span><br><span class="line">        Type[] actualTypeArguments = paramType.getActualTypeArguments();</span><br><span class="line">        <span class="keyword">for</span> (Type type : actualTypeArguments) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cla.getGenericSuperclass().getActualTypeArguments() &gt;&gt;&gt; &quot;</span> + type.getTypeName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = cla.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; interfaceClass : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cla.getInterfaces() &gt;&gt;&gt; &quot;</span> + interfaceClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取接口，包含泛型</span></span><br><span class="line">        Type[] genericInterfaces = cla.getGenericInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Type genericInterface : genericInterfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cla.getGenericInterfaces() &gt;&gt;&gt; &quot;</span> + genericInterface.getTypeName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cla.getSuperclass() &gt;&gt;&gt; test.People</span><br><span class="line">cla.getGenericSuperclass() &gt;&gt;&gt; test.People&lt;java.lang.Integer&gt;</span><br><span class="line">cla.getGenericSuperclass().getActualTypeArguments() &gt;&gt;&gt; java.lang.Integer</span><br><span class="line">cla.getInterfaces() &gt;&gt;&gt; java.io.Serializable</span><br><span class="line">cla.getInterfaces() &gt;&gt;&gt; test.Home</span><br><span class="line">cla.getGenericInterfaces() &gt;&gt;&gt; java.io.Serializable</span><br><span class="line">cla.getGenericInterfaces() &gt;&gt;&gt; test.Home&lt;java.lang.String&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-测试类的属性"><a href="#3-4-测试类的属性" class="headerlink" title="3.4 测试类的属性"></a>3.4 测试类的属性</h3><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取公共的所有的属性，包括父类的</span></span><br><span class="line">        Field[] fields = cla.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cla.getFields() &gt;&gt;&gt; &quot;</span> + field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取所有的属性，不包括父类的</span></span><br><span class="line">        Field[] declaredFields = cla.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cla.getDeclaredFields() &gt;&gt;&gt; &quot;</span> + field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取公共的指定名称的属性，包括父类的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getField(name) &gt;&gt;&gt; &quot;</span> + cla.getField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取指定名称的属性，不包括父类的</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">grade</span> <span class="operator">=</span> cla.getDeclaredField(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getDeclaredField(grade) &gt;&gt;&gt; &quot;</span> + grade);</span><br><span class="line">        <span class="comment">// 获取属性访问修饰符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;grade.getModifiers() &gt;&gt;&gt; &quot;</span> + Modifier.toString(grade.getModifiers()));</span><br><span class="line">        <span class="comment">// 获取属性类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;grade.getType() &gt;&gt;&gt; &quot;</span> + grade.getType().getTypeName());</span><br><span class="line">        <span class="comment">// 获取属性名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;grade.getName() &gt;&gt;&gt; &quot;</span> + grade.getName());</span><br><span class="line">        <span class="comment">// 获取和修改属性值，非公共属性需要执行setAccessible()方法</span></span><br><span class="line">        grade.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        grade.set(student, <span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;grade.get(student) &gt;&gt;&gt; &quot;</span> + grade.get(student));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cla.getFields() &gt;&gt;&gt; <span class="keyword">public</span> ...</span><br><span class="line">cla.getDeclaredFields() &gt;&gt;&gt; ...</span><br><span class="line">cla.getField(name) &gt;&gt;&gt; <span class="keyword">public</span> java.lang.String test.People.name</span><br><span class="line">cla.getDeclaredField(grade) &gt;&gt;&gt; <span class="keyword">private</span> java.lang.Integer test.Student.grade</span><br><span class="line">grade.getModifiers() &gt;&gt;&gt; <span class="keyword">private</span></span><br><span class="line">grade.getType() &gt;&gt;&gt; java.lang.Integer</span><br><span class="line">grade.getName() &gt;&gt;&gt; grade</span><br><span class="line">grade.get(student) &gt;&gt;&gt; <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="3-5-测试类的方法"><a href="#3-5-测试类的方法" class="headerlink" title="3.5 测试类的方法"></a>3.5 测试类的方法</h3><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取公共的所有的方法，包括父类的</span></span><br><span class="line">        Method[] methods = cla.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cla.getMethods() &gt;&gt;&gt; &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取所有的方法，不包括父类的</span></span><br><span class="line">        Method[] declaredMethods = cla.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cla.getDeclaredMethods() &gt;&gt;&gt; &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取公共的指定名称和参数的方法，包括父类的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getMethod(talk, String.class) &gt;&gt;&gt; &quot;</span> + cla.getMethod(<span class="string">&quot;talk&quot;</span>, String.class));</span><br><span class="line">        <span class="comment">// 获取指定名称和参数的方法，不包括父类的</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">exam</span> <span class="operator">=</span> cla.getDeclaredMethod(<span class="string">&quot;exam&quot;</span>, String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getDeclaredMethod(exam, String.class) &gt;&gt;&gt; &quot;</span> + exam);</span><br><span class="line">        <span class="comment">// 获取方法注解</span></span><br><span class="line">        Annotation[] annotations = exam.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;exam.getAnnotations() &gt;&gt;&gt; &quot;</span> + annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取方法访问修饰符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;exam.getModifiers() &gt;&gt;&gt; &quot;</span> + Modifier.toString(exam.getModifiers()));</span><br><span class="line">        <span class="comment">// 获取方法返回值类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;exam.getReturnType() &gt;&gt;&gt; &quot;</span> + exam.getReturnType().getTypeName());</span><br><span class="line">        <span class="comment">// 获取方法名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;exam.getName() &gt;&gt;&gt; &quot;</span> + exam.getName());</span><br><span class="line">        <span class="comment">// 获取方法参数</span></span><br><span class="line">        Parameter[] parameters = exam.getParameters();</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;exam.getParameters() &gt;&gt;&gt; &quot;</span> + parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取方法异常</span></span><br><span class="line">        Class[] exceptionTypes = exam.getExceptionTypes();</span><br><span class="line">        <span class="keyword">for</span> (Class exceptionType : exceptionTypes) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;exam.getExceptionTypes() &gt;&gt;&gt; &quot;</span> + exceptionType.getTypeName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用方法，非公共方法需要执行setAccessible()方法</span></span><br><span class="line">        exam.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> exam.invoke(student, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;exam.invoke(student, Tom) &gt;&gt;&gt; &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cla.getMethods() &gt;&gt;&gt; <span class="keyword">public</span> ...</span><br><span class="line">cla.getDeclaredMethods() &gt;&gt;&gt; ...</span><br><span class="line">cla.getMethod(talk, String.class) &gt;&gt;&gt; <span class="keyword">public</span> java.lang.String test.People.talk(java.lang.String)</span><br><span class="line">cla.getDeclaredMethod(exam, String.class) &gt;&gt;&gt; <span class="keyword">private</span> java.lang.Integer test.Student.exam(java.lang.String) <span class="keyword">throws</span> java.lang.ArithmeticException</span><br><span class="line">exam.getAnnotations() &gt;&gt;&gt; <span class="meta">@java</span>.lang.Deprecated()</span><br><span class="line">exam.getModifiers() &gt;&gt;&gt; <span class="keyword">private</span></span><br><span class="line">exam.getReturnType() &gt;&gt;&gt; java.lang.Integer</span><br><span class="line">exam.getName() &gt;&gt;&gt; exam</span><br><span class="line">exam.getParameters() &gt;&gt;&gt; java.lang.String name</span><br><span class="line">exam.getExceptionTypes() &gt;&gt;&gt; java.lang.ArithmeticException</span><br><span class="line"><span class="keyword">do</span> &gt;&gt;&gt; exam() Tom</span><br><span class="line">exam.invoke(student, Tom) &gt;&gt;&gt; <span class="number">98</span></span><br></pre></td></tr></table></figure><h3 id="3-6-测试类的构造方法"><a href="#3-6-测试类的构造方法" class="headerlink" title="3.6 测试类的构造方法"></a>3.6 测试类的构造方法</h3><p>示例：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取公共的所有的构造方法</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = cla.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cla.getConstructors() &gt;&gt;&gt; &quot;</span> + constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取所有的构造方法</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = cla.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;cla.getDeclaredConstructors() &gt;&gt;&gt; &quot;</span> + constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取公共的指定参数的构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getConstructor() &gt;&gt;&gt; &quot;</span> + cla.getConstructor());</span><br><span class="line">        <span class="comment">// 获取指定参数的方法</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = cla.getDeclaredConstructor(Integer.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;cla.getDeclaredConstructor() &gt;&gt;&gt; &quot;</span> + constructor);</span><br><span class="line">        <span class="comment">// 调用构造方法，非公共构造方法需要执行setAccessible()方法</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        student = (Student) constructor.newInstance(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;student &gt;&gt;&gt; &quot;</span> + student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cla.getConstructors() &gt;&gt;&gt; <span class="keyword">public</span> test.Student()</span><br><span class="line">cla.getDeclaredConstructors() &gt;&gt;&gt; <span class="keyword">public</span> test.Student()</span><br><span class="line">cla.getDeclaredConstructors() &gt;&gt;&gt; <span class="keyword">private</span> test.Student(java.lang.Integer)</span><br><span class="line">cla.getConstructor() &gt;&gt;&gt; <span class="keyword">public</span> test.Student()</span><br><span class="line">cla.getDeclaredConstructor() &gt;&gt;&gt; <span class="keyword">private</span> test.Student(java.lang.Integer)</span><br><span class="line"><span class="keyword">do</span> &gt;&gt;&gt; People()</span><br><span class="line"><span class="keyword">do</span> &gt;&gt;&gt; Student(grade)</span><br><span class="line">student &gt;&gt;&gt; Student&#123;teacher=<span class="literal">null</span>, grade=<span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了什么是反射，以及如何使用反射。&lt;/p&gt;</summary>
    
    
    
    <category term="大后端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://momashanhe.com/tags/Java/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨码山河</title>
  
  <subtitle>代码改变世界</subtitle>
  <link href="https://momashanhe.com/atom.xml" rel="self"/>
  
  <link href="https://momashanhe.com/"/>
  <updated>2024-08-13T04:19:09.379Z</updated>
  <id>https://momashanhe.com/</id>
  
  <author>
    <name>墨码山河</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Babel解决兼容问题</title>
    <link href="https://momashanhe.com/posts/20240802/145526/"/>
    <id>https://momashanhe.com/posts/20240802/145526/</id>
    <published>2024-08-02T06:55:26.000Z</published>
    <updated>2024-08-13T04:19:09.379Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了如何使用Babel解决ES5之后的版本的兼容问题。</p><span id="more"></span><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1 说明"></a>1 说明</h2><p>Babel是一个工具链，主要用于将采用ES5以后的语法编写的代码转换为ES5语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p><p>官网地址：<a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a></p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><p>进行初始化：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure><p>安装相关的开发依赖：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-cli babel-preset-env browserify -D</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>babel-cli：命令行工具</li><li>babel-preset-env：预设包，进行转换</li><li>browserify：打包工具，比webpack更简单</li></ul><p>进行转换：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx babel 原路径 -d 新路径 --presets=babel-preset-env</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>局部安装需要使用<code>npx</code>命令，全局安装可以直接使用<code>babel</code>命令。</li><li>在未设置配置文件的情况下，需要使用<code>--presets</code>指定配置。</li></ul><p>进行打包：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm browserify 转换后的新文件 -o 打包后的新文件</span><br></pre></td></tr></table></figure><p>网页中只要引用最后打包后的新文件即可，在修改原JS文件后，需要重新执行打包的命令。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了如何使用Babel解决ES5之后的版本的兼容问题。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>ES学习</title>
    <link href="https://momashanhe.com/posts/20240718/152438/"/>
    <id>https://momashanhe.com/posts/20240718/152438/</id>
    <published>2024-07-18T07:24:38.000Z</published>
    <updated>2024-08-12T07:05:00.883Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了ECMAScript的基本知识。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>ECMAScript是一种由ECMA组织（前身为欧洲计算机制造商协会）制定和发布的脚本语言规范。</p><p>JavaScript是ECMAScript的实现，一般情况下，ECMAScript和JavaScript表达的是同一个意思。</p><p>严格来说，JavaScript包含三个部分：</p><ul><li>ECMAScript：核心，通用标准，简写为ES</li><li>DOM：文档对象模型，操作网页</li><li>BOM：浏览器对象模型，操作浏览器</li></ul><h3 id="1-2-历史版本"><a href="#1-2-历史版本" class="headerlink" title="1.2 历史版本"></a>1.2 历史版本</h3><p>ES5：2009年发布<br>ES6：2015年发布，也称为ECMA2015<br>ES7：2016年发布，也称为ECMA2016<br>ES8：2017年发布，也称为ECMA2017<br>ES9：2018年发布，也称为ECMA2018<br>ES10：2019年发布，也称为ECMA2019</p><h2 id="2-ES5"><a href="#2-ES5" class="headerlink" title="2 ES5"></a>2 ES5</h2><h3 id="2-1-严格模式"><a href="#2-1-严格模式" class="headerlink" title="2.1 严格模式"></a>2.1 严格模式</h3><p>在ES5中新增了严格模式，其作用是：</p><ul><li>使得JS在更严格的条件下运行</li><li>消除JS语法的一些不合理、不严谨之处，减少一些怪异行为</li><li>消除JS代码运行的一些不安全之处，保证代码运行的安全</li></ul><p>使用方式是在JS的第一行：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure><p>需要记住的几个变化：</p><ul><li>声明定义变量必须用<code>var</code>关键字：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line">age = <span class="number">18</span>;<span class="comment">// 页面报错</span></span><br></pre></td></tr></table></figure></li><li>禁止自定义的函数中的<code>this</code>关键字指向全局对象：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>(<span class="number">18</span>);<span class="comment">// 页面报错</span></span><br></pre></td></tr></table></figure></li><li>创建<code>eval</code>作用域：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;var age = 18;&#x27;</span>);<span class="comment">// 使用eval()方法可以执行传入的命令，有风险，不建议使用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">// 16 只在eval作用域有效，不会污染全局变量</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-JSON支持"><a href="#2-2-JSON支持" class="headerlink" title="2.2 JSON支持"></a>2.2 JSON支持</h3><p>JSON是一种轻量级的数据交换模式，用于传输数据。</p><p>ES5提供了对JSON的支持：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;age: 18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj);<span class="comment">// object</span></span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonStr);<span class="comment">// &#123;&quot;age&quot;:18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> jsonStr);<span class="comment">// string 将对象或数组转为JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj);<span class="comment">// &#123;age: 18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> jsonObj);<span class="comment">// object 将JSON字符串转为对象或数组</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Object扩展"><a href="#2-3-Object扩展" class="headerlink" title="2.3 Object扩展"></a>2.3 Object扩展</h3><p>增加了一种创建对象的方式，支持通过将指定对象作为原型的方式创建对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newObj = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">__proto__</span>);<span class="comment">// &#123;__proto__: null&#125;</span></span><br><span class="line">newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">__proto__</span>);<span class="comment">// &#123;age: 18&#125;</span></span><br></pre></td></tr></table></figure><p>增加操作属性的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123;value : <span class="number">16</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);<span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Array扩展"><a href="#2-4-Array扩展" class="headerlink" title="2.4 Array扩展"></a>2.4 Array扩展</h3><p>查询元素在数组中的下标：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">2</span>));<span class="comment">// 1 指定元素在数组中首次出现的下标</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="number">2</span>));<span class="comment">// 3 指定元素在数组中最后出现的下标</span></span><br></pre></td></tr></table></figure><p>遍历数组：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + index + <span class="string">&quot;]&quot;</span>, item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对数组进行处理：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><p>对数组进行过滤：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h3 id="2-5-Function扩展"><a href="#2-5-Function扩展" class="headerlink" title="2.5 Function扩展"></a>2.5 Function扩展</h3><p>将函数的this对象修改为指定的对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> + <span class="string">&#x27; age = &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">20</span>);<span class="comment">// [object Window] age = 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">// 20</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 修改方法的this对象，返回新方法</span></span><br><span class="line"><span class="keyword">var</span> newFun = fun.<span class="title function_">bind</span>(obj, <span class="number">12</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="comment">// 执行新方法</span></span><br><span class="line"><span class="title function_">newFun</span>();<span class="comment">// [object Object] age = 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);<span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;age: 12&#125;</span></span><br></pre></td></tr></table></figure><p>也可以直接执行新方法，需要在方法后面增加<code>()</code>，相当于<code>call()</code>方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> + <span class="string">&#x27; age = &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">20</span>);<span class="comment">// [object Window] age = 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">// 20</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 修改方法的this对象，并执行新方法，相当于fun.call(obj, 16)</span></span><br><span class="line">fun.<span class="title function_">bind</span>(obj, <span class="number">16</span>)();<span class="comment">// [object Object] age = 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;age: 16&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-ES6"><a href="#3-ES6" class="headerlink" title="3 ES6"></a>3 ES6</h2><h3 id="3-1-声明变量"><a href="#3-1-声明变量" class="headerlink" title="3.1 声明变量"></a>3.1 声明变量</h3><p>使用<code>let</code>关键字声明变量：</p><table>  <thead>    <tr>      <th>方式</th>      <th>作用域</th>      <th>重复声明</th>      <th>声明提升</th>    </tr>  </thead>  <tbody>    <tr>      <td>使用<code>var</code>关键字声明变量</td>      <td>属于全局变量</td>      <td>可以重复声明</td>      <td>存在变量提升</td>    </tr>    <tr>      <td>使用<code>let</code>关键字声明变量</td>      <td>属于局部变量，会创建一个块级作用域</td>      <td>不能重复声明</td>      <td>不会预处理，不存在提升</td>    </tr>  </tbody></table><p>使用<code>const</code>关键字声明的变量被称为常量，和<code>let</code>关键字类似，唯一的区别是不支持修改变量的值。</p><p>为了更好的区分常量，其标识符一般使用大写。</p><h3 id="3-2-解构赋值"><a href="#3-2-解构赋值" class="headerlink" title="3.2 解构赋值"></a>3.2 解构赋值</h3><p>按照一定模式，从数组或者对象中提取值，对变量进行赋值，这被称为解构赋值。</p><p>对象解构可以同时获取对象多个属性，但是要求属性名一致，使用<code>&#123;&#125;</code>包裹，按属性赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;age, sex&#125; = obj;<span class="comment">// 获取多个属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age, sex);<span class="comment">// 18 &#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">age</span>: objAge, <span class="attr">sex</span>: objSex&#125; = obj;<span class="comment">// 解构同时使用别名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objAge, objSex);<span class="comment">// 18 &#x27;男&#x27;</span></span><br></pre></td></tr></table></figure><p>数组解构可以同时获取多个元素，对变量名没有要求，使用<code>[]</code>包裹，按下标顺序赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, , , c, d] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d);<span class="comment">// 1 2 1 undefined</span></span><br></pre></td></tr></table></figure><h3 id="3-3-模板字符串"><a href="#3-3-模板字符串" class="headerlink" title="3.3 模板字符串"></a>3.3 模板字符串</h3><p>使用模板字符串可以简化字符串的拼接，支持在字符串中使用变量、对象、表达式、方法的返回值。</p><p>对于模板字符串需要使用<code>``</code>包裹，在字符串中的模板需要使用<code>$&#123;&#125;</code>包裹：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`个人信息：</span></span><br><span class="line"><span class="string">年龄：<span class="subst">$&#123;obj.age&#125;</span></span></span><br><span class="line"><span class="string">性别：<span class="subst">$&#123;obj.sex&#125;</span></span></span><br><span class="line"><span class="string">以上数据真实有效`</span>);<span class="comment">// 支持换行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取返回值：<span class="subst">$&#123;fun()&#125;</span>`</span>)<span class="comment">// 支持获取返回值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`数组内容：<span class="subst">$&#123;arr&#125;</span>`</span>);<span class="comment">// 支持变量和数组</span></span><br></pre></td></tr></table></figure><h3 id="3-4-简化对象"><a href="#3-4-简化对象" class="headerlink" title="3.4 简化对象"></a>3.4 简化对象</h3><p>在定义对象时，可以直接写入变量和函数作为对象的属性方法，这样的书写更加简洁：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>)&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  age,</span><br><span class="line">  sex,</span><br><span class="line">  test</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">// &#123;age: 18, sex: &#x27;男&#x27;, test: ƒ&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-箭头函数"><a href="#3-5-箭头函数" class="headerlink" title="3.5 箭头函数"></a>3.5 箭头函数</h3><p>使用<code>() =&gt; &#123;&#125;</code>箭头函数简化了函数的定义和调用，特点：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有参数，不能省略箭头左侧的()符号，一条语句，可以省略箭头右侧的`&#123;&#125;`符号</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="title function_">fun1</span>();<span class="comment">// test</span></span><br><span class="line"><span class="comment">// 一个参数，可以省略箭头左侧的`()`符号，一条语句，可以省略return关键字，默认将结果作为返回值</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun2</span> = str =&gt; <span class="string">&quot;str = &quot;</span> + str;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun2</span>(<span class="string">&quot;test&quot;</span>));</span><br><span class="line"><span class="title function_">fun2</span>(<span class="string">&#x27;hello&#x27;</span>);<span class="comment">// str = test</span></span><br><span class="line"><span class="comment">// 多个参数，不能省略箭头左侧的()符号，多条语句，不能省略箭头右侧的`&#123;&#125;`符号，不能省略return关键字</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun3</span> = (<span class="params">age,sex</span>) =&gt; &#123;<span class="keyword">let</span> obj = &#123;age, sex&#125;; <span class="keyword">return</span> obj&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun3</span>(<span class="number">18</span>,<span class="string">&quot;男&quot;</span>));<span class="comment">// &#123;age: 18, sex: &#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-扩展运算符"><a href="#3-6-扩展运算符" class="headerlink" title="3.6 扩展运算符"></a>3.6 扩展运算符</h3><p>扩展运算符就是使用<code>...变量名</code>作为变量，在特定场景下具有收集和扩展的功能。</p><p>使用扩展运算符的收集功能可以实现可变参数，必须将可变参数放在参数列表最后的位置：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a,b,...c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">// 1 2 [3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>使用扩展运算符的扩展功能可以更加方便的操作数组：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);<span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>还可以将伪数组转为真数组：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> arr = [...home];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// HTMLCollection [div]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [div]</span></span><br></pre></td></tr></table></figure><h3 id="3-7-参数默认值"><a href="#3-7-参数默认值" class="headerlink" title="3.7 参数默认值"></a>3.7 参数默认值</h3><p>在定义函数时，支持设置参数的默认值，当没有传入参数时，会使用定义的默认值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">str = <span class="string">&quot;test&quot;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>, str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();<span class="comment">// hello test</span></span><br></pre></td></tr></table></figure><h3 id="3-8-Symbol"><a href="#3-8-Symbol" class="headerlink" title="3.8 Symbol"></a>3.8 Symbol</h3><p>新增Symbol原始数据类型，用于解决命名冲突的问题，主要用于需要保证属性名唯一的场景。</p><p>Symbol属于第七种数据类型，其他六种是：Object，String，Number，Boolean，Null，Undefined。</p><p>创建Symbol类型的数据，因为不是对象，所以不能使用new关键字：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);<span class="comment">// Symbol()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s);<span class="comment">// symbol</span></span><br></pre></td></tr></table></figure><p>支持在创建时传入参数作为标识符，支持其他类型数据，包括对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);<span class="comment">// Symbol(test)</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);<span class="comment">// Symbol([object Object])</span></span><br></pre></td></tr></table></figure><p>在ES10中，增加了<code>description</code>属性，用于获取传入的参数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>);<span class="comment">// test</span></span><br></pre></td></tr></table></figure><p>即使创建了相同的Symbol数据，两个数据也是不同的，这就是Symbol的唯一性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>() == <span class="title class_">Symbol</span>());<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;test&quot;</span>) == <span class="title class_">Symbol</span>(<span class="string">&quot;test&quot;</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果想要创建相同的数据，需要使用<code>Symbol.for()</code>创建：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span> === <span class="title class_">Symbol</span>.<span class="title function_">for</span>());<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">for</span>() === <span class="title class_">Symbol</span>.<span class="title function_">for</span>());<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span> === <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>));<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>) === <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过<code>Symbol.for()</code>创建数据时会先从全局按照参数获取，如果获取到了就返回数据，如果没有获取到就会创建数据并注册到全局。</p><p>使用<code>Symbol.keyFor()</code>获取全局中的参数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s));<span class="comment">// test</span></span><br></pre></td></tr></table></figure><p>将Symbol作为对象的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [name]: <span class="string">&quot;test&quot;</span><span class="comment">// 在创建对象时创建Symbol数据作为属性</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> sex = <span class="title class_">Symbol</span>(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">obj[sex] = <span class="string">&#x27;男&#x27;</span>;<span class="comment">// 给对象手动设置Symbol数据作为属性</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="title class_">Symbol</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, age, &#123;value : <span class="number">18</span>&#125;);<span class="comment">// 通过defineProperty方法设置Symbol数据作为属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;Symbol(name): &#x27;test&#x27;, Symbol(sex): &#x27;男&#x27;, Symbol(age): 18&#125;</span></span><br></pre></td></tr></table></figure><p>虽然Symbol属性是共有属性，但是在遍历对象时，不会出现在<code>for</code>循环中，也不会被Object的<code>keys()</code>方法和<code>getOwnPropertyNames()</code>方法获取，同样也不会被<code>JSON.stringify()</code>返回。</p><p>可以通过Object的<code>getOwnPropertySymbols()</code>方法获取，只能获取Symbol属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>)]: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;sex&quot;</span>)]: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj));<span class="comment">// [Symbol(name), Symbol(sex)]</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>Reflect.ownKeys()</code>方法获取所有类型的属性名：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>)]: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;sex&quot;</span>)]: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj));<span class="comment">// [&#x27;age&#x27;, Symbol(name), Symbol(sex)]</span></span><br></pre></td></tr></table></figure><h3 id="3-9-Promise"><a href="#3-9-Promise" class="headerlink" title="3.9 Promise"></a>3.9 Promise</h3><p>引入Promise用于解决异步编程的问题，使用构造函数封装异步操作并可以获取其成功或失败的结果。</p><p>在执行完成后，Promise的状态会变成fulfilled（成功）或者rejected（失败），这种改变称为resolved（定型），并且一旦发生定型，结果就不会再次发生改变。</p><p>创建对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 异步操作</span></span><br><span class="line">  <span class="keyword">let</span> value;<span class="comment">// 返回值</span></span><br><span class="line">  <span class="keyword">let</span> error;<span class="comment">// 错误</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">true</span>;<span class="comment">// 异步操作结果</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);<span class="comment">// 异步操作成功</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);<span class="comment">// 异步操作失败</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行异步操作：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);<span class="comment">// 异步操作成功执行的方法</span></span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);<span class="comment">// 异步操作失败执行的方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>捕获异步操作中的异常：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">reason</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reason);<span class="comment">// 异步操作出现异常的处理，包括then方法中出现的异常</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-10-Iterator"><a href="#3-10-Iterator" class="headerlink" title="3.10 Iterator"></a>3.10 Iterator</h3><p>迭代器Iterator是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署了Iterator接口就可以完成遍历操作。</p><p>可以使用新的遍历命令<code>for...of</code>循环，部署了Iterator接口的数据接口可以通过<code>for...of</code>循环进行遍历。</p><p>和<code>for...in</code>循环相比，通过<code>for...of</code>循环的是value键值，而<code>for...in</code>循环的是index键名。</p><p>原生具备Iterator接口的数据，即不需要改动就可以使用<code>for...of</code>循环的有：Array、Arguments、Set、Map、String、TypedArray、NodeList。</p><p>非原生的数据可以通过自定义Iterator接口使用<code>for...of</code>循环。</p><p>原生Iterator接口：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>];</span><br><span class="line"><span class="comment">// for...in</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> names) &#123;</span><br><span class="line">  <span class="comment">// 0 张三</span></span><br><span class="line">  <span class="comment">// 1 李四</span></span><br><span class="line">  <span class="comment">// 2 王五</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index + <span class="string">&quot; &quot;</span> + names[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for...of</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> names) &#123;</span><br><span class="line">  <span class="comment">// 张三</span></span><br><span class="line">  <span class="comment">// 李四</span></span><br><span class="line">  <span class="comment">// 王五</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// iterator.next()</span></span><br><span class="line"><span class="keyword">let</span> iterator = names[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item = iterator.<span class="title function_">next</span>(); item.<span class="property">done</span> != <span class="literal">true</span>; item = iterator.<span class="title function_">next</span>()) &#123;</span><br><span class="line">  <span class="comment">// &#123;value: &#x27;张三&#x27;, done: false&#125;</span></span><br><span class="line">  <span class="comment">// &#123;value: &#x27;李四&#x27;, done: false&#125;</span></span><br><span class="line">  <span class="comment">// &#123;value: &#x27;王五&#x27;, done: false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br></pre></td></tr></table></figure><p>自定义Iterator接口：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="attr">home</span>: [<span class="string">&#x27;北京市&#x27;</span>, <span class="string">&#x27;北京市&#x27;</span>, <span class="string">&#x27;东城区&#x27;</span>],</span><br><span class="line">[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line"><span class="comment">// 索引变量</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 保存this</span></span><br><span class="line"><span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(index &lt; <span class="title class_">Object</span>.<span class="title function_">keys</span>(_this).<span class="property">length</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line"><span class="attr">value</span>: _this[<span class="title class_">Object</span>.<span class="title function_">keys</span>(_this)[index]],</span><br><span class="line"><span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下标自增</span></span><br><span class="line">index ++;</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line"><span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// iterator.next()</span></span><br><span class="line"><span class="keyword">let</span> iterator = person[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item = iterator.<span class="title function_">next</span>(); item.<span class="property">done</span> != <span class="literal">true</span>; item = iterator.<span class="title function_">next</span>()) &#123;</span><br><span class="line">  <span class="comment">// &#123;value: &#x27;张三&#x27;, done: false&#125;</span></span><br><span class="line">  <span class="comment">// &#123;value: Array(3), done: false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br></pre></td></tr></table></figure><h3 id="3-11-Generator"><a href="#3-11-Generator" class="headerlink" title="3.11 Generator"></a>3.11 Generator</h3><p>生成器Generator是一种异步编程解决方案，语法行为与传统函数完全不同。</p><p>在创建时需要使用<code>*</code>符号创建，用于和普通函数区分：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用时返回的是迭代器Iterator对象，所以需要使用<code>next()</code>方法调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();<span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>在创建时，可以使用<code>yield</code>对函数中的内容进行分割，在调用<code>next()</code>方法执行时，会按照<code>yield</code>分割执行，并返回<code>yield</code>后面的值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello2&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hello1</span></span><br><span class="line"><span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// hello2</span></span><br><span class="line"><span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// hello3</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><p>在调用时，支持传入参数，需要在方法中接收<code>yield</code>的值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">  <span class="keyword">let</span> arg1 = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1);</span><br><span class="line">  <span class="keyword">let</span> arg2 = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// arg1</span></span><br><span class="line"><span class="comment">// &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&quot;arg1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// arg2</span></span><br><span class="line"><span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;arg2&quot;</span>));</span><br><span class="line"><span class="comment">// arg3</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;arg3&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="3-12-Set"><a href="#3-12-Set" class="headerlink" title="3.12 Set"></a>3.12 Set</h3><p>新增Set对象用于存储不重复的数据列表，默认实现了Iterator接口，支持存储不同类型的数据。</p><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">// 使用add()方法添加</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s.<span class="title function_">add</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);<span class="comment">// Set(3) &#123;1, &#x27;2&#x27;, Array(3)&#125;</span></span><br><span class="line"><span class="comment">// 使用has()方法判断是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(arr));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 使用size查询数据个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>);<span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 使用forEach()方法遍历</span></span><br><span class="line">s.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));<span class="comment">// 1 2 (3) [3, 4, 5]</span></span><br><span class="line"><span class="comment">// 使用delete()方法删除</span></span><br><span class="line">s.<span class="title function_">delete</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);<span class="comment">// Set(2) &#123;1, &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 使用clear()方法删除所有数据</span></span><br><span class="line">s.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);<span class="comment">// Set(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-13-Map"><a href="#3-13-Map" class="headerlink" title="3.13 Map"></a>3.13 Map</h3><p>新增Map对象用于存储键值对，默认实现了Iterator接口，支持存储不同类型的键和值。</p><p>Map和Object一样，都可以存储对象的属性名和属性值，区别是Object的属性名只能是String类型或Symbol类型，而Map的键可以使任意类型。</p><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// 使用set()方法添加</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">m.<span class="title function_">set</span>(arr, arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">// Map(3) &#123;1 =&gt; 1, &#x27;2&#x27; =&gt; &#x27;2&#x27;, Array(3) =&gt; Array(3)&#125;</span></span><br><span class="line"><span class="comment">// 使用get()方法通过键获取值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(arr));<span class="comment">// (3) [3, 4, 5]</span></span><br><span class="line"><span class="comment">// 使用has()方法判断是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(arr));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 使用size查询键值对个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>);<span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 使用forEach()方法遍历</span></span><br><span class="line">m.<span class="title function_">forEach</span>(<span class="function">(<span class="params">k, v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(k + <span class="string">&#x27; = &#x27;</span> + v));<span class="comment">// 1 = 1 2 = 2 3,4,5 = 3,4,5</span></span><br><span class="line"><span class="comment">// 使用delete()方法删除</span></span><br><span class="line">m.<span class="title function_">delete</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">// Map(2) &#123;1 =&gt; 1, &#x27;2&#x27; =&gt; &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 使用clear()方法删除所有数据</span></span><br><span class="line">m.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">// Map(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-14-Class"><a href="#3-14-Class" class="headerlink" title="3.14 Class"></a>3.14 Class</h3><p>引入了类的概念，作为对象的模板，需要使用<code>class</code>关键字声明。</p><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">  <span class="comment">// 使用constructor关键字声明构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 声明对象方法</span></span><br><span class="line">  <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父类&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">home</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;地球&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用static关键字声明静态属性，不能通过对象调用，只能通过类调用</span></span><br><span class="line">  <span class="keyword">static</span> eat = <span class="string">&quot;食物&quot;</span>;</span><br><span class="line">  <span class="comment">// 通过set关键字定义设置属性的方法</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;设置年龄&quot;</span>, age);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过get关键字定义获取属性的方法</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取年龄&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用extends可以继承父类，自动拥有父类定义的属性和方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Human</span> &#123;</span><br><span class="line">  <span class="comment">// 创建子类的对象方法</span></span><br><span class="line">  <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;工作&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写父类的方法，默认调用的是子类重写的方法，使用super关键字调用父类的方法</span></span><br><span class="line">  <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子类&quot;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">home</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> <span class="title class_">Human</span>(<span class="string">&quot;人类&quot;</span>);</span><br><span class="line">h.<span class="title function_">hello</span>();<span class="comment">// 我是 人类</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h.<span class="property">name</span>);<span class="comment">// 人类</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h.<span class="property">eat</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Human</span>.<span class="property">eat</span>);<span class="comment">// 食物</span></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;工人&quot;</span>);</span><br><span class="line">w.<span class="title function_">hello</span>();<span class="comment">// 我是 工人</span></span><br><span class="line">w.<span class="title function_">work</span>();<span class="comment">// 工作</span></span><br><span class="line">w.<span class="title function_">test</span>();<span class="comment">// 子类 地球</span></span><br><span class="line">h.<span class="property">age</span> = <span class="number">100</span>;<span class="comment">// 设置年龄 100</span></span><br><span class="line">h.<span class="property">age</span>;<span class="comment">// 读取年龄</span></span><br></pre></td></tr></table></figure><h3 id="3-15-数值扩展"><a href="#3-15-数值扩展" class="headerlink" title="3.15 数值扩展"></a>3.15 数值扩展</h3><p>引入了二进制和八进制的新写法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0b100</span>);<span class="comment">// 4 二进制以0b开头，二进制100对应十进制4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0o100</span>);<span class="comment">// 64 八进制以0o开头，八进制100对应十进制64</span></span><br></pre></td></tr></table></figure><p>定义最小精度，其值接近于2.22×10^(-16)，即2.22乘以10的-16次方。</p><p>当无法准确的描述数值时，就会产生精度问题，比如无法通过二进制准确的表示0.1，再比如无法通过十进制表示1&#x2F;3，等等。</p><p>当两个数的差值小于Number.EPSILON时，就认为两个数值是相等的：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>);<span class="comment">// false</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(left - right) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>检测数值是否是有限数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1</span>/<span class="number">0</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>检测数值是否为NaN：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">NaN</span>));<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="literal">null</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>检测数值是否为整数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">1</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">1.1</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>将字符串转为整数和浮点数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&quot;123test456&quot;</span>));<span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&quot;0.123test456&quot;</span>));<span class="comment">// 0.123</span></span><br></pre></td></tr></table></figure><p>检测数值是整数、负数还是零：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">10</span>));<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>));<span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">10</span>));<span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>将数值的小数部分抹掉：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">1.1</span>));<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="3-16-对象方法扩展"><a href="#3-16-对象方法扩展" class="headerlink" title="3.16 对象方法扩展"></a>3.16 对象方法扩展</h3><p>判断两个值是否完全相等：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">10</span>, <span class="number">10</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>对象的合并，当旧对象中有新对象中没有的时候，会进行合并，否则会直接覆盖：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldObj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(oldObj, newObj));<span class="comment">// &#123;name: &#x27;李四&#x27;, sex: &#x27;男&#x27;, age: 18&#125;</span></span><br></pre></td></tr></table></figure><p>操作原型对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> human = &#123;</span><br><span class="line">  <span class="attr">eat</span>: <span class="string">&#x27;食物&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="attr">work</span>: <span class="string">&#x27;打工&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(worker.<span class="property">__proto__</span>);<span class="comment">// &#123;...&#125;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(worker, human);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(worker.<span class="property">__proto__</span>);<span class="comment">// &#123;eat: &#x27;食物&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(worker.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(worker));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="3-17-模块化"><a href="#3-17-模块化" class="headerlink" title="3.17 模块化"></a>3.17 模块化</h3><h4 id="3-17-1-说明"><a href="#3-17-1-说明" class="headerlink" title="3.17.1 说明"></a>3.17.1 说明</h4><p>模块化是指将一个大的程序文件拆成许多小的文件，然后进行组合。</p><p>优势：</p><ul><li>防止命名冲突：不同的模块之间可以使用相同名称的变量，彼此互不干扰。</li><li>代码复用：模块可以对外提供接口，相同的功能可以使用同一接口。</li><li>高维护性：模块之间独立运行，单个模块出现问题不会影响所有模块，模块支持单独升级。</li></ul><p>模块化规范比较：</p><div class="tabs" id="tab-tab-1"><ul class="nav-tabs"><li class="tab active"><a class="#tab-1-1">CommonJS</a></li><li class="tab"><a class="#tab-1-2">AMD</a></li><li class="tab"><a class="#tab-1-3">CMD</a></li><li class="tab"><a class="#tab-1-4">ES6</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1-1"><p>专用于服务器端，默认不支持在浏览器执行。</p><p>在服务器端使用，基于Node.js使用。<br>在浏览器端使用，使用Browserify编译打包JS文件，这个工具也是JS常用的打包工具。</p></div><div class="tab-pane" id="tab-1-2"><p>专用于浏览器端，模块的加载时异步的。</p><p>在浏览器端使用，基于Require.js使用。</p></div><div class="tab-pane" id="tab-1-3"><p>专用于浏览器端，模块的加载时异步的，并且在模块使用时才会加载和执行。</p><p>在浏览器端使用，基于Sea.js使用。</p></div><div class="tab-pane" id="tab-1-4"><p>专用于浏览器端。</p><p>在浏览器端使用，使用Babel将ES6编译为兼容ES5的代码，使用Browserify编译打包JS文件。</p></div></div></div><h4 id="3-17-2-导出方式"><a href="#3-17-2-导出方式" class="headerlink" title="3.17.2 导出方式"></a>3.17.2 导出方式</h4><p>使用<code>export</code>关键字将变量或方法导出。</p><p>分别导出，在JS文件中分别指定导出的变量或方法：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> hello = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统一导出，使用<code>export</code>关键字要导出的变量和方法集中导出：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;hello, test&#125;</span><br></pre></td></tr></table></figure><p>统一导出提供的并不是对象，所以导出的不是对象的简写形式，而是导出的标记，可以认为是名称。</p><p>默认导出，将要导出的变量和方法封装为对象：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  hello, </span><br><span class="line">  test</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认导出提供的是对象，导出的内容是对象的简写形式，这一点和统一导出不同。</p><h4 id="3-17-3-导入方式"><a href="#3-17-3-导入方式" class="headerlink" title="3.17.3 导入方式"></a>3.17.3 导入方式</h4><p>使用<code>import</code>关键字将其他模块导出的变量或方法导入进来，同时设置<code>script</code>元素的<code>type</code>属性的值为<code>module</code>表示引入的是模块JS文件，并不是普通的JS文件。</p><p>全部导入，使用<code>*</code>将导出的全部变量和方法导入到页面：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> * <span class="keyword">as</span> test <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">hello</span>);</span></span><br><span class="line"><span class="language-javascript">test.<span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>命名导入，指定导入的变量和方法：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;hello, test&#125; <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(hello);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用命名导入可以使用分别导出和统一导出的变量和方法，不能直接使用默认导出的变量和方法。</p><p>默认导入，可以使用默认导出的变量和方法：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import * as test from &quot;./test.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(test.default.hello);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// test.default.test();</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">hello</span>);</span></span><br><span class="line"><span class="language-javascript">test.<span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果默认导出的只有一个变量或方法，在默认导入时导入的就是该变量或方法，不需要通过对象获取。</p><p>如果有大量模块需要引入，可以新建JS文件用于引入模块，然后将此文件引入到HTML文件：</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> test <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span>;</span><br></pre></td></tr></table></figure><p>在HTML文件中引入JS文件：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-ES7"><a href="#4-ES7" class="headerlink" title="4 ES7"></a>4 ES7</h2><h3 id="4-1-数组增强"><a href="#4-1-数组增强" class="headerlink" title="4.1 数组增强"></a>4.1 数组增强</h3><p>判断数组是否包含某个数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">includes</span>(<span class="number">1</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">includes</span>(<span class="number">4</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="4-2-指数操作符"><a href="#4-2-指数操作符" class="headerlink" title="4.2 指数操作符"></a>4.2 指数操作符</h3><p>引入<code>**</code>指数运算符，用来实现幂运算，功能与<code>Math.pow</code>结果相同：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> ** <span class="number">4</span>);<span class="comment">// 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">4</span>));<span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h2 id="5-ES8"><a href="#5-ES8" class="headerlink" title="5 ES8"></a>5 ES8</h2><h3 id="5-1-async和await"><a href="#5-1-async和await" class="headerlink" title="5.1 async和await"></a>5.1 async和await</h3><h4 id="5-1-1-async函数"><a href="#5-1-1-async函数" class="headerlink" title="5.1.1 async函数"></a>5.1.1 async函数</h4><p>async函数会将返回值封装为Promise对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// Promise &#123;&lt;fulfilled&gt;: undefined&#125;</span></span><br></pre></td></tr></table></figure><p>当函数执行成功时返回的是fulfilled状态的Promise对象，当函数执行失败时返回的是rejected状态的Promise对象。</p><p>当函数返回的是Promise对象时，不会再次封装，会将返回对象直接返回。</p><h4 id="5-1-2-await表达式"><a href="#5-1-2-await表达式" class="headerlink" title="5.1.2 await表达式"></a>5.1.2 await表达式</h4><p>await表达式必须写在async函数中，并且await右侧的表达式一般为Promise对象。</p><p>await返回的是Promise成功的值，需要使用手动捕获Promise失败的值。</p><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> promise;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// Promise &#123;&lt;fulfilled&gt;: undefined&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-对象方法扩展"><a href="#5-2-对象方法扩展" class="headerlink" title="5.2 对象方法扩展"></a>5.2 对象方法扩展</h3><p>获取对象的属性名和属性值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person));<span class="comment">// [&#x27;name&#x27;, &#x27;sex&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(person));<span class="comment">// [&#x27;test&#x27;, &#x27;男&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(person));<span class="comment">// [Array(2), Array(2)]</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="title class_">Object</span>.<span class="title function_">entries</span>(person);</span><br><span class="line"><span class="comment">// [&#x27;name&#x27;, &#x27;test&#x27;]</span></span><br><span class="line"><span class="comment">// [&#x27;sex&#x27;, &#x27;男&#x27;]</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function"><span class="params">obj</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj));</span><br></pre></td></tr></table></figure><p>获取对象属性信息：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// name: &#123;value: &#x27;test&#x27;, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="comment">// sex: &#123;value: &#x27;男&#x27;, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(person));</span><br></pre></td></tr></table></figure><h2 id="6-ES9"><a href="#6-ES9" class="headerlink" title="6 ES9"></a>6 ES9</h2><h3 id="6-1-Rest和Spread"><a href="#6-1-Rest和Spread" class="headerlink" title="6.1 Rest和Spread"></a>6.1 Rest和Spread</h3><p>rest参数与spread扩展运算符在ES6中已经引入，不过ES6中只针对于数组。</p><p>使用rest参数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function test(&#123;name, sex&#125;) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(name);</span></span><br><span class="line"><span class="comment">//   console.log(sex);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">&#123;...args&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用spread扩展运算符：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> attr1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> attr2 = &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> attr3 = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;...attr1, ...attr2, ...attr3&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// &#123;name: &#x27;张三&#x27;, sex: &#x27;男&#x27;, age: &#x27;18&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-正则扩展"><a href="#6-2-正则扩展" class="headerlink" title="6.2 正则扩展"></a>6.2 正则扩展</h3><h4 id="6-2-1-捕获分组"><a href="#6-2-1-捕获分组" class="headerlink" title="6.2.1 捕获分组"></a>6.2.1 捕获分组</h4><p>ES9允许使用符号<code>?&lt;name&gt;</code>获取捕获结果，可读性更强。</p><p>在ES9之前捕获结果，通过下标查看捕获分组，下标为0的元素是完整的匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 123 a4a</span></span><br><span class="line">  <span class="comment">// 123 a5a</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>], result[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ES9之后捕获结果：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?&lt;first&gt;123)(?&lt;last&gt;a.a)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 123 a4a</span></span><br><span class="line">  <span class="comment">// 123 a5a</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>.<span class="property">first</span>, result.<span class="property">groups</span>.<span class="property">last</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-反向断言"><a href="#6-2-2-反向断言" class="headerlink" title="6.2.2 反向断言"></a>6.2.2 反向断言</h4><p>通过正则表达式的<code>?=</code>符号进行正向断言，根据后面的判断是否返回前面的数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="string">&#x27;测试123正向456断言&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+(?=正向)/</span>;<span class="comment">// 根据后面的内容是否正向，返回前面的数字</span></span><br><span class="line"><span class="keyword">let</span> result = reg.<span class="title function_">exec</span>(test);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>]);<span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>通过正则表达式的<code>?&lt;=</code>符号进行反向断言，根据前面的判断是否返回后面的数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="string">&#x27;测试123反向456断言&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?&lt;=反向)\d+/</span>;<span class="comment">// 根据前面的内容是否反向，返回后面的数字</span></span><br><span class="line"><span class="keyword">let</span> result = reg.<span class="title function_">exec</span>(test);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>]);<span class="comment">// 456</span></span><br></pre></td></tr></table></figure><h4 id="6-2-3-dotAll模式"><a href="#6-2-3-dotAll模式" class="headerlink" title="6.2.3 dotAll模式"></a>6.2.3 dotAll模式</h4><p>使用<code>.</code>匹配除回车外的任何单字符，如果使用了<code>s</code>就可以匹配包括回车在内的任何单字符：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;</span></span><br><span class="line"><span class="string">    &lt;a&gt;这是第1个a标签&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;这是第1个p标签&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;</span></span><br><span class="line"><span class="string">    &lt;a&gt;这是第2个a标签&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;这是第2个p标签&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;a&gt;(.*?)&lt;\/a&gt;\s+&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>;<span class="comment">// 使用之前的方式，通过\s+过滤空格和换行，匹配两个标签中的内容</span></span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span> (result = reg.<span class="title function_">exec</span>(test)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>] + <span class="string">&#x27; &gt;&gt;&gt; &#x27;</span> + result[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s;<span class="comment">// 使用dotAll模式，通过s让.包含任何单字符，匹配两个标签中的内容</span></span><br><span class="line"><span class="keyword">while</span> (result = reg.<span class="title function_">exec</span>(test)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>] + <span class="string">&#x27; &gt;&gt;&gt; &#x27;</span> + result[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-ES10"><a href="#7-ES10" class="headerlink" title="7 ES10"></a>7 ES10</h2><h3 id="7-1-创建对象"><a href="#7-1-创建对象" class="headerlink" title="7.1 创建对象"></a>7.1 创建对象</h3><p>通过二维数组创建对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// &#123;name: &#x27;张三&#x27;, sex: &#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>通过Map创建对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// &#123;name: &#x27;张三&#x27;, sex: &#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>Object类的<code>fromEntries()</code>方法是<code>entries()</code>方法的反向操作。</p><h3 id="7-2-字符串扩展"><a href="#7-2-字符串扩展" class="headerlink" title="7.2 字符串扩展"></a>7.2 字符串扩展</h3><p>新增支持清除字符串空格的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27; hello &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimStart</span>());<span class="comment">// 清除左侧空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimEnd</span>());<span class="comment">// 清除右侧空格</span></span><br></pre></td></tr></table></figure><h3 id="7-3-数组扩展"><a href="#7-3-数组扩展" class="headerlink" title="7.3 数组扩展"></a>7.3 数组扩展</h3><p>将高维数组转为低维数组，支持设置向下转变的维度数目，默认向下转变1个维度：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>());<span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>());<span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">2</span>));<span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>在<code>map()</code>方法的基础上，增加了<code>flatMap()</code>方法，用于将结果向下维度转换处理：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">flatMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [10, 20]</span></span><br></pre></td></tr></table></figure><h3 id="7-4-Symbol扩展"><a href="#7-4-Symbol扩展" class="headerlink" title="7.4 Symbol扩展"></a>7.4 Symbol扩展</h3><p>支持在创建Symbol对象的时候传入描述内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>);<span class="comment">// 测试</span></span><br></pre></td></tr></table></figure><h2 id="8-ES11"><a href="#8-ES11" class="headerlink" title="8 ES11"></a>8 ES11</h2><h3 id="8-1-私有属性"><a href="#8-1-私有属性" class="headerlink" title="8.1 私有属性"></a>8.1 私有属性</h3><p>在属性前面添加<code>#</code>符号表示该属性是私有属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name;</span><br><span class="line">  #age;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.#age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);<span class="comment">// Person &#123;name: &#x27;张三&#x27;, #age: 18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.#age);<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="8-2-Promise扩展"><a href="#8-2-Promise扩展" class="headerlink" title="8.2 Promise扩展"></a>8.2 Promise扩展</h3><p>新增Promise的<code>allSettled()</code>静态方法，接收Promise数组作为入参，将结果封装为Promise返回，状态为成功，值为数组的每个Promise执行的状态和结果：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1result = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p1result) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;p1成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;p1失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2result = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p2result) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;p2成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;p2失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 方法永远返回成功</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2]).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;allSettled执行成功&quot;</span>);</span><br><span class="line">    <span class="comment">// &#123;status: &#x27;rejected&#x27;, reason: &#x27;p1失败&#x27;&#125;</span></span><br><span class="line">    <span class="comment">// &#123;status: &#x27;fulfilled&#x27;, value: &#x27;p2成功&#x27;&#125;</span></span><br><span class="line">    value.<span class="title function_">forEach</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result));</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;allSettled执行失败 &quot;</span> + error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 只要有一个失败，方法就返回失败</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;all执行成功&quot;</span>);</span><br><span class="line">    value.<span class="title function_">forEach</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result));</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="comment">// all执行失败 p1失败</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;all执行失败 &quot;</span> + error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>和Promise的<code>all()</code>静态方法不同，<code>allSettled()</code>方法不论数组里的结果是否成功，始终返回成功，<code>all()</code>会在数组里的结果存在失败时，返回失败。</p><h3 id="8-3-字符串扩展"><a href="#8-3-字符串扩展" class="headerlink" title="8.3 字符串扩展"></a>8.3 字符串扩展</h3><p>新增字符串<code>matchAll()</code>方法，用于正则表达式，其结果和正则表达式的<code>exec()</code>方法相同：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/g</span>;</span><br><span class="line"><span class="comment">// 使用match()方法</span></span><br><span class="line"><span class="keyword">var</span> matchResult = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matchResult);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123a5a&#x27;]</span></span><br><span class="line"><span class="comment">// 使用matchAll()方法</span></span><br><span class="line"><span class="keyword">var</span> matchAllResult = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">matchAll</span>(reg);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> r <span class="keyword">of</span> matchAllResult) &#123;</span><br><span class="line">  <span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line">  <span class="comment">// [&#x27;123a5a&#x27;, &#x27;123&#x27;, &#x27;a5a&#x27;, index: 6, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用matchAll()方法</span></span><br><span class="line"><span class="keyword">var</span> execResult;</span><br><span class="line"><span class="keyword">while</span>(execResult = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>)) &#123;</span><br><span class="line">  <span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line">  <span class="comment">// [&#x27;123a5a&#x27;, &#x27;123&#x27;, &#x27;a5a&#x27;, index: 6, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(execResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-可选链操作符"><a href="#8-4-可选链操作符" class="headerlink" title="8.4 可选链操作符"></a>8.4 可选链操作符</h3><p>使用<code>?.</code>可选链操作符可以代替繁琐的层级判断是否为空的操作：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 直接使用，如果不存在会报错</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">db</span>.<span class="property">url</span>);</span><br><span class="line">  <span class="comment">// 层级判断，存在才获取</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config &amp;&amp; config.<span class="property">cache</span> &amp;&amp; config.<span class="property">cache</span>.<span class="property">url</span>)</span><br><span class="line">  <span class="comment">// 简化操作，使用可选链操作符判断</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config?.<span class="property">cache</span>?.<span class="property">url</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(&#123;</span><br><span class="line">  <span class="attr">db</span>: &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;192.168.1.10&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="8-5-模块化扩展"><a href="#8-5-模块化扩展" class="headerlink" title="8.5 模块化扩展"></a>8.5 模块化扩展</h3><p>在导入模块时支持动态导入，可以实现按需加载模块，即在用到某个模块时再导入，而不是在加载时全部导入，可以提高加载效率。</p><p>使用<code>import()</code>方法传入文件路径即可导入指定文件，返回Promise对象，该对象的值是文件对应的导出的对象：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 全部导入</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import * as test from &quot;./test.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 动态导入</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span>(<span class="string">&quot;./test.js&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">test</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">hello</span>);</span></span><br><span class="line"><span class="language-javascript">    test.<span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-6-BigInt"><a href="#8-6-BigInt" class="headerlink" title="8.6 BigInt"></a>8.6 BigInt</h3><p>新增数据类型BigInt用于表示大整型数字：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大整型数字使用字母n作为数字结尾</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">1024n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);<span class="comment">// 1024n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> n);<span class="comment">// bigint</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(<span class="number">0</span>));<span class="comment">// 0n 支持将整型数字转为大整型数字，并且只支持转换整型数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用大整型数字解决大数字运算，只支持大整型数字之间的运算，需要先将整型数字转为大整型数字</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">1</span>);<span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">2</span>);<span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">1</span>));<span class="comment">// 9007199254740992n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">2</span>));<span class="comment">// 9007199254740993n</span></span><br></pre></td></tr></table></figure><h3 id="8-7-绝对全局对象"><a href="#8-7-绝对全局对象" class="headerlink" title="8.7 绝对全局对象"></a>8.7 绝对全局对象</h3><p>新增全局变量<code>globalThis</code>指向全局变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis);<span class="comment">// Window &#123;...&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了ECMAScript的基本知识。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS多线程</title>
    <link href="https://momashanhe.com/posts/20240712/154239/"/>
    <id>https://momashanhe.com/posts/20240712/154239/</id>
    <published>2024-07-12T07:42:39.000Z</published>
    <updated>2024-07-18T07:59:35.603Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了如何使用Web Work实现JS多线程的功能。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>在JavaScript中采用的是单线程机制，不需要考虑复杂的同步问题，但也无法同时处理两件任务，无法发挥计算能力。</p><p>为了满足多线程的需求，H5规范提供了JavaScript多线程的实现，这种技术称为Web Work。</p><p>Web Work的作用就是为JavaScript创造多线程环境，允许主线程创建Worker线程，将一些任务分配给后者在后台运行，主线程和Worker线程互不干扰，在Worker线程执行结束后会将结果返回给主线程。</p><p>Worker线程一旦创建成功就会运行，并且不会被主线程的交互动作打断，虽然有利于响应主线程的操作，但是长时间运行也会导致CPU资源的浪费，所以需要在使用后及时关闭Worker线程。</p><p>相比较在主线程执行函数，使用分线程函数会慢一些。分线程的优势是可以在不阻塞主线程的情况下，执行函数。</p><p>此外，使用Worker线程还有一些限制：</p><ul><li>DOM限制，Worker线程和主线程的this对象不一样，无法使用window对象，以及alert()等方法，只能使用navigator对象和location对象。</li><li>通信限制，Worker线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</li><li>兼容限制，不是所有的浏览器都支持。</li><li>跨域限制，不支持跨域加载JavaScript文件。</li></ul><p>即使通过Web Worker技术，也不能修改DOM，只有主线程可以修改，所以JavaScript单线程的本质并没有变化。</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><p>在主线程中使用构造函数创建Worker分线程，传入执行的JavaScript文件：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在主线程中给Worker对象的<code>onmessage</code>属性绑定函数，用于接收Worker分线程的消息：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">worker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主线程接收分线程返回的数据: &#x27;</span> + event.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主线程中调用Worker对象的<code>postMessage()</code>方法，给Worker分线程传输参数：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker.<span class="title function_">postMessage</span>(<span class="string">&#x27;I am main&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在分线程要执行的JavaScript文件中，使用<code>onmessage</code>属性接收主线程的信息，使用<code>postMessage()</code>方法给主线程传递结果：</p><figure class="highlight js"><figcaption><span>worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> onmessage = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主线程接收分线程返回的数据: &#x27;</span> + event.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">postMessage</span>(<span class="string">&#x27;I am worker&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在使用Worker分线程后，需要及时关闭：</p><ul><li>可以在主线程调用Worker对象的<code>terminate()</code>方法关闭：<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker.<span class="title function_">terminate</span>();</span><br></pre></td></tr></table></figure></li><li>在分线程要执行的JavaScript文件中调用<code>close()</code>方法关闭：<figure class="highlight js"><figcaption><span>worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">close</span>();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了如何使用Web Work实现JS多线程的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS高级</title>
    <link href="https://momashanhe.com/posts/20240708/113151/"/>
    <id>https://momashanhe.com/posts/20240708/113151/</id>
    <published>2024-07-08T03:31:51.000Z</published>
    <updated>2024-07-18T07:59:11.916Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要总结了JS中容易混淆的知识点。</p><span id="more"></span><h2 id="1-数据类型的判断"><a href="#1-数据类型的判断" class="headerlink" title="1 数据类型的判断"></a>1 数据类型的判断</h2><h3 id="1-1-typeof"><a href="#1-1-typeof" class="headerlink" title="1.1 typeof"></a>1.1 typeof</h3><p>使用<code>typeof</code>关键字，得到字符串类型的返回结果：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;123&#x27;</span>);<span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);<span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">false</span>);<span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);<span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 对象|数组|日期|包装类型，均返回object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;<span class="attr">test</span>:<span class="number">123</span>&#125;);<span class="comment">// object</span></span><br><span class="line"><span class="comment">// 方法返回function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);<span class="comment">// function</span></span><br></pre></td></tr></table></figure><p>凡是通过对象的方式创建的变量，其使用<code>typeof</code>得到的都是<code>object</code>字符串。</p><p>另外，基本数据类型中的<code>null</code>使用<code>typeof</code>判断也会得到<code>object</code>字符串。</p><h3 id="1-2-instanceof"><a href="#1-2-instanceof" class="headerlink" title="1.2 instanceof"></a>1.2 instanceof</h3><p>使用<code>instanceof</code>关键字判断右侧显示调用的原型是否在左侧隐式调用的原型链上：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型，左侧非对象，没有原型链，直接返回false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>);<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>);<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>);<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// false</span></span><br><span class="line"><span class="comment">// 对象返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;<span class="attr">test</span>:<span class="number">123</span>&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 数组返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 日期返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() <span class="keyword">instanceof</span> <span class="title class_">Date</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 包装类型返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;123&#x27;</span>) <span class="keyword">instanceof</span> <span class="title class_">String</span>);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>) <span class="keyword">instanceof</span> <span class="title class_">Number</span>);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>) <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>);<span class="comment">// true Object.__proto__ == Function.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>);<span class="comment">// true Function.__proto__ == Function.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true Object.__proto__.__proto__ == Object.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true Function.__proto__.__proto__ == Object.prototype</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Func</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func <span class="keyword">instanceof</span> <span class="title class_">Func</span>);<span class="comment">// true func.__proto__ == Func.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true func.__proto__.__proto__ == Object.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Func</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>);<span class="comment">// true Func.__proto__ == Function.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Func</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true Func.__proto__.__proto__ == Object.prototype</span></span><br></pre></td></tr></table></figure><p>在创建对象时，会将显示调用赋值给隐式调用。在修改了显示调用的引用地址后，显示调用和隐式调用得到的原型对象将不再相同。</p><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2 函数"></a>2 函数</h2><h3 id="2-1-创建方式"><a href="#2-1-创建方式" class="headerlink" title="2.1 创建方式"></a>2.1 创建方式</h3><p>创建函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建匿名函数并赋值给变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建函数对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(this);&quot;</span>);</span><br></pre></td></tr></table></figure><p>创建构造函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建箭头函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">func</span> = (<span class="params"></span>) =&gt; &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-调用方式"><a href="#2-2-调用方式" class="headerlink" title="2.2 调用方式"></a>2.2 调用方式</h3><p>创建函数并调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 直接调用函数</span></span><br><span class="line"><span class="title function_">func</span>();</span><br><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用构造函数</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Func</span>();</span><br><span class="line"><span class="comment">// 创建对象方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">func</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用对象方法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>().<span class="title function_">func</span>();</span><br></pre></td></tr></table></figure><h3 id="2-3-回调函数"><a href="#2-3-回调函数" class="headerlink" title="2.3 回调函数"></a>2.3 回调函数</h3><p>回调函数在定义以后不需要主动调用，当某个事件触发时才会调用。</p><p>常见的回调函数：</p><ul><li>定时函数，包括使用<code>setTimeout()</code>方法和<code>setInterval()</code>方法传入的函数</li><li>DOM事件触发的函数，比如<code>onclick()</code>方法绑定的函数</li><li>AJAX请求回调函数</li><li>生命周期回调函数</li></ul><h2 id="3-this关键字"><a href="#3-this关键字" class="headerlink" title="3 this关键字"></a>3 this关键字</h2><p>任何函数本质上都是通过某个对象来调用的，所有函数内部都有一个this变量，它的值是调用函数的当前对象。</p><p>明确this的值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>();<span class="comment">// Window &#123;&#125; 直接调用函数，this指向window对象</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(this);&quot;</span>);</span><br><span class="line"><span class="title function_">func</span>();<span class="comment">// Window &#123;&#125; 直接调用函数对象，this指向window对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Func</span>();<span class="comment">// Func &#123;&#125; 调用构造函数，this指向新创建的对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">func</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>().<span class="title function_">func</span>();<span class="comment">// Person &#123;&#125; 调用对象方法，this指向调用方法的对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">func</span> = (<span class="params"></span>) =&gt; &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;;</span><br><span class="line"><span class="title function_">func</span>();<span class="comment">// Window &#123;&#125; 调用箭头函数，this指向定义函数的环境</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">func.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">String</span>());<span class="comment">// String &#123;&#x27;&#x27;&#125; 使用call和apply调用函数，this指向入参指定的对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// Window &#123;&#125; 在全局作用域中，this指向window对象</span></span><br></pre></td></tr></table></figure><h2 id="4-执行上下文和执行上下文栈"><a href="#4-执行上下文和执行上下文栈" class="headerlink" title="4 执行上下文和执行上下文栈"></a>4 执行上下文和执行上下文栈</h2><h3 id="4-1-执行上下文"><a href="#4-1-执行上下文" class="headerlink" title="4.1 执行上下文"></a>4.1 执行上下文</h3><p>代码按生命周期分为两种：</p><ul><li>全局代码：在全局任意位置有效</li><li>局部代码：仅在某段代码内有效，比如代码块、函数等，局部代码内可以使用全局代码</li></ul><p>执行上下文分为全局执行上下文和函数执行上下文两种。</p><p>全局执行上下文：</p><ul><li>在执行全局代码前将window确定为全局执行上下文</li><li>对全局数据进行预处理：<ol><li>将全局变量的声明提升，赋值为undefined，添加为window的属性</li><li>将全局函数添加为window的方法</li><li>将this对象赋值为window</li></ol></li><li>开始执行全局代码</li></ul><p>函数执行上下文：</p><ul><li>在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象</li><li>对局部数据进行预处理：<ol><li>将传入的实参赋值到函数定义的实参，添加为执行上下文的属性</li><li>对函数的arguments内部属性赋值实参列表，添加为执行上下文的属性</li><li>将局部变量的声明提升，赋值为undefined，添加为执行上下文的属性</li><li>将函数内声明的函数添加为执行上下文的方法</li><li>将this对象赋值为调用函数的对象</li></ol></li><li>开始执行函数体代码</li></ul><p>在计算代码执行产生的上下文时，函数每次被调用都会生成一个函数执行上下文，在代码执行时会生成一个全局执行上下文。</p><h3 id="4-2-执行上下文栈"><a href="#4-2-执行上下文栈" class="headerlink" title="4.2 执行上下文栈"></a>4.2 执行上下文栈</h3><p>在创建执行上下文之前，JavaScript引擎会创建一个栈来存储管理所有的执行上下文对象：</p><ol><li>在确定全局执行上下文后，将其压入到栈中</li><li>在创建函数执行上下文后，将其压入到栈中</li><li>在当前函数执行完后，将栈顶的对象移除</li><li>在所有代码执行完后，栈中只剩下全局执行上下文</li></ol><h2 id="5-作用域和作用域链"><a href="#5-作用域和作用域链" class="headerlink" title="5 作用域和作用域链"></a>5 作用域和作用域链</h2><h3 id="5-1-作用域"><a href="#5-1-作用域" class="headerlink" title="5.1 作用域"></a>5.1 作用域</h3><p>作用域是某段代码所在的区域，使用目的是为了隔离变量，不同的作用域之间，同名变量不会有冲突，比如覆盖。</p><p>按照代码的声明周期可以将作用域分为三种：</p><ul><li>全局作用域：全局代码区域</li><li>函数作用域：在函数中的代码区域</li><li>块作用域：在代码块中的区域，ES6之后才有这个概念</li></ul><p>相对于上下文来说，作用域是静止的，在编写代码时就确定了，作用域的确定时间要早于上下文的创建时间。</p><p>在统计作用域的数量时，每个函数作为一个函数作用域，整个代码作为一个全局作用域。在ES6以后，每个代码块是一个块作用域。</p><h3 id="5-2-作用域链"><a href="#5-2-作用域链" class="headerlink" title="5.2 作用域链"></a>5.2 作用域链</h3><p>作用域链是在发生函数嵌套时产生的，使用目的是为了查找变量，特别是当发生了变量冲突时确定变量的值。</p><p>在发生函数嵌套时，外层函数作为上级，内层函数作为下级，作用域链的查找方向是从下往上的。</p><h2 id="6-闭包"><a href="#6-闭包" class="headerlink" title="6 闭包"></a>6 闭包</h2><p>在发生函数嵌套时，并且内部函数引用了外部函数的变量或函数，就会在内部函数产生闭包：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inner</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure><p>闭包是在创建函数执行上下文时产生的对象，作为内部函数的属性，封装了在内部函数中使用的外部函数的变量或函数。</p><p>使用闭包的流程：</p><ul><li>执行内部函数定义时产生闭包：<br><img src="/@image/103001/002001-090816.jpg" alt="001-闭包产生"></li><li>在执行内部函数时，会将闭包对象作为函数执行上下文的变量：<br><img src="/@image/103001/002002-091808.jpg" alt="002-闭包使用"></li></ul><p>闭包的作用：</p><ol><li>延长局部变量的生命周期，局部变量在外部函数执行完后, 仍然存活在内存中</li><li>允许在外部函数之外，通过内部函数修改外部函数的局部变量</li></ol><p>闭包的生命周期：</p><ul><li>在执行内部函数定义时产生，即在创建内部函数执行上下文时产生</li><li>在内部函数被视为垃圾对象时死亡，即不存在指向内部函数的变量引用</li></ul><p>闭包会产生内存泄漏的可能，外部函数执行后，局部变量未能被马上释放：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(++num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inner = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">inner</span>();<span class="comment">// 1</span></span><br><span class="line"><span class="title function_">inner</span>();<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>解决办法：</p><ul><li>尽量少用闭包</li><li>在使用闭包后及时手动将内部函数的引用清空，释放局部变量：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(++num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inner = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">inner</span>();<span class="comment">// 1</span></span><br><span class="line">inner = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">inner</span>();<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="7-对象"><a href="#7-对象" class="headerlink" title="7 对象"></a>7 对象</h2><h3 id="7-1-创建"><a href="#7-1-创建" class="headerlink" title="7.1 创建"></a>7.1 创建</h3><p>创建对象的几种方式：</p><ul><li>直接创建：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">setName</span>: <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">setName</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;name: &#x27;李四&#x27;, setName: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li>通过Object构造函数创建：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">obj.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">setName</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;name: &#x27;李四&#x27;, setName: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li>通过工厂模式创建：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">setName</span>: <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="title function_">createPerson</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">person.<span class="title function_">setName</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// &#123;name: &#x27;李四&#x27;, setName: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li>通过自定义构造函数创建，推荐：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">__proto__</span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">person.<span class="title function_">setName</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// Person &#123;name: &#x27;李四4&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-2-继承"><a href="#7-2-继承" class="headerlink" title="7.2 继承"></a>7.2 继承</h3><p>当需要在一个类中使用另一个类的属性和方法时，将没有相关属性和方法的类称为子类，将具有相关属性和方法的类称为父类，子类的属性和方法继承自父类。</p><p>使用原型链继承：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="string">&#x27;parent property&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">child</span> = <span class="string">&#x27;child property&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将父类的对象赋值给子类的显示调用的原型，这样子类的对象就可以通过隐式调用的原型访问父类定义的属性和方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="comment">// 子类显示调用的原型指向了父类的对象，其constructor属性也指向了父类的构造方法，所以还需要改为子类的构造方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line"><span class="comment">// 创建子类的实例</span></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="comment">// 通过子类调用父类的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">parent</span>);<span class="comment">// parent property</span></span><br><span class="line"><span class="comment">// 通过子类调用自身的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">child</span>);<span class="comment">// child property</span></span><br></pre></td></tr></table></figure><p>使用父类的构造方法继承：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用父类的构造方法，将父类的属性设置到子类的对象上</span></span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建子类的实例</span></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="comment">// 查看子类的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">name</span>);<span class="comment">// 张三</span></span><br></pre></td></tr></table></figure><p>组合继承，同时使用原型链和构造函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="string">&#x27;parent property&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">child</span> = <span class="string">&#x27;child property&#x27;</span>;</span><br><span class="line">  <span class="comment">// 调用父类的构造方法，将父类的属性设置到子类的对象上</span></span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将父类的对象赋值给子类的显示调用的原型，这样子类的对象就可以通过隐式调用的原型访问父类定义的属性和方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="comment">// 子类显示调用的原型指向了父类的对象，其constructor属性也指向了父类的构造方法，所以还需要改为子类的构造方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line"><span class="comment">// 创建子类的实例</span></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="comment">// 通过子类调用父类的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">parent</span>);<span class="comment">// parent property</span></span><br><span class="line"><span class="comment">// 通过子类调用自身的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">child</span>);<span class="comment">// child property</span></span><br></pre></td></tr></table></figure><h2 id="8-线程机制"><a href="#8-线程机制" class="headerlink" title="8 线程机制"></a>8 线程机制</h2><p>进程：</p><ul><li>进程是程序的一次执行，是程序在计算机中运行的实体。</li><li>进程是系统进行资源分配的最小单位，每个进程都有各自独立的内存空间，各个进程互不干扰。</li></ul><p>线程：</p><ul><li>线程是进程的子任务，是进程实际的运作单位。</li><li>线程是CPU调度的最小单位，线程有独立的栈空间和局部变量，但没有独立的内存空间，一个进程内的多个线程共享进程的存储空间。</li></ul><p>JavaScript采用的是单线程机制，作为浏览器脚本语言，主要用途是与用户互动以及操作DOM，使用单线程不需要考虑复杂的同步问题。</p><p>使用多线程的系统可以更好的利用CPU资源，提高CPU的运行效率，但也会因为需要频繁创建销毁线程导致占用了一部分性能。</p><p>线程池：</p><ul><li>线程池可以复用线程，减少线程创建和销毁的次数，减少了性能浪费，提高程序的运行效率。</li><li>线程池可以控制线程的最大并发数，避免过高的并发量导致系统卡死。</li></ul><h2 id="9-事件机制"><a href="#9-事件机制" class="headerlink" title="9 事件机制"></a>9 事件机制</h2><p>定时器的调用问题：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1秒后打印 &#x27;</span> + name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - time);</span><br><span class="line">&#125;, <span class="number">1000</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2秒后打印 &#x27;</span> + name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - time);</span><br><span class="line">&#125;, <span class="number">2000</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2000000000</span>; i++) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个定时函数不是在1秒后执行的，第二个定时函数不是在2秒后执行的，并且两个定时函数是同时执行的。</p><p>这是因为JavaScript是单线程的，定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行。</p><p>JavaScript引擎执行基本流程：</p><ul><li>执行初始化代码，包括对变量赋值、执行普通方法、执行代码、设置定时器、绑定监听事件、发送请求</li><li>执行回调函数，包括定时器回调、事件回调、请求回调</li></ul><p>事件管理模块：</p><ul><li>定时模块，处理定时任务绑定的回调函数</li><li>DOM模块，处理DOM元素绑定的回调函数</li><li>AJAX模块，处理请求返回触发的回调函数</li></ul><p>事件管理模型运转流程：</p><ul><li>在执行初始化代码时，将事件回调函数交给对应的模块管理</li><li>当事件发生时，管理模块会将回调函数及其数据添加到回调列队中</li><li>只有当初始化代码执行完后，才会遍历读取回调队列中的回调函数执行</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要总结了JS中容易混淆的知识点。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS入门</title>
    <link href="https://momashanhe.com/posts/20240627/155926/"/>
    <id>https://momashanhe.com/posts/20240627/155926/</id>
    <published>2024-06-27T07:59:26.000Z</published>
    <updated>2024-08-09T08:35:28.934Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了JS中常用的概念，以及基本语法。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-是什么"><a href="#1-1-是什么" class="headerlink" title="1.1 是什么"></a>1.1 是什么</h3><p>JS全称：JavaScript。</p><p>JS是一种脚本语言，命名和Java没有任何关系，用于给网页设置行为，比如点击、弹窗等等。</p><p>官方文档地址：</p><ul><li>W3C官网：<a href="https://www.w3.org/">https://www.w3.org/</a></li><li>W3School：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn</a></li></ul><h3 id="1-2-发展历史"><a href="#1-2-发展历史" class="headerlink" title="1.2 发展历史"></a>1.2 发展历史</h3><p>JavaScript是由网景公司在1995年发明的，起初命名为LiveScript，后来由于SUN公司的介入更名为了JavaScript。</p><p>在1996年，微软公司在其最新的IE3浏览器中引入了自己对JavaScript的实现JScript。</p><p>于是在市面上存在两个版本的JavaScript，网景公司的JavaScript和微软的JScript，为了确保不同的浏览器上运行的JavaScript标准一致，几个公司定制了通用标准，名命为ECMAScript。</p><p>在一般情况下，会将这ECMAScript和JavaScript认作同一个意思，实际上JavaScript的含义要大一些，一个完整的JavaScript实现应该由以下三个部分构成：</p><ul><li>ECMAScript：通用的标准，通常简写为ES。</li><li>DOM：文档对象模型，操作网页。</li><li>BOM：浏览器对象模型，操作浏览器。</li></ul><h2 id="2-基础"><a href="#2-基础" class="headerlink" title="2 基础"></a>2 基础</h2><h3 id="2-1-编写位置"><a href="#2-1-编写位置" class="headerlink" title="2.1 编写位置"></a>2.1 编写位置</h3><p>因为JS是运行在浏览器中的，因此需要在网页中编写JS代码。</p><p>和CSS类似，JS也有三种位置可以选择。</p><h4 id="2-1-1-行内脚本"><a href="#2-1-1-行内脚本" class="headerlink" title="2.1.1 行内脚本"></a>2.1.1 行内脚本</h4><p>直接写在元素内部，通过一些特殊的交互属性设置交互行为。</p><p>示例：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;点击测试&#x27;);&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式使用简单，但是功能比较少，并且和网页的结构耦合，不能体现出结构和行为分离的思想，也不利于维护，不建议使用这种方式。</p><p>说明：<code>alert()</code>是一个函数，可以将传入的参数通过弹窗显示在页面上。</p><h4 id="2-1-2-内部脚本"><a href="#2-1-2-内部脚本" class="headerlink" title="2.1.2 内部脚本"></a>2.1.2 内部脚本</h4><p>将JS提取出来，写在页面内部的<code>script</code>元素中。</p><p>示例：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;测试&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>理论上可以将<code>script</code>元素放在页面的任何位置，建议放到<code>head</code>元素中。另外，也可以省略<code>type</code>属性。</p><p>和行内样式相比，这种方式编写的结构和行为分离，样式也能复用，但也没有做到完全分离。</p><h4 id="2-1-3-外部脚本"><a href="#2-1-3-外部脚本" class="headerlink" title="2.1.3 外部脚本"></a>2.1.3 外部脚本</h4><p>将JS进一步提取，写在单独的JS文件中，在HTML页面中使用元素引用外部的JS文件。</p><p>创建JS文件，后缀为<code>.js</code>格式。示例：</p><figure class="highlight js"><figcaption><span>hello.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在HTML页面引用CSS文件。示例：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./hello.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式可维护高，并且做到了结构和行为分离，也能被其他页面复用，建议使用这种方式。</p><h3 id="2-2-大小写敏感"><a href="#2-2-大小写敏感" class="headerlink" title="2.2 大小写敏感"></a>2.2 大小写敏感</h3><p>JavaScript是严格区分大小写的，在编写代码是要注意。</p><h3 id="2-3-注释"><a href="#2-3-注释" class="headerlink" title="2.3 注释"></a>2.3 注释</h3><p>JavaScript的注释分为单行注释和多行注释：</p><ul><li>单行注释：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释内容</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>多行注释：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释内容 */</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-语法"><a href="#3-语法" class="headerlink" title="3 语法"></a>3 语法</h2><h3 id="3-1-标识符"><a href="#3-1-标识符" class="headerlink" title="3.1 标识符"></a>3.1 标识符</h3><p>所谓标识符，就是指变量、函数、属性的名字，以及函数的参数。</p><p>标识符可以是按照下列格式规则组合起来的一或多个字符：</p><ul><li>第一个字符必须是字母、下划线<code>_</code>或美元符号<code>$</code>。</li><li>其他字符可以是字母、下划线、美元符号或数字。</li></ul><p>按照惯例，ECMAScript标识符采用驼峰命名法，但是JavaScript中的标识符不能是关键字和保留字符。</p><p>关键字：</p><table>  <tbody>    <tr>      <td>function</td>      <td>void</td>      <td>return</td>      <td>this</td>      <td>new</td>      <td>with</td>    </tr>    <tr>      <td>var</td>      <td>instanceof</td>      <td>typeof</td>      <td>switch</td>      <td>case</td>      <td>default</td>    </tr>    <tr>      <td>if</td>      <td>else</td>      <td>do</td>      <td>while</td>      <td>for</td>      <td>in</td>    </tr>    <tr>      <td>continue</td>      <td>break</td>      <td>try</td>      <td>catch</td>      <td>throw</td>      <td>finally</td>    </tr>    <tr>      <td>delete</td>      <td>debugger</td>      <td>true</td>      <td>false</td>      <td>null</td>      <td></td>    </tr>  </tbody></table><p>保留字符：</p><table>  <tbody>    <tr>      <td>import</td>      <td>export</td>      <td>package</td>      <td>public</td>      <td>protected</td>      <td>private</td>    </tr>    <tr>      <td>interface</td>      <td>class</td>      <td>enum</td>      <td>extends</td>      <td>implements</td>      <td>super</td>    </tr>    <tr>      <td>let</td>      <td>yield</td>      <td>static</td>      <td>const</td>      <td></td>      <td></td>    </tr>  </tbody></table><p>其他不建议使用的标识符：</p><table>  <tbody>    <tr>      <td>synchronize</td>      <td>volatile</td>      <td>abstract</td>      <td>final</td>      <td>native</td>      <td>transient</td>    </tr>    <tr>      <td>float</td>      <td>double</td>      <td>long</td>      <td>int</td>      <td>short</td>      <td>byte</td>    </tr>    <tr>      <td>char</td>      <td>boolean</td>      <td>throws</td>      <td>arguments</td>      <td>eval</td>      <td>goto</td>    </tr>    <tr>      <td>undefined</td>      <td>encodeURI</td>      <td>decodeURI</td>      <td>decodeURIComponent</td>      <td>encodeURICOmponent</td>      <td>isFinite</td>    </tr>    <tr>      <td>isNaN</td>      <td>parseFloat</td>      <td>parseInt</td>      <td>NaN</td>      <td>Number</td>      <td>String</td>    </tr>    <tr>      <td>Boolean</td>      <td>Object</td>      <td>Date</td>      <td>Array</td>      <td>JSON</td>      <td>RegExp</td>    </tr>    <tr>      <td>Infinity</td>      <td>Function</td>      <td>Math</td>      <td>Error</td>      <td>RangeError</td>      <td>SyntaxError</td>    </tr>    <tr>      <td>ReferenceError</td>      <td>TypeError</td>      <td>EvalError</td>      <td>URIError</td>      <td></td>      <td></td>    </tr>  </tbody></table><h3 id="3-2-数据类型"><a href="#3-2-数据类型" class="headerlink" title="3.2 数据类型"></a>3.2 数据类型</h3><p>数据类型决定了一个数据的特征，比如<code>123</code>和<code>&#39;123&#39;</code>，直观上看这两个数据都是123，但实际上前者是一个数字，而后者是一个字符串。</p><p>对于不同的数据类型我们在进行操作时会有很大的不同。JavaScript中一共有五种基本数据类型：</p><ul><li>字符串型（String）</li><li>数值型（Number）</li><li>布尔型（Boolean）</li><li>null型（Null）</li><li>undefined型（Undefined）</li></ul><p>这五种之外的类型都称为Object，所以总的来看JavaScript中共有六种数据类型。</p><p>使用<code>typeof</code>关键字检查数据可以得到数据的类型，返回结果是字符串类型：</p><ul><li>使用<code>typeof 字符串</code>判断会返回<code>string</code></li><li>使用<code>typeof 数值</code>判断会返回<code>number</code></li><li>使用<code>typeof 布尔型</code>判断会返回<code>boolean</code></li><li>使用<code>typeof null</code>判断会返回<code>object</code></li><li>使用<code>typeof undefined</code>判断会返回<code>undefined</code></li></ul><h4 id="3-2-1-String"><a href="#3-2-1-String" class="headerlink" title="3.2.1 String"></a>3.2.1 String</h4><p>在JavaScript中字符串使用String类型表示，都需要使用引号引起来，可以使用单引号，也可以使用双引号，但必须成对匹配，不能混搭使用。</p><p>在某些情况下，如果想要将特殊的字符作为字符串，需要使用转义字符<code>\</code>，也可以使用HTML中的实体：</p><ul><li>使用<code>&amp;lt;</code>表示<code>&lt;</code>，使用<code>&amp;gt;</code>表示<code>&gt;</code></li><li>使用<code>\&#39;</code>表示<code>&#39;</code>，使用<code>\&quot;</code>表示<code>&quot;</code></li><li>使用<code>\n</code>表示换行符</li><li>使用<code>\t</code>表示制表符，可以实现缩进的效果</li><li>使用<code>\\</code>表示<code>\</code></li></ul><p>转换为String有三种方式：</p><ul><li>使用<code>toString()</code>方法：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// number</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i.<span class="title function_">toString</span>());<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(m.<span class="title function_">toString</span>());<span class="comment">// 页面报错，Null类型的变量不能调用方法</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> m.<span class="title function_">toString</span>());<span class="comment">// 页面报错，Null类型的变量不能调用方法</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(n.<span class="title function_">toString</span>());<span class="comment">// 页面报错，Undefined类型的变量不能调用方法</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> n.<span class="title function_">toString</span>());<span class="comment">// 页面报错，Undefined类型的变量不能调用方法</span></span><br></pre></td></tr></table></figure></li><li>使用<code>String()</code>方法：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// number</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">String</span>(i));<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">String</span>(m));<span class="comment">// null</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">String</span>(m));<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">String</span>(n));<span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">String</span>(n));<span class="comment">// string</span></span><br></pre></td></tr></table></figure></li><li>拼接字符串：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// number</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i + <span class="string">&#x27;1&#x27;</span>);<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(m + <span class="string">&#x27;&#x27;</span>);<span class="comment">// null</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> m + <span class="string">&#x27;&#x27;</span>);<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(n + <span class="string">&#x27;&#x27;</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> n + <span class="string">&#x27;&#x27;</span>);<span class="comment">// string</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-2-Number"><a href="#3-2-2-Number" class="headerlink" title="3.2.2 Number"></a>3.2.2 Number</h4><p>在JavaScript中所有的数值都是Number类型，包括整数和浮点数：</p><ul><li>使用<code>Number.MAX_VALUE</code>表示数值的最大值，使用<code>Number.MIN_VALUE</code>表示数值大于0的最小值。</li><li>使用<code>Infinity</code>表示超出数值最大值的正无穷，使用<code>-Infinity</code>表示负无穷。</li><li>使用<code>NaN</code>表示非数字的数值，即<code>Not a number</code>。</li></ul><p>在对<code>Infinity</code>和<code>-Infinity</code>以及<code>NaN</code>使用<code>typeof</code>判断时，也能得到<code>number</code>的结果。</p><p>有三个方法可以把变量转换为数值：</p><ul><li>使用<code>Number()</code>方法可以用来将变量转换为数值：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// string</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(i));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(a));<span class="comment">// 1 true会返回1，false会返回0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(a));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;1x&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(x));<span class="comment">// NaN 非数值字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(x));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(m));<span class="comment">// 0 null会返回0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(m));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(n));<span class="comment">// NaN undefined会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(n));<span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li>使用<code>parseInt()</code>方法可以用来将字符串转换为整数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// string</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(i));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="string">&#x27;1.5&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(f));<span class="comment">// 1 开头为数值的字符串会返回开头的整数部分，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(f));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;1x&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(x));<span class="comment">// 1 开头为数值的字符串会返回开头的整数部分，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(x));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(b));<span class="comment">// NaN 非字符串会先转为字符串，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(b));<span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li>使用<code>parseFloat()</code>方法可以用来将字符串转换为浮点数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;1.5&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// string</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseFloat</span>(i));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;1.5x&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseFloat</span>(x));<span class="comment">// 1.5 开头为数值的字符串会返回开头的浮点数部分，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseFloat</span>(x));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseFloat</span>(b));<span class="comment">// NaN 非字符串会先转为字符串，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseFloat</span>(b));<span class="comment">// number</span></span><br></pre></td></tr></table></figure></li></ul><p>在对浮点数进行计算时，可能会得到一个不精确的结果，所以在处理浮点数的运算时，需要使用特殊的方式保证得到的结果尽量精确，这里以后再说。</p><h4 id="3-2-3-Boolean"><a href="#3-2-3-Boolean" class="headerlink" title="3.2.3 Boolean"></a>3.2.3 Boolean</h4><p>在JavaScript中使用Boolean类型表示布尔型的数据，其取值只有<code>true</code>和<code>false</code>两种。</p><p>使用<code>Boolean()</code>方法可以用来将变量转换为布尔值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(i));<span class="comment">// false 非NaN且非0的数值会返回false，正数和负数会返回true，Infinity和-Infinity也会返回true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Boolean</span>(i));<span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(x));<span class="comment">// false 空字符串会返回false，非空字符串会返回true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Boolean</span>(x));<span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(m));<span class="comment">// false null会返回false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Boolean</span>(m));<span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(n));<span class="comment">// false undefined会返回false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Boolean</span>(n));<span class="comment">// boolean</span></span><br></pre></td></tr></table></figure><h4 id="3-2-4-Null"><a href="#3-2-4-Null" class="headerlink" title="3.2.4 Null"></a>3.2.4 Null</h4><p>使用Null表示空对象。</p><p>可以显示的将对象赋值为<code>null</code>来强制将对象设置为Null类型：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(person);<span class="comment">// null</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> person);<span class="comment">// object</span></span><br></pre></td></tr></table></figure><h4 id="3-2-5-Undefined"><a href="#3-2-5-Undefined" class="headerlink" title="3.2.5 Undefined"></a>3.2.5 Undefined</h4><p>使用Undefined表示声明但未赋值的变量。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person;</span><br><span class="line"><span class="title function_">alert</span>(person);<span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> person);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h3><p>变量的作用是给某一个值或对象标注名称。</p><p>使用<code>var</code>关键字声明变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br></pre></td></tr></table></figure><p>对声明的变量进行赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在声明变量时赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>支持对多个变量同时声明和赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, y, z = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>, n = <span class="number">2</span>, l = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-1-重复声明"><a href="#3-3-1-重复声明" class="headerlink" title="3.3.1 重复声明"></a>3.3.1 重复声明</h4><p>JavaScript允许对变量进行重复声明和赋值，也允许声明为不同的数据类型：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;i&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在ES6以后，还可以使用<code>let</code>声明变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>通过<code>var</code>声明的变量称为全局变量，支持修改值和类型，支持重复声明。通过<code>let</code>声明的变量称为局部变量，局部变量支持修改值和类型，但不支持重复声明，建议在代码块中使用。</p><h4 id="3-3-2-常量"><a href="#3-3-2-常量" class="headerlink" title="3.3.2 常量"></a>3.3.2 常量</h4><p>在ES6以后，使用<code>const</code>声明常量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>和<code>var</code>与<code>let</code>声明的变量相比，常量一经声明和赋值，就不再支持修改值和类型，也不支持重复声明。</p><h3 id="3-4-运算符"><a href="#3-4-运算符" class="headerlink" title="3.4 运算符"></a>3.4 运算符</h3><p>通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><p>优先级：</p><table>  <tbody>    <tr>      <td>. [] new</td>    </tr>    <tr>      <td>()</td>    </tr>    <tr>      <td>++ --</td>    </tr>    <tr>      <td>! ~</td>    </tr>    <tr>      <td>* / %</td>    </tr>    <tr>      <td>+ -</td>    </tr>    <tr>      <td><< >> >>></td>    </tr>    <tr>      <td>< <= > >=</td>    </tr>    <tr>      <td>== != === !===</td>    </tr>    <tr>      <td>&</td>    </tr>    <tr>      <td>^</td>    </tr>    <tr>      <td>|</td>    </tr>    <tr>      <td>&</td>    </tr>    <tr>      <td>^</td>    </tr>    <tr>      <td>|</td>    </tr>    <tr>      <td>&&</td>    </tr>    <tr>      <td>||</td>    </tr>    <tr>      <td>?:</td>    </tr>    <tr>      <td>= += -= *= /= %= <<= >>= >>>= &= ^= |=</td>    </tr>    <tr>      <td>,</td>    </tr>  </tbody></table><h4 id="3-4-1-算数运算符"><a href="#3-4-1-算数运算符" class="headerlink" title="3.4.1 算数运算符"></a>3.4.1 算数运算符</h4><p>在JavaScript中提供了以下几种算数运算符：</p><ul><li>使用<code>+</code>进行加法或拼接运算，如果拼接的是一个字符串，会将计算结果转为字符串</li><li>使用<code>-</code>进行减法运算，如果涉及数值，会将结果转为数值</li><li>使用<code>*</code>进行乘法运算，如果涉及数值，会将结果转为数值</li><li>使用<code>/</code>进行除法运算，如果涉及数值，会将结果转为数值</li><li>使用<code>%</code>进行取模运算</li></ul><p>自增和自减运算符：</p><ul><li>使用<code>++</code>进行自增运算，根据运算符位置分为前置<code>++i</code>和后置<code>i++</code>：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="title function_">alert</span>(++i);<span class="comment">// 1 前置获取的是自增后的值</span></span><br><span class="line"><span class="title function_">alert</span>(i++);<span class="comment">// 1 后置获取的是自增前的值</span></span><br><span class="line"><span class="title function_">alert</span>(i);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li>使用<code>--</code>进行自增运算，根据运算符位置分为前置<code>--i</code>和后置<code>i--</code>：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="title function_">alert</span>(--i);<span class="comment">// 1 前置获取的是自减后的值</span></span><br><span class="line"><span class="title function_">alert</span>(i--);<span class="comment">// 1 后置获取的是自减前的值</span></span><br><span class="line"><span class="title function_">alert</span>(i);<span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-4-2-逻辑运算符"><a href="#3-4-2-逻辑运算符" class="headerlink" title="3.4.2 逻辑运算符"></a>3.4.2 逻辑运算符</h4><p>在JavaScript中提供了以下三种逻辑运算符：</p><ul><li>使用<code>!</code>表示逻辑非，用于对布尔值进行取反，对于非布尔值的变量会先将其转换为布尔值再取反。</li><li>使用<code>&amp;&amp;</code>表示逻辑与，只有两个值都为true时，整个运算为true，返回第二个值。该运算符属于短路与，当第一个值为false时，整个运算为false，返回第一个值，不会判断第二个值。</li><li>使用<code>||</code>表示逻辑或，只有两个值都为false时，整个运算为false，返回第二个值。该运算符属于短路或，当第一个值为true时，整个运算为true，返回第一个值，不会判断第二个值。</li></ul><h4 id="3-4-3-赋值运算符"><a href="#3-4-3-赋值运算符" class="headerlink" title="3.4.3 赋值运算符"></a>3.4.3 赋值运算符</h4><p>在JavaScript中使用<code>=</code>进行赋值运算，可以使用简写：</p><ul><li>使用<code>+=</code>先计算后赋值，<code>i += 5</code>等同<code>i = i + 5</code></li><li>使用<code>-=</code>先计算后赋值，<code>i -= 5</code>等同<code>i = i - 5</code></li><li>使用<code>*=</code>先计算后赋值，<code>i *= 5</code>等同<code>i = i * 5</code></li><li>使用<code>/=</code>先计算后赋值，<code>i /= 5</code>等同<code>i = i / 5</code></li><li>使用<code>%=</code>先计算后赋值，<code>i %= 5</code>等同<code>i = i % 5</code></li></ul><h4 id="3-4-4-比较运算符"><a href="#3-4-4-比较运算符" class="headerlink" title="3.4.4 比较运算符"></a>3.4.4 比较运算符</h4><p>通过比较运算符可以比较两个变量的大小关系：</p><ul><li>使用<code>&gt;</code>大于号判断左侧的变量是否大于右侧的变量，成立返回true，否则返回false。</li><li>使用<code>&lt;</code>小于号判断左侧的变量是否小于右侧的变量，成立返回true，否则返回false。</li><li>使用<code>==</code>等号判断两侧的变量是否相等，如果类型不一样，会先进行自动类型转换再比较，相等返回true，否则返回false。</li><li>使用<code>===</code>全等号判断两侧的变量是否相等，相等返回true，否则返回false。不会进行自动类型转换。</li><li>使用<code>!=</code>不等号判断两侧的变量是否不等，如果类型不一样，会先进行自动类型转换再比较，不等返回true，否则返回false。</li><li>使用<code>!==</code>不全等号判断两侧的变量是否不等，不等返回true，否则返回false。不会进行自动类型转换。</li></ul><p>对于非数值的变量进行比较判断时，会将变量转换为数值再比较，但当两侧的变量都是字符串时，会根据字符串的Unicode编码进行比较。</p><h4 id="3-4-5-条件运算符"><a href="#3-4-5-条件运算符" class="headerlink" title="3.4.5 条件运算符"></a>3.4.5 条件运算符</h4><p>条件运算符也称为三元运算符，语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件表达式?语句<span class="number">1</span>:语句<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>运算逻辑：</p><ul><li>条件运算符在执行时，首先对条件表达式进行求值。</li><li>如果该值为true，则执行语句1，并返回执行结果。如果该值为false，则执行语句2，并返回执行结果。</li><li>如果条件表达式的求值结果是一个非布尔值，会将其转换为布尔值然后再运算。</li></ul><h4 id="3-4-6-移位运算符"><a href="#3-4-6-移位运算符" class="headerlink" title="3.4.6 移位运算符"></a>3.4.6 移位运算符</h4><p>移位运算符一般用于数值类型的变量，作用在数值补码的所有位，按位运算：</p><ul><li>使用<code>&amp;</code>进行按位与运算，两个数值的相对位都为1，结果的对应位为1，否则结果的对应位为0</li><li>使用<code>|</code>进行按位或运算，两个数值的相对位都为0，结果的对应位为0，否则结果的对应位为1</li><li>使用<code>^</code>进行按位异或运算，两个数值的相对位不相同，结果的对应位为1，否则结果的对应位为0</li><li>使用<code>~</code>进行按位非运算，对数值的每位都进行反转</li><li>使用<code>&lt;&lt;</code>进行带符号左移运算，每位左移，右边补0。</li><li>使用<code>&gt;&gt;</code>进行带符号右移运算，每位右移，左边补0，符号位使用原来的。</li><li>使用<code>&gt;&gt;&gt;</code>进行无符号右移运算，每位右移，左边补0，符号位补0。</li></ul><p>移位运算改变的是数值的补码。对于正数来说，数值的原码是其补码。对于负数来说，数值的反码+1是其补码。</p><h3 id="3-5-语句和代码块"><a href="#3-5-语句和代码块" class="headerlink" title="3.5 语句和代码块"></a>3.5 语句和代码块</h3><p>表达式和运算符类似于单词和短语，语句是一条完整的命令，通常使用<code>;</code>结尾。</p><p>可以使用<code>&#123;&#125;</code>将多条语句包裹起来，称为代码块，只具有分组和排版的作用，没有其他意义。</p><h3 id="3-6-条件语句"><a href="#3-6-条件语句" class="headerlink" title="3.6 条件语句"></a>3.6 条件语句</h3><h4 id="3-6-1-if…else语句"><a href="#3-6-1-if…else语句" class="headerlink" title="3.6.1 if…else语句"></a>3.6.1 if…else语句</h4><p>如果if中的条件成立，返回布尔值为true，则执行if后面代码块里的操作语句，否则执行else后面代码块里的操作语句：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">  条件成立的操作</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  条件不成立的操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在if和else后面的代码块中，支持嵌套其他语句，如果嵌套的还是if…else语句，可以简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">  条件<span class="number">1</span>成立的操作语句</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">  条件<span class="number">1</span>不成立但条件<span class="number">2</span>成立的操作语句</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  条件<span class="number">1</span>和条件<span class="number">2</span>都不成立的操作语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-2-switch…case语句"><a href="#3-6-2-switch…case语句" class="headerlink" title="3.6.2 switch…case语句"></a>3.6.2 switch…case语句</h4><p>也称为条件分支语句，会将switch后面的值同每个case后面的值相比较，相等就执行case后面的操作语句：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (值) &#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    操作语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    操作语句<span class="number">2</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    操作语句<span class="number">3</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    操作语句</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的break用于终止判断，如果没有break会在执行完当前case的操作语句后，继续判断后面case的值，直到遇到break或者判断结束。</p><p>如果所有switch的值和case后面的值都不相等，则执行default后面的操作语句。</p><h3 id="3-7-循环语句"><a href="#3-7-循环语句" class="headerlink" title="3.7 循环语句"></a>3.7 循环语句</h3><p>不管使用那种循环语句，都需要在适当位置跳过循环和终止循环：</p><ul><li>跳过循环：跳过本次循环，不执行后面的操作语句，直接进行条件判断，进行下一次循环，使用continue实现，一般在条件语句中使用：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">循环操作语句代码块 &#123;</span><br><span class="line">  操作语句<span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  操作语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>终止循环：跳出循环，终止整个循环的执行，执行循环后面的代码，使用break实现，一般在条件语句中使用：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">循环操作语句代码块 &#123;</span><br><span class="line">  操作语句<span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  操作语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-7-1-while语句"><a href="#3-7-1-while语句" class="headerlink" title="3.7.1 while语句"></a>3.7.1 while语句</h4><p>如果while后面的条件成立，则执行代码块中的操作语句，执行后重复判断是否成立，如果成立，则重复执行操作语句，只有当不成立时才终止循环：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">  条件成立的操作语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以使用do…while语句，这种方式会先执行操作语句，然后再循环判断条件是否成立，以及循环执行操作语句，最终终止循环：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  条件成立的操作语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br></pre></td></tr></table></figure><p>相比较而言，while语句会先判断再执行，do…while语句会先执行再判断，能够保证至少执行一次操作语句。</p><p>但不管使用那种循环语句，都需要做好终止循环的判断逻辑，否则会导致死循环，严重情况会导致系统没有足够的资源而崩溃。</p><h4 id="3-7-2-for语句"><a href="#3-7-2-for语句" class="headerlink" title="3.7.2 for语句"></a>3.7.2 for语句</h4><p>使用for语句可以更加明显的设置循环终止条件，但因此也显得比较繁琐：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">  条件成立的操作语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先执行初始化语句，可以省略，将初始化语句放在for循环前面执行。然后判断条件是否成立，可以省略，但需要在操作语句中控制终止循环的条件，类似while语句，否则会导致死循环。如果条件成立，会执行操作语句，否则终止循环。在操作语句执行结束后，执行更新语句，对循环条件更新，并循环判断条件是否成立，如果成立则循环执行操作语句，否则终止循环。</p><p>除了for语句代码块中的操作语句外，其他三个部分都是可以省略的，省略后就类似while语句了，需要手动控制循环。</p><h3 id="3-8-嵌套循环"><a href="#3-8-嵌套循环" class="headerlink" title="3.8 嵌套循环"></a>3.8 嵌套循环</h3><p>循环语句支持嵌套，在一个循环语句中支持嵌套另一个循环语句。</p><p>使用continue和break可以处理当前循环语句的循环逻辑，如果想处理上层循环语句的循环逻辑，需要配合label标签使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">label1</span>:</span><br><span class="line"><span class="keyword">for</span>(初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">  循环<span class="number">1</span>的操作语句</span><br><span class="line">  <span class="attr">label2</span>:</span><br><span class="line">  <span class="keyword">for</span>(初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">    循环<span class="number">2</span>的操作语句</span><br><span class="line">    <span class="keyword">for</span>(初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">      循环<span class="number">3</span>的操作语句</span><br><span class="line">      <span class="keyword">break</span> label1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用label给循环打标签，在continue和break后面使用标签控制要操作的循环。示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大学数组</span></span><br><span class="line"><span class="keyword">var</span> universities = [<span class="string">&#x27;Peking University&#x27;</span>, <span class="string">&#x27;Tsinghua University&#x27;</span>];</span><br><span class="line"><span class="comment">// 学院数组</span></span><br><span class="line"><span class="keyword">var</span> colleges = [<span class="string">&#x27;College of Foreign Languages&#x27;</span>, <span class="string">&#x27;College of Mathematics&#x27;</span>, <span class="string">&#x27;College of Software&#x27;</span>];</span><br><span class="line"><span class="comment">// 专业数组</span></span><br><span class="line"><span class="keyword">var</span> departments = [];</span><br><span class="line">departments[<span class="number">0</span>] = [<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;French&#x27;</span>, <span class="string">&#x27;Russian&#x27;</span>];</span><br><span class="line">departments[<span class="number">1</span>] = [<span class="string">&#x27;Statistics&#x27;</span>];</span><br><span class="line">departments[<span class="number">2</span>] = [<span class="string">&#x27;Software Engineering&#x27;</span>];</span><br><span class="line"><span class="comment">// 循环大学的标签，命名规范同标识符</span></span><br><span class="line"><span class="attr">university</span>:</span><br><span class="line"><span class="comment">// 循环遍历大学</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> l = <span class="number">0</span>; l &lt; universities.<span class="property">length</span>; l++) &#123;</span><br><span class="line">  <span class="comment">// 循环学院的标签</span></span><br><span class="line">  <span class="attr">college</span>:</span><br><span class="line">  <span class="comment">// 循环遍历学院</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> m = <span class="number">0</span>; m &lt; colleges.<span class="property">length</span>; m++) &#123;</span><br><span class="line">    <span class="comment">// 循环专业的标签，因为默认continue和break处理的是当前循环，所以这个标签可以省略</span></span><br><span class="line">    <span class="attr">department</span>:</span><br><span class="line">    <span class="comment">// 循环遍历专业</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; departments[m].<span class="property">length</span>; n++) &#123;</span><br><span class="line">      <span class="comment">// 如果是英语专业则进行提示</span></span><br><span class="line">      <span class="keyword">if</span> (departments[m][n] == <span class="string">&#x27;Russian&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(universities[l] + <span class="string">&#x27;-&#x27;</span> + colleges[m] + <span class="string">&#x27;-&#x27;</span> + departments[m][n]);</span><br><span class="line">        <span class="comment">// 跳过遍历专业，等同于不使用标签</span></span><br><span class="line">        <span class="comment">// continue department;</span></span><br><span class="line">        <span class="comment">// 跳过遍历学院</span></span><br><span class="line">        <span class="comment">// continue college;</span></span><br><span class="line">        <span class="comment">// 跳过遍历大学</span></span><br><span class="line">        <span class="keyword">continue</span> university;</span><br><span class="line">        <span class="comment">// 终止遍历专业，等同于不使用标签</span></span><br><span class="line">        <span class="comment">// break department;</span></span><br><span class="line">        <span class="comment">// 终止遍历学院</span></span><br><span class="line">        <span class="comment">// break college;</span></span><br><span class="line">        <span class="comment">// 终止遍历大学</span></span><br><span class="line">        <span class="comment">// break university;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 记录已遍历的专业</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(universities[l] + <span class="string">&#x27;-&#x27;</span> + colleges[m] + <span class="string">&#x27;-&#x27;</span> + departments[m][n]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<code>console.log()</code>是一个函数，可以将传入的参数打印到页面的控制台上。</p><h2 id="4-对象"><a href="#4-对象" class="headerlink" title="4 对象"></a>4 对象</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>JavaScript中的数据类型有六种，包括五种基本数据类型和一种引用数据类型。</p><p>五种基本数据类型：</p><ul><li>String字符串</li><li>Number数值</li><li>Boolean布尔值</li><li>Null空值</li><li>Undefined未定义</li></ul><p>使用Object对象来表示引用类型的数据，这是一种复合的数据类型，可以保存多个不同数据类型的属性。</p><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><p>创建对象有两种方式：</p><ul><li>先创建，然后对属性赋值：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">student.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">student.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="comment">// 不能赋值特殊的属性名</span></span><br><span class="line"><span class="comment">// student.&#x27;1 2 3&#x27; = 123;</span></span><br><span class="line"><span class="comment">// 可以赋值特殊的属性名</span></span><br><span class="line">student[<span class="string">&#x27;1 2 3&#x27;</span>] = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></li><li>在创建时对属性赋值：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1 2 3&#x27;</span>:<span class="number">123</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>访问对象的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1 2 3&#x27;</span>:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span>);<span class="comment">// 张三</span></span><br><span class="line"><span class="comment">// 不能访问特殊的属性名</span></span><br><span class="line"><span class="comment">// console.log(student.&#x27;1 2 3&#x27;);</span></span><br><span class="line"><span class="comment">// 可以访问特殊的属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student[<span class="string">&#x27;1 2 3&#x27;</span>]);<span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>删除对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1 2 3&#x27;</span>:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// &#123; &quot;name&quot;: &quot;张三&quot;, &quot;sex&quot;: &quot;男&quot;, &quot;1 2 3&quot;: 123 &#125;</span></span><br><span class="line"><span class="keyword">delete</span> student[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">delete</span> student[<span class="string">&#x27;1 2 3&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// &#123; &quot;sex&quot;: &quot;男&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>在JavaScript中，对象的属性可以是任意类型的数据，包括对象的属性时另一个对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">student.<span class="property">friend</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// &#123; &quot;name&quot;: &quot;张三&quot;, &quot;sex&quot;: &quot;男&quot;, &quot;friend&quot;: &#123; &quot;name&quot;: &quot;李四&quot;, &quot;sex&quot;: &quot;男&quot; &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>可以通过<code>in</code>关键字判断对象是否存在指定属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">age</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> student);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>可以使用for…in语句循环遍历对象的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> student) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性名 &#x27;</span> + attr);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性值 &#x27;</span> + student[attr]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-堆栈"><a href="#4-3-堆栈" class="headerlink" title="4.3 堆栈"></a>4.3 堆栈</h3><p>JavaScript在运行时数据是保存到栈内存和堆内存当中的。简单来说栈内存保存堆内存中对象的引用和基本类型数据，堆内存保存引用类型数据，也就是对象。</p><p>基本数据类型和引用数据类型的区别：</p><ul><li>对于基本数据类型的变量来说，在栈上创建栈内存用于存储数据，每个变量都是独立的栈内存，变量的修改互不影响：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line">m = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);<span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li><li>对于引用数据类型的变量来说，在堆上创建堆内存用于存储对象，在栈上创建栈内存用于存储堆内存中对象的引用，对具有相同引用的对象的修改会互相影响：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zs = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> student = zs;</span><br><span class="line">student.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">age</span>);<span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul><p>在进行比较运算时的区别：</p><ul><li>在比较基本类型数据的时候，比较的是栈内存中的值。</li><li>在比较引用类型数据的时候，比较的是栈内存中的引用地址。即使两个对象有完全相同的属性，但因为在堆内存是两个对象，就导致引用地址不同，两个对象也不同：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> n = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m == n);<span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4-垃圾回收"><a href="#4-4-垃圾回收" class="headerlink" title="4.4 垃圾回收"></a>4.4 垃圾回收</h3><p>垃圾回收（GC，Garbage Collection），是一种回收不再使用的对象内存的机制。</p><p>当一个对象没有任何的变量或属性对它进行引用，会导致无法操作该对象，这种对象就是一个垃圾，垃圾对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理。</p><p>JavaScript拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，开发人员不需要也不能进行垃圾回收的操作，只需要将不再使用的对象设置为null即可：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="4-5-分类"><a href="#4-5-分类" class="headerlink" title="4.5 分类"></a>4.5 分类</h3><p>在JavaScript中可以将对象分为内部对象、宿主对象和自定义对象三种。</p><h4 id="4-5-1-内部对象"><a href="#4-5-1-内部对象" class="headerlink" title="4.5.1 内部对象"></a>4.5.1 内部对象</h4><p>内部对象包括String、Number、Boolean、Object、Function、Array、Date、Math、RegExp、Global，以及各种错误类对象，包括Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError。</p><p>其中Global和Math这两个对象又被称为内置对象，这两个对象在脚本程序初始化时被创建，不必实例化这两个对象。</p><h4 id="4-5-2-宿主对象"><a href="#4-5-2-宿主对象" class="headerlink" title="4.5.2 宿主对象"></a>4.5.2 宿主对象</h4><p>宿主对象就是执行JavaScript的环境提供的对象。</p><p>对于嵌入到网页中的JavaScript来说，其宿主对象就是浏览器提供的对象，所以又称为浏览器对象，如IE、Firefox等浏览器提供的对象。不同的浏览器提供的宿主对象可能不同，即使提供的对象相同，其实现方式也大相径庭，这会带来浏览器兼容问题，增加开发难度。</p><p>浏览器对象有很多，如Window和Document等等。</p><h4 id="4-5-3-自定义对象"><a href="#4-5-3-自定义对象" class="headerlink" title="4.5.3 自定义对象"></a>4.5.3 自定义对象</h4><p>顾名思义，就是开发人员自己定义的对象。JavaScript允许使用自定义对象，使应用及功能得到扩充。</p><h2 id="5-内部对象"><a href="#5-内部对象" class="headerlink" title="5 内部对象"></a>5 内部对象</h2><h3 id="5-1-函数"><a href="#5-1-函数" class="headerlink" title="5.1 函数"></a>5.1 函数</h3><h4 id="5-1-1-定义"><a href="#5-1-1-定义" class="headerlink" title="5.1.1 定义"></a>5.1.1 定义</h4><p>函数是封装了多条语句的代码块，这段代码块会让函数具有某种功能。</p><p>函数中的语句不会自动执行，需要在有需要的地方显示调用函数，在被调用时才会执行函数中的语句。</p><p>函数是一种Function类型的对象，使用<code>typeof</code>检查：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> fun);<span class="comment">// function</span></span><br></pre></td></tr></table></figure><p>当将函数赋值给对象的某个属性时，将这个属性称为方法，即对象的方法对应的类型是函数。</p><h4 id="5-1-2-使用"><a href="#5-1-2-使用" class="headerlink" title="5.1.2 使用"></a>5.1.2 使用</h4><p>创建函数的方式：</p><ul><li>使用普通函数，支持多个参数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test &#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>使用函数表达式，创建匿名函数，并将函数赋值给变量：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test &#x27;</span> + name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>使用函数的构造方法，支持多个参数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&quot;console.log(&#x27;test &#x27; + name);&quot;</span>);</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>使用构造函数，支持多个参数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test &#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Func</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>函数的组成部分：</p><ul><li>函数名：用于显示调用函数，可以省略函数名使用变量名调用，也可以同时省略函数名和变量名使用函数自调用：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;)(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>入参：用于将数据传入到函数中进行处理，支持无参和有参，多个参数用<code>,</code>分隔，参数类型支持任意类型。在执行函数时会从左到右自动匹配参数，缺少的参数按照未定义处理：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fun</span>();<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li>返回值：用于获取函数处理的结果。使用<code>return</code>关键字返回结果，返回结果支持任意类型，无返回结果按照未定义处理：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(<span class="string">&#x27;hello&#x27;</span>));<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ul><p>使用匿名函数自调用（IIFE，Immediately Invoked Function Expression）的好处是隐藏了内部实现，不污染外部命名空间。</p><h4 id="5-1-3-作用域"><a href="#5-1-3-作用域" class="headerlink" title="5.1.3 作用域"></a>5.1.3 作用域</h4><p>作用域通常用于形容变量，指的是变量的有效范围。</p><p>在JavaScript中一共有两种作用域：</p><ul><li>全局作用域，在<code>script</code>元素内部声明的变量，而不是在某个方法内部声明的变量，都在全局作用域，这种变量称为全局变量。</li><li>局部作用域，在方法内部创建的变量，只在方法内部有效，这种变量称为局部变量。</li></ul><p>全局变量的特点：</p><ol><li>在页面打开时创建，在页面关闭时销毁。</li><li>可以直接使用由浏览器创建的window全局对象，代表浏览器的窗口，可以直接使用其属性和方法。</li><li>全局变量在页面的任意地方都可以访问。</li></ol><p>局部变量的特点：</p><ol><li>在方法调用时创建，在方法执行结束后销毁。</li><li>只能在方法内部使用。</li></ol><p>只有在方法内部使用关键字声明变量，该变量才是局部变量，否则就是全局变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// undefined 使用局部变量，声明提升但未初始化</span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sex);<span class="comment">// 男 未声明变量，使用全部变量</span></span><br><span class="line">  sex = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// 张三 全局变量未被修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sex);<span class="comment">// 女 全局变量被修改</span></span><br></pre></td></tr></table></figure><p>当全局变量和局部变量名称相同时，在方法中使用的是局部变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// undefined 使用局部变量，声明提升但未初始化</span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// 张三 全局变量未被修改</span></span><br></pre></td></tr></table></figure><p>常用的全局函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对URI进行编码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;localhost:8080/test?name=test&#x27;</span>));<span class="comment">// localhost%3A8080%2Ftest%3Fname%3Dtest</span></span><br><span class="line"><span class="comment">// 对URI进行解码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;localhost%3A8080%2Ftest%3Fname%3Dtest&#x27;</span>));<span class="comment">// localhost:8080/test?name=test</span></span><br></pre></td></tr></table></figure><h4 id="5-1-4-声明提升"><a href="#5-1-4-声明提升" class="headerlink" title="5.1.4 声明提升"></a>5.1.4 声明提升</h4><p>在JavaScript中，函数及变量的声明都将被提升到函数的最顶部，变量可以先使用再声明。</p><p>在ES6引入let和const的声明方式后，只有var声明的变量才支持声明提升，并且使用函数表达式声明的函数变量也不支持声明提升。</p><p>声明提升只是将声明提前了，并没有将初始化的操作提前：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="5-1-5-内部属性"><a href="#5-1-5-内部属性" class="headerlink" title="5.1.5 内部属性"></a>5.1.5 内部属性</h4><p>在函数内部，有两个特殊的对象：</p><ul><li>arguments：该对象实际上是一个类数组对象，有数组的特性，但本质上是Object对象，用于保存函数的参数，同时该对象还有一个属性callee来表示当前函数。</li><li>this：引用的是一个对象，用来表示函数执行的上下文，一般是函数的调用者。根据函数调用方式的不同，引用对象也会有所不同。</li></ul><p>通过arguments对象可以获取传入的参数，即使函数没有定义入参：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">// Arguments []</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span> <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">// false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);<span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]);<span class="comment">// 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);<span class="comment">// 5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);<span class="comment">// function test() &#123;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span> == test);<span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>说明：<code>instanceof</code>关键字可以用来判断左侧的变量是否属于右侧的类型。</p><h4 id="5-1-6-构造函数"><a href="#5-1-6-构造函数" class="headerlink" title="5.1.6 构造函数"></a>5.1.6 构造函数</h4><p>构造函数就是一个普通的函数，创建方式和普通函数没有区别，不同的是，构造函数习惯上首字母大写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用函数时，普通函数可以直接调用，构造函数需要使用<code>new</code>关键字调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, sex</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// &#123; &quot;name&quot;: &quot;张三&quot;, &quot;sex&quot;: &quot;男&quot; &#125; 构造函数调用</span></span><br><span class="line"><span class="keyword">var</span> student = <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// undefined 普通函数调用，this表示window对象，没有name属性</span></span><br></pre></td></tr></table></figure><p>也可以通过<code>instanceof</code>关键字判断是不是构造函数调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, sex</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Student</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;构造函数调用&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;普通函数调用&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);<span class="comment">// 构造函数调用</span></span><br><span class="line"><span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);<span class="comment">// 普通函数调用</span></span><br></pre></td></tr></table></figure><p>使用同一个构造函数创建的对象，称为一类对象。所以也将构造函数称为类，同时将通过构造函数创建的对象，称为该类的实例。</p><h4 id="5-1-7-原型对象"><a href="#5-1-7-原型对象" class="headerlink" title="5.1.7 原型对象"></a>5.1.7 原型对象</h4><p>JavaScript是一门面向对象的语言，而且它还是一个基于原型的面向对象的语言。</p><p>原型：</p><ul><li>所有函数都有<code>prototype</code>属性的对象，称为原型。</li><li>所有对象（包括原型和函数，函数也是对象）都有<code>__proto__</code>属性的对象，可以通过这个对象访问其构造方法的原型。</li><li>通过函数<code>prototype</code>属性获取原型的方式称为显示调用，通过对象<code>__proto__</code>属性获取原型的方式称为隐式调用。</li><li>默认情况下，原型是一个Object对象，该对象只包含<code>constructor</code>属性和<code>__proto__</code>属性：<br><img src="/@image/103001/001001-143122.jpg" alt="001-原型"></li></ul><p>说明：</p><ul><li>原型的<code>constructor</code>属性指向函数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === func);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li>原型的<code>__proto__</code>属性在浏览器里显示为<code>[[Prototype]]</code>属性，对应Object的<code>prototype</code>属性：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><p>原型链：</p><ul><li>原型链又称为隐式原型链，隐式调用的原型会形成原型链，顶端是Object显示调用的原型，该原型如果继续通过隐式调用获取原型会返回null：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);<span class="comment">// null</span></span><br></pre></td></tr></table></figure></li><li>所有对象（包括原型和函数，函数也是对象）都是Object的实例，任何对象的原型链都能追溯到Object显示调用的原型：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li>所有方法（包括Object和Function）都是Function的实例，任何方法隐式调用的原型都是Function显示调用的原型：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><p>当访问对象的属性和方法时，首先在对象自身空间中寻找，如果没有，会在原型链上寻找，如果找不到会返回undefined：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;学生类&#x27;</span>;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.<span class="property">name</span> = <span class="string">&#x27;学生实例&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span>);<span class="comment">// 学生实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">age</span>);<span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">test</span>);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在调用<code>toString()</code>方法时，在没有重写的情况下，调用的实际上是Object的原型对象的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">toString</span>());<span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>在使用<code>in</code>关键字和for…in语句循环遍历对象的属性时，也会访问原型对象中的属性。</p><p>可以使用<code>hasOwnProperty()</code>方法判断对象自身是否包含指定属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;学生类&#x27;</span>;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.<span class="property">name</span> = <span class="string">&#x27;学生实例&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="5-1-8-函数对象方法"><a href="#5-1-8-函数对象方法" class="headerlink" title="5.1.8 函数对象方法"></a>5.1.8 函数对象方法</h4><p>当将函数作为对象赋值给变量时，这个对象即使函数对象，函数对象可以通过自身调用函数，也可以通过<code>call()</code>方法和<code>apply()</code>方法调用。</p><p>通过方法调用时，传入的第一个参数会被作为函数的调用者，即作为函数里的this对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();<span class="comment">// Window &#123;&#125;</span></span><br><span class="line">test.<span class="title function_">call</span>();<span class="comment">// Window &#123;&#125;</span></span><br><span class="line">test.<span class="title function_">apply</span>();<span class="comment">// Window &#123;&#125;</span></span><br><span class="line">test.<span class="title function_">call</span>(<span class="number">123</span>);<span class="comment">// Number &#123;123&#125;</span></span><br><span class="line">test.<span class="title function_">apply</span>(<span class="number">123</span>);<span class="comment">// Number &#123;123&#125;</span></span><br></pre></td></tr></table></figure><p>两个方法的区别在于对入参上的处理，第二个参数会作为入参：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params">first, last</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(first + <span class="string">&#x27; &#x27;</span> + last);</span><br><span class="line">&#125;</span><br><span class="line">test.<span class="title function_">call</span>(test, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>);<span class="comment">// John Smith 入参是可变参数</span></span><br><span class="line">test.<span class="title function_">apply</span>(test, [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]);<span class="comment">// John Smith 人参是数组</span></span><br></pre></td></tr></table></figure><h4 id="5-1-9-箭头函数"><a href="#5-1-9-箭头函数" class="headerlink" title="5.1.9 箭头函数"></a>5.1.9 箭头函数</h4><p>箭头函数是在ES6中添加的一种规范：</p><ul><li>省略了<code>function</code>关键字，箭头左侧表示入参，只有当入参只有一个时，才可以省略小括号</li><li>省略了<code>return</code>关键字，箭头右侧是返回语句，只有当函数直接返回表达式时，才可以省略大括号</li></ul><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">func</span> = (<span class="params">x</span>) =&gt; x * x;</span><br><span class="line"><span class="comment">// 使用普通函数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果返回值是对象，需要使用括号包裹：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">func</span> = (<span class="params">x</span>) =&gt; (&#123;<span class="attr">result</span>: x * x&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">func</span>(<span class="number">5</span>));<span class="comment">// &#123;result: 25&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-数组"><a href="#5-2-数组" class="headerlink" title="5.2 数组"></a>5.2 数组</h3><h4 id="5-2-1-定义"><a href="#5-2-1-定义" class="headerlink" title="5.2.1 定义"></a>5.2.1 定义</h4><p>数组也是对象的一种，数组是一种用于表达有顺序关系的数据的集合的语言结构。</p><p>数组和普通对象功能类似，也用来存储多个值。不同的是普通对象使用字符串作为属性名，而数组使用数字来作为索引操作元素。</p><p>索引是从0开始的整数，用于获取数组对应位置的数据。</p><p>数组可以存放任意类型的数据，可以在一个数组中存放不同类型的数据。</p><h4 id="5-2-2-使用"><a href="#5-2-2-使用" class="headerlink" title="5.2.2 使用"></a>5.2.2 使用</h4><p>创建数组有两种方式：</p><ul><li>先创建，然后插入数据：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr);<span class="comment">// object</span></span><br></pre></td></tr></table></figure></li><li>在创建时插入数据：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 也可以使用这种方式</span></span><br><span class="line"><span class="comment">// var arr = [1, 2, 3];</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr);<span class="comment">// object</span></span><br></pre></td></tr></table></figure></li></ul><p>删除数组数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 空, 3]</span></span><br></pre></td></tr></table></figure><p>访问数组数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>遍历数组数据：</p><ul><li>使用for…in循环遍历：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用forEach循环遍历：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">i, e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i + <span class="string">&#x27; &gt; &#x27;</span> + e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>数组的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span>);<span class="comment">// Array() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);<span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">__proto__</span>);<span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>数组的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 删除数组的最后一个元素，并返回删除的元素</span></span><br><span class="line"><span class="keyword">var</span> del = arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(del);<span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2]</span></span><br><span class="line"><span class="comment">// 向数组的末尾添加元素，并返回数组的新的长度</span></span><br><span class="line"><span class="keyword">var</span> len = arr.<span class="title function_">push</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len);<span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 删除数组的第一个元素，并返回删除的元素</span></span><br><span class="line"><span class="keyword">var</span> del = arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(del);<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [2, 4, 5]</span></span><br><span class="line"><span class="comment">// 向数组开头添加元素，并返回新的数组长度</span></span><br><span class="line"><span class="keyword">var</span> len = arr.<span class="title function_">unshift</span>(-<span class="number">2</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len);<span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 颠倒数组顺序</span></span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [5, 4, 2, -1, -2]</span></span><br><span class="line"><span class="comment">// 对数组元素进行排序，默认按照字母顺序</span></span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-1, -2, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 对数组元素进行排序，指定排序方式</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> m - n;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 选择指定范围的字符串，前闭后开，不改变原数组，第一个参数是起始位置，第二个参数是结束位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 空参选择全部</span></span><br><span class="line"><span class="keyword">var</span> sli = arr.<span class="title function_">slice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sli);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 一个参数，选择起始位置及其之后的元素</span></span><br><span class="line"><span class="keyword">var</span> sli = arr.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sli);<span class="comment">// [-1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 参数是负数则加上长度计算</span></span><br><span class="line"><span class="keyword">var</span> sli = arr.<span class="title function_">slice</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sli);<span class="comment">// [5]</span></span><br><span class="line"><span class="comment">// 两个参数，选择定位之间的元素</span></span><br><span class="line"><span class="keyword">var</span> sli = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sli);<span class="comment">// [-1, 2]</span></span><br><span class="line"><span class="comment">// 删除数组中的指定元素，并返回删除的元素，第一个参数是起始位置，第二个参数是删除数量，第三个及以后的参数是插入到起始位置之前的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 空参不删除任何元素</span></span><br><span class="line"><span class="keyword">var</span> spli = arr.<span class="title function_">splice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spli);<span class="comment">// []</span></span><br><span class="line"><span class="comment">// 一个参数，删除起始位置的元素</span></span><br><span class="line"><span class="comment">// var spli = arr.splice(1);</span></span><br><span class="line"><span class="comment">// console.log(spli);// [-1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 参数是负数则加上长度计算</span></span><br><span class="line"><span class="comment">// var spli = arr.splice(-1);</span></span><br><span class="line"><span class="comment">// console.log(spli);// [5]</span></span><br><span class="line"><span class="comment">// 两个参数，删除起始位置之后数量的元素</span></span><br><span class="line"><span class="comment">// var spli = arr.splice(1, 3);</span></span><br><span class="line"><span class="comment">// console.log(spli);// [-1, 2, 4]</span></span><br><span class="line"><span class="comment">// 两个参数，删除起始位置之后数量的元素，插入元素到起始位置之前</span></span><br><span class="line"><span class="comment">// var spli = arr.splice(1, 3, 0, 1);</span></span><br><span class="line"><span class="comment">// console.log(spli);// [-1, 2, 4]</span></span><br></pre></td></tr></table></figure><h3 id="5-3-日期"><a href="#5-3-日期" class="headerlink" title="5.3 日期"></a>5.3 日期</h3><p>在JavaScript中使用Date对象表示日期：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> now);<span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);<span class="comment">// Wed Jul 03 2024 10:30:10 GMT+0800 (中国标准时间)</span></span><br><span class="line">now = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1/31/2008&#x27;</span>);<span class="comment">// 入参支持MM/dd/yyyy日期格式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);<span class="comment">// Thu Jan 31 2008 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line">now = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1/31/2008 10:00:00&#x27;</span>);<span class="comment">// 入参支持MM/dd/yyyy HH:mm:ss日期时间格式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);<span class="comment">// Thu Jan 31 2008 10:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><p>日期的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="property">constructor</span>);<span class="comment">// ƒ Date() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="property">__proto__</span>);<span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>日期的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());<span class="comment">// 时间戳，获取从1970年1月1日至今所过的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getFullYear</span>());<span class="comment">// 2024 获取Date对象的年份</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDay</span>());<span class="comment">// 3 获取Date对象的星期，0表示周日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMonth</span>());<span class="comment">// 6 获取Date对象的月份，0表示1月</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDate</span>());<span class="comment">// 3 获取Date对象在月份的第几日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getHours</span>());<span class="comment">// 10 获取Date对象的小时，0表示0点和24点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMinutes</span>());<span class="comment">// 30 获取Date对象的分钟，0表示0分和60分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getSeconds</span>());<span class="comment">// 10 获取Date对象的秒数，0表示0秒和60秒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMilliseconds</span>());<span class="comment">// 100 获取Date对象的毫秒</span></span><br></pre></td></tr></table></figure><h3 id="5-4-数学相关"><a href="#5-4-数学相关" class="headerlink" title="5.4 数学相关"></a>5.4 数学相关</h3><p>JavaScript为数学计算封装了一个Math对象，和其他的对象不同，Math不是一个构造函数，属于一个工具类，不用创建对象，里边封装了数学运算相关的属性和方法。</p><p>Math的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Math</span>);<span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">E</span>);<span class="comment">// 2.718... 获取算术常量e，即自然对数的底数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LN2</span>);<span class="comment">// 0.693... 获取2的自然对数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LN10</span>);<span class="comment">// 2.302... 获取10的自然对数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LOG2E</span>);<span class="comment">// 1.442... 获取以2为底的e的对数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LOG10E</span>);<span class="comment">// 0.434... 获取以10为底的e的对数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);<span class="comment">// 3.141... 获取圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">SQRT1_2</span>);<span class="comment">// 0.707... 获取2的平方根的倒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">SQRT2</span>);<span class="comment">// 1.414... 获取2的平方根</span></span><br></pre></td></tr></table></figure><p>Math的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>));<span class="comment">// 1 获取绝对值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">1.2</span>));<span class="comment">// -1 向上取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">1.2</span>));<span class="comment">// -2 向下取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">1.2</span>));<span class="comment">// -1 四舍五入</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());<span class="comment">// 0.5 生成0到1的随机数，不包括0和1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 2 获取最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 0 获取最小值</span></span><br></pre></td></tr></table></figure><h3 id="5-5-包装类"><a href="#5-5-包装类" class="headerlink" title="5.5 包装类"></a>5.5 包装类</h3><p>JavaScript提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象：</p><ul><li>String：可以将基本数据类型字符串转换为String对象。</li><li>Number：可以将基本数据类型的数字转换为Number对象。</li><li>Boolean：可以将基本数据类型的布尔值转换为Boolean对象。</li></ul><p>在实际应用中不会使用基本数据类型的对象，如果使用基本数据类型的对象，因为对象在栈中存储的是对象的引用，所以在进行比较时会导致与预期不一致的结果：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="number">1</span>);<span class="comment">// true 基本数据类型之间的比较使用栈上的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>));<span class="comment">// true 基本数据类型与包装类之间的比较会发生自动拆箱，比较栈上的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>) == <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>));<span class="comment">// false 包装类之间的比较使用栈上的引用。</span></span><br></pre></td></tr></table></figure><h4 id="5-5-1-布尔值"><a href="#5-5-1-布尔值" class="headerlink" title="5.5.1 布尔值"></a>5.5.1 布尔值</h4><p>布尔值的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boo = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boo.<span class="property">constructor</span>);<span class="comment">// ƒ Boolean() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boo.<span class="property">__proto__</span>);<span class="comment">// Boolean &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>布尔值的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boo = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boo.<span class="title function_">valueOf</span>());<span class="comment">// true 获取原始值</span></span><br></pre></td></tr></table></figure><h4 id="5-5-2-数字"><a href="#5-5-2-数字" class="headerlink" title="5.5.2 数字"></a>5.5.2 数字</h4><p>数字的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="property">constructor</span>);<span class="comment">// ƒ Number() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="property">__proto__</span>);<span class="comment">// Number &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>);<span class="comment">// 5e-324</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);<span class="comment">// 1.7976931348623157e+308</span></span><br></pre></td></tr></table></figure><p>数字的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&#x27;1&#x27;</span>));<span class="comment">// false 判断指定参数是否为NaN，只有当参数是数字且为NaN才会返回true，参数非数字和非NaN的数字会返回false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1</span>));<span class="comment">// false 判断指定参数是否为无穷大</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">1</span>));<span class="comment">// true 判断指定参数是否为整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1.159</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>));<span class="comment">// 1.16 获取指定小数位数的字符串，采用四舍五入（银行家舍入）策略，无参会返回整数字符串，参数范围是1到100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1.615</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>));<span class="comment">// 1.61 不是严格的四舍五入，严格四舍五入可以使用Math.round()方法实现，或者缩放某个倍数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>).<span class="title function_">toFixed</span>(<span class="number">4</span>));<span class="comment">// 10.0000 精度不足时会进行补位，常用于需要统一精度的场景</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1.159</span>).<span class="title function_">toPrecision</span>(<span class="number">3</span>));<span class="comment">// 1.16 获取指定位数的字符串，采用四舍五入（银行家舍入）策略，无参会返回原数字字符串，参数范围是1到100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1.615</span>).<span class="title function_">toPrecision</span>(<span class="number">3</span>));<span class="comment">// 1.61 不是严格的四舍五入，严格四舍五入可以使用Math.round()方法实现，或者缩放某个倍数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0.159</span>).<span class="title function_">toPrecision</span>(<span class="number">2</span>));<span class="comment">// 0.16 整数部分为0时，指定位数不包括整数部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>).<span class="title function_">toPrecision</span>(<span class="number">6</span>));<span class="comment">// 10.0000 精度不足时会进行补位，常用于需要统一精度的场景</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>).<span class="title function_">valueOf</span>());<span class="comment">// 10 获取原始值</span></span><br></pre></td></tr></table></figure><h4 id="5-5-3-字符串"><a href="#5-5-3-字符串" class="headerlink" title="5.5.3 字符串"></a>5.5.3 字符串</h4><p>字符串的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">constructor</span>);<span class="comment">// ƒ String() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);<span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">__proto__</span>);<span class="comment">// String &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>字符串的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;l&#x27;</span>));<span class="comment">// 2 获取首次出现的位置，找不到返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;l&#x27;</span>, <span class="number">3</span>));<span class="comment">// 3 获取首次出现的位置，从指定位置开始，包含指定位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;l&#x27;</span>));<span class="comment">// 3 获取最后出现的位置，从右往左查找，找不到返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;l&#x27;</span>, <span class="number">2</span>));<span class="comment">// 2 获取最后出现的位置，从右往左查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">1</span>));<span class="comment">// e 获取指定位置的字符，指定位置超出长度返回空串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">1</span>));<span class="comment">// 101 获取指定位置的字符编码，即Unicode编码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="string">&#x27;l&#x27;</span>));<span class="comment">// [&#x27;l&#x27;, ...] 查找匹配的字符串，返回匹配的数组，支持正则表达式，找不到返回null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(<span class="string">&#x27;l&#x27;</span>));<span class="comment">// 2 获取首次出现的位置，支持正则表达式，找不到返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;&#x27;</span>));<span class="comment">// helo 查找首个匹配第一个参数的字符串，并替换为第二个参数指定的字符串，不改变原字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replaceAll</span>(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;&#x27;</span>));<span class="comment">// heo 查找全部匹配第一个参数的字符串，并替换为第二个参数指定的字符串，不改变原字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;world&#x27;</span>));<span class="comment">// hello world 获取拼接字符串，支持可变参数，不改变原字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>));<span class="comment">// el 获取指定范围的字符串，不改变原字符串，第一个参数是起始位置，第二个参数是结束位置，前闭后开</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>));<span class="comment">// ello 获取指定范围的字符串，不改变原字符串，只有一个参数会获取到末尾</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(-<span class="number">1</span>));<span class="comment">// o 获取指定范围的字符串，不改变原字符串，负数参数会从后往前查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">3</span>));<span class="comment">// el 和slice类似，区别是不支持负数参数，负数参数会替换为0，并且参数会自动排序，保证前小后大</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>());<span class="comment">// [&#x27;hello&#x27;] 根据字符将字符串拆分为数组，无参或字符不存在会将整个字符串作为数组的一个元素，支持正则表达式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;] 空串将每个字符串作为数组的一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;ell&#x27;</span>));<span class="comment">// [&#x27;h&#x27;, &#x27;o&#x27;] 拆分后指定的字符被删除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLowerCase</span>());<span class="comment">// hello 获取小写字符串，不改变原字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>());<span class="comment">// HELLO 获取大写字符串，不改变原字符串</span></span><br></pre></td></tr></table></figure><h3 id="5-6-正则表达式"><a href="#5-6-正则表达式" class="headerlink" title="5.6 正则表达式"></a>5.6 正则表达式</h3><h4 id="5-6-1-定义"><a href="#5-6-1-定义" class="headerlink" title="5.6.1 定义"></a>5.6.1 定义</h4><p>在JavaScript中使用RegExp对象表示正则表达式，正则表达式是用于从字符串中选择特定字符串的文本。</p><h4 id="5-6-2-创建"><a href="#5-6-2-创建" class="headerlink" title="5.6.2 创建"></a>5.6.2 创建</h4><p>创建正则表达式有两种方式：</p><ul><li>使用构造方法创建，第一个参数是表达式，第二个参数是可选的修饰符，如果表达式有特殊字符，需要使用<code>\</code>进行转义：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var patt = new RegExp(pattern, modifiers);</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> reg);<span class="comment">// object</span></span><br></pre></td></tr></table></figure></li><li>直接创建，同样需要两个参数，但是使用<code>/</code>分隔：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var reg = /pattern/modifiers;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> reg);<span class="comment">// object</span></span><br></pre></td></tr></table></figure></li></ul><p>如果需要动态创建正则表达式，需要使用构造方法创建。</p><p>在创建正则表达式以后，其内部维护了一个<code>lastIndex</code>索引，记录下一次匹配从哪个位置开始。</p><h4 id="5-6-3-方法"><a href="#5-6-3-方法" class="headerlink" title="5.6.3 方法"></a>5.6.3 方法</h4><p>使用<code>test()</code>方法判断是否匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">test</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);<span class="comment">// 判断参数是否包含正则表达式匹配的字符串，返回true表示包含，返回false表示不包含</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用<code>exec()</code>方法获取匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);<span class="comment">// 返回从参数中匹配到的字符串，返回值是数组对象，对象内容和全局匹配修饰符有关</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">length</span>);<span class="comment">// 1 返回对象的数组长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">index</span>);<span class="comment">// 0 返回匹配到的起始位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>);<span class="comment">// undefined 返回匹配到的捕获分组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 未使用全局匹配修饰符时，匹配到就结束了，不会匹配下一个</span></span><br></pre></td></tr></table></figure><p>使用字符串的<code>match()</code>方法获取匹配内容，和正则表达式的<code>exec()</code>方法相同：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h4 id="5-6-4-修饰符"><a href="#5-6-4-修饰符" class="headerlink" title="5.6.4 修饰符"></a>5.6.4 修饰符</h4><p>修饰符用于对匹配方式进行说明，修饰符可以省略，但修饰符之前的<code>/</code>不能省略：</p><ul><li>i：执行对大小写不敏感的匹配，默认大小写敏感</li><li>g：执行全局匹配，默认匹配到第一个停止</li><li>m：执行多行匹配，默认匹配第一行</li></ul><p>如果没有使用<code>g</code>全局修饰，会在匹配到第一个停止，返回包含匹配信息的数组对象，并且<code>exec()</code>方法和<code>match()</code>方法获取的结果相同。</p><p>如果使用了<code>g</code>全局修饰，会匹配所有满足的内容，但是<code>exec()</code>方法和<code>match()</code>方法获取的结果不同。</p><p>使用<code>exec()</code>方法执行有全局修饰的正则表达式，返回从<code>lastIndex</code>开始匹配到的内容数组，匹配一次后返回匹配的内容并暂停：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 3 记录本次匹配结束时的索引，下次匹配从这个位置开始</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, index: 6, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 9 记录本次匹配结束时的索引，下次匹配从这个位置开始</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// null 匹配结束</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束</span></span><br></pre></td></tr></table></figure><p>使用<code>test()</code>方法也会更新<code>lastIndex</code>的值，如果不注意这一点，可能会出问题：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">test</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 3 第一次匹配</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 9 第二次匹配</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束 虽然执行了一次exec()方法，但实际上已经匹配两次了</span></span><br></pre></td></tr></table></figure><p>使用字符串的<code>match()</code>方法执行有全局修饰的正则表达式，返回匹配到的内容数组，匹配全部后结束：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, &#x27;123&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束</span></span><br></pre></td></tr></table></figure><h4 id="5-6-5-字符串方法"><a href="#5-6-5-字符串方法" class="headerlink" title="5.6.5 字符串方法"></a>5.6.5 字符串方法</h4><p>字符串中可以使用正则表达式的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/l/</span>));<span class="comment">// [&#x27;l&#x27;, index: 2, input: &#x27;hello&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/l/g</span>));<span class="comment">// [&#x27;l&#x27;, &#x27;l&#x27;] 全局匹配会获取全部匹配的内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(<span class="regexp">/l/</span>));<span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="regexp">/l/</span>, <span class="string">&#x27;&#x27;</span>));<span class="comment">// helo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replaceAll</span>(<span class="regexp">/l/g</span>, <span class="string">&#x27;&#x27;</span>));<span class="comment">// heo 替换全部时，修饰符必须有全局匹配</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="regexp">/ll/</span>));<span class="comment">// [&#x27;he&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="5-6-6-量词"><a href="#5-6-6-量词" class="headerlink" title="5.6.6 量词"></a>5.6.6 量词</h4><p>表达式中可以使用量词，使用<code>n</code>表示任意字符：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/el+/g</span>));<span class="comment">// [&#x27;ell&#x27;] 使用n+匹配包含至少一个n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/hl+/g</span>));<span class="comment">// null 至少包含一个n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/el*/g</span>));<span class="comment">// [&#x27;ell&#x27;] 使用n*匹配包含零个或多个n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/hl*/g</span>));<span class="comment">// [&#x27;h&#x27;] 可以不包含n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/el?/g</span>));<span class="comment">// [&#x27;el&#x27;] 使用n?匹配包含零个或一个n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/hl?/g</span>));<span class="comment">// [&#x27;h&#x27;] 可以不包含n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/l&#123;2&#125;/g</span>));<span class="comment">// [&#x27;ll&#x27;] 使用n&#123;X&#125;匹配包含X个n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/l&#123;1,2&#125;/g</span>));<span class="comment">// [&#x27;ll&#x27;] 使用n&#123;X,Y&#125;匹配至少包含X个至多包含Y个n的字符串，Y可以省略</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/lo$/g</span>));<span class="comment">// [&#x27;lo&#x27;] 使用n$匹配任何结尾为n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/^he/g</span>));<span class="comment">// [&#x27;he&#x27;] 使用^n匹配任何开头为n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/e(?=l)/g</span>));<span class="comment">// [&#x27;e&#x27;] 使用?=n匹配任何后面紧跟n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/h(?!l)/g</span>));<span class="comment">// [&#x27;h&#x27;] 使用?=n匹配任何后面紧跟n的字符串</span></span><br></pre></td></tr></table></figure><p>在具有量词匹配的表达式中，使用贪婪模式和非贪婪模式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123123&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/1.*3/g</span>));<span class="comment">// [&#x27;123123&#x27;] 默认开启贪婪模式，获取能匹配到的最多的内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/1.*?3/g</span>));<span class="comment">// [&#x27;123&#x27;, &#x27;123&#x27;] 使用?开启非贪婪模式，获取能匹配到的最少的内容</span></span><br></pre></td></tr></table></figure><h4 id="5-6-7-范围"><a href="#5-6-7-范围" class="headerlink" title="5.6.7 范围"></a>5.6.7 范围</h4><p>表达式中可以使用方括号限制查找某个范围的字符串，实际上比较的是ASCII码：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;ab12CD&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[abCD]/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;C&#x27;, &#x27;D&#x27;] 查找方括号之间的任何字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[^abCD]/g</span>));<span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;] 查找不在方括号之间的任何字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[0-9]/g</span>));<span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;] 查找0-9之间的数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[a-z]/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;] 查找a-z之间的字符，即小写英文字母</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[A-Z]/g</span>));<span class="comment">// [&#x27;C&#x27;, &#x27;D&#x27;] 查找A-Z之间的字符，即大写英文字母</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[A-z]/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;C&#x27;, &#x27;D&#x27;] 查找A-z之间的字符，即所有英文字母，因为在ASCII码中，大写字母在小写字母前面</span></span><br></pre></td></tr></table></figure><h4 id="5-6-8-特殊字符"><a href="#5-6-8-特殊字符" class="headerlink" title="5.6.8 特殊字符"></a>5.6.8 特殊字符</h4><p>表达式中可以使用元字符替代特殊字符进行查找：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/./g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;_&#x27;, &#x27;!&#x27;, &#x27;+&#x27;] 查找单个字符，除了换行和行结束符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\w/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;_&#x27;] 查找单词字符，包括数字、字母、下划线</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\W/g</span>));<span class="comment">// [&#x27;!&#x27;, &#x27;+&#x27;] 查找非单词字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\d/g</span>));<span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;] 查找数字字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\D/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;_&#x27;, &#x27;!&#x27;, &#x27;+&#x27;] 查找非数字字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\s/g</span>));<span class="comment">// null 查找空白字符，包括空格符、回车符、换行符、换页符、制表符、垂直制表符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\S/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;_&#x27;, &#x27;!&#x27;, &#x27;+&#x27;] 查找非空白字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\bwo/g</span>));<span class="comment">// [&#x27;wo&#x27;] 查找单词边界字符，即位于单词开头和结尾的字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\Blo/g</span>));<span class="comment">// [&#x27;lo&#x27;] 查找非单词边界字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\0/g</span>));<span class="comment">// null 查找NULL字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\n/g</span>));<span class="comment">// null 查找换行符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\r/g</span>));<span class="comment">// null 查找回车符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\f/g</span>));<span class="comment">// null 查找换页符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\t/g</span>));<span class="comment">// null 查找制表符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\v/g</span>));<span class="comment">// null 查找垂直制表符</span></span><br></pre></td></tr></table></figure><h4 id="5-6-9-捕获分组"><a href="#5-6-9-捕获分组" class="headerlink" title="5.6.9 捕获分组"></a>5.6.9 捕获分组</h4><p>在正则表达式中使用<code>()</code>有两个作用：</p><ul><li>将被包裹的内容进行单独匹配，用于形成捕获分组</li><li>括号后的量词会将括号视为整体</li></ul><p>在未使用全局修饰的情况下，使用<code>exec()</code>方法获取匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);<span class="comment">// 在使用捕获分组时，数组第一个元素是完整的匹配内容，后面的元素是捕获的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><p>在未使用全局修饰的情况下，使用字符串的<code>match()</code>方法获取匹配内容，和正则表达式的<code>exec()</code>方法相同：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><p>在使用全局修饰的情况下，使用<code>exec()</code>方法获取匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 6 记录本次匹配结束时的索引，下次匹配从这个位置开始</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a5a&#x27;, &#x27;123&#x27;, &#x27;a5a&#x27;, index: 6, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 12 记录本次匹配结束时的索引，下次匹配从这个位置开始</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// null 匹配结束</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束</span></span><br></pre></td></tr></table></figure><p>在使用全局修饰的情况下，使用字符串的<code>match()</code>方法获取匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123a5a&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束</span></span><br></pre></td></tr></table></figure><h2 id="6-文档对象模型"><a href="#6-文档对象模型" class="headerlink" title="6 文档对象模型"></a>6 文档对象模型</h2><h3 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1 定义"></a>6.1 定义</h3><p>文档对象模型（DOM，Document Object Model），在JavaScript中通过DOM操作HTML页面。</p><p>DOM将HTML页面映射为一个多节点模型，每个元素和属性都是节点：</p><ul><li>文档本身就是文档节点，使用document对象表示，作为window对象的属性存在的，不用获取可以直接使用。</li><li>注释是注释节点。</li><li>元素是元素节点。</li><li>元素内的属性是属性节点。</li><li>元素内的文本是文本节点。元素之间的空白也是文本节点。</li></ul><p>当网页被加载时，浏览器会创建页面的DOM树：<br><img src="/@image/103001/001002-104850.jpg" alt="002-页面DOM树"></p><p>节点的通用属性：</p><ul><li>nodeName：代表当前节点的名字，只读属性。元素节点返回大写的标签名，属性节点返回属性名，文本节点返回<code>#text</code>字符串。</li><li>nodeType：返回一个整数，这个数值代表着给定节点的类型，只读属性。元素节点返回1，属性节点返回2，文本节点返回3。</li><li>nodeValue：返回给定节点的当前值，可读写的属性。元素节点返回null，属性节点返回属性值，文本节点返回文本节点的内容。</li></ul><h3 id="6-2-节点"><a href="#6-2-节点" class="headerlink" title="6.2 节点"></a>6.2 节点</h3><h4 id="6-2-1-文档节点"><a href="#6-2-1-文档节点" class="headerlink" title="6.2.1 文档节点"></a>6.2.1 文档节点</h4><p>查询元素节点的方法，需要使用文档节点document对象调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);<span class="comment">// 通过元素的id属性查找元素节点</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;home&#x27;</span>);<span class="comment">// 通过元素的name属性查找元素节点，返回多个匹配的节点</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;home&#x27;</span>);<span class="comment">// 通过元素的calss属性查找元素节点，返回多个匹配的节点，支持元素节点调用</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);<span class="comment">// 通过元素的标签名查找元素节点，返回多个匹配的节点，支持元素节点调用</span></span><br></pre></td></tr></table></figure><p>除了通过id属性查找返回的是对象外，其余三个返回的均为伪数组：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// &lt;span id=&quot;home&quot;&gt;home-id&lt;/span&gt;</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// NodeList [span]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(home));<span class="comment">// [span]</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// HTMLCollection [span.home]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(home));<span class="comment">// [span.home]</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// HTMLCollection [div]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(home));<span class="comment">// [div]</span></span><br></pre></td></tr></table></figure><p>文档节点的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">title</span>);<span class="comment">// 获取文档标题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">URL</span>);<span class="comment">// 获取文档URL</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">referrer</span>);<span class="comment">// 获取文档referrer，即前文档的URL</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">domain</span>);<span class="comment">// 获取文档域名</span></span><br></pre></td></tr></table></figure><p>使用文档节点操作节点：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#home&#x27;</span>));<span class="comment">// 使用CSS选择器查找元素节点，返回第一个元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#home&#x27;</span>));<span class="comment">// 使用CSS选择器查找元素节点，返回全部元素节点</span></span><br><span class="line"><span class="keyword">var</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);<span class="comment">// 创建元素节点，入参是标签名</span></span><br><span class="line"><span class="keyword">var</span> newName = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&#x27;name&#x27;</span>);<span class="comment">// 创建属性节点，入参是属性名</span></span><br><span class="line"><span class="keyword">var</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;text&#x27;</span>);<span class="comment">// 创建文本节点，入参是文本内容</span></span><br></pre></td></tr></table></figure><h4 id="6-2-2-元素节点"><a href="#6-2-2-元素节点" class="headerlink" title="6.2.2 元素节点"></a>6.2.2 元素节点</h4><p>元素节点的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">children</span>);<span class="comment">// 获取当前节点的所有子节点，只获取元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">childNodes</span>);<span class="comment">// 获取当前节点的所有子节点，包括元素节点和非元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">firstChild</span>);<span class="comment">// 获取当前节点的第一个子节点，包括元素节点和非元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">lastChild</span>);<span class="comment">// 获取当前节点的最后一个子节点，包括元素节点和非元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">parentNode</span>);<span class="comment">// 获取当前节点的父节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">previousSibling</span>);<span class="comment">// 获取当前节点的前一个兄弟节点，包括元素节点和非元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">nextSibling</span>);<span class="comment">// 获取当前节点的后一个兄弟节点，包括元素节点和非元素节点</span></span><br></pre></td></tr></table></figure><p>通过元素节点获取其他节点：</p><ul><li>通过firstChild属性获取的第一个节点通常是文本节点</li><li>通过getAttributeNode(属性名)方法获取指定属性节点，通常不使用属性节点</li></ul><p>获取和修改元素节点的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">id</span>);<span class="comment">// 获取id属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">class</span>);<span class="comment">// 获取class属性</span></span><br><span class="line">home.<span class="property">id</span> = <span class="string">&#x27;home-id&#x27;</span>;<span class="comment">// 修改id属性</span></span><br><span class="line">home.<span class="property">id</span> = <span class="string">&#x27;home-class&#x27;</span>;<span class="comment">// 修改class属性</span></span><br></pre></td></tr></table></figure><p>操作元素节点：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="comment">// 操作属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));<span class="comment">// 通过属性名获取属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="title function_">getAttributeNode</span>(<span class="string">&#x27;id&#x27;</span>));<span class="comment">// 通过属性名获取属性节点</span></span><br><span class="line">home.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;home&#x27;</span>);<span class="comment">// 通过属性名设置属性</span></span><br><span class="line">home.<span class="title function_">setAttributeNode</span>(<span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">// 设置属性节点</span></span><br><span class="line">home.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;name&#x27;</span>);<span class="comment">// 通过属性名删除属性</span></span><br><span class="line">home.<span class="title function_">removeAttributeNode</span>(home.<span class="title function_">getAttributeNode</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">// 删除属性节点</span></span><br><span class="line"><span class="comment">// 操作子节点</span></span><br><span class="line"><span class="keyword">var</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);<span class="comment">// 创建元素节点</span></span><br><span class="line"><span class="keyword">var</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;text&#x27;</span>);<span class="comment">// 创建文本节点</span></span><br><span class="line">home.<span class="title function_">appendChild</span>(newDiv);<span class="comment">// 添加子节点，新的字节点会添加到末尾子节点的后面</span></span><br><span class="line">home.<span class="title function_">insertBefore</span>(newText, home.<span class="property">childNodes</span>[<span class="number">0</span>]);<span class="comment">// 添加子节点，新的字节点会添加到首位子节点的前面</span></span><br><span class="line">home.<span class="title function_">removeChild</span>(home.<span class="property">childNodes</span>[<span class="number">0</span>]);<span class="comment">// 删除子节点</span></span><br><span class="line">home.<span class="title function_">replaceChild</span>(newText, home.<span class="property">childNodes</span>[<span class="number">0</span>]);<span class="comment">// 替换子节点</span></span><br></pre></td></tr></table></figure><p>操作元素样式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">style</span>[<span class="string">&#x27;fontSize&#x27;</span>] = <span class="string">&quot;16px&quot;</span>;<span class="comment">// 修改行内样式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">style</span>.<span class="property">fontSize</span>);<span class="comment">// 获取行内样式，需要将分隔命名转为驼峰命名</span></span><br><span class="line"><span class="comment">// 获取元素样式，包括内部样式和外部样式，兼容写法，不支持修改</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">getComputedStyle</span>) &#123;</span><br><span class="line">  <span class="comment">// 大部分浏览器兼容的方式，第二个参数是伪元素</span></span><br><span class="line">  <span class="keyword">var</span> fontSize = <span class="title function_">getComputedStyle</span>(home, <span class="literal">null</span>)[<span class="string">&#x27;fontSize&#x27;</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fontSize);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// IE8及以下</span></span><br><span class="line">  <span class="keyword">var</span> fontSize = home.<span class="property">currentStyle</span>[<span class="string">&#x27;fontSize&#x27;</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fontSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-属性节点"><a href="#6-2-3-属性节点" class="headerlink" title="6.2.3 属性节点"></a>6.2.3 属性节点</h4><p>属性节点的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> homeName = home.<span class="title function_">getAttributeNode</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(homeName.<span class="property">name</span>);<span class="comment">// 获取属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(homeName.<span class="property">value</span>);<span class="comment">// 获取属性值</span></span><br><span class="line">homeName.<span class="property">value</span> = <span class="string">&#x27;name&#x27;</span>;<span class="comment">// 设置属性值</span></span><br></pre></td></tr></table></figure><h3 id="6-3-事件"><a href="#6-3-事件" class="headerlink" title="6.3 事件"></a>6.3 事件</h3><h4 id="6-3-1-使用"><a href="#6-3-1-使用" class="headerlink" title="6.3.1 使用"></a>6.3.1 使用</h4><p>事件就是用户和浏览器之间的交互行为，比如点击、移动。</p><p>事件可以写在HTML的元素内，也可以写在JavaScript里：</p><ul><li>写在HTML的元素里，不建议使用这种方式：<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;span&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>写在JavaScript里，建议使用这种方式：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递给响应函数，在事件对象中封装了当前事件相关的一切信息。</p><p>在使用IE浏览器时，如果版本小于IE8，响应函数被触发时，浏览器不会传递事件对象，而是将事件对象作为window对象的属性保存。</p><p>兼容IE和其他浏览器的方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="comment">// 传入事件对象，可以省略</span></span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用事件：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="comment">// 鼠标点击时执行</span></span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 元素获取焦点时执行</span></span><br><span class="line">home.<span class="property">onfocus</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 元素失去焦点时执行</span></span><br><span class="line">home.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页面加载完后执行</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>target</code>属性获取触发事件的元素：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = event.<span class="property">target</span>;</span><br><span class="line">  <span class="title function_">alert</span>(obj.<span class="property">tagName</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-2-事件的传播"><a href="#6-3-2-事件的传播" class="headerlink" title="6.3.2 事件的传播"></a>6.3.2 事件的传播</h4><p>关于事件的传播网景公司和微软公司有不同的理解：</p><ul><li>微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。</li><li>网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，然后在向内传播给后代元素。</li></ul><p>W3C综合了两个公司的方案，将事件传播分成了三个阶段：</p><ul><li>捕获阶段：在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件。</li><li>目标阶段：事件捕获到目标元素，捕获结束开始在目标元素上触发事件。</li><li>冒泡阶段：事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件。</li></ul><p>IE8及以下的浏览器中没有捕获阶段，其他浏览器在调用方法时处理。</p><h4 id="6-3-3-事件的冒泡"><a href="#6-3-3-事件的冒泡" class="headerlink" title="6.3.3 事件的冒泡"></a>6.3.3 事件的冒泡</h4><p>事件的冒泡，指的是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发。</p><p>如果不希望发生事件冒泡可以取消冒泡：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">  <span class="comment">// 已弃用，不建议</span></span><br><span class="line">  event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 建议</span></span><br><span class="line">  event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取消冒泡并不会取消元素的默认动作，比如超链接的默认跳转，可以使用<code>preventDefault()</code>方法取消默认动作：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="comment">// 取消跳转，但不能阻止冒泡</span></span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既可以取消冒泡，又可以取消默认动作：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="comment">// 取消跳转，阻止冒泡</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-4-事件的绑定"><a href="#6-3-4-事件的绑定" class="headerlink" title="6.3.4 事件的绑定"></a>6.3.4 事件的绑定</h4><p>给元素绑定事件有两种方式：</p><ul><li>通过<code>元素.事件 = 函数</code>的方式绑定，一个事件只支持绑定一个函数，后面的会覆盖前面的：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过方法绑定，一个事件可以绑定多个函数，但是需要兼容不同的浏览器：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="comment">// 在页面加载后绑定</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">bindClick</span>(home, <span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;first&#x27;</span>);</span><br><span class="line">  <span class="title function_">bindClick</span>(home, <span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;last&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 通用的绑定方法，将handle()方法绑定到传入的对象上</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindClick</span>(<span class="params">obj, eventStr, name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">    <span class="comment">// 大部分浏览器兼容的方式，需要使用没有on前缀的事件</span></span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(eventStr, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// 在addEventListener()方法中，this对象是绑定的事件对象</span></span><br><span class="line">      <span class="title function_">handle</span>(name);</span><br><span class="line">    &#125;, <span class="literal">false</span>);<span class="comment">// 如果希望在捕获阶段就触发事件，可以设置为true，一般为false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// IE8及以下，需要使用有on前缀的事件</span></span><br><span class="line">    obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// 在attachEvent()方法中，this对象是window对象</span></span><br><span class="line">      handle.<span class="title function_">call</span>(obj, name);<span class="comment">// 调用回调函数，强制将this对象设为绑定的事件对象</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通用的执行方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-浏览器对象模型"><a href="#7-浏览器对象模型" class="headerlink" title="7 浏览器对象模型"></a>7 浏览器对象模型</h2><h3 id="7-1-定义"><a href="#7-1-定义" class="headerlink" title="7.1 定义"></a>7.1 定义</h3><p>浏览器对象模型（BOM，Browser Object Model），允许JavaScript与浏览器交互。</p><p>BOM提供了一组对象用于对浏览器进行操作：</p><ul><li>Window：代表的是整个浏览器的窗口，同时window也是网页中的全局对象。</li><li>Navigator：代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器。</li><li>Location：代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面。</li><li>History：代表浏览器历史记录，可以通过该对象来操作浏览器的历史记录。由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页。而且该操作只在当次访问时有效。</li><li>Screen：代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息。</li></ul><p>这些BOM对象（全局对象）在浏览器中都是作为window对象的属性保存的，可以通过window对象来使用，也可以直接使用。</p><h3 id="7-2-使用"><a href="#7-2-使用" class="headerlink" title="7.2 使用"></a>7.2 使用</h3><h4 id="7-2-1-Window对象"><a href="#7-2-1-Window对象" class="headerlink" title="7.2.1 Window对象"></a>7.2.1 Window对象</h4><p>Window对象的属性和方法可以省略直接使用。</p><p>Window对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">document</span>);<span class="comment">// 返回Document对象的只读引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>);<span class="comment">// 返回Navigator对象的只读引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>);<span class="comment">// 返回Location对象的只读引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">history</span>);<span class="comment">// 返回History对象的只读引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">screen</span>);<span class="comment">// 返回Screen对象的只读引用</span></span><br></pre></td></tr></table></figure><p>Window对象方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭浏览器窗口</span></span><br><span class="line"><span class="title function_">close</span>();</span><br><span class="line"><span class="comment">// 打开新的浏览器窗口</span></span><br><span class="line"><span class="title function_">open</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;_blank&#x27;</span>,<span class="string">&#x27;width=200,height=100&#x27;</span>);</span><br><span class="line"><span class="comment">// 显示带有消息和确认按钮的警告框</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;警告框&#x27;</span>);</span><br><span class="line"><span class="comment">// 显示带有消息以及确认按钮和取消按钮的对话框</span></span><br><span class="line"><span class="title function_">confirm</span>(<span class="string">&#x27;确认框&#x27;</span>);</span><br><span class="line"><span class="comment">// 按照指定的时间执行定时函数</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3秒后打印 &#x27;</span> + name);</span><br><span class="line">&#125;, <span class="number">3000</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="comment">// 取消设置的定时函数，在执行前有效</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(obj);</span><br><span class="line"><span class="comment">// 按照指定的时间（以毫秒计）重复调用函数</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id++ + <span class="string">&#x27; &#x27;</span> + name);</span><br><span class="line">  <span class="keyword">if</span> (id &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="comment">// 取消设置的重复调用函数</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">100</span>, <span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="7-2-2-Navigator对象"><a href="#7-2-2-Navigator对象" class="headerlink" title="7.2.2 Navigator对象"></a>7.2.2 Navigator对象</h4><p>Navigator对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">appName</span>);<span class="comment">// 返回浏览器的名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">appCodeName</span>);<span class="comment">// 返回浏览器的代码名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">lappVersioncation</span>);<span class="comment">// 返回浏览器的平台和版本信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">platform</span>);<span class="comment">// 返回运行浏览器的操作系统平台</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">userAgent</span>);<span class="comment">// 返回由客户机发送服务器的代理信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">language</span>);<span class="comment">// 返回浏览器使用的语言</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">product</span>);<span class="comment">// 返回浏览器使用的引擎（产品）</span></span><br></pre></td></tr></table></figure><p>由于历史原因，Navigator对象中的大部分属性都已经不能识别浏览器了，一般只使用userAgent来判断浏览器的信息。</p><h4 id="7-2-3-Location对象"><a href="#7-2-3-Location对象" class="headerlink" title="7.2.3 Location对象"></a>7.2.3 Location对象</h4><p>Location对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);<span class="comment">// 返回URL的锚部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">host</span>);<span class="comment">// 返回URL的主机名和端口</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hostname</span>);<span class="comment">// 返回URL的主机名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>);<span class="comment">// 返回完整的URL</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">pathname</span>);<span class="comment">// 返回的URL路径名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">port</span>);<span class="comment">// 返回URL服务器使用的端口号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">protocol</span>);<span class="comment">// 返回URL协议</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>);<span class="comment">// 返回URL的查询部分</span></span><br></pre></td></tr></table></figure><p>Location对象方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">assign</span>();<span class="comment">// 载入新的文档，相当于给location对象赋值</span></span><br><span class="line">location.<span class="title function_">reload</span>(<span class="literal">true</span>);<span class="comment">// 重新加载当前页面，相当于刷新，参数为true表示清空缓存</span></span><br><span class="line">location.<span class="title function_">replace</span>();<span class="comment">// 用新的文档替换当前文档，不能使用历史记录，不能使用后退</span></span><br></pre></td></tr></table></figure><h4 id="7-2-4-History对象"><a href="#7-2-4-History对象" class="headerlink" title="7.2.4 History对象"></a>7.2.4 History对象</h4><p>History对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">length</span>);<span class="comment">// 返回历史列表中的网址数</span></span><br></pre></td></tr></table></figure><p>History对象方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">back</span>();<span class="comment">// 加载历史列表中的前一个URL</span></span><br><span class="line">location.<span class="title function_">forward</span>();<span class="comment">// 加载历史列表中的下一个URL</span></span><br><span class="line">location.<span class="title function_">go</span>(<span class="number">1</span>);<span class="comment">// 加载历史列表中的某个具体页面，参数大于0时前进，参数小于0时后退</span></span><br></pre></td></tr></table></figure><h4 id="7-2-5-Screen对象"><a href="#7-2-5-Screen对象" class="headerlink" title="7.2.5 Screen对象"></a>7.2.5 Screen对象</h4><p>Screen对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">height</span>);<span class="comment">// 返回屏幕的总高度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">width</span>);<span class="comment">// 返回屏幕的总宽度</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了JS中常用的概念，以及基本语法。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>移动端</title>
    <link href="https://momashanhe.com/posts/20240519/111744/"/>
    <id>https://momashanhe.com/posts/20240519/111744/</id>
    <published>2024-05-19T03:17:44.000Z</published>
    <updated>2024-08-13T04:27:52.238Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了在移动端开发需要注意的一些问题。</p><span id="more"></span><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>一般来说，移动端需要在屏幕远小于电脑端时，支持显示几乎相同分辨率的图像，所以移动端的逻辑像素要比电脑端的逻辑像素小。</p><p>默认情况下，如果未对网页适配移动端，移动端的浏览器会将视口设置为980px，以确保网页可以在移动端正常访问，此时将980px作为物理像素。</p><p>当网页宽度不超过980px时，将980px作为逻辑像素，像素比为980px&#x2F;980px&#x3D;1，网页能正常显示。当网页宽度超过了980px时，将网页宽度作为逻辑像素，像素比为980px&#x2F;网页宽度&lt;1，网页会被缩小。</p><p>为了能让移动端正常显示网页，大部分网站都会专门为移动端设计网页。</p><h2 id="2-完美视口"><a href="#2-完美视口" class="headerlink" title="2 完美视口"></a>2 完美视口</h2><p>为了让网页能在移动端合理显示，避免网页被缩小，需要根据网页的逻辑像素和移动端屏幕的最佳像素比调整视口的物理像素，可以在<code>meta</code>元素设置：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=200px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置最佳视口，可以让浏览器根据网页的逻辑像素，自动计算视口最佳的物理像素，实现完美视口：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置了视口的物理像素后，当网页的逻辑像素超出后，会使用滚动条加载页面，不会缩放页面，保证文字和内容显示正常。</p><h2 id="3-适配不同屏幕"><a href="#3-适配不同屏幕" class="headerlink" title="3 适配不同屏幕"></a>3 适配不同屏幕</h2><p>虽然设置完美视口能够解决缩放的问题，但不同设备的完美视口是不同的，在某个设备上使用200px能够撑满宽度，但是在其他设备上可能就只显示半屏，所以还需要适配不同的屏幕。</p><h3 id="3-1-使用百分比"><a href="#3-1-使用百分比" class="headerlink" title="3.1 使用百分比"></a>3.1 使用百分比</h3><p>使用百分比代替像素值，依据父元素的内容大小使用百分比。</p><p>这种方式可以避免使用像素带来的问题，但是如果父元素设置了边框或者边距，使用起来就比较麻烦。</p><p>只能在某些场景下使用，并不是完全取代像素的解决方案。</p><h3 id="3-2-使用视口百分比"><a href="#3-2-使用视口百分比" class="headerlink" title="3.2 使用视口百分比"></a>3.2 使用视口百分比</h3><p>使用视口的百分比代替像素值，单位是vw和vh，分别是水平方向和垂直方向。</p><p>在使用时，需要按照视口设置的物理像素，将设计图里的逻辑像素转化为视口百分比。</p><p>示例：</p><ul><li>第一步：假设网页宽度为750px，计算1px对应的vw：100÷750≈0.1333vw</li><li>第二步：假设容器宽度为200px，计算对应的vw：200×0.1333&#x3D;26.6666vw</li><li>第三步：使用26.6666vw作为容器宽度，替换200px</li></ul><p>这种方式不依赖父元素，能够按照比例适配不同屏幕，但是在计算的时候比较麻烦。</p><h3 id="3-3-使用字体倍数"><a href="#3-3-使用字体倍数" class="headerlink" title="3.3 使用字体倍数"></a>3.3 使用字体倍数</h3><p>使用字体倍数rem代替像素值，rem对应的是根元素的字体大小，这种方式是使用视口百分比的补充。</p><p>实例：</p><ul><li>第一步：假设网页宽度为750px，计算1px对应的vw：100÷750≈0.1333vw</li><li>第二步：为了防止字体过小被浏览器改为默认的12px，建议设置网页根元素的字体大小为40px，计算对应的vw：40×0.1333&#x3D;5.3333vw</li><li>第三步：使用5.3333vw作为网页根元素的字体大小，替换40px</li><li>第四步：假设容器宽度为200px，使用字体大小将px转为rem：200÷40&#x3D;5rem</li><li>第五步：使用5rem作为容器宽度，替换200px</li></ul><p>这种方式本质上使用的还是视口百分比，但是在计算的时候使用字体大小计算，更简单一些。</p><p>在实际开发中，并不是完全禁止使用px作为单位，如果需要根据屏幕进行缩放，才需要考虑避免使用px带来的问题。</p><h2 id="4-响应式布局"><a href="#4-响应式布局" class="headerlink" title="4 响应式布局"></a>4 响应式布局</h2><h3 id="4-1-匹配媒体查询"><a href="#4-1-匹配媒体查询" class="headerlink" title="4.1 匹配媒体查询"></a>4.1 匹配媒体查询</h3><p>浏览器可以通过媒体查询得到当前访问浏览器的设备类型，使用<code>@media</code>指定对不同媒体的样式处理，在不同设备访问时得到不同样式。</p><p>匹配媒体类型：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> 媒体类型 &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>媒体查询也遵循样式的覆盖原则，所以需要将媒体查询写在正常样式下面，避免被覆盖失效。</p><p>常用媒体类型：</p><ul><li>all：匹配所有设备。</li><li>screen：匹配屏幕，包括电脑屏幕、平板屏幕、手机屏幕、等等。</li><li>print：匹配打印机，在打印时使用的样式。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的媒体类型可以参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media">MDN媒体类型</a></p><h3 id="4-2-匹配媒体特性"><a href="#4-2-匹配媒体特性" class="headerlink" title="4.2 匹配媒体特性"></a>4.2 匹配媒体特性</h3><p>除了通过媒体类型设置不同的样式，也可以通过媒体特征匹配不同的样式。</p><p>匹配媒体特征：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (属性名: 属性值) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当匹配到指定的特征时，应用指定的样式。</p><p>常用媒体特征：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>width</td>      <td>匹配视口宽度，视口宽度匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>max-width</td>      <td>匹配视口最大宽度，视口宽度小于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>min-width</td>      <td>匹配视口最小宽度，视口宽度大于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>height</td>      <td>匹配视口高度，视口高度匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>max-height</td>      <td>匹配视口最大高度，视口高度小于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>min-height</td>      <td>匹配视口最小高度，视口高度大于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>device-width</td>      <td>匹配设备屏幕的宽度，设备屏幕宽度匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>max-device-width</td>      <td>匹配设备屏幕的最大宽度，设备屏幕宽度小于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>min-device-width</td>      <td>匹配设备屏幕的最小宽度，设备屏幕宽度大于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>orientation</td>      <td>检测视口的旋转方向，即屏幕是否横屏</td>      <td>        portrait：视口处于纵向，即高度大于等于宽度<br>        landscape：视口处于横向，即宽度大于高度<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">10px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见用于区分不同等级屏幕的阈值：</p><ul><li>小屏幕：宽度在768px以下。</li><li>中屏幕：宽度在769px到992px之间。</li><li>大屏幕：宽度在992px到1200px之间。</li><li>超大屏幕：宽度在1200px以上。</li></ul><h3 id="4-3-匹配复杂条件"><a href="#4-3-匹配复杂条件" class="headerlink" title="4.3 匹配复杂条件"></a>4.3 匹配复杂条件</h3><p>支持复杂匹配，如果需要同时满足，可以使用运算符连接，如果需要满足任意一个，可以使用逗号分隔。</p><p>可以混合使用媒体查询和媒体特征进行匹配。</p><p>支持的运算符：</p><ul><li>and：并且，匹配全部条件。</li><li>or：或者，匹配任意条件，支持使用逗号<code>,</code>分隔。</li><li>not：否定，匹配相反条件。</li><li>only：肯定，用于让IE浏览器忽略设置的条件和样式，避免部分匹配，对现代浏览器无影响。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用时也可以通过指定条件使用不同的样式文件。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (max-width:768px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./index-small.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了在移动端开发需要注意的一些问题。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Less</title>
    <link href="https://momashanhe.com/posts/20240519/094423/"/>
    <id>https://momashanhe.com/posts/20240519/094423/</id>
    <published>2024-05-19T01:44:23.000Z</published>
    <updated>2024-09-10T05:45:11.195Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了Less的使用。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-预处理器"><a href="#1-1-预处理器" class="headerlink" title="1.1 预处理器"></a>1.1 预处理器</h3><p>在了解Less之前，要先认识什么是CSS预处理器以及其有什么作用。</p><p>增强传统CSS（层叠样式表）功能的脚本语言被称为CSS预处理器，它允许开发人员使用变量、嵌套、混合等功能，以更高效和可维护的方式编写CSS代码。CSS预处理器的另一个术语是动态样式表语言。</p><h3 id="1-2-常见的预处理器"><a href="#1-2-常见的预处理器" class="headerlink" title="1.2 常见的预处理器"></a>1.2 常见的预处理器</h3><h4 id="1-2-1-Less"><a href="#1-2-1-Less" class="headerlink" title="1.2.1 Less"></a>1.2.1 Less</h4><p>Less是一种动态样式语言，它扩展了CSS的功能，提供了变量、嵌套、混合、运算等功能。</p><p>Less使用类似于CSS的语法，但具有更简洁的书写方式。</p><p>Less可以通过Less编译器将Less文件编译为普通的CSS文件。</p><p>Less具有较小的学习曲线，易于上手。</p><p>官网：<a href="https://less.bootcss.com/">https://less.bootcss.com/</a></p><h4 id="1-2-2-Sass"><a href="#1-2-2-Sass" class="headerlink" title="1.2.2 Sass"></a>1.2.2 Sass</h4><p>Sass是一种成熟且广泛使用的CSS预处理器，它提供了许多强大的功能，如变量、嵌套规则、混合、继承等。</p><p>Sass有两种语法：Sass（使用缩进）和 Scss（使用类似于CSS的语法）。</p><p>Sass可以通过命令行工具或构建工具编译为普通的CSS文件。</p><p>Sass具有强大的功能和灵活性，适用于大型项目。</p><p>官网：<a href="https://sass.bootcss.com/index.html">https://sass.bootcss.com/index.html</a></p><h4 id="1-2-3-Scss"><a href="#1-2-3-Scss" class="headerlink" title="1.2.3 Scss"></a>1.2.3 Scss</h4><p>Scss是Sass的一种语法格式，它使用类似于CSS的语法，但具有Sass的功能和特性。</p><p>Scss可以看作是Sass的一种扩展，使用大括号和分号来表示代码块和语句。Scss与Sass兼容，可以在一个项目中同时使用。</p><p>官网：<a href="https://sass.bootcss.com/index.html">https://sass.bootcss.com/index.html</a></p><h4 id="1-2-4-Stylus"><a href="#1-2-4-Stylus" class="headerlink" title="1.2.4 Stylus"></a>1.2.4 Stylus</h4><p>Stylus是一种简洁灵活的CSS预处理器，提供了类似于Sass和Less的功能，如变量、嵌套规则、混合、继承等。</p><p>Stylus使用类似于Python的缩进语法。</p><p>Stylus也可以通过命令行工具或构建工具编译为普通的CSS文件。</p><p>Stylus的语法非常简洁，可以减少样式表的代码量。</p><p>官网：<a href="https://www.stylus-lang.cn/">https://www.stylus-lang.cn/</a></p><h3 id="1-3-选用Less"><a href="#1-3-选用Less" class="headerlink" title="1.3 选用Less"></a>1.3 选用Less</h3><p>Less没有去掉任何CSS的功能，而是在现有的语法上增添了许多额外的功能特性，可以看做是CSS的一种增强版，通过Less可以用更少的代码实现更强大的样式。</p><p>Sass与Stylus相比于Less功能更为丰富，但对于学习成本以及适应时间，Less稍胜一筹。</p><h2 id="2-引入"><a href="#2-引入" class="headerlink" title="2 引入"></a>2 引入</h2><h3 id="2-1-在页面中引入"><a href="#2-1-在页面中引入" class="headerlink" title="2.1 在页面中引入"></a>2.1 在页面中引入</h3><p>如果是在浏览器环境中开发，可以通过引入Less的核心JS库使用Less的功能。</p><p>在官网上下载Less的JS文件，也可以通过GitHub下载：<a href="https://github.com/less/less.js/archive/master.zip">https://github.com/less/less.js/archive/master.zip</a></p><p>使用JS文件对Less进行编译，所以需要在Less代码后引入文件，或者在导入Less文件后引入文件：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在Less代码后引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#d44b4b</span>;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#47d3a4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在导入Less文件后引入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet/less&quot; type=&quot;text/less&quot; href=&quot;styles.less&quot;&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./less.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-通过命令引入"><a href="#2-2-通过命令引入" class="headerlink" title="2.2 通过命令引入"></a>2.2 通过命令引入</h3><p>如果是在Node.js环境中开发，可以使用NPM安装Less：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure><p>使用命令将Less文件转为CSS文件：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc styles.less styles.css</span><br></pre></td></tr></table></figure><h2 id="3-工具"><a href="#3-工具" class="headerlink" title="3 工具"></a>3 工具</h2><p>VS Code：安装<code>Easy Less</code>插件可以在编写Less文件的时候自动创建同名的CSS文件。</p><h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4 使用"></a>4 使用</h2><h3 id="4-1-注释"><a href="#4-1-注释" class="headerlink" title="4.1 注释"></a>4.1 注释</h3><p>以<code>//</code>开头的是单行注释，不会被编译到CSS中。</p><p>以<code>/**/</code>包围的是多行注释，会被编译到CSS中。</p><h3 id="4-2-变量"><a href="#4-2-变量" class="headerlink" title="4.2 变量"></a>4.2 变量</h3><h4 id="4-2-1-变量插值"><a href="#4-2-1-变量插值" class="headerlink" title="4.2.1 变量插值"></a>4.2.1 变量插值</h4><p>使用<code>@</code>声明变量，作为普通属性使用：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@background-color:</span> <span class="number">#f0ffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@background-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将变量作为插值使用，需要使用<code>@&#123;&#125;</code>包裹：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@src:</span> <span class="string">&#x27;./style&#x27;</span>;</span><br><span class="line"><span class="variable">@span:</span> span;</span><br><span class="line"><span class="variable">@color:</span> color;</span><br><span class="line"><span class="variable">@gold:</span> <span class="number">#ffd700</span>;</span><br><span class="line"><span class="variable">@brown:</span> <span class="number">#a52a2a</span>;</span><br><span class="line"><span class="variable">@list:</span> list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;@&#123;src&#125;/body.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@&#123;span&#125;</span> &#123;</span><br><span class="line">  @&#123;<span class="attribute">color&#125;</span>: <span class="variable">@gold</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@brown</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.@&#123;list&#125;</span> &#123;</span><br><span class="line">  @&#123;<span class="attribute">color&#125;</span>: <span class="variable">@gold</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-延迟加载"><a href="#4-2-2-延迟加载" class="headerlink" title="4.2.2 延迟加载"></a>4.2.2 延迟加载</h4><p>当一个变量被声明多次，会取最后一次的值，并从当前作用域往外寻找变量：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#ff1493</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="variable">@color:</span> <span class="number">#ff7f50</span>;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;<span class="comment">// #a52a2a</span></span><br><span class="line">    <span class="variable">@color:</span> <span class="number">#a52a2a</span>;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="variable">@color:</span> <span class="number">#00ffff</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">@color</span>;<span class="comment">// #ffd700</span></span><br><span class="line">      <span class="variable">@color:</span> <span class="number">#ffd700</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-属性变量"><a href="#4-2-3-属性变量" class="headerlink" title="4.2.3 属性变量"></a>4.2.3 属性变量</h4><p>可以将其他属性的值作为变量使用：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7f50</span>;</span><br><span class="line">  <span class="attribute">color</span>: $border-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-混合"><a href="#4-3-混合" class="headerlink" title="4.3 混合"></a>4.3 混合</h3><p>混合就是将一系列属性从一个规则引入到另一个规则集的方式。</p><p>创建混合时，如果没有参数，可以省略<code>()</code>不写，建议保留用来区分正常的选择器，并且保留后不会被编译到CSS文件中。</p><p>调用混合时，前缀使用<code>.</code>和<code>#</code>都可以，如果没有参数，需要和创建混合时的逻辑一致。</p><h4 id="4-3-1-普通混合"><a href="#4-3-1-普通混合" class="headerlink" title="4.3.1 普通混合"></a>4.3.1 普通混合</h4><p>普通混合：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>() &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ffd700</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>();</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-带参数混合"><a href="#4-3-2-带参数混合" class="headerlink" title="4.3.2 带参数混合"></a>4.3.2 带参数混合</h4><p>带参数的混合，不可以省略部分参数：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>,<span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> <span class="variable">@color</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">// .border(1px);// RuntimeError</span></span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>,<span class="number">#ffd700</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带参数默认值的混合，没有参数时使用默认值，按顺序使用：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>:<span class="number">1px</span>,<span class="variable">@color</span>:<span class="number">#ffd700</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> <span class="variable">@color</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-命名参数混合"><a href="#4-3-3-命名参数混合" class="headerlink" title="4.3.3 命名参数混合"></a>4.3.3 命名参数混合</h4><p>带参数名称的混合，按参数名称使用，没有参数名称的按顺序使用：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>:<span class="number">1px</span>,<span class="variable">@color</span>:<span class="number">#ffd700</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> <span class="variable">@color</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="variable">@color</span>:<span class="number">#ffd700</span>,<span class="number">1px</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-4-包含所有参数"><a href="#4-3-4-包含所有参数" class="headerlink" title="4.3.4 包含所有参数"></a>4.3.4 包含所有参数</h4><p>使用<code>@arguments</code>使用传入的所有参数：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>:<span class="number">1px</span>,<span class="variable">@color</span>:<span class="number">#ffd700</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@arguments</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-5-匹配模式"><a href="#4-3-5-匹配模式" class="headerlink" title="4.3.5 匹配模式"></a>4.3.5 匹配模式</h4><p>在名称和参数名相同的混合中，匹配特定的混合：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.size</span>(width,<span class="variable">@width</span>:<span class="number">300px</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.size</span>(height,<span class="variable">@height</span>:<span class="number">30px</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.size</span>(border,<span class="variable">@border</span>:<span class="number">1px</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ffd700</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 万能匹配，可以匹配任何模式</span></span><br><span class="line"><span class="comment">// .size(@_,@size:0) &#123;</span></span><br><span class="line"><span class="comment">//   display: inline-block;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.size</span>(border);<span class="comment">// 默认匹配border中的内容，存在万能匹配时会额外匹配@_中的内容</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-6-命名空间"><a href="#4-3-6-命名空间" class="headerlink" title="4.3.6 命名空间"></a>4.3.6 命名空间</h4><p>支持通过命名空间选择混合，不同命名空间内的混合可以使用相同的名字：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>() &#123;</span><br><span class="line">  <span class="selector-class">.red</span>() &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ff2600</span> solid;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.green</span>() &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#15ff00</span> solid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span><span class="selector-class">.green</span>();</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-7-条件筛选"><a href="#4-3-7-条件筛选" class="headerlink" title="4.3.7 条件筛选"></a>4.3.7 条件筛选</h4><p>支持通过<code>when</code>进行筛选，使用<code>and</code>表示且，使用<code>,</code>表示或，使用<code>not</code>表示非：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>,<span class="variable">@color</span>,<span class="variable">@style</span>) <span class="keyword">when</span> (<span class="variable">@color</span>=<span class="number">#ffd700</span>) <span class="keyword">and</span> (<span class="variable">@style</span>=solid) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> <span class="variable">@color</span> <span class="variable">@style</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.background</span>(<span class="variable">@size</span>,<span class="variable">@color</span>) <span class="keyword">when</span> <span class="keyword">not</span> (<span class="variable">@size</span>&lt;<span class="number">12px</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font</span>(<span class="variable">@size</span>,<span class="variable">@color</span>) <span class="keyword">when</span> (<span class="variable">@size</span>=<span class="number">12px</span>), (<span class="variable">@size</span>=<span class="number">14px</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>,<span class="number">#ffd700</span>,solid);</span><br><span class="line">  <span class="selector-class">.background</span>(<span class="number">12px</span>,<span class="number">#a52a2a</span>);</span><br><span class="line">  <span class="selector-class">.font</span>(<span class="number">12px</span>,<span class="number">#ffd700</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-继承"><a href="#4-4-继承" class="headerlink" title="4.4 继承"></a>4.4 继承</h3><h4 id="4-4-1-并集"><a href="#4-4-1-并集" class="headerlink" title="4.4.1 并集"></a>4.4.1 并集</h4><p>使用<code>&amp;</code>可以让多个选择器应用同样属性，被应用的必须是CSS选择器，不能是混合：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ffd700</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border</span>() &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ffd700</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.border);<span class="comment">// 继承</span></span><br><span class="line">  <span class="selector-class">.border</span>();<span class="comment">// 混合</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>,</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* 继承 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ffd700</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* 混合 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ffd700</span> solid;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2-伪类"><a href="#4-4-2-伪类" class="headerlink" title="4.4.2 伪类"></a>4.4.2 伪类</h4><p>在编译的时候，会在父子级的选择器之间增加空格：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffd700</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffd700</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>&amp;</code>可以直接拼接，实现伪类选择器：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffd700</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffd700</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>&amp;</code>还可以代替父级名称：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-span</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffd700</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a52a2a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffd700</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-运算"><a href="#4-5-运算" class="headerlink" title="4.5 运算"></a>4.5 运算</h3><p>支持使用运算结果的值，单位以最左侧数值的单位为准：</p><figure class="highlight less"><figcaption><span>less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@size1:</span> (<span class="number">20cm</span> + <span class="number">10</span>);<span class="comment">// 30cm</span></span><br><span class="line"><span class="variable">@size2:</span> (<span class="number">20px</span> + <span class="number">10</span>);<span class="comment">// 30px</span></span><br><span class="line"><span class="variable">@size3:</span> (<span class="number">20</span> + <span class="number">10px</span>);<span class="comment">// 30px</span></span><br><span class="line"><span class="variable">@size4:</span> (<span class="number">60px</span> / <span class="number">2cm</span>);<span class="comment">// 30px</span></span><br><span class="line"><span class="variable">@color:</span> (<span class="number">#446622</span> / <span class="number">2</span>);<span class="comment">// #223311</span></span><br><span class="line"><span class="selector-class">.size</span>() &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了Less的使用。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Less" scheme="https://momashanhe.com/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>CSS3新特性</title>
    <link href="https://momashanhe.com/posts/20240416/155528/"/>
    <id>https://momashanhe.com/posts/20240416/155528/</id>
    <published>2024-04-16T07:55:28.000Z</published>
    <updated>2024-08-12T09:24:36.003Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了CSS3的一些新特性。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>CSS3是CSS2的升级版本，它在CSS2的基础上，新增了很多强大的新功能，从而解决一些实际面临的问题。</p><p>CSS3在未来会按照模块化的方式去发展，官方说明：<a href="https://www.w3.org/Style/CSS/current-work.html">说明文档</a></p><p>CSS3的新特性如下：</p><ul><li>新增了更加实用的选择器，例如伪类选择器和伪元素选择器等。</li><li>新增了更好的视觉效果，例如圆角、阴影、渐变等。</li><li>新增了丰富的背景效果，例如支持多个背景图片，同时新增了若干个背景相关的属性。</li><li>新增了全新的布局方案，即弹性盒子。</li><li>新增了Web字体，可以显示用户电脑上没有安装的字体。</li><li>增强了颜色，例如HSL、HSLA、RGBA几种新的颜色模式，新增控制元素透明度的属性。</li><li>增加了2D变形和3D变形，例如旋转、扭曲、缩放、位移等。</li><li>增加动画与过渡效果，让变形更平滑。</li></ul><h3 id="1-2-私有前缀"><a href="#1-2-私有前缀" class="headerlink" title="1.2 私有前缀"></a>1.2 私有前缀</h3><p>W3C标准所提出的某个CSS特性，在被浏览器正式支持之前，需要根据浏览器的内核，通过私有前缀来使用该CSS特性，在浏览器正式支持该CSS特性后，就不需要私有前缀了。</p><p>如下代码中的<code>-webkit-</code>就是私有前缀：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见浏览器私有前缀：</p><ul><li>Chrome浏览器：-webkit-</li><li>Safari浏览器：-webkit-</li><li>Firefox浏览器：-moz-</li><li>Edge浏览器：-webkit-</li><li>Opera浏览器：-o-</li><li>IE浏览器：-ms-</li></ul><p>查询CSS3兼容性的网站：<a href="https://caniuse.com/">caniuse</a></p><p>注意：</p><ul><li>在编码时，不用过于关注浏览器私有前缀，因为主流浏览器都支持常用的CSS3新特性。</li><li>即便是为了老浏览器而加前缀，也可以借助现代的构建工具，比如webpack工具，自动添加私有前缀。</li></ul><h2 id="2-增强"><a href="#2-增强" class="headerlink" title="2 增强"></a>2 增强</h2><h3 id="2-1-新增长度单位"><a href="#2-1-新增长度单位" class="headerlink" title="2.1 新增长度单位"></a>2.1 新增长度单位</h3><p>新增长度单位：</p><ul><li>rem：根元素字体大小的倍数，只与根元素字体大小有关，根元素就是<code>html</code>元素</li><li>vw：视口宽度的百分之多少，10vw就是视口宽度的10%</li><li>vh：视口高度的百分之多少，10vh就是视口高度的10%</li><li>vmax：视口宽高中大的那个的百分之多少</li><li>vmin：视口宽高中小的那个的百分之多少</li></ul><h3 id="2-2-新增颜色表示"><a href="#2-2-新增颜色表示" class="headerlink" title="2.2 新增颜色表示"></a>2.2 新增颜色表示</h3><p>CSS3新增了三种颜色设置方式，分别是RGBA、HSL、HSLA，参考：<a href="/posts/20240402/144927/#5-2-%E9%A2%9C%E8%89%B2">CSS2入门-5-2-颜色</a></p><h3 id="2-3-新增选择器"><a href="#2-3-新增选择器" class="headerlink" title="2.3 新增选择器"></a>2.3 新增选择器</h3><p>CSS3新增的选择器有伪类选择器和伪元素选择器，参考：<a href="/posts/20240402/144927/#3-4-%E9%AB%98%E7%BA%A7%E9%80%89%E6%8B%A9%E5%99%A8">CSS2入门-3-4-高级选择器</a></p><h3 id="2-4-新增盒子属性"><a href="#2-4-新增盒子属性" class="headerlink" title="2.4 新增盒子属性"></a>2.4 新增盒子属性</h3><h4 id="2-4-1-盒子宽高"><a href="#2-4-1-盒子宽高" class="headerlink" title="2.4.1 盒子宽高"></a>2.4.1 盒子宽高</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>resize</td>      <td>是否允许用户设置盒子宽高，需要和<code>overflow</code>属性配合使用</td>      <td>        none：不允许（默认值）<br>        both：允许用户设置盒子宽高<br>        horizontal：只允许用户设置盒子宽度<br>        vertical：只允许用户设置盒子高度<br>      </td>    </tr>  </tbody></table><h4 id="2-4-2-怪异盒子"><a href="#2-4-2-怪异盒子" class="headerlink" title="2.4.2 怪异盒子"></a>2.4.2 怪异盒子</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>box-sizing</td>      <td>设置盒模型的类型</td>      <td>        content-box：<code>width</code>和<code>height</code>设置的是盒子内容区的大小（默认值）<br>        border-box：<code>width</code>和<code>height</code>设置的是盒子总大小（怪异盒子）<br>      </td>    </tr>  </tbody></table><h4 id="2-4-3-盒子阴影"><a href="#2-4-3-盒子阴影" class="headerlink" title="2.4.3 盒子阴影"></a>2.4.3 盒子阴影</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>box-shadow</td>      <td>添加阴影</td>      <td>        h-shadow：水平阴影的位置，必填，填写数值，可以为负值<br>        v-shadow：垂直阴影的位置，必填，填写数值，可以为负值<br>        blur：可选，模糊距离，填写数值<br>        spread：可选，阴影的外延值，填写数值<br>        color：可选，阴影的颜色，填写颜色代码<br>        inset：可选，将外部阴影改为内部阴影，填写<code>inset</code>固定字符串<br>        none：没有阴影（默认值）<br>      </td>    </tr>  </tbody></table><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: 水平位置 垂直位置 模糊距离 外延值 颜色 inset;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>只有先设置<code>blur</code>属性，才能再设置<code>spread</code>属性，只存在<code>spread</code>属性会被当做<code>blur</code>属性。</li></ul><h4 id="2-4-4-不透明度"><a href="#2-4-4-不透明度" class="headerlink" title="2.4.4 不透明度"></a>2.4.4 不透明度</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>opacity</td>      <td>添加透明效果</td>      <td>0到1之间的小数，0是完全透明，1表示完全不透明</td>    </tr>  </tbody></table><h3 id="2-5-新增背景属性"><a href="#2-5-新增背景属性" class="headerlink" title="2.5 新增背景属性"></a>2.5 新增背景属性</h3><h4 id="2-5-1-背景尺寸"><a href="#2-5-1-背景尺寸" class="headerlink" title="2.5.1 背景尺寸"></a>2.5.1 背景尺寸</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>background-size</td>      <td>设置背景的尺寸</td>      <td>        用长度值指定背景图片宽高，不允许负值<br>        用百分比指定背景图片宽高，不允许负值<br>        auto：背景图片的真实大小（默认值）<br>        contain：将背景图片等比缩放，包含在容器内，保证背景在容器内完整显示<br>        cover：将背景图片等比缩放，覆盖到容器内，保证容器内全都有背景显示<br>      </td>    </tr>  </tbody></table><h4 id="2-5-2-背景原点"><a href="#2-5-2-背景原点" class="headerlink" title="2.5.2 背景原点"></a>2.5.2 背景原点</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>background-origin</td>      <td>设置背景的原点</td>      <td>        padding-box：从padding区域开始显示背景图像（默认值）<br>        border-box：从border区域开始显示背景图像<br>        content-box：从content区域开始显示背景图像<br>      </td>    </tr>  </tbody></table><h4 id="2-5-3-背景裁剪"><a href="#2-5-3-背景裁剪" class="headerlink" title="2.5.3 背景裁剪"></a>2.5.3 背景裁剪</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>background-clip</td>      <td>设置背景的向外裁剪的区域</td>      <td>        border-box：从border区域开始向外裁剪背景（默认值）<br>        padding-box：从padding区域开始向外裁剪背景<br>        content-box：从content区域开始向外裁剪背景<br>        text：只在文字上显示背景，前提是<code>color</code>属性值为transparent透明色<br>      </td>    </tr>  </tbody></table><h4 id="2-5-4-背景附着"><a href="#2-5-4-背景附着" class="headerlink" title="2.5.4 背景附着"></a>2.5.4 背景附着</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>background-attachment</td>      <td>设置背景在视口内的附着方式，是否跟随页面的滚动条滚动，是否跟随元素的滚动条滚动</td>      <td>        scroll：背景相对于元素固定，不跟随元素的滚动条滚动，会跟随页面的滚动条滚动（默认值）<br>        fixed：背景相对于视口固定，不跟随元素的滚动条滚动，不跟随页面的滚动条滚动<br>        local：背景相对于元素内容固定，会跟随元素的滚动条滚动，会跟随页面的滚动条滚动<br>      </td>    </tr>  </tbody></table><h4 id="2-5-5-颜色渐变"><a href="#2-5-5-颜色渐变" class="headerlink" title="2.5.5 颜色渐变"></a>2.5.5 颜色渐变</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>background-image</td>      <td>设置背景的渐变颜色</td>      <td>        linear-gradient：线性渐变，沿直线渐变<br>        radial-gradient：径向渐变，沿弧线渐变<br>        repeating-linear-gradient：循环线性渐变，在没有发生渐变的位置，继续进行线性渐变<br>        repeating-radial-gradient：循环径向渐变，在没有发生渐变的位置，继续进行径向渐变<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 线性渐变，默认从上到下渐变 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red,yellow,green);</span><br><span class="line"><span class="comment">/* 线性渐变，使用关键词调整渐变方向 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right top,red,yellow,green);</span><br><span class="line"><span class="comment">/* 线性渐变，使用角度调整渐变方向 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,red,yellow,green);</span><br><span class="line"><span class="comment">/* 线性渐变，使用像素值调整渐变位置 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red <span class="number">50px</span>,yellow <span class="number">100px</span>,green <span class="number">150px</span>);</span><br><span class="line"><span class="comment">/* 径向渐变，默认从圆心四散 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(red,yellow,green);</span><br><span class="line"><span class="comment">/* 径向渐变，使用关键词调整渐变圆心位置 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(at right top,red,yellow,green);</span><br><span class="line"><span class="comment">/* 径向渐变，使用像素值调整渐变圆心位置 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(at <span class="number">100px</span> <span class="number">50px</span>,red,yellow,green);</span><br><span class="line"><span class="comment">/* 径向渐变，使用关键字调整渐变形状为正圆 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle,red,yellow,green);</span><br><span class="line"><span class="comment">/* 径向渐变，使用像素值调整渐变半径 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(<span class="number">50px</span> <span class="number">100px</span>,red,yellow,green);</span><br><span class="line"><span class="comment">/* 径向渐变，使用像素值调整渐变半径和渐变圆心位置 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(<span class="number">50px</span> <span class="number">100px</span> at <span class="number">100px</span> <span class="number">50px</span>,red,yellow,green);</span><br><span class="line"><span class="comment">/* 径向渐变，使用像素值调整渐变位置 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(red <span class="number">50px</span>,yellow <span class="number">100px</span>,green <span class="number">150px</span>);</span><br></pre></td></tr></table></figure><h4 id="2-5-6-复合属性"><a href="#2-5-6-复合属性" class="headerlink" title="2.5.6 复合属性"></a>2.5.6 复合属性</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>background</td>      <td>设置背景复合属性</td>      <td>包含全部背景属性，空格分隔</td>    </tr>  </tbody></table><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: 颜色 图片地址 重复方式 定位 / 尺寸 原点 裁剪方式;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>原点和裁剪方式的取值相同，如果只写一个值，则表示都设置，如果写了两个值，前面的是原点，后面的是裁剪方式。</li><li>尺寸必须写在定位的后面，并且用<code>/</code>分开。</li></ul><h4 id="2-5-7-多背景图"><a href="#2-5-7-多背景图" class="headerlink" title="2.5.7 多背景图"></a>2.5.7 多背景图</h4><p>CSS3允许元素设置多个背景图片。</p><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/bg-lt.png</span>) no-repeat left top,</span><br><span class="line">            <span class="built_in">url</span>(<span class="string">images/bg-rt.png</span>) no-repeat right top,</span><br><span class="line">            <span class="built_in">url</span>(<span class="string">images/bg-lb.png</span>) no-repeat left bottom,</span><br><span class="line">            <span class="built_in">url</span>(<span class="string">images/bg-rb.png</span>) no-repeat right bottom;</span><br></pre></td></tr></table></figure><h3 id="2-6-新增边框属性"><a href="#2-6-新增边框属性" class="headerlink" title="2.6 新增边框属性"></a>2.6 新增边框属性</h3><h4 id="2-6-1-边框圆角"><a href="#2-6-1-边框圆角" class="headerlink" title="2.6.1 边框圆角"></a>2.6.1 边框圆角</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>border-radius</td>      <td>复合属性，将盒子边框的四个角变为圆角，通过设置半径控制圆角范围</td>      <td>长度值，支持分别设置四个角的不同半径</td>    </tr>    <tr>      <td>border-top-left-radius</td>      <td>设置左上角圆角半径</td>      <td>长度值，支持分别设置水平半径和垂直半径</td>    </tr>    <tr>      <td>border-top-right-radius</td>      <td>设置右上角圆角半径</td>      <td>长度值，支持分别设置水平半径和垂直半径</td>    </tr>    <tr>      <td>border-bottom-left-radius</td>      <td>设置左下角圆角半径</td>      <td>长度值，支持分别设置水平半径和垂直半径</td>    </tr>    <tr>      <td>border-bottom-right-radius</td>      <td>设置右下角圆角半径</td>      <td>长度值，支持分别设置水平半径和垂直半径</td>    </tr>  </tbody></table><h4 id="2-6-2-边框外轮廓"><a href="#2-6-2-边框外轮廓" class="headerlink" title="2.6.2 边框外轮廓"></a>2.6.2 边框外轮廓</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>outline-width</td>      <td>外轮廓的宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>outline-color</td>      <td>外轮廓的宽度</td>      <td>颜色代码</td>    </tr>    <tr>      <td>outline-style</td>      <td>外轮廓的风格</td>      <td>        none：无轮廓（默认值）<br>        dotted：点状轮廓<br>        dashed：虚线轮廓<br>        solid：实线轮廓<br>        double：双线轮廓<br>      </td>    </tr>    <tr>      <td>outline-offset</td>      <td>设置外轮廓与边框的距离，正负值都可以设置</td>      <td>长度值</td>    </tr>    <tr>      <td>outline</td>      <td>复合属性</td>      <td>可以包含除<code>outline-offset</code>之外的其他样式，空格分隔</td>    </tr>  </tbody></table><h3 id="2-7-新增文本属性"><a href="#2-7-新增文本属性" class="headerlink" title="2.7 新增文本属性"></a>2.7 新增文本属性</h3><h4 id="2-7-1-文本阴影"><a href="#2-7-1-文本阴影" class="headerlink" title="2.7.1 文本阴影"></a>2.7.1 文本阴影</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>text-shadow</td>      <td>给文本添加阴影</td>      <td>        h-shadow：水平阴影的位置，必填，填写数值，可以为负值<br>        v-shadow：垂直阴影的位置，必填，填写数值，可以为负值<br>        blur：可选，模糊距离，填写数值<br>        color：可选，阴影的颜色，填写颜色代码<br>        none：没有阴影（默认值）<br>      </td>    </tr>  </tbody></table><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: 水平位置 垂直位置 模糊距离 颜色;</span><br></pre></td></tr></table></figure><h4 id="2-7-2-文本换行"><a href="#2-7-2-文本换行" class="headerlink" title="2.7.2 文本换行"></a>2.7.2 文本换行</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>white-space</td>      <td>设置文本换行方式</td>      <td>        normal：文本超出边界自动换行，文本中的换行被浏览器识别为一个空格（默认值）<br>        pre：原样输出，与<code>pre</code>元素的效果相同，超出元素边界不换行<br>        pre-wrap：原样输出，超出元素边界自动换行<br>        pre-line：原样输出，超出元素边界自动换行，只识别文本中的空格，首尾的空格会忽略<br>        nowrap：强制不换行<br>      </td>    </tr>  </tbody></table><h4 id="2-7-3-文本溢出"><a href="#2-7-3-文本溢出" class="headerlink" title="2.7.3 文本溢出"></a>2.7.3 文本溢出</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>text-overflow</td>      <td>设置文本内容溢出时的呈现模式</td>      <td>        clip：当内联内容溢出时，将溢出部分裁切掉（默认值）<br>        ellipsis：当内联内容溢出块容器时，将溢出部分替换为<code>...</code><br>      </td>    </tr>  </tbody></table><p>注意：</p><ul><li>要使得<code>text-overflow</code>属性生效，块容器必须显式定义<code>overflow</code>属性值为非<code>visible</code>的其他值，同时设置<code>white-space</code>属性值为<code>nowrap</code>。</li></ul><h4 id="2-7-4-文本修饰"><a href="#2-7-4-文本修饰" class="headerlink" title="2.7.4 文本修饰"></a>2.7.4 文本修饰</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>text-decoration</td>      <td>复合属性，升级了文本修饰</td>      <td>包含其他样式，空格分隔</td>    </tr>    <tr>      <td>text-decoration-line</td>      <td>设置文本装饰线的位置</td>      <td>        none：指定文字无装饰（默认值）<br>        underline：指定文字的装饰是下划线<br>        overline：指定文字的装饰是上划线<br>        line-through：指定文字的装饰是贯穿线<br>      </td>    </tr>    <tr>      <td>text-decoration-style</td>      <td>设置文本装饰线条的形状</td>      <td>        solid：实线（默认）<br>        double：双线<br>        dotted：点状线条<br>        dashed：虚线<br>        wavy：波浪线<br>      </td>    </tr>    <tr>      <td>text-decoration-color</td>      <td>设置文本装饰线条的颜色</td>      <td>颜色代码</td>    </tr>  </tbody></table><h4 id="2-7-5-文本描边"><a href="#2-7-5-文本描边" class="headerlink" title="2.7.5 文本描边"></a>2.7.5 文本描边</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>-webkit-text-stroke-width</td>      <td>设置文字描边的宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>-webkit-text-stroke-color</td>      <td>设置文字描边的颜色</td>      <td>颜色代码</td>    </tr>    <tr>      <td>-webkit-text-stroke</td>      <td>复合属性，设置文字描边宽度和颜色</td>      <td>包含其他样式，空格分隔</td>    </tr>  </tbody></table><p>注意：</p><ul><li>文字描边功能仅<code>webkit</code>内核浏览器支持。</li></ul><h3 id="2-8-新增字体属性"><a href="#2-8-新增字体属性" class="headerlink" title="2.8 新增字体属性"></a>2.8 新增字体属性</h3><h4 id="2-8-1-基本用法"><a href="#2-8-1-基本用法" class="headerlink" title="2.8.1 基本用法"></a>2.8.1 基本用法</h4><p>可以通过<code>@font-face</code>指定字体的具体地址，浏览器会自动下载该字体，这样就不依赖用户电脑上的字体了。</p><p>基础语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;定制字体&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;webfont.ttf&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兼容语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;定制字体&quot;</span>;</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;webfont.eot&#x27;</span>); <span class="comment">/* IE9 */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;webfont.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>), <span class="comment">/* IE6-IE8 */</span></span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;webfont.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;webfont.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), <span class="comment">/* Chrome, Firefox */</span></span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;webfont.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>), <span class="comment">/* Chrome, Firefox, Opera, Safari, Android*/</span></span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;webfont.svg#webfont&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>); <span class="comment">/* IOS 4.1- */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-2-定制字体"><a href="#2-8-2-定制字体" class="headerlink" title="2.8.2 定制字体"></a>2.8.2 定制字体</h4><p>中文的字体文件很大，使用完整的字体文件不现实，通常针对某几个文字进行单独定制。</p><p>可使用阿里Web字体定制工具：<a href="https://www.iconfont.cn/webfont">阿里Web字体定制</a></p><h4 id="2-8-3-字体图标"><a href="#2-8-3-字体图标" class="headerlink" title="2.8.3 字体图标"></a>2.8.3 字体图标</h4><p>好处：</p><ul><li>相比图片更加清晰，因为字体图标是矢量图，不会在放大后失真。</li><li>灵活性高，更方便改变大小、颜色、风格等。</li><li>兼容性好，IE也能支持。</li></ul><p>常用字体图标库：</p><ul><li>Font Awesome，优点是版权清晰，缺点是数量比较少，官网地址：<a href="https://fontawesome.com/">Font Awesome</a></li><li>阿里图标，优点是数量多，种类多，缺点是版权不清晰，并且需要登录，官网地址：<a href="https://www.iconfont.cn/">阿里图标官网</a></li></ul><div class="tabs" id="tab-tab-id-2"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-2-1">Font Awesome</a></li><li class="tab"><a class="#tab-id-2-2">阿里图标</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-2-1"><p>Font Awesome字体图标使用步骤：</p><ol><li>下载并解压。</li><li>将css和webfonts移动到项目中，css用于声明字体图标名称使用的字体，webfonts中包含了实现图标样式的字体文件。</li><li>将all.css引入到网页中：<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./fa/css/all.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用图标字体。</li></ol><p>Font Awesome字体图标使用方式：</p><ul><li>方式一：在元素（通常是<code>i</code>元素）中使用<code>class</code>属性，通过样式和名称使用，样式支持简写：<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa-solid fa-car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>方式二：通过CSS样式选择器选中元素后，通过伪元素设置编码和字体使用，支持颜色和外边距等其他样式：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\f1b9&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Font Awesome 5 Free&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">900</span>; </span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方式三：还可以通过实体的方式使用，不过不太常用：<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fas&quot;</span>&gt;</span>&amp;#xf1b9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>Font Awesome字体图标说明：</p><ul><li>免费版的样式有<code>solid</code>和<code>brands</code>，分别代表实心图标和品牌图标，<code>solid</code>样式同类的高级样式还有<code>regular</code>等样式，不过这些高级样式是收费的。</li><li><code>solid</code>样式对应<code>Font Awesome 5 Free</code>字体，<code>brands</code>对应<code>Font Awesome 5 Brands</code>字体。</li><li>名称和编码可以在官网查到，每个图标的名称和编码一般是不同的。</li></ul></div><div class="tab-pane" id="tab-id-2-2"><p>阿里图标使用方式：</p><ul><li>方式一：下载到本地，参考下载后的说明文档使用即可，方法和Font Awesome类似，也有三种方式。</li><li>方式二：在线使用，引入阿里服务器上的文件，其他和下载到本地类似。</li></ul></div></div></div><h3 id="2-9-新增对象属性"><a href="#2-9-新增对象属性" class="headerlink" title="2.9 新增对象属性"></a>2.9 新增对象属性</h3><h4 id="2-9-1-元素位置"><a href="#2-9-1-元素位置" class="headerlink" title="2.9.1 元素位置"></a>2.9.1 元素位置</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>object-position</td>      <td>设置对象元素的原点</td>      <td>        使用两个维度定位，空格分隔，有多种方式：<br>        <dl>          <dt>1. 使用关键字<code>(水平 垂直)</code>设置位置：</dt>          <dd>水平：left、center、right</dd>          <dd>垂直：top、center、bottom</dd>          <dd>如果只写一个值，另一个方向的值取center</dd>          <dt>2. 使用坐标<code>(x y)</code>设置图片左上角的位置，以元素左上角为坐标原点：</dt>          <dd>如果只写一个值，会被当做x坐标，y坐标取center</dd>          <dt>3. 使用边缘距离设置图片位置，必须有四个值，分为前后两组：</dt>          <dd>一组代表上下，另一组代表左右，顺序没有要求</dd>          <dd>每组第一个值代表方向，第二个值代表边距</dd>        </dl>      </td>    </tr>  </tbody></table><h4 id="2-5-3-元素裁剪"><a href="#2-5-3-元素裁剪" class="headerlink" title="2.5.3 元素裁剪"></a>2.5.3 元素裁剪</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>object-fit</td>      <td>设置对象元素的向外裁剪的区域</td>      <td>        fill：对象被填充，对象将被拉伸以适应内容框（默认值）<br>        contain：对象被包含，对象将被保持比例缩放以适应内容框，宽高比不匹配时被添加黑边<br>        cover：对象被覆盖，对象将被保持比例缩放以适应内容框，宽高比不匹配时被裁剪<br>        none：被替换的内容将保持其原有的尺寸<br>      </td>    </tr>  </tbody></table><h2 id="3-变形"><a href="#3-变形" class="headerlink" title="3 变形"></a>3 变形</h2><h3 id="3-1-2D变形"><a href="#3-1-2D变形" class="headerlink" title="3.1 2D变形"></a>3.1 2D变形</h3><h4 id="3-1-1-坐标系"><a href="#3-1-1-坐标系" class="headerlink" title="3.1.1 坐标系"></a>3.1.1 坐标系</h4><p>在学习2D变形和3D变形之前，需要先了解CSS中的坐标系。</p><p>原点：</p><ul><li>默认在盒子的左上角，包括边框但不包括外边距。</li></ul><p>中心：</p><ul><li>默认在盒子的几何中心，即两条对角线的交点。</li></ul><p>维度：</p><ul><li>坐标原点的横向被看作X轴，正值在坐标原点往右，负值在坐标原点往左。</li><li>坐标原点的纵向被看作Y轴，正值在坐标原点往下，负值在坐标原点往上。</li><li>坐标原点垂直于屏幕的方向被看作Z轴，正值是从坐标原点向屏幕外的方向，负值是从坐标原点向屏幕里的方向。</li></ul><p>注意：</p><ul><li>因为行内元素不存在宽度和高度，所以2D和3D对行内元素无效。</li><li>在3D场景下，因为无法观察Z轴，元素也不存在厚度，所以看到的是元素从3D到2D的投影。</li></ul><h4 id="3-1-2-位移"><a href="#3-1-2-位移" class="headerlink" title="3.1.2 位移"></a>3.1.2 位移</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform</td>      <td>改变元素的位置，参考坐标原点</td>      <td>        translateX：设置X轴位移，支持指定长度值和百分比，百分比参考的是自身宽度<br>        translateY：设置Y轴位移，支持指定长度值和百分比，百分比参考的是自身宽度<br>        translate：一个值代表X轴，两个值分别代表X轴和Y轴，逗号分隔<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">30px</span>) <span class="built_in">translateY</span>(<span class="number">40px</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><p>和相对定位的比较：</p><ul><li>位移与相对定位的相同：都不脱离文档流，不会影响到其它元素。</li><li>位移与相对定位的区别：位移的百分比值参考的是其自身，相对定位的百分比值参考的是其父元素。</li><li>浏览器针对位移有优化，处理位移的效率比相对定位更高。</li></ul><p>位移配合定位，可实现子元素在父元素中同时水平居中和垂直居中。示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-缩放"><a href="#3-1-3-缩放" class="headerlink" title="3.1.3 缩放"></a>3.1.3 缩放</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform</td>      <td>改变元素的大小，参照中心默认是元素的中心</td>      <td>        scaleX：设置X轴的缩放比例，1表示不缩放，大于1表示放大，小于1表示缩小<br>        scaleY：设置Y轴的缩放比例，1表示不缩放，大于1表示放大，小于1表示缩小<br>        scale：一个值代表X轴和Y轴，两个值分别代表X轴和Y轴，逗号分隔<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">50%</span>) <span class="built_in">scaleY</span>(<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">50%</span>,<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>支持负数，如果设为<code>-1</code>会将原来的元素镜像显示，但几乎不用，因为容易产生误解。</li><li>借助缩放，可实现小于12px的文字。</li></ul><h4 id="3-1-4-旋转"><a href="#3-1-4-旋转" class="headerlink" title="3.1.4 旋转"></a>3.1.4 旋转</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform</td>      <td>让元素发生旋转，参照中心默认是元素的中心</td>      <td>        rotateZ：设置2D旋转的角度值，绕Z轴旋转，正值顺时针，负值逆时针<br>        rotate：一个值代表2D旋转，正值顺时针，负值逆时针<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">30deg</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br></pre></td></tr></table></figure><h4 id="3-1-5-扭曲"><a href="#3-1-5-扭曲" class="headerlink" title="3.1.5 扭曲"></a>3.1.5 扭曲</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform</td>      <td>让元素发生拉扯变形</td>      <td>        skewX：设置元素在X轴扭曲的角度值，不改变宽度，正值左上角向左同时右下角向右，负值左上角向右同时右下角向左<br>        skewY：设置元素在Y轴扭曲的角度值，不改变高度，正值左上角向上同时右下角向下，负值左上角向下同时右下角向上<br>        skew：一个值代表X轴和Y轴，两个值分别代表X轴和Y轴，逗号分隔<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">30deg</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>,<span class="number">30deg</span>);</span><br></pre></td></tr></table></figure><h4 id="3-1-6-多重变形"><a href="#3-1-6-多重变形" class="headerlink" title="3.1.6 多重变形"></a>3.1.6 多重变形</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform</td>      <td>复合属性，支持多种变形</td>      <td>包含其他样式，空格分隔</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>) <span class="built_in">scale</span>(<span class="number">50%</span>,<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">30deg</span>) <span class="built_in">skew</span>(<span class="number">30deg</span>,<span class="number">30deg</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果位移前有缩放，位移的距离需要乘以缩放的倍数，尽量将位移写在前面。</li><li>如果位移前有旋转，旋转的参照中心不会受位移影响，尽量将旋转写在后面。</li></ul><h4 id="3-1-7-变形原点"><a href="#3-1-7-变形原点" class="headerlink" title="3.1.7 变形原点"></a>3.1.7 变形原点</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform-origin</td>      <td>设置变形的原点，对于缩放和旋转来说，改变的是参照中心</td>      <td>支持长度值、百分比、关键字，一个值跟类型有关，另一个取中间点，两个值分别代表X轴和Y轴，空格分隔</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: left top;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>变形原点对位移的影响是看不出来效果的，对缩放和旋转的影响是能看出来的，将设置的原点作为参照中心。</li><li>如果只设置了长度值或百分比，则表示X轴，Y轴取中间点，如果只设置了关键字，则根据关键字表示X轴或Y轴，另一个取中间点。</li></ul><h3 id="3-2-3D变形"><a href="#3-2-3D变形" class="headerlink" title="3.2 3D变形"></a>3.2 3D变形</h3><h4 id="3-2-1-开启3D空间"><a href="#3-2-1-开启3D空间" class="headerlink" title="3.2.1 开启3D空间"></a>3.2.1 开启3D空间</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform-style</td>      <td>开启3D空间，元素进行3D变形的前提是父元素开启3D空间</td>      <td>        flat：让子元素位于此元素的二维平面内，即2D空间（默认值）<br>        preserve-3d：让子元素位于此元素的三维空间内，即3D空间<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-设置景深"><a href="#3-2-2-设置景深" class="headerlink" title="3.2.2 设置景深"></a>3.2.2 设置景深</h4><p>景深指的是观察者与<code>z=0</code>平面的距离，能让发生3D变形的元素产生透视效果，让元素的投影看起来更加立体。</p><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>perspective</td>      <td>设置景深，需要给父元素设置</td>      <td>        none：不指定透视（默认值）<br>        长度值：指定观察者距离<code>z=0</code>平面的距离，负数会被认为是默认值none，最小值是0，趋近于0表示观察者贴近平面<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>如果设置了X轴或Y轴的旋转，可以看到子元素投影受父元素景深的影响。</li><li>如果未设置X轴或Y轴的旋转，并且Z轴的位移<code>等于0</code>，相当于2D平面的子元素，不受父元素景深的影响。</li><li>如果未设置X轴或Y轴的旋转，并且Z轴的位移<code>大于0</code>，此时子元素在投影<code>前面</code>，随着景深的减少：<br>3.1 当<code>景深大于位移</code>时，观察者贴近子元素，子元素投影变大。<br>3.2 当<code>景深等于或者小于位移</code>时，观察者<code>贴合子元素</code>，子元素投影消失。<br>3.3 当<code>景深小于0</code>时，取值无效，不指定景深，子元素投影相当于2D平面的子元素。</li><li>如果未设置X轴或Y轴的旋转，并且Z轴的位移<code>小于0</code>，此时子元素在投影<code>后面</code>，随着景深的减少：<br>4.1 当<code>景深大于0</code>时，观察者贴近子元素，子元素投影变小。<br>4.2 当<code>景深等于0</code>时，观察者<code>贴合2D平面</code>，子元素投影相当于2D平面的一个点。<br>4.3 当<code>景深小于0</code>时，取值无效，不指定景深，子元素投影相当于2D平面的子元素。</li></ol><h4 id="3-2-3-设置透视点位置"><a href="#3-2-3-设置透视点位置" class="headerlink" title="3.2.3 设置透视点位置"></a>3.2.3 设置透视点位置</h4><p>透视点位置就是观察者位置，默认的透视点在元素的中心。</p><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>perspective-origin</td>      <td>设置透视点位置，需要给父元素设置</td>      <td>支持长度值、百分比、关键字，一个值跟类型有关，另一个取中间点，两个值分别代表X轴和Y轴</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">perspective-origin</span>: left top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-位移"><a href="#3-2-4-位移" class="headerlink" title="3.2.4 位移"></a>3.2.4 位移</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform</td>      <td>在2D位移的基础上让元素沿Z轴位移，参考坐标原点</td>      <td>        translateZ：设置Z轴位移，只支持长度值，正值向屏幕外，负值向屏幕里<br>        translate3d：三个值分别代表X轴、Y轴、Z轴，逗号分隔，三个值必须同时设置，否则无效<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">30px</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">50%</span>,<span class="number">50%</span>,<span class="number">30px</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>在X轴和Y轴的设置支持长度值和百分比，在Z轴的设置只支持长度值，因为元素没有厚度的概念，无法通过百分比确定具体长度值。</li><li>只有在父元素的<code>perspective</code>属性值存在且大于0的情况下，才能设置Z轴的位移。</li><li>当Z轴的位移大于<code>perspective</code>属性值的时候，元素位移到了观察者后面，即观察者看不到元素。</li></ul><h4 id="3-2-5-缩放"><a href="#3-2-5-缩放" class="headerlink" title="3.2.5 缩放"></a>3.2.5 缩放</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform</td>      <td>在2D缩放的基础上让元素沿Z轴缩放，参考坐标原点</td>      <td>        scaleZ：设置Z轴的缩放比例，1表示不缩放，大于1表示放大，小于1表示缩小<br>        scale3d：三个值分别代表X轴、Y轴、Z轴，逗号分隔，三个值必须同时设置，否则无效<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleZ</span>(<span class="number">0.5</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>在Z轴进行缩放，理论上是对元素的厚度进行缩放，但是元素没有厚度的概念，所以其实是让元素更贴近观察者，效果上类似调整景深。</li><li>在Z轴放大的效果，类似景深缩小相同倍数的效果，在Z轴缩小的效果，类似景深放大相同倍数的效果。</li></ul><h4 id="3-2-6-旋转"><a href="#3-2-6-旋转" class="headerlink" title="3.2.6 旋转"></a>3.2.6 旋转</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transform</td>      <td>在2D旋转的基础上让元素沿X轴和Y轴旋转，参照中心默认是元素的中心</td>      <td>        rotateX：设置X轴旋转的角度值，正值顺时针，负值逆时针<br>        rotateY：设置Y轴旋转的角度值，正值顺时针，负值逆时针<br>        rotate3d：前三个值分别代表X轴、Y轴、Z轴，第四个值代表旋转的角度，四个值必须同时设置，否则无效<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">30deg</span>) <span class="built_in">rotateY</span>(<span class="number">30deg</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">30deg</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>通过<code>rotate3d</code>设置的前三个值描述的是坐标轴的矢量定义，取值是从0到1的矢量值。</li><li>即使<code>rotate3d</code>的前三个值超过1的数值，也会进行内部隐式标准化：<br>比如<code>rotate3d(9,9,9,30deg)</code>相当于<code>rotate3d(1,1,1,30deg)</code>的效果。<br>比如<code>rotate3d(10,1,0.5,30deg)</code>相当于<code>rotate3d(1,0.1,0.05,30deg)</code>的效果。</li></ul><h4 id="3-2-7-多重变形"><a href="#3-2-7-多重变形" class="headerlink" title="3.2.7 多重变形"></a>3.2.7 多重变形</h4><p>同2D多重变形类似，支持3D参数，建议将位移写前面同时将旋转写后面。</p><h4 id="3-2-8-背部可见性"><a href="#3-2-8-背部可见性" class="headerlink" title="3.2.8 背部可见性"></a>3.2.8 背部可见性</h4><p>将元素在X轴旋转或者Y轴旋转前显示的一面称为正面，将元素在X轴旋转或者Y轴旋转后显示的一面称为背面。</p><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>backface-visibility</td>      <td>设置元素背面在面向用户时是否可见</td>      <td>        visible：设置元素背面可见，允许显示正面的镜像（默认值）<br>        hidden：设置元素背面不可见<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span>前面的图片在下层<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span>后面的图片在上层<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.front</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: coral;</span><br><span class="line">  <span class="comment">/* 预先旋转显示下层元素 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">  <span class="comment">/* 给上层元素设置背面不可见 */</span></span><br><span class="line">  <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>父元素作为盒子，两个子元素分别表示前面和后面，开启定位让两个子元素在同一位置，后面元素在前面元素上层，并且不会随父元素旋转而改变。</li><li>上层元素预先旋转：上层元素在父元素旋转前显示正面，上层元素在父元素旋转后显示背面。所以先将上层元素进行旋转显示背面，这样在父元素旋转后就能显示正面。</li><li>上层元素背面不可见：将上层元素进行旋转，并且上层元素的背面不可见后，显示下层元素的正面，父元素旋转后，上层元素显示正面，挡住了下层元素，所以下层元素背面是否可见是不影响的。</li></ul><h2 id="4-过渡"><a href="#4-过渡" class="headerlink" title="4 过渡"></a>4 过渡</h2><p>过渡可以在不使用Flash动画，不使用JavaScript的情况下，让元素从一种样式平滑过渡为另一种样式。</p><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>transition-property</td>      <td>定义过渡的属性，只有定义的属性才会有过渡效果</td>      <td>        none：不过渡任何属性<br>        all：过渡所有能过渡的属性<br>        属性名：逗号分隔的多个属性名<br>      </td>    </tr>    <tr>      <td>transition-duration</td>      <td>定义过渡的时间，完成过渡需要的时间，时间越长过渡越平滑</td>      <td>        0：没有过渡时间，即不过渡（默认值）<br>        单个时间：所有属性设置相同时间，单位是s或者ms，表示秒或者毫秒<br>        多个时间：给不同的属性设置不同的时间，逗号分隔，过渡时间和过渡属性对应<br>      </td>    </tr>    <tr>      <td>transition-delay</td>      <td>定义过渡的延迟，触发过渡后多久开始过渡</td>      <td>单位是s或者ms，表示秒或者毫秒</td>    </tr>    <tr>      <td>transition-timing-function</td>      <td>定义过渡的类型</td>      <td>        ease：平滑过渡（默认值）<br>        linear：线性过渡<br>        ease-in：过渡由慢到快<br>        ease-out：过渡由快到慢<br>        ease-in-out：过渡由慢到快再到慢<br>        steps(integer,?)：接受两个参数的步进函数<br>        step-start：等同于steps(1,start)<br>        step-end：等同于steps(1,end)<br>        cubic-bezie(number,number,number,number)：特定的贝塞尔曲线类型<br>      </td>    </tr>    <tr>      <td>transition</td>      <td>复合属性，支持多种过渡</td>      <td>包含其他样式，空格分隔，如果时间只有一个，则表示过渡时间，如果时间有两个，则最后一个表示过渡延迟</td>    </tr>  </tbody></table><p>注意：</p><ol><li>不是所有的属性都能过渡，值为数字，或者值能转为数字的属性，都支持过渡，否则不支持过渡。</li><li>常见的支持过渡的属性有：<br>颜色<br>长度值<br>百分比<br>z-index<br>opacity<br>2D变形属性<br>3D变形属性<br>阴影</li></ol><p>步进函数：</p><ul><li>第一个参数是正整数，指定函数的步数。</li><li>第二个参数是start或end，指定每一步的值发生变化的时间点，默认值为end。</li></ul><p>贝塞尔曲线：</p><ul><li>英文名是Bezier Curve，又称贝兹曲线或贝济埃曲线，可以通过二维坐标系描述曲线。</li><li>在线制作贝赛尔曲线：<a href="https://cubic-bezier.com/">cubic-bezier</a></li></ul><h2 id="5-动画"><a href="#5-动画" class="headerlink" title="5 动画"></a>5 动画</h2><h3 id="5-1-帧和关键帧"><a href="#5-1-帧和关键帧" class="headerlink" title="5.1 帧和关键帧"></a>5.1 帧和关键帧</h3><p>一段动画，就是一段时间内连续播放多个画面，每一张画面称为一帧。同样时间内，播放的帧数越多，画面看起来越流畅。</p><p>关键帧指的是，在构成一段动画的若干帧中，起到决定性作用的2-3帧，可以理解为和前后有明显差别的帧。</p><p>早期要求1秒内最低24帧，现在主流使用的是60帧，对延迟要求高的应用要求120帧或者更高。</p><h3 id="5-2-基本使用"><a href="#5-2-基本使用" class="headerlink" title="5.2 基本使用"></a>5.2 基本使用</h3><h4 id="5-2-1-定义动画"><a href="#5-2-1-定义动画" class="headerlink" title="5.2.1 定义动画"></a>5.2.1 定义动画</h4><p>定义动画实际上指的是定义一组关键帧，使用<code>@keyframes</code>设置动画名，可以定义多个动画名，但动画名不可以重复。</p><p>有两种方式：</p><ol><li>简单方式定义：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名 &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="comment">/*property1:value1*/</span></span><br><span class="line">    <span class="comment">/*property2:value2*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="comment">/*property1:value1*/</span></span><br><span class="line">    <span class="comment">/*property2:value2*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>完整方式定义：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名 &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="comment">/*property1:value1*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span> &#123;</span><br><span class="line">    <span class="comment">/*property1:value1*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">40%</span> &#123;</span><br><span class="line">    <span class="comment">/*property1:value1*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span> &#123;</span><br><span class="line">    <span class="comment">/*property1:value1*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">80%</span> &#123;</span><br><span class="line">    <span class="comment">/*property1:value1*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="comment">/*property1:value1*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-2-2-给元素应用动画"><a href="#5-2-2-给元素应用动画" class="headerlink" title="5.2.2 给元素应用动画"></a>5.2.2 给元素应用动画</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>animation-name</td>      <td>给元素指定具体的动画</td>      <td>动画名</td>    </tr>    <tr>      <td>animation-duration</td>      <td>设置动画所需时间</td>      <td>单位是s或者ms</td>    </tr>    <tr>      <td>animation-delay</td>      <td>设置动画延迟</td>      <td>单位是s或者ms</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* 指定动画 */</span></span><br><span class="line">  <span class="attribute">animation-name</span>: testKey;</span><br><span class="line">  <span class="comment">/* 设置动画所需时间 */</span></span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="comment">/* 设置动画延迟 */</span></span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-动画的其他属性"><a href="#5-3-动画的其他属性" class="headerlink" title="5.3 动画的其他属性"></a>5.3 动画的其他属性</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>animation-timing-function</td>      <td>设置动画的类型</td>      <td>        ease：平滑过渡（默认值）<br>        linear：线性过渡<br>        ease-in：过渡由慢到快<br>        ease-out：过渡由快到慢<br>        ease-in-out：过渡由慢到快再到慢<br>        steps(integer,?)：接受两个参数的步进函数<br>        step-start：等同于steps(1,start)<br>        step-end：等同于steps(1,end)<br>        cubic-bezie(number,number,number,number)：特定的贝塞尔曲线类型<br>      </td>    </tr>    <tr>      <td>animation-iteration-count</td>      <td>设置动画的播放次数</td>      <td>        数值：动画循环次数<br>        infinite：无限循环<br>      </td>    </tr>    <tr>      <td>animation-direction</td>      <td>设置动画方向</td>      <td>        normal：正常方向（默认）<br>        reverse：反方向运行<br>        alternate：动画先正常运行再反方向运行，并持续交替运行，要求动画播放至少两次<br>        alternate-reverse：动画先反运行再正方向运行，并持续交替运行，要求动画播放至少两次<br>      </td>    </tr>    <tr>      <td>animation-fill-mode</td>      <td>设置动画之外的状态</td>      <td>        forwards：设置对象状态为动画结束时的状态，要求动画播放有限次数<br>        backwards：设置对象状态为动画开始时的状态，要求动画播放有限次数<br>      </td>    </tr>    <tr>      <td>animation-play-state</td>      <td>设置动画的播放状态</td>      <td>        running：运动（默认）<br>        paused：暂停<br>      </td>    </tr>  </tbody></table><h3 id="5-4-复合属性"><a href="#5-4-复合属性" class="headerlink" title="5.4 复合属性"></a>5.4 复合属性</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>animation</td>      <td>设置动画复合属性</td>      <td>包含其他样式，空格分隔，如果时间只有一个，则表示动画时间，如果时间有两个，则最后一个表示动画延迟</td>    </tr>  </tbody></table><p>注意：</p><ul><li>设置动画的播放状态的<code>animation-play-state</code>属性一般单独使用，复合使用会导致动画重新播放。</li></ul><p>和过渡的区别：</p><ol><li>动画不需要事件触发，过渡需要触发。</li><li>过渡只有开始和结束两个关键帧，动画可以设置多个关键帧，可以进行更细力度的控制。</li></ol><h2 id="6-多列布局"><a href="#6-多列布局" class="headerlink" title="6 多列布局"></a>6 多列布局</h2><p>专门用于实现类似于报纸的布局。</p><p>分列数量相关属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>column-count</td>      <td>指定列数</td>      <td>数值</td>    </tr>    <tr>      <td>column-width</td>      <td>指定列宽，自动计算列数</td>      <td>长度值</td>    </tr>    <tr>      <td>columns</td>      <td>同时指定列宽和列数，复合属性，取列数少的效果（不推荐使用）</td>      <td>包含列宽和列数，空格分隔</td>    </tr>  </tbody></table><p>分列边框相关属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>column-rule-style</td>      <td>设置列与列之间边框的风格</td>      <td>        none：无（默认值）<br>        solid：实线<br>        dashed：虚线<br>        dotted：点线<br>        double：双实线<br>      </td>    </tr>    <tr>      <td>column-rule-width</td>      <td>设置列与列之间边框的宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>column-rule-color</td>      <td>设置列与列之间边框的颜色</td>      <td>颜色代码，默认黑色</td>    </tr>    <tr>      <td>column-rule</td>      <td>设置列与列之间边框，复合属性</td>      <td>包含边框样式，空格分隔</td>    </tr>  </tbody></table><p>分列其他属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>column-gap</td>      <td>设置列边距</td>      <td>长度值</td>    </tr>    <tr>      <td>column-span</td>      <td>设置是否跨列</td>      <td>        none：不跨列（默认值）        all：跨列      </td>    </tr>  </tbody></table><p>注意：</p><ul><li>除了<code>column-span</code>属性要在跨列的元素上设置，其他属性都是在父元素上设置的。</li></ul><h2 id="7-弹性盒子"><a href="#7-弹性盒子" class="headerlink" title="7 弹性盒子"></a>7 弹性盒子</h2><h3 id="7-1-简介"><a href="#7-1-简介" class="headerlink" title="7.1 简介"></a>7.1 简介</h3><p>2009年，W3C提出了一种新的盒子模型，即弹性盒子（Flexible Box），也称为伸缩盒模型，它可以轻松的控制：元素分布方式、元素对齐方式、元素视觉顺序、等等。</p><p>截止目前，除了在部分IE浏览器不支持，其他浏览器均已全部支持。</p><p>弹性盒子的出现，逐渐演变出了一套新的布局方案，即弹性布局，也称为Flex布局。</p><p>布局方式：</p><div class="tabs" id="tab-tab-id-1"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1-1">传统布局</a></li><li class="tab"><a class="#tab-id-1-2">弹性布局</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1-1"><p>传统模型布局分三种模型，并且这三种模型紧密联系：</p><ul><li>流动模型（Flow）：默认的网页布局模式，块级元素宽度总是100%，并且自上而下垂直分布，行内元素在包含元素内从左到右水平分布。</li><li>浮动模型（Float）：当元素设置了<code>float</code>属性，就会依照浮动的位置进行特定的定位。</li><li>层模型（Layer）：当元素设置了<code>position</code>属性，就会依照定位类型进行特定的定位。</li></ul><p>因此，传统模型布局主要基于传统盒子模型、<code>display</code>属性、<code>float</code>属性、<code>position</code>属性。</p></div><div class="tab-pane" id="tab-id-1-2"><p>弹性布局可以为盒状模型提供最大的灵活性，目前在移动端应用比较广泛，因为传统布局不能很好的呈现在移动设备上。</p></div></div></div><h3 id="7-2-弹性容器和弹性项目"><a href="#7-2-弹性容器和弹性项目" class="headerlink" title="7.2 弹性容器和弹性项目"></a>7.2 弹性容器和弹性项目</h3><p>将元素的<code>display</code>属性设为<code>flex</code>或者设为<code>inline-flex</code>就可以将该元素变为弹性容器，其子元素（不包括后代元素）会变为弹性项目。</p><p>无论原来是哪种元素（块、行内块、行内），一旦成为了弹性项目，全都会块状化，如果没有设置宽度和高度，默认由内容撑开。</p><h3 id="7-3-主轴与侧轴"><a href="#7-3-主轴与侧轴" class="headerlink" title="7.3 主轴与侧轴"></a>7.3 主轴与侧轴</h3><p>概念：</p><ul><li>主轴：项目沿主轴排列，默认方向是水平从左到右。</li><li>侧轴：与主轴垂直的就是侧轴，默认方向是垂直从上到下。</li></ul><p>主轴换行相关属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>flex-direction</td>      <td>设置主轴方向，同时也会影响侧轴方向</td>      <td>        row：主轴方向水平从左到右（默认值）<br>        row-reverse：主轴方向水平从右到左<br>        column：主轴方向垂直从上到下<br>        column-reverse：主轴方向垂直从下到上<br>      </td>    </tr>    <tr>      <td>flex-wrap</td>      <td>设置主轴换行方式</td>      <td>        nowrap：主轴不换行，允许项目的高度超出容器，不允许项目的宽度超出容器，宽度超出时会压缩容器（默认值）<br>        wrap：主轴自动换行，允许项目的高度超出容器，不允许项目的宽度超出容器，宽度超出时会换行<br>        wrap-reverse：主轴自动反转换行，每一行的项目还是从左到右，但是每行的项目是从下到上排列，向上超出容器<br>      </td>    </tr>    <tr>      <td>flex-flow</td>      <td>复合属性</td>      <td>包含方向和换行，空格分隔</td>    </tr>  </tbody></table><p>水平对齐相关属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>justify-content</td>      <td>设置主轴对齐方式，控制项目水平位置</td>      <td>        flex-start：主轴起点对齐（默认值）<br>        flex-end：主轴终点对齐<br>        center：水平居中对齐<br>        space-between：主轴水平分散对齐，中间均匀分布，项目紧贴两端（最常用）<br>        space-around：中间均匀分布，项目到两端距离与项目之间距离的一半相同<br>        space-evenly：中间均匀分布，项目到两端距离与项目之间距离相同<br>      </td>    </tr>  </tbody></table><p>垂直对齐相关属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>align-items</td>      <td>设置侧轴对齐方式，以单个项目作为控制目标，控制项目在单行的垂直位置</td>      <td>        flex-start：侧轴起点对齐<br>        flex-end：侧轴终点对齐<br>        center：垂直居中对齐<br>        baseline：每行项目的第一行文字的基线对齐，后面的大字体项目会向上超出容器高度<br>        stretch：如果项目设置了高度，按照起点对齐，如果项目没有设置高度，将占满整个容器的高度（默认值）<br>      </td>    </tr>    <tr>      <td>align-content</td>      <td>设置侧轴对齐方式，以一行项目作为控制目标，控制一行项目在容器的垂直位置，设置换行后有效</td>      <td>        flex-start：侧轴起点对齐<br>        flex-end：侧轴终点对齐<br>        center：垂直居中对齐<br>        space-between：侧轴垂直分散对齐，中间均匀分布，项目紧贴两端<br>        space-around：中间均匀分布，项目到两端距离与项目之间距离的一半相同<br>        space-evenly：中间均匀分布，项目到两端距离与项目之间距离相同<br>        stretch：如果项目设置了高度，按照起点对齐，如果项目没有设置高度，将占满整个容器的高度（默认值）<br>      </td>    </tr>  </tbody></table><p>垂直对齐显示逻辑：</p><ul><li>对于设置换行但是没有超出容器的项目，将容器高度减去每行项目的最大高度，得到的剩余高度按照行数平均分开，和每行项目的最大高度一起作为行高。</li><li>使用<code>align-items</code>属性将每行最大高度和剩余平均高度作为行高，可以控制项目在行高里的垂直对齐，不能控制每行在容器里的垂直对齐。</li><li>使用<code>align-content</code>属性将每行最大高度作为行高，可以控制每行在容器里的垂直对齐，不能控制项目在行高里的垂直对齐。并且只有设置换行，该属性才会生效，即单行无效。</li></ul><p>同时水平居中和垂直居中：</p><ol><li>在父元素开启弹性布局后，在父元素中设置水平居中和垂直居中。示例：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在父元素开启弹性布局后，在子元素中设置外边距自动。示例：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-4-基准长度"><a href="#7-4-基准长度" class="headerlink" title="7.4 基准长度"></a>7.4 基准长度</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>flex-basis</td>      <td>设置项目主轴方向的基准长度，主轴横向会让宽度失效，主轴纵向会让高度失效</td>      <td>        0：无（默认值）<br>        solid：实线<br>        dashed：虚线<br>        dotted：点线<br>        其他长度值：指定长度<br>      </td>    </tr>    <tr>      <td>flex-grow</td>      <td>设置项目的放大权重，默认为0，即使主轴存在剩余空间，该项目也不放大，前提是主轴存在剩余空间，否则无效</td>      <td>放大权重</td>    </tr>    <tr>      <td>flex-shrink</td>      <td>设置项目的缩小权重，默认为1，如果空间不足，该项目将会缩小</td>      <td>缩小权重</td>    </tr>    <tr>      <td>flex</td>      <td>复合属性</td>      <td>        包含上述属性按照顺序设置，空格分隔：<br>        <dl>          <dt>1. 不放大，缩小，默认基准（默认值）：</dt>          <dd><code>flex: 0 1 auto;</code></dd>          <dd>简写：<code>flex: 0 auto;</code></dd>          <dt>2. 不放大，不缩小，默认基准</dt>          <dd><code>flex: 0 0 auto;</code></dd>          <dd>简写：<code>flex: none;</code></dd>          <dt>3. 放大，缩小，默认基准</dt>          <dd><code>flex: 1 1 auto;</code></dd>          <dd>简写：<code>flex: auto;</code></dd>          <dt>4. 放大，缩小，最小长度：</dt>          <dd><code>flex: 1 1 0px;</code></dd>          <dd>简写：<code>flex: 1;</code></dd>        </dl>      </td>    </tr>  </tbody></table><p>基准长度显示规则：</p><ul><li>默认情况下，以内容作为宽度显示。</li><li>如果设置项目宽度，以项目宽度显示。</li><li>如果设置项目宽度，又设置基准长度，如果内容长度小于基准长度，以基准长度显示，如果内容长度大于基准长度，比较项目宽度和内容长度，以最小值显示。</li></ul><p>按权重放大规则：</p><ul><li>默认为0，表示不放大。</li><li>如果所有项目设置为1，计算公式：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目放大的长度=剩余长度×(<span class="number">1</span>÷项目数量)</span><br></pre></td></tr></table></figure></li><li>如果项目设置的不同，计算公式：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目放大的长度=剩余长度×(当前权重÷&#123;(每个项目权重)求和&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>按权重缩小规则：</p><ul><li>默认为1，表示如果项目长度超出，就按权重缩小项目长度，计算公式：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目缩小的长度=超出长度×<span class="selector-attr">[(1×项目长度)÷&#123;(1×每个项目长度)求和&#125;]</span></span><br></pre></td></tr></table></figure></li><li>如果项目设置的不同，计算公式：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目缩小的长度=超出长度×<span class="selector-attr">[(当前权重×项目长度)÷&#123;(每个项目权重×每个项目长度)求和&#125;]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-5-单独对齐"><a href="#7-5-单独对齐" class="headerlink" title="7.5 单独对齐"></a>7.5 单独对齐</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>align-self</td>      <td>设置单独项目的对齐方式</td>      <td>参考<code>align-items</code>属性，默认值为auto，表示继承父元素的<code>align-items</code>属性</td>    </tr>  </tbody></table><h3 id="7-6-项目排序"><a href="#7-6-项目排序" class="headerlink" title="7.6 项目排序"></a>7.6 项目排序</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>order</td>      <td>设置项目的排列顺序，数值越小，排列越靠前，默认为0，支持负值</td>      <td>数值</td>    </tr>  </tbody></table><h2 id="8-BFC"><a href="#8-BFC" class="headerlink" title="8 BFC"></a>8 BFC</h2><p>BFC，即块级格式化上下文（Block Formatting Context），可以理解为一种功能，当某些情况下元素满足条件时开启。</p><p>开启BFC的元素所具有的特点：</p><ul><li>元素开启BFC后，其子元素不会再产生外边距塌陷问题。</li><li>元素开启BFC后，元素自身不会被其他浮动元素所覆盖。</li><li>元素开启BFC后，就算其子元素浮动，元素自身高度也不会塌陷。</li></ul><p>开启BFC的方式：</p><ul><li>根元素默认开启。</li><li>表格相关的元素默认开启。</li><li>行内块元素默认开启。</li><li>给<code>块元素</code>的<code>overflow</code>属性设置不为<code>visible</code>的值后自动开启。</li><li>将元素改为浮动元素后自动开启。</li><li>给元素设置绝对定位或固定定位，称为定位元素后自动开启。</li><li>弹性布局中的弹性项目自动开启。</li><li>多列布局中的多列容器自动开启。</li><li>多列布局中的多列项目，将元素的<code>column-span</code>属性的值设置为<code>all</code>后自动开启。</li><li>将元素的<code>display</code>属性的值设置为<code>flow-root</code>后自动开启。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了CSS3的一些新特性。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5新特性</title>
    <link href="https://momashanhe.com/posts/20240414/221920/"/>
    <id>https://momashanhe.com/posts/20240414/221920/</id>
    <published>2024-04-14T14:19:20.000Z</published>
    <updated>2024-07-18T08:00:02.815Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了HTML5的一些新特性。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>HTML5是新一代的HTML标准，2014年10月由万维网联盟（W3C）完成标准制定。</p><p>HTML5在狭义上是指新一代的HTML标准，在广义上是指整个前端。</p><p>官网地址：</p><ul><li>W3C官网：<a href="https://www.w3.org/TR/html/index.html">https://www.w3.org/TR/html/index.html</a></li><li>WHATWG官网：<a href="https://whatwg-cn.github.io/html/multipage">https://whatwg-cn.github.io/html/multipage</a></li></ul><p>优势：</p><ul><li>针对JavaScript新增了很多可操作的接口。</li><li>新增了一些布局元素和全局属性。</li><li>新增了多媒体元素，可以很好的替代Flash。</li><li>更加侧重语义化，对于SEO更友好。</li><li>可移植性好，可以大量应用在移动设备上。</li></ul><h2 id="2-新增元素"><a href="#2-新增元素" class="headerlink" title="2 新增元素"></a>2 新增元素</h2><h3 id="2-1-新增布局元素"><a href="#2-1-新增布局元素" class="headerlink" title="2.1 新增布局元素"></a>2.1 新增布局元素</h3><p>新增的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>header</td>      <td>整个页面，或部分区域的头部</td>      <td>双标签</td>    </tr>    <tr>      <td>footer</td>      <td>整个页面，或部分区域的底部</td>      <td>双标签</td>    </tr>    <tr>      <td>nav</td>      <td>导航</td>      <td>双标签</td>    </tr>    <tr>      <td>article</td>      <td>文章</td>      <td>双标签</td>    </tr>    <tr>      <td>section</td>      <td>章节</td>      <td>双标签</td>    </tr>    <tr>      <td>aside</td>      <td>侧边栏</td>      <td>双标签</td>    </tr>  </tbody></table><h3 id="2-2-新增标量测量元素"><a href="#2-2-新增标量测量元素" class="headerlink" title="2.2 新增标量测量元素"></a>2.2 新增标量测量元素</h3><p>新增的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>meter</td>      <td>定义已知范围内的标量测量，也被称为尺度</td>      <td>双标签</td>    </tr>  </tbody></table><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>high</td>      <td>规定高值</td>      <td>数值</td>    </tr>    <tr>      <td>low</td>      <td>规定低值</td>      <td>数值</td>    </tr>    <tr>      <td>max</td>      <td>规定最大值</td>      <td>数值</td>    </tr>    <tr>      <td>min</td>      <td>规定最小值</td>      <td>数值</td>    </tr>    <tr>      <td>optimum</td>      <td>规定最优值</td>      <td>数值</td>    </tr>    <tr>      <td>value</td>      <td>规定当前值</td>      <td>数值</td>    </tr>  </tbody></table><h3 id="2-3-新增进度显示元素"><a href="#2-3-新增进度显示元素" class="headerlink" title="2.3 新增进度显示元素"></a>2.3 新增进度显示元素</h3><p>新增的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>progress</td>      <td>显示某个任务完成的进度的指示器，一般用于表示进度条</td>      <td>双标签</td>    </tr>  </tbody></table><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>max</td>      <td>规定目标值</td>      <td>数值</td>    </tr>    <tr>      <td>value</td>      <td>规定当前值</td>      <td>数值</td>    </tr>  </tbody></table><h3 id="2-4-新增列表元素"><a href="#2-4-新增列表元素" class="headerlink" title="2.4 新增列表元素"></a>2.4 新增列表元素</h3><p>新增的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>details</td>      <td>用于展示问题和答案，或对专有名词进行解释</td>      <td>双标签</td>    </tr>    <tr>      <td>summary</td>      <td>写在<code>details</code>元素的里面，用于指定问题或专有名词</td>      <td>双标签</td>    </tr>  </tbody></table><h3 id="2-5-新增文本元素"><a href="#2-5-新增文本元素" class="headerlink" title="2.5 新增文本元素"></a>2.5 新增文本元素</h3><p>新增的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>ruby</td>      <td>包裹需要注音的文字</td>      <td>双标签</td>    </tr>    <tr>      <td>rt</td>      <td>注音， 写在<code>ruby</code>元素里面</td>      <td>双标签</td>    </tr>    <tr>      <td>mark</td>      <td>标记文字，建议用于标记搜索结果中的关键字</td>      <td>双标签</td>    </tr>  </tbody></table><h2 id="3-表单功能增强"><a href="#3-表单功能增强" class="headerlink" title="3 表单功能增强"></a>3 表单功能增强</h2><h3 id="3-1-新增通用属性"><a href="#3-1-新增通用属性" class="headerlink" title="3.1 新增通用属性"></a>3.1 新增通用属性</h3><p>新增属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>placeholder</td>      <td>提示文字，适用于文字输入类的表单控件</td>      <td>文字</td>    </tr>    <tr>      <td>required</td>      <td>是否必填，适用于除按钮外其他表单控件，表单提交时会验证</td>      <td>无</td>    </tr>    <tr>      <td>autofocus</td>      <td>自动获取焦点，适用于所有表单控件，对焦点时首个有效</td>      <td>无</td>    </tr>    <tr>      <td>autocomplete</td>      <td>自动完成，适用于文字输入类的表单控件，密码输入框和多行输入框不可用</td>      <td>        on：默认值，自动完成        off：不自动完成      </td>    </tr>    <tr>      <td>pattern</td>      <td>填写正则表达式校验输入内容是否符合表达式，适用于文本输入类表单控件，往往与<code>required</code>属性配合</td>      <td>正则表达式</td>    </tr>  </tbody></table><h3 id="3-2-输入框类型增强"><a href="#3-2-输入框类型增强" class="headerlink" title="3.2 输入框类型增强"></a>3.2 输入框类型增强</h3><p><code>input</code>元素新增类型，对<code>type</code>属性新增的可选值：</p><ul><li>email：邮箱类型的输入框，表单提交时会验证格式，输入为空则不验证格式。</li><li>url：URL类型的输入框，表单提交时会验证格式，输入为空则不验证格式。</li><li>number：数字类型的输入框，表单提交时会验证格式，输入为空则不验证格式。</li><li>search：搜索类型的输入框，表单提交时不会验证格式。</li><li>tel：电话类型的输入框，表单提交时不会验证格式，在移动端使用时，会唤起数字键盘。</li><li>range：范围选择框，默认值为50，表单提交时不会验证格式。</li><li>color：颜色选择框，默认值为黑色，表单提交时不会验证格式。</li><li>date：日期选择框，默认值为空，表单提交时不会验证格式。</li><li>month：月份选择框，默认值为空，表单提交时不会验证格式。</li><li>week：周选择框，默认值为空，表单提交时不会验证格式。</li><li>time：时间选择框，默认值为空，表单提交时不会验证格式。</li><li>datetime-local：日期时间选择框，默认值为空，表单提交时不会验证格式。</li></ul><h3 id="3-3-新增表单属性"><a href="#3-3-新增表单属性" class="headerlink" title="3.3 新增表单属性"></a>3.3 新增表单属性</h3><p><code>form</code>元素新增属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>novalidate</td>      <td>表单提交的时候不再进行验证</td>      <td>无</td>    </tr>  </tbody></table><h3 id="3-4-新增下拉框元素"><a href="#3-4-新增下拉框元素" class="headerlink" title="3.4 新增下拉框元素"></a>3.4 新增下拉框元素</h3><p>下拉框增强，可以在输入框选择下拉选项。</p><p>新增的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>datalist</td>      <td>用于搜索框的关键字提示，类似<code>select</code>元素</td>      <td>双标签</td>    </tr>  </tbody></table><p>需要配合<code>input</code>元素的<code>list</code>属性使用。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  请选择省份：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;province&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;province&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;黑&quot;</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;辽&quot;</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;吉&quot;</span>&gt;</span>吉林<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;粤&quot;</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-支持多媒体功能"><a href="#4-支持多媒体功能" class="headerlink" title="4 支持多媒体功能"></a>4 支持多媒体功能</h2><p>新增的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>audio</td>      <td>表示音频</td>      <td>双标签</td>    </tr>    <tr>      <td>video</td>      <td>表示视频</td>      <td>双标签</td>    </tr>  </tbody></table><p><code>audio</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>src</td>      <td>音频URL地址</td>      <td>URL地址</td>    </tr>    <tr>      <td>controls</td>      <td>向用户显示音频控件，比如播放和暂停按钮</td>      <td>无</td>    </tr>    <tr>      <td>muted</td>      <td>音频静音播放</td>      <td>无</td>    </tr>    <tr>      <td>autoplay</td>      <td>音频自动播放，媒体参与度超过阈值时才会有效</td>      <td>无</td>    </tr>    <tr>      <td>loop</td>      <td>音频循环播放</td>      <td>无</td>    </tr>    <tr>      <td>preload</td>      <td>音频预加载，如果使用了<code>autoplay</code>属性，则忽略该属性</td>      <td>        none：不预加载音频        metadata：仅预先获取音频的元数据，例如长度        auto：可以下载整个音频文件，即使用户不希望使用它      </td>    </tr>  </tbody></table><p><code>video</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>src</td>      <td>视频URL地址</td>      <td>URL地址</td>    </tr>    <tr>      <td>width</td>      <td>设置视频播放器的宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>height</td>      <td>设置视频播放器的高度</td>      <td>长度值</td>    </tr>    <tr>      <td>controls</td>      <td>向用户显示视频控件，比如播放和暂停按钮</td>      <td>无</td>    </tr>    <tr>      <td>muted</td>      <td>视频静音播放</td>      <td>无</td>    </tr>    <tr>      <td>autoplay</td>      <td>视频自动播放，媒体参与度超过阈值时才会有效</td>      <td>无</td>    </tr>    <tr>      <td>loop</td>      <td>视频循环播放</td>      <td>无</td>    </tr>    <tr>      <td>poster</td>      <td>视频封面</td>      <td>URL地址</td>    </tr>    <tr>      <td>preload</td>      <td>视频预加载，如果使用了<code>autoplay</code>属性，则忽略该属性</td>      <td>        none：不预加载视频        metadata：仅预先获取视频的元数据，例如长度        auto：可以下载整个视频文件，即使用户不希望使用它      </td>    </tr>  </tbody></table><p>媒体参与度：</p><ul><li>启动<code>autoplay</code>属性并不能自动播放，还需要判断媒体参与度。</li><li>媒体参与度指的是用户和网页媒体的交互程度，媒体参与度超过阈值以后，才会在启动<code>autoplay</code>属性的前提下激活自动播放。</li><li>媒体参与度查询网址：</li><li><a href="chrome://media-engagement">媒体参与度查询</a></li></ul><h2 id="5-新增全局属性"><a href="#5-新增全局属性" class="headerlink" title="5 新增全局属性"></a>5 新增全局属性</h2><p>新增属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>contenteditable</td>      <td>表示元素是否可被用户编辑</td>      <td>        true：可编辑        false：不可编辑      </td>    </tr>    <tr>      <td>draggable</td>      <td>表示元素可以被拖动</td>      <td>        true：可拖动        false：不可拖动      </td>    </tr>    <tr>      <td>hidden</td>      <td>隐藏元素</td>      <td>无</td>    </tr>    <tr>      <td>spellcheck</td>      <td>规定是否对元素进行拼写和语法检查</td>      <td>        true：检查        false：不检查      </td>    </tr>    <tr>      <td>contextmenu</td>      <td>规定元素的上下文菜单，在用户鼠标右键点击元素时显示</td>      <td>无</td>    </tr>    <tr>      <td>data-*</td>      <td>用于存储页面的私有定制数据</td>      <td>定制数据</td>    </tr>  </tbody></table><h2 id="6-兼容性处理"><a href="#6-兼容性处理" class="headerlink" title="6 兼容性处理"></a>6 兼容性处理</h2><p>添加元信息，让浏览器处于最优渲染模式：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置IE总是使用最新的文档模式进行渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 优先使用webkit内核（Chromium）进行渲染，针对360等壳浏览器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>html5shiv.js</code>让低版本浏览器认识H5元素，但某些元素仍然不能被低版本浏览器识别：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;../sources/js/html5shiv.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>扩展：</p><ul><li>lt：小于</li><li>lte：小于等于</li><li>gt：大于</li><li>gte：大于等于</li><li>!：逻辑非</li></ul><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 8]&gt;仅IE8可见&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gt IE 8]&gt;仅IE8以上可见&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 8]&gt;仅IE8以下可见&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gte IE 8]&gt;IE8及以上可见&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lte IE 8]&gt;IE8及以下可见&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if !IE 8]&gt;非IE8的IE可见&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了HTML5的一些新特性。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>缩放导致元素尺寸错乱</title>
    <link href="https://momashanhe.com/posts/20240407/114739/"/>
    <id>https://momashanhe.com/posts/20240407/114739/</id>
    <published>2024-04-07T03:47:39.000Z</published>
    <updated>2024-08-13T04:33:52.549Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：尚未完成</p><span id="more"></span><p><a href="https://blog.csdn.net/O3O_O3O_/article/details/121255024">https://blog.csdn.net/O3O_O3O_/article/details/121255024</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：尚未完成&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Emmet语法规则</title>
    <link href="https://momashanhe.com/posts/20240407/104745/"/>
    <id>https://momashanhe.com/posts/20240407/104745/</id>
    <published>2024-04-07T02:47:45.000Z</published>
    <updated>2024-08-13T04:33:54.644Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：尚未完成</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：尚未完成&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS2进阶</title>
    <link href="https://momashanhe.com/posts/20240405/142436/"/>
    <id>https://momashanhe.com/posts/20240405/142436/</id>
    <published>2024-04-05T06:24:36.000Z</published>
    <updated>2024-05-21T07:03:08.337Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了CSS的盒子模型。</p><span id="more"></span><h2 id="1-长度单位"><a href="#1-长度单位" class="headerlink" title="1 长度单位"></a>1 长度单位</h2><p>CSS中主要有以下几种长度单位：</p><ul><li>px：像素</li><li>em：元素字体大小的倍数</li><li>%：父元素对应属性的百分比</li></ul><p>CSS中设置长度，必须加单位，否则样式无效。</p><h2 id="2-显示模式"><a href="#2-显示模式" class="headerlink" title="2 显示模式"></a>2 显示模式</h2><h3 id="2-1-分类"><a href="#2-1-分类" class="headerlink" title="2.1 分类"></a>2.1 分类</h3><h4 id="2-1-1-块级元素"><a href="#2-1-1-块级元素" class="headerlink" title="2.1.1 块级元素"></a>2.1.1 块级元素</h4><p>又称为块元素（block）。</p><p>特点：</p><ul><li>在页面中独占一行，不会与任何元素共用一行，从上到下排列。</li><li>默认宽度：撑满父元素。</li><li>默认高度：由内容撑开。</li><li>可以通过CSS设置宽高。</li></ul><p>相关元素：</p><ul><li>主体结构元素：html、body</li><li>排版相关元素：h1~h6、div、hr、p、pre、div</li><li>列表相关元素：ul、ol、li、dl、dt、dd</li><li>表格相关元素：table、tbody、thead、tfoot、caption、tr</li><li>表单相关元素：form、option</li></ul><h4 id="2-1-2-行内元素"><a href="#2-1-2-行内元素" class="headerlink" title="2.1.2 行内元素"></a>2.1.2 行内元素</h4><p>又称为内联元素（inline）。</p><p>特点:</p><ul><li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。</li><li>默认宽度：由内容撑开。</li><li>默认高度：由内容撑开。</li><li>无法通过CSS设置宽高。</li></ul><p>相关元素：</p><ul><li>文本：br、span、em、strong、sup、sub、del、ins</li><li>标记：label</li><li>超链接：a</li></ul><h4 id="2-1-3-行内块元素"><a href="#2-1-3-行内块元素" class="headerlink" title="2.1.3 行内块元素"></a>2.1.3 行内块元素</h4><p>又称为内联块元素（inline-block）。</p><p>特点：</p><ul><li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。</li><li>默认宽度：由内容撑开。</li><li>默认高度：由内容撑开。</li><li>可以通过CSS设置宽高。</li></ul><p>相关元素：</p><ul><li>图片：img</li><li>表格：th、td</li><li>表单：input、textarea、select、button</li><li>框架：iframe</li></ul><p>如果按照“是否独占一行”进行分类，行内块元素应该算作行内元素。</p><h3 id="2-2-设置显示模式"><a href="#2-2-设置显示模式" class="headerlink" title="2.2 设置显示模式"></a>2.2 设置显示模式</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>display</td>      <td>控制元素的显示模式</td>      <td>        none：元素会被隐藏<br>        block：元素将作为块级元素显示<br>        inline：元素将作为内联元素显示<br>        inline-block：元素将作为行内块元素显示<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: none;</span><br></pre></td></tr></table></figure><h2 id="3-盒子模型"><a href="#3-盒子模型" class="headerlink" title="3 盒子模型"></a>3 盒子模型</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>CSS会把所有的HTML元素都看成一个盒子，所有的样式也都是基于这个盒子。</p><p>相关概念：</p><ul><li>content（内容）：盒子内容，也就是元素内容。</li><li>padding（内边距）：盒子内部边距，盒子内容与盒子边框的补白区域。</li><li>border（边框）：盒子边框，分隔盒子的内外区域。</li><li>margin（外边距）：盒子外部边距，盒子边框与其他盒子的间隔区域。</li></ul><p>说明：</p><ul><li>盒子的大小&#x3D;内容的大小+内边距的大小+边框的大小。</li><li>盒子的外边距不受盒子样式的影响，不会影响盒子的大小，只会影响盒子的位置。</li></ul><p>图示如下：<br><img src="/@image/102001/002001-173918.jpg" alt="001-盒子模型"></p><h3 id="3-2-相关属性"><a href="#3-2-相关属性" class="headerlink" title="3.2 相关属性"></a>3.2 相关属性</h3><h4 id="3-2-1-盒子内容相关"><a href="#3-2-1-盒子内容相关" class="headerlink" title="3.2.1 盒子内容相关"></a>3.2.1 盒子内容相关</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>width</td>      <td>设置内容区域宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>max-width</td>      <td>设置内容区域的最大宽度，一般不与width一起使用</td>      <td>长度值</td>    </tr>    <tr>      <td>min-width</td>      <td>设置内容区域的最小宽度，一般不与width一起使用</td>      <td>长度值</td>    </tr>    <tr>      <td>height</td>      <td>设置内容区域高度</td>      <td>长度值</td>    </tr>    <tr>      <td>max-height</td>      <td>设置内容区域的最大高度，一般不与height一起使用</td>      <td>长度值</td>    </tr>    <tr>      <td>min-height</td>      <td>设置内容区域的最小高度，一般不与height一起使用</td>      <td>长度值</td>    </tr>  </tbody></table><p>如果没有设置宽度和高度：</p><ul><li>总宽度&#x3D;父盒子content-自身左右margin</li><li>内容宽度&#x3D;父盒子content-自身左右margin-自身左右border-自身左右padding</li><li>总高度&#x3D;父盒子content-自身上下margin</li><li>内容高度&#x3D;父盒子content-自身上下margin-自身上下border-自身上下padding</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">500px</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-盒子内边距相关"><a href="#3-2-2-盒子内边距相关" class="headerlink" title="3.2.2 盒子内边距相关"></a>3.2.2 盒子内边距相关</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>padding-top</td>      <td>设置上内边距</td>      <td>长度值</td>    </tr>    <tr>      <td>padding-right</td>      <td>设置右内边距</td>      <td>长度值</td>    </tr>    <tr>      <td>padding-bottom</td>      <td>设置下内边距</td>      <td>长度值</td>    </tr>    <tr>      <td>padding-left</td>      <td>设置左内边距</td>      <td>长度值</td>    </tr>    <tr>      <td>padding</td>      <td>复合属性</td>      <td>        顺时针设置内边距，空格分隔：<br>        <dl>          <dt>1. 四个方向内边距相同：</dt>          <dd><code>padding: 长度;</code></dd>          <dt>2. 上下内边距相同，左右内边距相同：</dt>          <dd><code>padding: 上下长度 左右长度;</code></dd>          <dt>3. 上内边距，左右内边距相同，下内边距：</dt>          <dd><code>padding: 上长度 左右长度 下长度;</code></dd>          <dt>4. 上内边距，右内边距，下内边距，左内边距：</dt>          <dd><code>padding: 上长度 右长度 下长度 左长度;</code></dd>        </dl>      </td>    </tr>  </tbody></table><p>说明：</p><ul><li>值不能为负数。</li><li>行内元素的左右内边距是没问题的，上下内边距不能完美的设置。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-盒子边框相关"><a href="#3-2-3-盒子边框相关" class="headerlink" title="3.2.3 盒子边框相关"></a>3.2.3 盒子边框相关</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>border-style</td>      <td>设置边框风格，复合四个方向</td>      <td>        none：无（默认值）<br>        solid：实线<br>        dashed：虚线<br>        dotted：点线<br>        double：双实线<br>      </td>    </tr>    <tr>      <td>border-width</td>      <td>设置边框宽度，复合四个方向</td>      <td>长度值，默认3px</td>    </tr>    <tr>      <td>border-color</td>      <td>设置边框颜色，复合四个方向</td>      <td>颜色代码，默认黑色</td>    </tr>    <tr>      <td>border</td>      <td>设置复合属性</td>      <td>没有数量和顺序要求，同属性后面的会覆盖前面的</td>    </tr>  </tbody></table><p>上述的每个属性都能在四个方向上的边框单独设置。</p><h4 id="3-2-4-盒子外边距相关"><a href="#3-2-4-盒子外边距相关" class="headerlink" title="3.2.4 盒子外边距相关"></a>3.2.4 盒子外边距相关</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>margin-top</td>      <td>设置上外边距</td>      <td>长度值</td>    </tr>    <tr>      <td>margin-right</td>      <td>设置右外边距</td>      <td>长度值</td>    </tr>    <tr>      <td>margin-bottom</td>      <td>设置下外边距</td>      <td>长度值</td>    </tr>    <tr>      <td>margin-left</td>      <td>设置左外边距</td>      <td>长度值</td>    </tr>    <tr>      <td>margin</td>      <td>复合属性</td>      <td>        顺时针设置外边距，空格分隔：<br>        <dl>          <dt>1. 四个方向外边距相同：</dt>          <dd><code>margin: 长度;</code></dd>          <dt>2. 上下外边距相同，左右外边距相同：</dt>          <dd><code>margin: 上下长度 左右长度;</code></dd>          <dt>3. 上外边距，左右外边距相同，下外边距：</dt>          <dd><code>margin: 上长度 左右长度 下长度;</code></dd>          <dt>4. 上外边距，右外边距，下外边距，左外边距：</dt>          <dd><code>margin: 上长度 右长度 下长度 左长度;</code></dd>        </dl>      </td>    </tr>  </tbody></table><p>说明：</p><ul><li>行内元素的左右外边距是没问题的，上下外边距不能设置。</li><li>上左影响自己的位置，下右影响后面兄弟元素的位置。</li><li>值可以为负数，负值允许其他元素进入到元素内部。</li><li>值可以设为auto，给块级元素的左右设为auto会让元素水平居中。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure><h3 id="3-3-技巧"><a href="#3-3-技巧" class="headerlink" title="3.3 技巧"></a>3.3 技巧</h3><h4 id="3-3-1-外边距问题"><a href="#3-3-1-外边距问题" class="headerlink" title="3.3.1 外边距问题"></a>3.3.1 外边距问题</h4><h5 id="3-3-1-1-外边距塌陷"><a href="#3-3-1-1-外边距塌陷" class="headerlink" title="3.3.1.1 外边距塌陷"></a>3.3.1.1 外边距塌陷</h5><p>在设置外边距时，第一个子元素的上外边距会作用在父元素上，最后一个子元素的下外边距会作用在父元素上。</p><p>问题原因：</p><ul><li>历史遗留问题，可以看作早期CSS故意这么处理的。</li></ul><p>解决办法：</p><ul><li>方案一：给父元素的<code>padding</code>属性设为非0的数字。</li><li>方案二：给父元素的<code>border</code>属性设为非0的数字。</li><li>方案三（推荐）：把父元素的<code>overflow</code>属性设为hidden。</li></ul><h5 id="3-3-1-2-外边距合并"><a href="#3-3-1-2-外边距合并" class="headerlink" title="3.3.1.2 外边距合并"></a>3.3.1.2 外边距合并</h5><p>上面兄弟元素的下外边距和下面兄弟元素的上外边距会合并，取一个最大的值，而不是相加。</p><p>这种是正常的，可以把元素外边距设为期望的总和。</p><h4 id="3-3-2-内容溢出"><a href="#3-3-2-内容溢出" class="headerlink" title="3.3.2 内容溢出"></a>3.3.2 内容溢出</h4><p>文本内容过长超出父元素设置的高度会产生纵向内容溢出，子元素宽度过长超出父元素设置的宽度会产生横线内容溢出。</p><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>overflow</td>      <td>设置内容溢出的处理方式</td>      <td>        visible：显示（默认值）<br>        hidden：隐藏（常用）<br>        scroll：显示滚动条，不论内容是否溢出<br>        auto：自动显示滚动条，内容不溢出不显示（常用）<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: auto;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-隐藏元素"><a href="#3-3-3-隐藏元素" class="headerlink" title="3.3.3 隐藏元素"></a>3.3.3 隐藏元素</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>visibility</td>      <td>设置元素的可见性</td>      <td>        show：元素会被显示（默认值）<br>        hidden：元素会被隐藏，会保留占位<br>      </td>    </tr>    <tr>      <td>display</td>      <td>控制元素的显示模式</td>      <td>        none：元素会被隐藏，不保留占位<br>        block：元素将作为块级元素显示<br>        inline：元素将作为内联元素显示<br>        inline-block：元素将作为行内块元素显示<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: none;</span><br></pre></td></tr></table></figure><h4 id="3-3-4-继承样式"><a href="#3-3-4-继承样式" class="headerlink" title="3.3.4 继承样式"></a>3.3.4 继承样式</h4><p>元素会自动拥有祖先元素设置的某些样式，并且关系近的优先级高。</p><p>可以继承的属性，都是不影响布局的，即都是和盒子模型没关系的。</p><h4 id="3-3-5-居中布局"><a href="#3-3-5-居中布局" class="headerlink" title="3.3.5 居中布局"></a>3.3.5 居中布局</h4><p>让子元素在父元素中水平居中：</p><ol><li>子元素为块级元素。给子元素设置：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>: auto;</span><br></pre></td></tr></table></figure></li><li>子元素为行内元素和行内块元素。给父元素设置：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center;</span><br></pre></td></tr></table></figure></li></ol><p>让子元素在父元素中垂直居中：</p><ol><li>子元素为块级元素。给子元素设置：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin-top</span>: (父元素盒子内容高度-子元素盒子高度)/<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li>子元素为行内元素和行内块元素<br>2.1 给父元素设置：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">line-height</span>: 父元素盒子内容高度;</span><br></pre></td></tr></table></figure>2.2 当子元素字体大小不同时，字体小的子元素会靠下，需要让子元素使用中线对齐，给子元素设置：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br></pre></td></tr></table></figure>2.3 父元素字体越大子元素越靠下，需要清除父元素字体的影响，给父元素设置：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: <span class="number">0px</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-3-6-消除空白"><a href="#3-3-6-消除空白" class="headerlink" title="3.3.6 消除空白"></a>3.3.6 消除空白</h4><h5 id="3-3-6-1-消除换行空白"><a href="#3-3-6-1-消除换行空白" class="headerlink" title="3.3.6.1 消除换行空白"></a>3.3.6.1 消除换行空白</h5><p>行内元素和行内块元素之间的换行会被浏览器解析为一个空白字符。</p><p>解决办法：</p><ul><li>方案一：去掉换行和空格。</li><li>方案二（推荐）：把父元素字体大小设为0，再给子元素单独设置字体大小。</li></ul><h5 id="3-3-6-2-消除基线空白"><a href="#3-3-6-2-消除基线空白" class="headerlink" title="3.3.6.2 消除基线空白"></a>3.3.6.2 消除基线空白</h5><p>子元素与基线对齐，而基线与盒子底部之间是有一定距离的。</p><p>解决办法：</p><ul><li>方案一（推荐）：把子元素的<code>vertical-align</code>属性设为除了baseline以外的其他值，比如top、middel、bottom均可。</li><li>方案二：若子元素只有一个，设置子元素的<code>display</code>属性为block，将子元素转为块级元素。</li><li>方案三：把父元素字体大小设为0，清除父元素字体的影响，再给子元素单独设置字体大小。</li></ul><h2 id="4-浮动"><a href="#4-浮动" class="headerlink" title="4 浮动"></a>4 浮动</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>浮动最初是用来实现文字环绕图片效果的，现在是主流的页面布局方式之一。</p><p>元素浮动的特点：</p><ul><li>会脱离文档流。</li><li>不管浮动前是什么元素，浮动后默认宽高都是尽可能小的被内容撑开，而且可以设置宽高。</li><li>不会独占一行，可以与其他元素共用一行。</li><li>不会产生外边距问题，能够完美的设置四个方向的外边距和内边距。</li><li>不会有空白问题。</li></ul><h3 id="4-2-影响"><a href="#4-2-影响" class="headerlink" title="4.2 影响"></a>4.2 影响</h3><p>浮动产生的影响：</p><ul><li>对父元素的影响：不能撑起父元素的高度，导致父元素高度塌陷，但是父元素的宽度依然束缚浮动元素。</li><li>对兄弟元素的影响：不浮动的兄弟元素会占据浮动元素之前的位置，而且是在浮动元素的下层。</li></ul><p>解决浮动的影响：</p><ul><li>方案一：给父元素指定高度，不能解决对兄弟元素的影响。</li><li>方案二：给父元素也设置浮动，不能解决对兄弟元素的影响。</li><li>方案三：给父元素的<code>overflow</code>属性设置为hidden，不能解决对兄弟元素的影响。</li><li>方案四（推荐）：如果不是全都浮动，给不浮动的兄弟元素的<code>clear</code>属性设为both，清除浮动效果，解决浮动产生的全部影响。</li><li>方案五：如果全都浮动，在最后添加不浮动的块级元素，给不浮动的块级元素的<code>clear</code>属性设为both，原理与方案四相同。</li><li>方案六（推荐）：如果全都浮动，给父元素设置伪元素，通过伪元素清除浮动，原理与方案四相同：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">父元素<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-属性"><a href="#4-3-属性" class="headerlink" title="4.3 属性"></a>4.3 属性</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>float</td>      <td>设置元素的浮动方式</td>      <td>        left：设置左浮动<br>        right：设置右浮动<br>        none：不浮动（默认值）<br>      </td>    </tr>    <tr>      <td>clear</td>      <td>控制元素的显示模式</td>      <td>        left：清除前面左浮动的影响<br>        right：清除前面右浮动的影响<br>        both：清除前面左右浮动的影响<br>      </td>    </tr>  </tbody></table><h2 id="5-定位"><a href="#5-定位" class="headerlink" title="5 定位"></a>5 定位</h2><h3 id="5-1-属性"><a href="#5-1-属性" class="headerlink" title="5.1 属性"></a>5.1 属性</h3><p>设置定位方式。常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>position</td>      <td>设置元素的定位方式</td>      <td>        static：不开启定位（默认值）<br>        relative：开启相对定位<br>        absolute：开启绝对定位<br>        fixed：开启固定定位<br>        sticky：开启粘性定位<br>      </td>    </tr>  </tbody></table><p>开启定位后可以调整元素位置。常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>left</td>      <td>调整到左侧边缘的距离</td>      <td>长度值</td>    </tr>    <tr>      <td>right</td>      <td>调整到右侧边缘的距离，不能和left同时使用</td>      <td>长度值</td>    </tr>    <tr>      <td>top</td>      <td>调整到顶部边缘的距离</td>      <td>长度值</td>    </tr>    <tr>      <td>bottom</td>      <td>调整到底部边缘的距离，不能和top同时使用</td>      <td>长度值</td>    </tr>  </tbody></table><h3 id="5-2-分类"><a href="#5-2-分类" class="headerlink" title="5.2 分类"></a>5.2 分类</h3><h4 id="5-2-1-相对定位"><a href="#5-2-1-相对定位" class="headerlink" title="5.2.1 相对定位"></a>5.2.1 相对定位</h4><p>参考元素：</p><ul><li>基于原来的位置，即基于正常定位的位置进行调整的。</li></ul><p>效果：</p><ul><li>只设为相对定位，不设置位置，无变化。</li><li>设置位置后，根据层级进行元素覆盖。</li></ul><p>特点：</p><ul><li>不会脱离文档流，元素位置的变化，只是视觉效果上的变化，不会对其他元素产生任何影响。</li><li>不建议和<code>float</code>属性同时使用。</li><li>不建议和<code>margin</code>属性同时使用。</li><li>元素（行内元素、行内块元素、块级元素）在设置为相对定位之后，不会变成定位元素（宽度和高度由内容决定，可以自由设置）。</li></ul><h4 id="5-2-2-绝对定位"><a href="#5-2-2-绝对定位" class="headerlink" title="5.2.2 绝对定位"></a>5.2.2 绝对定位</h4><p>参考元素：</p><ul><li>基于包含块。如果没有脱离文档流，包含块就是父元素，如果脱离文档流，包含块就是最近开启任何定位的祖先元素。</li></ul><p>效果：</p><ul><li>只设为绝对定位，不设置位置，元素在绝对定位前的位置浮动，后面的元素占用绝对定位前的位置并且被元素覆盖。</li><li>设置位置后，根据包含块进行元素覆盖。</li></ul><p>特点：</p><ul><li>会脱离文档流，会对后面的兄弟元素有影响，会对父元素有影响。</li><li>不建议和<code>float</code>属性同时使用，浮动会失效，以绝对定位为主。</li><li>不建议和<code>margin</code>属性同时使用。</li><li>元素（行内元素、行内块元素、块级元素）在设置为绝对定位之后，都会变成定位元素（宽度和高度由内容决定，可以自由设置）。</li></ul><p>使用规则：</p><ul><li>在父元素上开启相对定位，在对其他元素没有影响的情况下，支持作为子元素的包含块。</li><li>在子元素上开启绝对定位，在包含块为父元素的前提下修改位置。</li></ul><p>和浮动的区别：</p><ul><li>绝对定位的元素内容会被覆盖，不能环绕元素。</li><li>绝对定位的元素会变成定位元素。</li><li>绝对定位的元素一般会配合相对定位的包含块一起使用。</li></ul><h4 id="5-2-3-固定定位"><a href="#5-2-3-固定定位" class="headerlink" title="5.2.3 固定定位"></a>5.2.3 固定定位</h4><p>参考元素：</p><ul><li>基于视口。对于PC浏览器来说，视口就是浏览器展示内容的界面。</li></ul><p>效果：</p><ul><li>只设为固定定位，不设置位置，元素在固定定位前的位置浮动，后面的元素占用固定定位前的位置并且被元素覆盖。</li><li>设置位置后，根据视口进行元素覆盖，并且页面内容滚动时，固定定位固定在视口相对位置，不随页面内容滚动。</li></ul><p>特点：</p><ul><li>会脱离文档流，会对后面的兄弟元素有影响，会对父元素有影响。</li><li>不建议和<code>float</code>属性同时使用，浮动会失效，以固定定位为主。</li><li>不建议和<code>margin</code>属性同时使用。</li><li>元素（行内元素、行内块元素、块级元素）在设置为固定定位之后，都会变成定位元素（宽度和高度由内容决定，可以自由设置）。</li></ul><p>和绝对定位的区别：</p><ul><li>固定定位不使用包含块，不需要父元素配合，不需要和相对定位配合。</li><li>固定定位保持在视口显示，不会跟随内容移动而消失。</li></ul><h4 id="5-2-4-粘性定位"><a href="#5-2-4-粘性定位" class="headerlink" title="5.2.4 粘性定位"></a>5.2.4 粘性定位</h4><p>参考元素：</p><ul><li>基于滚动元素。根据关系最近的具有滚动机制的祖先元素，即祖先元素必须有滚动条，最远的是<code>body</code>元素。</li></ul><p>效果：</p><ul><li>只设为粘性定位，不设置位置，无变化。</li><li>设置位置后，根据滚动元素进行元素覆盖，并且页面内容滚动时，粘性定位固定在滚动元素相对位置，不随页面内容滚动。</li><li>当滚动元素和父元素同时在页面显示时，粘性定位显示，否则粘性定位消失，多个粘性定位会进行元素覆盖。</li></ul><p>特点：</p><ul><li>不会脱离文档流，是一种专门用于窗口滚动时的新的定位方式。</li><li>不建议和<code>float</code>属性同时使用。</li><li>不建议和<code>margin</code>属性同时使用。</li><li>元素（行内元素、行内块元素、块级元素）在设置为粘性定位之后，不会变成定位元素（宽度和高度由内容决定，可以自由设置）。</li></ul><p>滚动机制：</p><ul><li>设置元素的高度小于元素内容的高度，继续将元素的<code>overflow</code>属性设为scroll或者auto，就能在元素上显示滚动条。</li></ul><h3 id="5-3-层级"><a href="#5-3-层级" class="headerlink" title="5.3 层级"></a>5.3 层级</h3><p>元素的显示层级：</p><ol><li>开启定位的元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的。</li><li>如果位置发生重叠，默认情况下，后面的元素会覆盖前面的元素。</li><li>如果元素被显示层级低的元素覆盖了，可能是因为包含块的显示层级低被其他元素覆盖，导致元素和包含块一起被覆盖。</li></ol><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>z-index</td>      <td>调整元素的显示层级，开启定位的元素有效</td>      <td>无单位的数字，值越大显示层级越高</td>    </tr>  </tbody></table><h3 id="5-4-定位元素的特殊应用"><a href="#5-4-定位元素的特殊应用" class="headerlink" title="5.4 定位元素的特殊应用"></a>5.4 定位元素的特殊应用</h3><p>定位元素的宽度和高度由内容决定，不再充满包含块，由此会带来一些问题。</p><p>成为定位元素的两种方式：</p><ul><li>方式一：元素使用固定定位成为定位元素。</li><li>方式二：父元素使用相对定位，元素使用绝对定位成为定位元素。</li></ul><h4 id="5-4-1-让定位元素充满包含块"><a href="#5-4-1-让定位元素充满包含块" class="headerlink" title="5.4.1 让定位元素充满包含块"></a>5.4.1 让定位元素充满包含块</h4><p>在定位元素没有设置宽度和高度的前提下，让定位元素在包含块居中，有以下两种方案：</p><ul><li>方案一：计算充满所需要的宽度和高度。</li><li>方案二（推荐）：给定位元素的用于调整定位的属性设置为0：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-4-2-让定位元素在包含块居中"><a href="#5-4-2-让定位元素在包含块居中" class="headerlink" title="5.4.2 让定位元素在包含块居中"></a>5.4.2 让定位元素在包含块居中</h4><p>在定位元素设置宽度和高度的前提下，让定位元素在包含块居中，有以下两种方案：</p><ul><li>方案一：设置左右外边距为auto，计算上外边距长度。</li><li>方案二：使用折半的方式设置：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: 元素宽度一半的负数;</span><br><span class="line"><span class="attribute">margin-top</span>: 元素高度一半的负数;</span><br></pre></td></tr></table></figure></li><li>方案三（推荐）：将用于调整定位的属性设置为0，同时设置外边距为auto：<figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-布局"><a href="#6-布局" class="headerlink" title="6 布局"></a>6 布局</h2><h3 id="6-1-版心"><a href="#6-1-版心" class="headerlink" title="6.1 版心"></a>6.1 版心</h3><p>在PC端网页中，一般都会有一个固定宽度且水平居中的盒子，来显示网页的主要内容，这是网页的版心。</p><p>版心的宽度一般是960像素到1200像素之间。</p><p>版心可以是一个，也可以是多个。</p><h3 id="6-2-布局名词"><a href="#6-2-布局名词" class="headerlink" title="6.2 布局名词"></a>6.2 布局名词</h3><p>常用布局名词：</p><ul><li>版心：container</li><li>顶部导航条：topbar</li><li>页头：header、page-header</li><li>导航：nav、navigator、navbar</li><li>搜索框：search、search-box</li><li>横幅：banner</li><li>主要内容：content、main</li><li>侧边栏：aside、sidebar</li><li>页脚：footer、page-footer</li></ul><h3 id="6-3-重置默认样式"><a href="#6-3-重置默认样式" class="headerlink" title="6.3 重置默认样式"></a>6.3 重置默认样式</h3><p>在早期元素默认样式能够快速的绘制网页，但如今网页的设计越来越复杂，这些默认样式会在绘制页面时带来麻烦，而且这些默认样式在不同的浏览器<br>上呈现出来的效果也不一样，所以需要重置这些默认样式。</p><h4 id="6-3-1-全局选择器"><a href="#6-3-1-全局选择器" class="headerlink" title="6.3.1 全局选择器"></a>6.3.1 全局选择器</h4><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此种方法在测试时可以用，但实际开发中不会使用，因为在重置样式时，需要对特定元素进行重做，并不是清除所有样式。</p><h4 id="6-3-2-重置样式文件"><a href="#6-3-2-重置样式文件" class="headerlink" title="6.3.2 重置样式文件"></a>6.3.2 重置样式文件</h4><p>将对默认样式的修改写入单独的<code>reset.css</code>文件，在页面中引入默认的CSS文件。</p><h4 id="6-3-3-Normalize-css"><a href="#6-3-3-Normalize-css" class="headerlink" title="6.3.3 Normalize.css"></a>6.3.3 Normalize.css</h4><p>Normalize.css也是CSS文件，它对默认样式提供了跨浏览器的高度一致性，相比传统的重置样式文件，Normalize.css是一种现代的、为HTML5准备的优质替代方案。</p><p>使用方式和重置样式文件一样，需要先在官网下载最新的CSS文件，在页面中引入即可。</p><p>官网：<a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><p>相对于重置样式文件来说，重置样式文件侧重于清除样式，Normalize.css侧重于统一样式，有如下优点：</p><ul><li>保护了有价值的默认样式，而不是完全去掉它们。</li><li>为大部分HTML元素提供高度一致的样式。</li><li>新增对HTML5元素的设置。</li><li>对并集选择器的使用比较谨慎，有效避免调试工具杂乱。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了CSS的盒子模型。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS2入门</title>
    <link href="https://momashanhe.com/posts/20240402/144927/"/>
    <id>https://momashanhe.com/posts/20240402/144927/</id>
    <published>2024-04-02T06:49:27.000Z</published>
    <updated>2024-08-12T09:25:38.889Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了CSS的语法规则和选择器，以及CSS常用的一些属性。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>CSS全称：Cascading Style Sheets（层叠样式表）。</p><p>CSS也是一种标记语言，用于给网页设置样式，比如文字大小、颜色、元素宽高等等。</p><p>官方文档地址：</p><ul><li>W3C官网：<a href="https://www.w3.org/">https://www.w3.org/</a></li><li>W3School：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn</a></li></ul><h2 id="2-语法规范"><a href="#2-语法规范" class="headerlink" title="2 语法规范"></a>2 语法规范</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><p>CSS的语法为：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  属性名: 属性值;</span><br><span class="line">  属性名: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要由两部分组成：</p><ul><li>选择器：匹配要添加样式的元素。</li><li>声明块：给匹配到的元素设置具体的样式，声明块由多个声明组成，并使用<code>&#123;&#125;</code>包裹，声明由属性名和属性值组成。</li></ul><p>说明：</p><ul><li>选择器和声明块之间，声明的属性名和属性值之间，均有一个可以省略的空格，建议不要省略，提高可读性。</li><li>声明使用<code>;</code>分号结尾，最后一个声明可以省略，建议不要省略，提高可读性。</li></ul><h3 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h3><p>CSS中注释的语法为：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释内容 */</span></span><br></pre></td></tr></table></figure><h3 id="2-3-代码风格"><a href="#2-3-代码风格" class="headerlink" title="2.3 代码风格"></a>2.3 代码风格</h3><p>展开风格，开发时使用，可读性高：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧凑风格，上线时使用，文件体积小：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure><p>在上线时可以使用工具将展开风格转为紧凑风格。</p><h3 id="2-4-编写位置"><a href="#2-4-编写位置" class="headerlink" title="2.4 编写位置"></a>2.4 编写位置</h3><h4 id="2-4-1-行内样式"><a href="#2-4-1-行内样式" class="headerlink" title="2.4.1 行内样式"></a>2.4.1 行内样式</h4><p>行内样式又称为内联样式，写在元素的<code>style</code>属性中。</p><p>示例：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎学习<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">span</span>&gt;</span>知识<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式编写的CSS没有和HTML分离，不能体现出结构和样式分离的思想，而且样式不能复用，不建议使用这种方式。</p><h4 id="2-4-2-内部样式"><a href="#2-4-2-内部样式" class="headerlink" title="2.4.2 内部样式"></a>2.4.2 内部样式</h4><p>将CSS提取出来，写在页面内部的<code>style</code>元素中。</p><p>示例：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>理论上可以将<code>style</code>元素放在页面的任何位置，建议放到<code>head</code>元素中。</p><p>和行内样式相比，这种方式编写的结构和样式分离，样式也能复用，但也没有做到完全分离，并且样式不能在多个页面复用。</p><h4 id="2-4-3-外部样式"><a href="#2-4-3-外部样式" class="headerlink" title="2.4.3 外部样式"></a>2.4.3 外部样式</h4><p>将CSS进一步提取，写在单独的CSS文件中，在HTML页面中使用元素引用外部的CSS文件。</p><p>相关的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>link</td>      <td>表示引用文件</td>      <td>单标签</td>    </tr>  </tbody></table><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>rel</td>      <td>引用文件和当前文件的关系</td>      <td>        目前用到的关系：<br>        stylesheet：引用的是样式表<br>      </td>    </tr>    <tr>      <td>href</td>      <td>引用文件位置</td>      <td>位置</td>    </tr>  </tbody></table><p>创建CSS文件，后缀为<code>.css</code>格式。示例：</p><figure class="highlight css"><figcaption><span>hello.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在HTML页面引用CSS文件。示例：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./hello.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式可维护高，并且做到了结构和样式分离，也能被其他页面复用，建议使用这种方式。</p><h3 id="2-5-优先级"><a href="#2-5-优先级" class="headerlink" title="2.5 优先级"></a>2.5 优先级</h3><p>三种方式的优先级：行内样式 &gt; 内部样式 &#x3D; 外部样式</p><p>行内样式的优先级最高，内部样式和外部样式的优先级和位置有关，后面的样式会覆盖前面的样式。</p><p>三种方式比较：</p><table>  <thead>    <tr>      <th>方式</th>      <th>优点</th>      <th>缺点</th>      <th>使用频率</th>      <th>作用范围</th>    </tr>  </thead>  <tbody>    <tr>      <td>行内样式</td>      <td>优先级高</td>      <td>结构和样式未分离<br>样式不能复用</td>      <td>低</td>      <td>当前元素</td>    </tr>    <tr>      <td>内部样式</td>      <td>结构和样式分离<br>样式可以在当前页面复用</td>      <td>结构和样式未彻底分离<br>样式不能在多个页面复用</td>      <td>中</td>      <td>当前页面</td>    </tr>    <tr>      <td>外部样式</td>      <td>结构和样式彻底分离<br>样式可以在多个页面复用<br>能够触发浏览器缓存机制</td>      <td>需要引入才能使用</td>      <td>低</td>      <td>多个页面</td>    </tr>  </tbody></table><h3 id="2-6-书写顺序"><a href="#2-6-书写顺序" class="headerlink" title="2.6 书写顺序"></a>2.6 书写顺序</h3><p>为了便于阅读和维护，提升浏览器的渲染性能，建议遵从以下顺序书写：</p><ul><li>优先级第一的是定位属性：display visibility box-sizing position top&#x2F;left&#x2F;bottom&#x2F;right transform float clear z-index flex-xxx order</li><li>优先级第二的是自身属性：width&#x2F;height&#x2F;line-height overflow padding margin background border</li><li>优先级第三的是文字样式：font-family font-size font-style font-weight color</li><li>优先级第四的是文本属性：text-align vertical-align text-wrap text-indent text-decoration letter-spacing word-spacing white-space text-overflow</li><li>优先级第五的是CSS3中新增属性：content box-shadow border-radius transition</li></ul><h2 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3 选择器"></a>3 选择器</h2><h3 id="3-1-基本选择器"><a href="#3-1-基本选择器" class="headerlink" title="3.1 基本选择器"></a>3.1 基本选择器</h3><p>基本选择器：</p><ul><li>通配选择器</li><li>元素选择器</li><li>属性选择器</li><li>类选择器</li><li>ID选择器</li></ul><p>其他选择器可以参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">MDN官方CSS文档</a></p><h4 id="3-1-1-通配选择器"><a href="#3-1-1-通配选择器" class="headerlink" title="3.1.1 通配选择器"></a>3.1.1 通配选择器</h4><p>匹配所有元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-元素选择器"><a href="#3-1-2-元素选择器" class="headerlink" title="3.1.2 元素选择器"></a>3.1.2 元素选择器</h4><p>匹配元素的标签名和选择器的标签名相同的所有元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签名 &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-类选择器"><a href="#3-1-3-类选择器" class="headerlink" title="3.1.3 类选择器"></a>3.1.3 类选择器</h4><p>匹配元素的<code>class</code>属性值和选择器的类名相同的所有元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在类名前增加<code>.</code>符号，表示这是类选择器，用来和其他选择器区分。</li><li>一个元素中的<code>class</code>属性最多只有一个，属性值可以有多个，空格分隔。</li><li><code>class</code>属性值不是唯一的，不同的元素可以有相同的属性值。</li><li><code>class</code>属性值按照标准，建议使用英文和数字的组合，并且使用英文开头，多个单词之间使用<code>-</code>短横线和<code>_</code>下划线连接，注意区分大小写。</li></ul><h4 id="3-1-4-ID选择器"><a href="#3-1-4-ID选择器" class="headerlink" title="3.1.4 ID选择器"></a>3.1.4 ID选择器</h4><p>匹配元素的<code>id</code>属性值和选择器的<code>id</code>属性值相同的所有元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>值 &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在id值前增加<code>.</code>符号，表示这是ID选择器，用来和其他选择器区分。</li><li>一个元素中的<code>id</code>属性最多只有一个，属性值只能有一个。</li><li><code>id</code>属性值是唯一的，不同的元素不能有相同的属性值。</li><li><code>id</code>属性值按照标准，建议使用英文和数字的组合，并且使用英文开头，多个单词之间使用<code>-</code>短横线和<code>_</code>下划线连接，注意区分大小写。</li></ul><h4 id="3-1-5-属性选择器"><a href="#3-1-5-属性选择器" class="headerlink" title="3.1.5 属性选择器"></a>3.1.5 属性选择器</h4><p>匹配元素的属性及属性值和选择器指定的属性及属性值相同的所有元素。</p><p>属性选择器可以对元素的所有属性进行匹配，可以实现类选择器和ID选择器的效果。</p><p>属性选择器的语法较为复杂，使用<code>[]</code>包裹来区分其他选择器：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选择具有指定属性名的元素，对属性值没有要求 */</span></span><br><span class="line"><span class="selector-attr">[属性名]</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择具有指定属性名的元素，并且属性值是指定属性值的元素 */</span></span><br><span class="line"><span class="selector-attr">[属性名=属性值]</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择具有指定属性名的元素，并且属性值是以指定属性值开头的元素 */</span></span><br><span class="line"><span class="selector-attr">[属性名^=属性值]</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择具有指定属性名的元素，并且属性值是以指定属性值结尾的元素 */</span></span><br><span class="line"><span class="selector-attr">[属性名$=属性值]</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择具有指定属性名的元素，并且属性值包含指定属性值的元素 */</span></span><br><span class="line"><span class="selector-attr">[属性名*=属性值]</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择具有指定属性名的元素，并且属性值是用空格分隔的列表，存在指定属性值的列表项的元素 */</span></span><br><span class="line"><span class="selector-attr">[属性名~=属性值]</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择具有指定属性名的元素，并且属性值是指定属性值的元素或者属性值是以指定属性值拼接&quot;-&quot;开头的元素 */</span></span><br><span class="line"><span class="selector-attr">[属性名|=属性值]</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>选择器中的属性名不需要<code>&quot;</code>双引号包裹，但是属性值需要<code>&quot;</code>双引号包裹。</li></ul><h3 id="3-2-复合选择器"><a href="#3-2-复合选择器" class="headerlink" title="3.2 复合选择器"></a>3.2 复合选择器</h3><p>复合选择器建立在基本选择器之上，由多个基础选择器，通过不同的方式组合而成。</p><p>主要有：</p><ul><li>并集选择器</li><li>交集选择器</li><li>后代选择器</li><li>子代选择器</li><li>兄弟选择器</li><li>伪类选择器</li><li>伪元素选择器</li></ul><h4 id="3-2-1-并集选择器"><a href="#3-2-1-并集选择器" class="headerlink" title="3.2.1 并集选择器"></a>3.2.1 并集选择器</h4><p>选择满足任何一个选择器的元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基础选择器<span class="number">1</span>,</span><br><span class="line">基础选择器<span class="number">2</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>不同的选择器使用<code>,</code>逗号分隔，建议多个选择器换行编写，提高可读性。</li></ul><h4 id="3-2-2-交集选择器"><a href="#3-2-2-交集选择器" class="headerlink" title="3.2.2 交集选择器"></a>3.2.2 交集选择器</h4><p>选择满足所有选择器的元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基础选择器<span class="number">1</span>基础选择器<span class="number">2</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>不同的选择器相邻，中间不能有任何符号，也不能有空格和换行。</li><li>因为没有任何符号分隔，所以如果有元素选择器的话，需要将其放在首位，否则会被识别为其他选择器的一部分。</li></ul><h3 id="3-3-关系选择器"><a href="#3-3-关系选择器" class="headerlink" title="3.3 关系选择器"></a>3.3 关系选择器</h3><h4 id="3-3-1-后代选择器"><a href="#3-3-1-后代选择器" class="headerlink" title="3.3.1 后代选择器"></a>3.3.1 后代选择器</h4><p>选择满足后一个选择器是前一个选择器的后代的元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基础选择器<span class="number">1</span> 基础选择器<span class="number">2</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>不同的选择器使用空格分隔，子代也属于后代。</li></ul><h4 id="3-3-2-子代选择器"><a href="#3-3-2-子代选择器" class="headerlink" title="3.3.2 子代选择器"></a>3.3.2 子代选择器</h4><p>选择满足后一个选择器是前一个选择器的子代的元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基础选择器<span class="number">1</span>&gt;基础选择器<span class="number">2</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>不同的选择器使用<code>&gt;</code>大于号分隔。</li></ul><h4 id="3-3-3-兄弟选择器"><a href="#3-3-3-兄弟选择器" class="headerlink" title="3.3.3 兄弟选择器"></a>3.3.3 兄弟选择器</h4><h5 id="3-3-3-1-相邻兄弟选择器"><a href="#3-3-3-1-相邻兄弟选择器" class="headerlink" title="3.3.3.1 相邻兄弟选择器"></a>3.3.3.1 相邻兄弟选择器</h5><p>选择满足后一个选择器是前一个选择器下方的相邻兄弟的元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基础选择器<span class="number">1</span>+基础选择器<span class="number">2</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>不同的选择器使用<code>+</code>加号分隔。</li><li>选择器匹配的元素之间必须是兄弟关系，必须相邻，除了空格和换行，没有其他代码。</li><li>可以匹配到多个元素，每个选择器匹配的元素的相邻兄弟元素只有一个。</li></ul><h5 id="3-3-3-2-通用兄弟选择器"><a href="#3-3-3-2-通用兄弟选择器" class="headerlink" title="3.3.3.2 通用兄弟选择器"></a>3.3.3.2 通用兄弟选择器</h5><p>选择满足后一个选择器是前一个选择器下方的所有兄弟的元素。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基础选择器<span class="number">1</span>~基础选择器<span class="number">2</span> &#123;</span><br><span class="line">  声明块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>不同的选择器使用<code>~</code>加号分隔。</li><li>选择器匹配的元素之间必须是兄弟关系，可以有其他代码。</li><li>可以匹配到多个元素，每个选择器匹配的元素的兄弟元素可以有多个。</li></ul><h3 id="3-4-高级选择器"><a href="#3-4-高级选择器" class="headerlink" title="3.4 高级选择器"></a>3.4 高级选择器</h3><h4 id="3-4-1-伪类选择器"><a href="#3-4-1-伪类选择器" class="headerlink" title="3.4.1 伪类选择器"></a>3.4.1 伪类选择器</h4><p>说明：CSS3新增功能。</p><h5 id="3-4-1-1-伪类"><a href="#3-4-1-1-伪类" class="headerlink" title="3.4.1.1 伪类"></a>3.4.1.1 伪类</h5><p>普通的元素，如果处于某种特殊状态下，把这种处于特殊状态下的元素称为伪类。</p><p>伪类选择器固定以<code>:</code>冒号开头。</p><h5 id="3-4-1-2-动态伪类"><a href="#3-4-1-2-动态伪类" class="headerlink" title="3.4.1.2 动态伪类"></a>3.4.1.2 动态伪类</h5><p>匹配需要用户手动操作才会出现的元素：</p><ul><li>使用<code>:link</code>选择未被访问的元素，多用于超链接。</li><li>使用<code>:visited</code>选择被访问后的元素，多用于超链接。</li><li>使用<code>:hover</code>选择被鼠标悬停的元素。</li><li>使用<code>:focus</code>选择获取焦点时的元素，多用于表单元素。</li><li>使用<code>:active</code>选择被鼠标按住的元素。</li></ul><p>说明：</p><ul><li>在使用<code>:link</code>和<code>:visited</code>匹配超链接时，匹配到的是具有<code>href</code>属性的超链接，因为这种超链接才具有<code>访问</code>的功能。</li><li>在使用<code>:focus</code>匹配元素时，需要元素拥有获取焦点的功能，否则无效。</li><li>如果元素同时存在多个伪类选择器那么后面的样式会替换前面的样式，所以需要按照<code>l-v-h-f-a</code>的顺序，将规则宽松的放前面，将规则严格的放后面。</li></ul><h5 id="3-4-1-3-结构伪类"><a href="#3-4-1-3-结构伪类" class="headerlink" title="3.4.1.3 结构伪类"></a>3.4.1.3 结构伪类</h5><p>匹配在页面结构上处于特殊顺序的元素：</p><ul><li>使用<code>:first-child</code>选择元素的父元素的所有子元素中的第一个，即元素的第一个兄弟元素，并且兄弟元素要和元素相同。</li><li>使用<code>:last-child</code>选择元素的父元素的所有子元素中的最后一个，即元素的最后一个兄弟元素，并且兄弟元素要和元素相同。</li><li>使用<code>:nth-child(n)</code>选择元素的父元素的所有子元素中的第<code>n</code>个，即元素的第<code>n</code>个兄弟元素，并且兄弟元素要和元素相同。</li><li>使用<code>:first-of-type</code>选择元素的父元素的和元素相同的子元素中的第一个，即元素的第一个相同的兄弟元素。</li><li>使用<code>:last-of-type</code>选择元素的父元素的和元素相同的子元素中的最后一个，即元素的最后一个相同的兄弟元素。</li><li>使用<code>:nth-of-type(n)</code>选择元素的父元素的和元素相同的子元素中的第<code>n</code>个，即元素的第<code>n</code>个相同的兄弟元素。</li><li>使用<code>:root</code>选择根元素，即<code>html</code>元素。</li><li>使用<code>:empty</code>选择内容为空元素，即双标签中开始标签紧跟结束标签的元素或者单标签的元素，双标签的空格和换行也算内容。</li></ul><p>说明：</p><ul><li>伪类选择器中的<code>n</code>实际上是<code>an+b</code>性质的表达式，<code>a</code>和<code>b</code>都是数字。</li><li><code>0</code>或者<code>小于0</code>都表示不选择任何元素。</li><li><code>n</code>表示选择全部元素。</li><li><code>2n</code>表示选择偶数元素。</li><li><code>2n+1</code>表示选择奇数元素。</li><li><code>-n+5</code>表示选择前5个元素。</li><li><code>n+5</code>表示选择从第5个元素往后的元素，包括第5个元素。</li></ul><h5 id="3-4-1-4-否定伪类"><a href="#3-4-1-4-否定伪类" class="headerlink" title="3.4.1.4 否定伪类"></a>3.4.1.4 否定伪类</h5><p>匹配不满足指定选择器的元素：</p><ul><li>使用<code>:not(选择器)</code>选择不满足指定选择器的元素。</li></ul><p>说明：</p><ul><li>伪类选择器中指定的<code>选择器</code>可以使用伪类选择器。</li></ul><h5 id="3-4-1-5-界面伪类"><a href="#3-4-1-5-界面伪类" class="headerlink" title="3.4.1.5 界面伪类"></a>3.4.1.5 界面伪类</h5><p>匹配在界面上有特殊效果的元素：</p><ul><li>使用<code>:checked</code>选择被勾选的元素，多用于单选框和复选框。</li><li>使用<code>:enable</code>选择可用的元素，即没有<code>disabled</code>属性的元素，多用于表单元素。</li><li>使用<code>:disabled</code>选择不可用的元素，即有<code>disabled</code>属性的元素，多用于表单元素。</li></ul><h5 id="3-4-1-6-锚点伪类"><a href="#3-4-1-6-锚点伪类" class="headerlink" title="3.4.1.6 锚点伪类"></a>3.4.1.6 锚点伪类</h5><p>匹配被作为锚点跳转的元素：</p><ul><li>使用<code>:target</code>选择锚点指向的元素。</li></ul><h5 id="3-4-1-7-语言伪类"><a href="#3-4-1-7-语言伪类" class="headerlink" title="3.4.1.7 语言伪类"></a>3.4.1.7 语言伪类</h5><p>匹配被作为锚点跳转的元素：</p><ul><li>使用<code>:lang(语言)</code>选择特定语言的元素，即有<code>lang</code>属性并且属性值和伪类选择器中<code>语言</code>相同的元素。</li></ul><p>说明：</p><ul><li>如果在<code>html</code>元素中使用<code>lang</code>属性，那么<code>html</code>的后代元素也默认使用相同的<code>lang</code>属性。</li></ul><h4 id="3-4-2-伪元素选择器"><a href="#3-4-2-伪元素选择器" class="headerlink" title="3.4.2 伪元素选择器"></a>3.4.2 伪元素选择器</h4><p>说明：CSS3新增功能。</p><p>伪元素指的是元素中的一些特殊位置。</p><p>伪元素选择器固定以<code>::</code>双冒号开头，但为了兼容之前的版本，使用<code>:</code>冒号开头也能被识别。</p><p>常用伪元素选择器：</p><ul><li>使用<code>::first-letter</code>选择元素内容中的第一个文字。</li><li>使用<code>::first-line</code>选择元素内容中的第一行文字。</li><li>使用<code>::selection</code>选择元素内容中被鼠标选中的内容。</li><li>使用<code>::placeholder</code>选择输入框的提示文字，多用于输入框和文本域。</li><li>使用<code>::before</code>在元素的起始位置，创建一个子元素，需要使用<code>content</code>属性指定内容。</li><li>使用<code>::after</code>在元素的结束位置，创建一个子元素，需要使用<code>content</code>属性指定内容。</li></ul><h3 id="3-5-优先级"><a href="#3-5-优先级" class="headerlink" title="3.5 优先级"></a>3.5 优先级</h3><p>使用相同的选择器，选择相同的元素，优先级和位置有关，后面的选择器优先级高。</p><p>使用不同的选择器，选择相同的元素，优先级和权重有关，权重高的选择器优先级高比。</p><h4 id="3-5-1-简单描述"><a href="#3-5-1-简单描述" class="headerlink" title="3.5.1 简单描述"></a>3.5.1 简单描述</h4><p>优先级：</p><ul><li>行内样式 &gt; ID选择器 &gt; 类选择器 &#x3D; 伪类选择器 &#x3D; 属性选择器 &gt; 元素选择器 &#x3D; 伪元素选择器 &gt; 通配选择器</li></ul><h4 id="3-5-2-详细描述"><a href="#3-5-2-详细描述" class="headerlink" title="3.5.2 详细描述"></a>3.5.2 详细描述</h4><p>优先级：</p><ul><li>!important &gt; 行内样式 &gt; 按权重计算选择器 &gt; 通配选择器 &gt; 继承的样式</li></ul><p>权重计算规则：</p><ol><li>每个选择器，都可计算出一组格式为<code>(a,b,c)</code>的权重，说明：<br>a：ID选择器的个数。<br>b：类选择器、伪类选择器、属性选择器的个数。<br>c：元素选择器、伪元素选择器的个数。</li><li>比较规则：<br>按照从左到右的顺序，依次比较大小，当前位胜出后，后面的不再对比。</li><li>特殊规则：<br>并集选择器需要被看作多个选择器，只能计算涉及当前元素的选择器的权重，不能计算整个并集选择器的权重。</li></ol><h2 id="4-三大特性"><a href="#4-三大特性" class="headerlink" title="4 三大特性"></a>4 三大特性</h2><h3 id="4-1-层叠性"><a href="#4-1-层叠性" class="headerlink" title="4.1 层叠性"></a>4.1 层叠性</h3><p>如果发生了样式冲突，会根据选择器优先级进行样式层叠，优先级低的会被优先级高的覆盖。</p><h3 id="4-2-继承性"><a href="#4-2-继承性" class="headerlink" title="4.2 继承性"></a>4.2 继承性</h3><p>元素会自动拥有祖先元素设置的某些样式，继承性也遵循样式优先级，关系近的优先级高。</p><p>常见的可继承样式：</p><ul><li>color font-前缀 text-前缀 line-前缀</li></ul><p>可以在MDN网站查询属性是否可被继承。</p><h3 id="4-3-优先级"><a href="#4-3-优先级" class="headerlink" title="4.3 优先级"></a>4.3 优先级</h3><p>选择器相同：</p><ul><li>!important &gt; 行内样式 &gt; <code>后面的选择器</code> &gt; <code>前面的选择器</code> &gt; 通配选择器 &gt; 默认的样式 &gt; 继承的样式</li></ul><p>选择器不同：</p><ul><li>!important &gt; 行内样式 &gt; <code>按权重计算选择器优先级</code> &gt; 通配选择器 &gt; 默认的样式 &gt; 继承的样式</li></ul><h2 id="5-常用属性"><a href="#5-常用属性" class="headerlink" title="5 常用属性"></a>5 常用属性</h2><h3 id="5-1-像素"><a href="#5-1-像素" class="headerlink" title="5.1 像素"></a>5.1 像素</h3><h4 id="5-1-1-概念"><a href="#5-1-1-概念" class="headerlink" title="5.1.1 概念"></a>5.1.1 概念</h4><p>在涉及电子设备的屏幕时，为了更精确的描述图像的清晰度，创建了像素这个新的长度计量单位，使用<code>px</code>表示。</p><p>像素是图像最小的单位，图像是由多个像素组成的，每个像素内的颜色是相同的，像素越高的图像看起来画质越清晰，占用空间也越大。</p><p>像素是一个相对单位，其与绝对单位的换算和屏幕有关。</p><h4 id="5-1-2-尺寸"><a href="#5-1-2-尺寸" class="headerlink" title="5.1.2 尺寸"></a>5.1.2 尺寸</h4><p>一般情况下，屏幕的尺寸指的是屏幕对角线的长度，通常用英寸（in）作为单位，英寸和厘米的换算：</p><ul><li>1英寸 &#x3D; 2.54厘米</li></ul><p>在某些情况下，也使用长度和宽度表示尺寸。</p><h4 id="5-1-3-分辨率"><a href="#5-1-3-分辨率" class="headerlink" title="5.1.3 分辨率"></a>5.1.3 分辨率</h4><p>屏幕的分辨率指的是屏幕在横向和纵向上的像素数量。</p><p>在同一个设备上，分辨率是固定的，这是厂商在出厂时就设置好了的。</p><p>常用的分辨率：</p><ul><li>720P：1280×720</li><li>1080P：1920×1080</li><li>2K：2560×1440</li><li>4K：3840*2160</li></ul><p>虽然分辨率在出厂时就确定了，但是对于某些操作系统，比如Windows系统，支持修改分辨率，不过上限是屏幕的分辨率。系统在渲染图像的时候会自动计算，将图像里的单个逻辑像素用屏幕上的几个物理像素显示。</p><h4 id="5-1-4-像素密度"><a href="#5-1-4-像素密度" class="headerlink" title="5.1.4 像素密度"></a>5.1.4 像素密度</h4><p>像素密度使用PPI（Pixels Per Inch）作为单位，描述图像的每英寸上的像素数量，也称为图像的采样率。</p><p>在尺寸、分辨率、像素密度这三个条件中，已知任何两个条件都可以计算剩余的条件，通过分辨率可以计算得到屏幕对角线上的像素数量，其结果与屏幕对角线的尺寸的比值就是像素密度。</p><p>像素并没有固定的大小，所以在尺寸固定的情况下，像素密度越高，分辨率越高，像素越小，画质越清晰。</p><p>此外，在将图像输出时，使用DPI（Dots Per Inch）作为单位，描述输出到载体的图像的每英寸上的像素数量。</p><p>虽然DPI和PPI类似，都用于描述每英寸上的像素数量，但是PPI用于屏幕上的图像，而DPI常用于输出的图像。</p><p>在输出图像时，如果设置的DPI大于PPI，输出的尺寸会小于图像在屏幕上的尺寸，并且不会失真，如果设置的DPI小于PPI，输出的尺寸会大于图像在屏幕上的尺寸，同时会产生失真效果。</p><p>另外，对于鼠标来说，高DPI鼠标使用起来更灵活，低DPI鼠标使用起来更沉重。当鼠标从电脑屏幕移动相同距离时，高DPI鼠标在桌子上实际移动的距离要比低DPI鼠标要短。</p><h4 id="5-1-5-像素比"><a href="#5-1-5-像素比" class="headerlink" title="5.1.5 像素比"></a>5.1.5 像素比</h4><p>像素分为物理像素和逻辑像素：</p><ul><li>物理像素：设备能控制显示的最小单位，由厂家决定的，常说的1920×1080像素分辨率指的就是物理像素。</li><li>逻辑像素：也称为设备独立像素（Device Independent Pixel，DIP），CSS里定义的像素，比如1px指的就是逻辑像素。</li></ul><p>设备像素比（Device Pixel Ratio，DPR），指的是屏幕的物理像素与逻辑像素之比，厂商在设备出厂时就已经进行设置，并且禁止用户进行更改。</p><p>一般情况下，普通电脑显示屏的DPR默认为1，即一个物理像素相当于一个逻辑像素。</p><p>对于手机等设备来说，需要在比电脑小的屏幕上显示相同分辨率的图像，因此手机屏幕的DPR一般会大于1。比如苹果6手机的DPR为2，物理像素分辨率是1334×750，逻辑像素分辨率是667×375，那么一个逻辑像素实际上会占用2×2&#x3D;4个物理像素。</p><h3 id="5-2-颜色"><a href="#5-2-颜色" class="headerlink" title="5.2 颜色"></a>5.2 颜色</h3><h4 id="5-2-1-使用颜色名"><a href="#5-2-1-使用颜色名" class="headerlink" title="5.2.1 使用颜色名"></a>5.2.1 使用颜色名</h4><p>使用颜色名表示颜色。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">颜色名;</span><br></pre></td></tr></table></figure><p>使用颜色名设置颜色为红色：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: red;</span><br></pre></td></tr></table></figure><p>这种方式比较简单，但是颜色名有限，不常见的颜色没有颜色名。</p><p>可用颜色名参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/named-color">MDN具名颜色</a></p><h4 id="5-2-2-使用RGB或RGBA"><a href="#5-2-2-使用RGB或RGBA" class="headerlink" title="5.2.2 使用RGB或RGBA"></a>5.2.2 使用RGB或RGBA</h4><p>RGB指的是光的红（Red）绿（Green）蓝（Blue）三原色，RGBA多了一个透明度（Alpha）。</p><p>三原色的可选范围是0到255，透明度的可选范围是0到1，0表示全透明，1表示不透明。</p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rgb(红色,绿色,蓝色);</span><br></pre></td></tr></table></figure><p>使用RGB设置颜色为红色：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>使用RGBA设置颜色为半透明红色：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><h4 id="5-2-3-使用HEX或HEXA"><a href="#5-2-3-使用HEX或HEXA" class="headerlink" title="5.2.3 使用HEX或HEXA"></a>5.2.3 使用HEX或HEXA</h4><p>HEX或HEXA是一种使用RGB或RGBA的十六进制表示的一种方式。</p><p>三原色和透明度都使用两位十六进制表示，范围是00到FF，对应数字0到255。</p><p>说明：</p><ul><li>如果HEX或HEXA表示的颜色，每组两位十六进制都相同，可以简写为一位十六进制。</li><li>颜色字母大小写不敏感。</li><li>IE浏览器不支持HEXA，只支持HEX。</li></ul><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#红色绿色蓝色;</span><br></pre></td></tr></table></figure><p>使用HEX设置颜色为红色：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br></pre></td></tr></table></figure><p>使用HEXA设置颜色为半透明红色：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="number">#ff000088</span>;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-使用HSL或HSLA"><a href="#5-2-4-使用HSL或HSLA" class="headerlink" title="5.2.4 使用HSL或HSLA"></a>5.2.4 使用HSL或HSLA</h4><p>说明：CSS3新增功能。</p><p>HSL指的是色相（Hue）、饱和度（Saturation）、亮度（Lightness），HSLA多了一个透明度（Alpha）。</p><p>概念：</p><ul><li>色相：取值范围是0度到360度，表示颜色的角度。</li><li>饱和度：取值范围是0%到100%，表示向色相中对应颜色中添加灰色，0%表示黑白，100%表示彩色。</li><li>亮度：取值范围是0%到100%，表色颜色的明亮程度，0%表示没有亮度的黑色，100%表示最高亮度的白色。</li></ul><p>色相的度数对应的颜色如下图：<br><img src="/@image/102001/001001-143349.jpg" alt="001-色相"></p><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hsl(色相,饱和度,亮度);</span><br></pre></td></tr></table></figure><p>使用HSL设置颜色为红色：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">100%</span>,<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><p>使用HSLA设置颜色为半透明红色：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">100%</span>,<span class="number">50%</span>,<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><h3 id="5-3-字体"><a href="#5-3-字体" class="headerlink" title="5.3 字体"></a>5.3 字体</h3><h4 id="5-3-1-字体大小"><a href="#5-3-1-字体大小" class="headerlink" title="5.3.1 字体大小"></a>5.3.1 字体大小</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>font-size</td>      <td>控制文本字体的大小</td>      <td>长度值</td>    </tr>  </tbody></table><p>说明：</p><ul><li>设置为0会让文本消失。</li><li>浏览器有默认字体，不同浏览器默认字体可能不一样大，为了显示统一，建议设置明确大小。</li><li>因为CSS的继承性，只需要给<code>body</code>元素设置字体大小，后代元素默认继承祖先元素的字体大小。不建议使用通配选择器，否则会导致在给某个元素的父元素的字体设置大小后，因为通配选择器优先级高于继承，元素优先使用通配选择器设置的大小，并没有使用继承父元素设置的大小。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-字体族"><a href="#5-3-2-字体族" class="headerlink" title="5.3.2 字体族"></a>5.3.2 字体族</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>font-family</td>      <td>控制文本字体的字型</td>      <td>字体名称，多个使用<code>,</code>分隔分隔</td>    </tr>  </tbody></table><p>分类：</p><ul><li>衬线字体：字体线条粗细不一，类似毛笔和钢笔的字体。使用<code>serif</code>表示选择系统可用的衬线字体。</li><li>非衬线字体：字体线条宽度一致。使用<code>sans-serif</code>表示选择系统可用的非衬线字体。</li></ul><p>说明：</p><ul><li>支持使用中文，但有的字体没有提供中文名称，建议使用英文，如果存在空格，需要使用<code>&quot;</code>双引号包裹。</li><li>多个字体使用时按照从左到右的顺序查找，系统存在就使用，系统不存在就查找下一个。</li><li>如果都不能匹配，会使用操作系统默认字体，不同的操作系统能够使用的字体不同。在<code>Windows</code>系统下使用<code>微软雅黑</code>作为默认字体。</li><li>为了保证显示效果统一，通常多个字体都是衬线字体或者非衬线字体，并且可以使用<code>serif</code>或者<code>sans-serif</code>兜底，当前面的字体在系统中不存在时，强制使用系统可用的衬线字体或者非衬线字体进行渲染。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Microsoft YaHei&quot;</span>,sans-serif;</span><br></pre></td></tr></table></figure><h4 id="5-3-3-字体风格"><a href="#5-3-3-字体风格" class="headerlink" title="5.3.3 字体风格"></a>5.3.3 字体风格</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>font-style</td>      <td>控制文本字体的风格（是否斜体）</td>      <td>        normal：正常（默认字体）<br>        italic：斜体（先使用斜体字体，如果不存在，才会强制字体倾斜，推荐）<br>        oblique：斜体（不使用斜体字体，直接强制字体倾斜）<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-style</span>: italic;</span><br></pre></td></tr></table></figure><h4 id="5-3-4-字体粗细"><a href="#5-3-4-字体粗细" class="headerlink" title="5.3.4 字体粗细"></a>5.3.4 字体粗细</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>font-weight</td>      <td>控制文本字体的粗细</td>      <td>        有两种方式：<br>        <dl>          <dt>1. 使用名称设置粗细：</dt>          <dd>lighter：细</dd>          <dd>normal：正常</dd>          <dd>bold：粗</dd>          <dd>bolder：很粗（多数字体不支持，效果同bold）</dd>          <dt>2. 使用数值设置粗细：</dt>          <dd>数值的范围是从100到1000，一般来说数值越大字体越粗，具体要看字体设计</dd>          <dd>100~300等同于lighter</dd>          <dd>400~500等同于normal</dd>          <dd>600及以上等同于bold</dd>        </dl>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br></pre></td></tr></table></figure><h4 id="5-3-5-复合写法"><a href="#5-3-5-复合写法" class="headerlink" title="5.3.5 复合写法"></a>5.3.5 复合写法</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>font</td>      <td>控制文本字体的多个属性的复合写法</td>      <td>        设置多个属性，空格分隔：<br>        <dl>          <dt>1. 字体族必须存在并且是最后一位</dt>          <dt>2. 字体大小必须存在并且是倒数第二位</dt>          <dt>3. 其他属性在前即可</dt>        </dl>      </td>    </tr>  </tbody></table><p>语法：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>: 字体粗细 字体风格 字体大小/行高 字体族;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>: normal <span class="number">200</span> <span class="number">40px</span>/<span class="number">1.5</span> <span class="string">&quot;Microsoft YaHei&quot;</span>, sans-serif;</span><br></pre></td></tr></table></figure><h3 id="5-4-文本"><a href="#5-4-文本" class="headerlink" title="5.4 文本"></a>5.4 文本</h3><h4 id="5-4-1-文本颜色"><a href="#5-4-1-文本颜色" class="headerlink" title="5.4.1 文本颜色"></a>5.4.1 文本颜色</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>color</td>      <td>控制文本的颜色</td>      <td>        颜色名<br>        RGB或RGBA（常用）<br>        HEX或HEXA（常用）<br>        HSL或HSLA<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br></pre></td></tr></table></figure><h4 id="5-4-2-文本划线"><a href="#5-4-2-文本划线" class="headerlink" title="5.4.2 文本划线"></a>5.4.2 文本划线</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>text-decoration</td>      <td>控制文本的各种装饰线</td>      <td>        支持三种维度设置，空格分隔：<br>        <dl>          <dt>1. 装饰线类型：</dt>          <dd>none：无装饰线（常用）</dd>          <dd>line-through：删除线（常用）</dd>          <dd>underline：下划线（常用）</dd>          <dd>overline：上划线</dd>          <dt>2. 装饰线样式：</dt>          <dd>dotted：虚线</dd>          <dd>wavy：波浪线</dd>          <dt>3. 装饰线颜色：</dt>          <dd>颜色代码</dd>        </dl>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: line-through dotted <span class="number">#ff0000</span>;</span><br></pre></td></tr></table></figure><h4 id="5-4-3-文本缩进"><a href="#5-4-3-文本缩进" class="headerlink" title="5.4.3 文本缩进"></a>5.4.3 文本缩进</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>text-indent</td>      <td>控制文本的缩进</td>      <td>长度值</td>    </tr>  </tbody></table><p>说明：</p><ul><li>正值让文本右移，负值让文本左移。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>: <span class="number">5px</span>;</span><br></pre></td></tr></table></figure><h4 id="5-4-4-文本间距"><a href="#5-4-4-文本间距" class="headerlink" title="5.4.4 文本间距"></a>5.4.4 文本间距</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>letter-spacing</td>      <td>控制字符之间的距离，包括汉字和标点符号，也包括空格</td>      <td>长度值</td>    </tr>    <tr>      <td>word-spacing</td>      <td>控制空格分隔的词语之间的距离，实际控制的是空格占用的距离</td>      <td>长度值</td>    </tr>  </tbody></table><p>说明：</p><ul><li>正值让间距增大，负值让间距缩小。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">letter-spacing</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">word-spacing</span>: <span class="number">5px</span>;</span><br></pre></td></tr></table></figure><h4 id="5-4-5-文本水平对齐"><a href="#5-4-5-文本水平对齐" class="headerlink" title="5.4.5 文本水平对齐"></a>5.4.5 文本水平对齐</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>text-align</td>      <td>控制块级元素内容或者单元格元素内容的水平对齐</td>      <td>        left：左对齐（默认值）<br>        right：右对齐<br>        center：居中对齐<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center;</span><br></pre></td></tr></table></figure><h4 id="5-4-6-文本字体"><a href="#5-4-6-文本字体" class="headerlink" title="5.4.6 文本字体"></a>5.4.6 文本字体</h4><p>字体设计用到的参考线：<br><img src="/@image/102001/001002-151334.jpg" alt="002-字体设计参考线"></p><p>概念：</p><ul><li>baseline：基线，以英文字符<code>x</code>下边缘为参考的横线，字符默认是以基线对齐的。</li><li>middle：中线，以英文字符<code>x</code>上边缘为参考的横线。</li><li>top：顶线，字符的上边缘，所有字符均不会超过上边缘，包括中文。</li><li>bottom：底线，字符的下边缘，所有字符均不会超过下边缘，包括中文。</li><li>line-height：行高，文字的高度，实际是上下两行基线之间的高度。</li></ul><p>说明：</p><ul><li>即使可以通过<code>font-size</code>给不同的字体设置统一的大小，不同的字体在页面上显示的大小还是有细微的区别。</li><li>不同的字体对相同的字符在垂直方向上的处理也是不同的，有的可能贴近底线，有的可能贴近顶线。</li></ul><h4 id="5-4-7-行高"><a href="#5-4-7-行高" class="headerlink" title="5.4.7 行高"></a>5.4.7 行高</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>line-height</td>      <td>控制元素内容一行内容的高度</td>      <td>        normal：由浏览器根据文字大小决定的默认值<br>        像素：使用像素`px`作为单位设置行高<br>        数字倍数：使用`font-size`的数字倍数设置行高（很常用）<br>        百分比倍数：使用`font-size`的百分比倍数设置行高<br>      </td>    </tr>  </tbody></table><p>说明：</p><ul><li>如果设置行高为负数，效果等同设置行高为normal的效果。</li><li>如果设置行高为最小值0，效果和字体设计以及元素区块有关。</li><li>如果设置行高为字体大小，会因为字体设计的问题，导致相邻两行发生重叠。</li><li>建议设置行高为字体的1.5倍，不会发生重叠，也不会间隔太长。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">line-height</span>: normal;</span><br></pre></td></tr></table></figure><h4 id="5-4-8-文本垂直对齐"><a href="#5-4-8-文本垂直对齐" class="headerlink" title="5.4.8 文本垂直对齐"></a>5.4.8 文本垂直对齐</h4><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>vertical-align</td>      <td>控制行内元素内容或者单元格元素内容的垂直对齐</td>      <td>        baseline：使元素的基线与父元素的基线对齐（默认值）<br>        middle：使元素的中线与父元素的中线对齐<br>        top：使元素的顶线与其所在行的顶线对齐<br>        bottom：使元素的底线与其所在行的底线对齐<br>      </td>    </tr>  </tbody></table><p>说明：</p><ul><li>只能用于控制行内元素在父元素一行中的垂直对齐，不能控制行内元素在父元素整个元素中的垂直对齐。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br></pre></td></tr></table></figure><h3 id="5-5-列表"><a href="#5-5-列表" class="headerlink" title="5.5 列表"></a>5.5 列表</h3><p>控制列表的属性，可以作用在<code>ul</code>、<code>ol</code>、<code>li</code>元素上。</p><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>list-style-type</td>      <td>设置列表符号</td>      <td>        none：不显示前面的标识（很常用）<br>        square：实心方块<br>        disc：圆形<br>        decimal：数字<br>        lower-roman：小写罗马字<br>        upper-roman：大写罗马字<br>        lower-alpha：小写字母<br>        upper-alpha：大写字母<br>      </td>    </tr>    <tr>      <td>list-style-position</td>      <td>设置列表符号的位置</td>      <td>        inside：在`li`的里面<br>        outside：在`li`的外边<br>      </td>    </tr>    <tr>      <td>list-style-image</td>      <td>自定义列表符号</td>      <td>url(图片地址)</td>    </tr>    <tr>      <td>list-style</td>      <td>设置复合属性</td>      <td>没有数量和顺序要求，同属性后面的会覆盖前面的</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style</span>: decimal;</span><br></pre></td></tr></table></figure><h3 id="5-6-表格"><a href="#5-6-表格" class="headerlink" title="5.6 表格"></a>5.6 表格</h3><h4 id="5-6-1-边框"><a href="#5-6-1-边框" class="headerlink" title="5.6.1 边框"></a>5.6.1 边框</h4><p>可以作用在其他元素上，不仅仅是表格相关的元素。</p><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>border-style</td>      <td>设置边框风格</td>      <td>        none：默认值<br>        solid：实线<br>        dashed：虚线<br>        dotted：点线<br>        double：双实线<br>      </td>    </tr>    <tr>      <td>border-width</td>      <td>设置边框宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>border-color</td>      <td>设置边框颜色</td>      <td>颜色代码</td>    </tr>    <tr>      <td>border</td>      <td>设置复合属性</td>      <td>没有数量和顺序要求，同属性后面的会覆盖前面的</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: none;</span><br></pre></td></tr></table></figure><h4 id="5-6-2-表格独有"><a href="#5-6-2-表格独有" class="headerlink" title="5.6.2 表格独有"></a>5.6.2 表格独有</h4><p>只能作用在<code>table</code>元素上。</p><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>table-layout</td>      <td>设置列宽度</td>      <td>        auto：自动，列宽根据内容计算（默认值）<br>        fixed：固定列宽，平均分<br>      </td>    </tr>    <tr>      <td>border-collapse</td>      <td>合并单元格边框</td>      <td>        collapse：合并<br>        separate：不合并（默认值）<br>      </td>    </tr>    <tr>      <td>border-spacing</td>      <td>设置单元格间距，这个属性生效的前提是单元格边框不能合并</td>      <td>长度值</td>    </tr>    <tr>      <td>empty-cells</td>      <td>隐藏没有内容的单元格，这个属性生效的前提是单元格边框不能合并</td>      <td>        show：显示（默认值）<br>        hide：隐藏<br>      </td>    </tr>    <tr>      <td>caption-side</td>      <td>设置表格标题位置</td>      <td>        top：在表格上面（默认值）<br>        bottom：在表格下面<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>: separate;</span><br></pre></td></tr></table></figure><h3 id="5-7-背景"><a href="#5-7-背景" class="headerlink" title="5.7 背景"></a>5.7 背景</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>background-color</td>      <td>设置背景颜色</td>      <td>默认是transparent</td>    </tr>    <tr>      <td>background-image</td>      <td>设置背景图片</td>      <td>url(图片地址)</td>    </tr>    <tr>      <td>background-repeat</td>      <td>设置背景重复方式</td>      <td>        repeat：重复，铺满整个元素（默认值）<br>        repeat-x：只在水平方向重复<br>        repeat-y：只在垂直方向重复<br>        no-repeat：不重复<br>      </td>    </tr>    <tr>      <td>background-position</td>      <td>设置背景图位置</td>      <td>        使用两个维度定位，空格分隔，有多种方式：<br>        <dl>          <dt>1. 使用关键字<code>(水平 垂直)</code>设置位置：</dt>          <dd>水平：left、center、right</dd>          <dd>垂直：top、center、bottom</dd>          <dd>如果只写一个值，另一个方向的值取center</dd>          <dt>2. 使用坐标<code>(x y)</code>设置图片左上角的位置，以元素左上角为坐标原点：</dt>          <dd>如果只写一个值，会被当做x坐标，y坐标取center</dd>          <dt>3. 使用边缘距离设置图片位置，必须有四个值，分为前后两组：</dt>          <dd>一组代表上下，另一组代表左右，顺序没有要求</dd>          <dd>每组第一个值代表方向，第二个值代表边距</dd>        </dl>      </td>    </tr>    <tr>      <td>background</td>      <td>设置复合属性</td>      <td>没有数量和顺序要求，同属性后面的会覆盖前面的</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent;</span><br></pre></td></tr></table></figure><h3 id="5-8-鼠标"><a href="#5-8-鼠标" class="headerlink" title="5.8 鼠标"></a>5.8 鼠标</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>cursor</td>      <td>设置鼠标光标的样式，也可以自定义鼠标图标</td>      <td>        pointer：小手<br>        move：移动图标<br>        text：文字选择器<br>        crosshair：十字架<br>        wait：等待<br>        help：帮助<br>        url(图片地址)：自定义图标<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: pointer;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了CSS的语法规则和选择器，以及CSS常用的一些属性。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML4进阶</title>
    <link href="https://momashanhe.com/posts/20240314/163125/"/>
    <id>https://momashanhe.com/posts/20240314/163125/</id>
    <published>2024-03-14T08:31:25.000Z</published>
    <updated>2024-05-28T08:09:13.230Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了HTML常见的元素及其特点。</p><span id="more"></span><h2 id="1-文本元素"><a href="#1-文本元素" class="headerlink" title="1 文本元素"></a>1 文本元素</h2><p>和排版元素相比，文本元素侧重词汇和短语并且一般是行内元素，排版元素侧重文章和段落并且一般是块级元素，而且文本元素通常写在排版元素中。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>em</td>      <td>表示需要注意的内容</td>      <td>双标签</td>    </tr>    <tr>      <td>strong</td>      <td>表示十分重要的内容，语气比<code>em</code>元素更重</td>      <td>双标签</td>    </tr>  </tbody></table><p>不太常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>cite</td>      <td>表示作品标题</td>      <td>双标签</td>    </tr>    <tr>      <td>dfn</td>      <td>表示特殊术语或者专属名词</td>      <td>双标签</td>    </tr>    <tr>      <td>del</td>      <td>表示想要删除的文本</td>      <td>双标签</td>    </tr>    <tr>      <td>ins</td>      <td>表示想要插入的文本</td>      <td>双标签</td>    </tr>    <tr>      <td>sub</td>      <td>表示下标</td>      <td>双标签</td>    </tr>    <tr>      <td>sup</td>      <td>表示上标</td>      <td>双标签</td>    </tr>    <tr>      <td>code</td>      <td>表示代码</td>      <td>双标签</td>    </tr>    <tr>      <td>i</td>      <td>表示具有特定含义的文本，多用于呈现字体图标</td>      <td>双标签</td>    </tr>  </tbody></table><p>省略了一些语义不强、较少使用、能被替代的元素，可以在官方网站上查看全部元素。</p><h2 id="2-图片元素"><a href="#2-图片元素" class="headerlink" title="2 图片元素"></a>2 图片元素</h2><h3 id="2-1-基本结构"><a href="#2-1-基本结构" class="headerlink" title="2.1 基本结构"></a>2.1 基本结构</h3><p>图片元素用于定义图片资源的位置，以及图片的一些属性，属于行内元素。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>img</td>      <td>表示图片</td>      <td>单标签</td>    </tr>  </tbody></table><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>src</td>      <td>图片路径</td>      <td>路径</td>    </tr>    <tr>      <td>alt</td>      <td>图片描述</td>      <td>描述</td>    </tr>    <tr>      <td>width</td>      <td>图片宽度，默认使用图片本身的宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>height</td>      <td>图片高度，默认使用图片本身的高度</td>      <td>长度值</td>    </tr>  </tbody></table><h3 id="2-2-路径"><a href="#2-2-路径" class="headerlink" title="2.2 路径"></a>2.2 路径</h3><p>图片路径也称为图片地址，分为相对路径和绝对路径，以及网络地址：</p><ul><li>相对路径：从当前页面文件所在的位置开始，能够访问图片资源的路径。</li><li>绝对路径：从当前页面文件所在的磁盘的根目录开始，能够访问图片资源的路径。</li><li>网络地址：相对路径和绝对路径都是本地图片，如果是网络图片则需要使用图片的网络地址进行访问。</li></ul><p>如果是本地图片，需要注意图片被移动会导致路径失效，如果是网络图片，需要注意在开启防盗链后会导致图片不可访问。</p><h3 id="2-3-图片格式"><a href="#2-3-图片格式" class="headerlink" title="2.3 图片格式"></a>2.3 图片格式</h3><h4 id="2-3-1-jpg"><a href="#2-3-1-jpg" class="headerlink" title="2.3.1 jpg"></a>2.3.1 jpg</h4><p>说明：扩展名为<code>jpg</code>和<code>jpeg</code>，有损压缩，丢弃了肉眼观察不到的细节。</p><p>特点：占用空间较小，不支持透明背景，不支持动态图片。</p><p>场景：对图片质量没有极高的要求，适合绝大多数场景。</p><h4 id="2-3-2-png"><a href="#2-3-2-png" class="headerlink" title="2.3.2 png"></a>2.3.2 png</h4><p>说明：扩展名为<code>png</code>，无损压缩，支持图片高质量的保存。</p><p>特点：占用空间较大，支持透明背景，不支持动态图片。</p><p>场景：对图片质量有一定的要求，或者需要使用有透明背景的图片。</p><h4 id="2-3-3-bmp"><a href="#2-3-3-bmp" class="headerlink" title="2.3.3 bmp"></a>2.3.3 bmp</h4><p>说明：扩展名为<code>bmp</code>，不进行压缩，最大程度保留了图片细节。</p><p>特点：占用空间极大，不支持透明背景，不支持动态图片。</p><p>场景：对图片细节要求极高的场景，页面中很少使用。</p><h4 id="2-3-4-gif"><a href="#2-3-4-gif" class="headerlink" title="2.3.4 gif"></a>2.3.4 gif</h4><p>说明：扩展名为<code>gif</code>，有损压缩，仅支持256种颜色。</p><p>特点：占用空间较小，支持颜色较少，支持透明背景，支持动态图片。</p><p>场景：页面中的动态图片。</p><h4 id="2-3-5-webp"><a href="#2-3-5-webp" class="headerlink" title="2.3.5 webp"></a>2.3.5 webp</h4><p>说明：扩展名为<code>webp</code>，同时支持无损压缩和有损压缩，谷歌推出的图片格式，专用于处理页面图片。</p><p>特点：占用空间较小，支持透明背景，支持动态图片，需要注意兼容性问题。</p><p>场景：页面中的图片，在和<code>jpg</code>在同等大小的情况下能保留更多细节。</p><h4 id="2-3-6-base64"><a href="#2-3-6-base64" class="headerlink" title="2.3.6 base64"></a>2.3.6 base64</h4><p>说明：将图片转换得到的一串特殊的文本，支持通过浏览器打开，但某些看图应用无法打开。</p><p>特点：字符串会特别长，并且会占用和图片大小相同的空间。</p><p>场景：一些较小的图片，或者需要同页面一起加载的图片。</p><h2 id="3-超链接"><a href="#3-超链接" class="headerlink" title="3 超链接"></a>3 超链接</h2><h3 id="3-1-基本结构"><a href="#3-1-基本结构" class="headerlink" title="3.1 基本结构"></a>3.1 基本结构</h3><p>用于从当前页面进行跳转，超链接本身属于行内元素。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>a</td>      <td>表示超链接</td>      <td>双标签</td>    </tr>  </tbody></table><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>href</td>      <td>指定要跳转到的具体目标</td>      <td>目标地址</td>    </tr>    <tr>      <td>target</td>      <td>控制跳转时如何打开页面</td>      <td>        _self：在当前标签页打开，即替换当前页面的地址为目标地址并访问<br>        _blank：在新建标签页打开，当前标签页保留<br>      </td>    </tr>  </tbody></table><p>注意：</p><ul><li>虽然<code>a</code>元素是行内元素，但是可以包裹<code>a</code>元素之外的其他元素，包括块级元素和行内元素。</li></ul><h3 id="3-2-跳转方式"><a href="#3-2-跳转方式" class="headerlink" title="3.2 跳转方式"></a>3.2 跳转方式</h3><h4 id="3-2-1-跳转到页面"><a href="#3-2-1-跳转到页面" class="headerlink" title="3.2.1 跳转到页面"></a>3.2.1 跳转到页面</h4><p>使用<code>href</code>属性指定页面，那么点击超链接会跳转到指定的页面。</p><p>使用<code>target</code>属性指定打开目标页面的方式。</p><h4 id="3-2-2-跳转到文件"><a href="#3-2-2-跳转到文件" class="headerlink" title="3.2.2 跳转到文件"></a>3.2.2 跳转到文件</h4><p>使用<code>href</code>属性指定文件，那么点击超链接会跳转到指定的文件。</p><p>如果浏览器能打开指定的文件就在浏览器展示，比如图片文件，如果浏览器不能打开指定的文件就引导用户下载，比如压缩文件。</p><h4 id="3-2-3-跳转到锚点"><a href="#3-2-3-跳转到锚点" class="headerlink" title="3.2.3 跳转到锚点"></a>3.2.3 跳转到锚点</h4><p>使用<code>href</code>属性指定锚点，那么点击超链接会跳转到指定的锚点。</p><p>锚点是<code>#</code>符号和在其他元素中<code>id</code>属性值拼接得到的。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#test&quot;</span>&gt;</span>点击前往测试内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其他内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>测试内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以跳转到页面顶部。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>点击前往页面顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果<code>href</code>属性空白，页面上不会有超链接样式，可以使用<code>#</code>符号占位，点击会跳转到当前页。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>占位链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不想在点击后触发跳转的操作，或者在开发阶段不确定要跳转到哪个页面，可以将<code>href</code>属性设为<code>javascript:;</code>实现。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>占位链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-4-跳转到应用"><a href="#3-2-4-跳转到应用" class="headerlink" title="3.2.4 跳转到应用"></a>3.2.4 跳转到应用</h4><p>使用<code>href</code>属性指定应用，那么点击超链接会跳转到指定的应用，需要应用支持，比如邮箱等。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:momashanhe@163.com&quot;</span>&gt;</span>点击发送邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-列表"><a href="#4-列表" class="headerlink" title="4 列表"></a>4 列表</h2><h3 id="4-1-有序列表"><a href="#4-1-有序列表" class="headerlink" title="4.1 有序列表"></a>4.1 有序列表</h3><p>有顺序或侧重顺序的列表，属于块级元素。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>ol</td>      <td>表示有序列表的范围</td>      <td>双标签</td>    </tr>    <tr>      <td>li</td>      <td>表示列表的一列</td>      <td>双标签</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>要把大象放冰箱总共分几步<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门打开<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门关上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-无序列表"><a href="#4-2-无序列表" class="headerlink" title="4.2 无序列表"></a>4.2 无序列表</h3><p>无顺序或不侧重顺序的列表，属于块级元素。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>ul</td>      <td>表示无序列表的范围</td>      <td>双标签</td>    </tr>    <tr>      <td>li</td>      <td>表示列表的一列</td>      <td>双标签</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我想去的几个城市<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-嵌套列表"><a href="#4-3-嵌套列表" class="headerlink" title="4.3 嵌套列表"></a>4.3 嵌套列表</h3><p>有序列表和无序列表支持嵌套列表。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我想去的几个城市<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>外滩<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>杜莎夫人蜡像馆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.opg.cn/&quot;</span>&gt;</span>东方明珠<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>迪士尼乐园<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-自定义列表"><a href="#4-4-自定义列表" class="headerlink" title="4.4 自定义列表"></a>4.4 自定义列表</h3><p>包含术语名称以及术语描述的列表，属于块级元素。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>dl</td>      <td>表示自定义列表的范围</td>      <td>双标签</td>    </tr>    <tr>      <td>dt</td>      <td>表示术语名称</td>      <td>双标签</td>    </tr>    <tr>      <td>dd</td>      <td>表示术语描述</td>      <td>双标签</td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如何高效的学习<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>做好笔记<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>笔记是我们以后复习的一个抓手<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>笔记可以是电子版，也可以是纸质版<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>多加练习<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>只有敲出来的代码，才是自己的<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>别怕出错<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>错很正常，改正后并记住，就是经验<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-表格"><a href="#5-表格" class="headerlink" title="5 表格"></a>5 表格</h2><h3 id="5-1-基本结构"><a href="#5-1-基本结构" class="headerlink" title="5.1 基本结构"></a>5.1 基本结构</h3><p>一个完整的表格由四部分组成：表格标题、表格头部、表格主体、表格脚注。</p><p>表格的某些部分可以省略，各个部分都属于块级元素。</p><p>表格结构如图：<br><img src="/@image/101001/002001-155240.jpg" alt="001-表格结构"></p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>table</td>      <td>表示表格的范围</td>      <td>双标签</td>    </tr>    <tr>      <td>caption</td>      <td>表示表格的标题行</td>      <td>双标签</td>    </tr>    <tr>      <td>thead</td>      <td>表示表格头部的范围</td>      <td>双标签</td>    </tr>    <tr>      <td>tbody</td>      <td>表示表格主体的范围</td>      <td>双标签</td>    </tr>    <tr>      <td>tfoot</td>      <td>表示表格脚注的范围</td>      <td>双标签</td>    </tr>    <tr>      <td>tr</td>      <td>表示表格一行的范围，可以用在<code>thead</code>元素、<code>tbody</code>元素、<code>tfoot</code>元素</td>      <td>双标签</td>    </tr>    <tr>      <td>th</td>      <td>表示表格头部一格的范围，可以用在<code>thead</code>元素</td>      <td>双标签</td>    </tr>    <tr>      <td>td</td>      <td>表示表格主体一格的范围，可以用在<code>tbody</code>元素、<code>tfoot</code>元素</td>      <td>双标签</td>    </tr>  </tbody></table><p>表格详细结构如图：<br><img src="/@image/101001/002002-163046.jpg" alt="002-表格头部"><br><img src="/@image/101001/002003-163104.jpg" alt="003-表格主体"><br><img src="/@image/101001/002004-163215.jpg" alt="004-表格脚注"></p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表格标题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表格头部 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>民族<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>政治面貌<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表格主体 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>汉族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>团员<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>满族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>群众<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>回族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>党员<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>赵六<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>壮族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>团员<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表格脚注 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>共计：4人<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-常用属性"><a href="#5-2-常用属性" class="headerlink" title="5.2 常用属性"></a>5.2 常用属性</h3><p><code>table</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>width</td>      <td>设置表格宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>height</td>      <td>设置表格最小高度，表格最终高度可能比设置的值大</td>      <td>长度值</td>    </tr>    <tr>      <td>border</td>      <td>设置表格边框宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>cellspacing</td>      <td>设置单元格之间的间距</td>      <td>长度值</td>    </tr>  </tbody></table><p><code>thead</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>height</td>      <td>设置表格头部高度</td>      <td>长度值</td>    </tr>    <tr>      <td>align</td>      <td>设置单元格的水平对齐方式</td>      <td>        left：左边对齐<br>        right：右边对齐<br>        center：中间对齐<br>      </td>    </tr>    <tr>      <td>valign</td>      <td>设置单元格的垂直对齐方式</td>      <td>        top：顶部对齐<br>        middle：中间对齐<br>        bottom：底部对齐<br>      </td>    </tr>  </tbody></table><p><code>tbody</code>元素常用属性：<br>与<code>thead</code>元素常用的属性相同。</p><p><code>tfoot</code>元素常用属性：<br>与<code>thead</code>元素常用的属性相同。</p><p><code>tr</code>元素常用属性：<br>与<code>thead</code>元素常用的属性相同。</p><p><code>th</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>width</td>      <td>设置单元格的宽度，同列所有单元格全都受影响</td>      <td>长度值</td>    </tr>    <tr>      <td>height</td>      <td>设置单元格的高度，同行所有单元格全都受影响</td>      <td>长度值</td>    </tr>    <tr>      <td>align</td>      <td>设置单元格的水平对齐方式</td>      <td>        left：左边对齐<br>        right：右边对齐<br>        center：中间对齐<br>      </td>    </tr>    <tr>      <td>valign</td>      <td>设置单元格的垂直对齐方式</td>      <td>        top：顶部对齐<br>        middle：中间对齐<br>        bottom：底部对齐<br>      </td>    </tr>    <tr>      <td>rowspan</td>      <td>指定要跨的行数</td>      <td>行数</td>    </tr>    <tr>      <td>colspan</td>      <td>指定要跨的列数</td>      <td>列数</td>    </tr>  </tbody></table><p><code>td</code>元素常用属性：<br>与<code>th</code>元素常用的属性相同。</p><h3 id="5-3-跨行跨列"><a href="#5-3-跨行跨列" class="headerlink" title="5.3 跨行跨列"></a>5.3 跨行跨列</h3><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>rowspan</td>      <td>指定要跨的行数</td>      <td>行数</td>    </tr>    <tr>      <td>colspan</td>      <td>指定要跨的列数</td>      <td>列数</td>    </tr>  </tbody></table><p>使用属性实现跨行跨列：</p><div class="tabs" id="tab-tab-id-3"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-3-1">原始表格</a></li><li class="tab"><a class="#tab-id-3-2">使用colspan跨行</a></li><li class="tab"><a class="#tab-id-3-3">使用rowspan跨列</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-3-1"><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-id-3-2"><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;td&gt;2-1&lt;/td&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-id-3-3"><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;td&gt;1-2&lt;/td&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div></div><h2 id="6-表单"><a href="#6-表单" class="headerlink" title="6 表单"></a>6 表单</h2><h3 id="6-1-基本元素"><a href="#6-1-基本元素" class="headerlink" title="6.1 基本元素"></a>6.1 基本元素</h3><p>表单是一个包含交互的区域，用于收集用户提供的数据，整个表单属于块级元素，表单中的控件一般属于行内元素。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>form</td>      <td>表示表单的范围</td>      <td>双标签</td>    </tr>    <tr>      <td>input</td>      <td>表示表单中的控件，存在多种控件类型</td>      <td>单标签</td>    </tr>    <tr>      <td>button</td>      <td>表示表单中的按钮，点击可以触发处理表单数据的操作</td>      <td>双标签</td>    </tr>    <tr>      <td>textarea</td>      <td>表示文本域，可以存储多行文本</td>      <td>双标签</td>    </tr>    <tr>      <td>select</td>      <td>表示下拉框的范围，点击展示下拉框选项</td>      <td>双标签</td>    </tr>    <tr>      <td>option</td>      <td>表示下拉框的选项，用在<code>select</code>元素</td>      <td>双标签</td>    </tr>    <tr>      <td>label</td>      <td>和表单控件关联，点击元素可使表单控件获得焦点</td>      <td>双标签</td>    </tr>    <tr>      <td>fieldset</td>      <td>表示表单元素分组的范围</td>      <td>双标签</td>    </tr>    <tr>      <td>legend</td>      <td>表示表单元素分组的标题，用在<code>fieldset</code>元素</td>      <td>双标签</td>    </tr>  </tbody></table><p><code>form</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>action</td>      <td>表单提交的地址，需要和后端沟通确定</td>      <td>地址</td>    </tr>    <tr>      <td>target</td>      <td>表单提交后，页面的打开方式</td>      <td>        _self：在当前标签页打开，即替换当前页面的地址为目标地址并访问<br>        _blank：在新建标签页打开，当前标签页保留<br>      </td>    </tr>    <tr>      <td>method</td>      <td>表单提交的请求方式</td>      <td>        get：默认值，表单数据会附加在URL中发送，一般用于不敏感信息，如分页等<br>        post：表单数据会包含在表单体内发送，用于提交敏感数据，如用户名与密码等<br>      </td>    </tr>  </tbody></table><p><code>input</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>type</td>      <td>设置控件的类型</td>      <td>        text：默认值，普通文本<br>        input：文本输入框<br>        password：密码输入框<br>        radio：单选框<br>        checkbox：多选框<br>        hidden：隐藏域<br>        submit：提交按钮<br>        reset：重置按钮<br>        button：普通按钮<br>      </td>    </tr>    <tr>      <td>name</td>      <td>设置控件的数据名称，需要和后端沟通确定</td>      <td>名称</td>    </tr>    <tr>      <td>value</td>      <td>设置控件的数据，不同的表单控件有不同的获取方式</td>      <td>数据</td>    </tr>    <tr>      <td>disabled</td>      <td>设置控件不可用</td>      <td>无</td>    </tr>  </tbody></table><p><code>button</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>disabled</td>      <td>设置按钮不可用</td>      <td>无</td>    </tr>    <tr>      <td>type</td>      <td>设置按钮的类型，不同的类型对表单数据的处理方式不同</td>      <td>        submit：默认值，提交表单<br>        reset：重置表单<br>        button：普通按钮<br>      </td>    </tr>  </tbody></table><p><code>textarea</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>name</td>      <td>设置文本域的数据名称</td>      <td>名称</td>    </tr>    <tr>      <td>rows</td>      <td>设置文本域默认显示的行数，影响文本域的高度</td>      <td>行数</td>    </tr>    <tr>      <td>cols</td>      <td>设置文本域默认显示的列数，影响文本域的宽度</td>      <td>列数</td>    </tr>    <tr>      <td>disabled</td>      <td>设置文本域不可用</td>      <td>无</td>    </tr>  </tbody></table><p><code>select</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>name</td>      <td>设置下拉框的数据名称</td>      <td>名称</td>    </tr>      <td>disabled</td>      <td>设置下拉框不可用</td>      <td>无</td>  </tbody></table><p><code>option</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>value</td>      <td>设置下拉选项的数据，在省略的情况下，会使用下拉选项的元素内容作为数据</td>      <td>数据</td>    </tr>    <tr>      <td>selected</td>      <td>设置下拉选项在加载后默认选中</td>      <td>无</td>    </tr>    <tr>      <td>disabled</td>      <td>设置下拉选项不可用</td>      <td>无</td>    </tr>  </tbody></table><p><code>label</code>元素常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>for</td>      <td>用于指定要匹配的表单控件</td>      <td>表单控件的<code>id</code>属性值</td>    </tr>  </tbody></table><h3 id="6-2-常用控件"><a href="#6-2-常用控件" class="headerlink" title="6.2 常用控件"></a>6.2 常用控件</h3><h4 id="6-2-1-文本输入框"><a href="#6-2-1-文本输入框" class="headerlink" title="6.2.1 文本输入框"></a>6.2.1 文本输入框</h4><p>最常用的表单控件，支持输入一行文本。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请输入文本：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>name</td>      <td>设置输入框的数据名称</td>      <td>名称</td>    </tr>    <tr>      <td>value</td>      <td>设置输入框的默认值</td>      <td>默认值</td>    </tr>    <tr>      <td>maxlength</td>      <td>设置输入框可输入的最大长度</td>      <td>最大长度</td>    </tr>  </tbody></table><h4 id="6-2-2-密码输入框"><a href="#6-2-2-密码输入框" class="headerlink" title="6.2.2 密码输入框"></a>6.2.2 密码输入框</h4><p>和文本输入框类似，但是输入的内容会显示为<code>*</code>号，避免密码泄露。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请输入密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>name</td>      <td>设置输入框的数据名称</td>      <td>名称</td>    </tr>    <tr>      <td>value</td>      <td>设置输入框的默认值，作为密码时无意义，可以省略</td>      <td>默认值</td>    </tr>    <tr>      <td>maxlength</td>      <td>设置输入框可输入的最大长度</td>      <td>最大长度</td>    </tr>  </tbody></table><h4 id="6-2-3-单选框"><a href="#6-2-3-单选框" class="headerlink" title="6.2.3 单选框"></a>6.2.3 单选框</h4><p>支持单选的控件。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请选择性别：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br></pre></td></tr></table></figure><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>name</td>      <td>设置单选框的数据名称，同组控件要保持一致</td>      <td>名称</td>    </tr>    <tr>      <td>value</td>      <td>设置单选框提交的数据值，会提交被选中的控件的<code>value</code>属性</td>      <td>数据值</td>    </tr>    <tr>      <td>checked</td>      <td>设置单选框在加载后默认选中</td>      <td>无</td>    </tr>  </tbody></table><h4 id="6-2-4-多选框"><a href="#6-2-4-多选框" class="headerlink" title="6.2.4 多选框"></a>6.2.4 多选框</h4><p>多选框也称为复选框，支持多选的控件。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请选择爱好：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span>抽烟</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span>喝酒</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span>烫头</span><br></pre></td></tr></table></figure><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>name</td>      <td>设置多选框的数据名称，同组控件要保持一致</td>      <td>名称</td>    </tr>    <tr>      <td>value</td>      <td>设置多选框提交的数据值，会提交被选中的控件的<code>value</code>属性，多个值会组成数组</td>      <td>数据值</td>    </tr>    <tr>      <td>checked</td>      <td>设置多选框在加载后默认选中</td>      <td>无</td>    </tr>  </tbody></table><h4 id="6-2-5-隐藏域"><a href="#6-2-5-隐藏域" class="headerlink" title="6.2.5 隐藏域"></a>6.2.5 隐藏域</h4><p>不会让用户看到的特殊控件，可以在<code>检查</code>后看到，通常用于提交特殊数据。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>name</td>      <td>设置隐藏域的数据名称</td>      <td>名称</td>    </tr>    <tr>      <td>value</td>      <td>设置隐藏域提交的数据值，通常由操作自动存储，不需要用户处理</td>      <td>数据值</td>    </tr>  </tbody></table><h4 id="6-2-6-提交按钮"><a href="#6-2-6-提交按钮" class="headerlink" title="6.2.6 提交按钮"></a>6.2.6 提交按钮</h4><p>用于将表单数据提交到指定地址。</p><p>使用<code>input</code>元素。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交表单&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>button</code>元素。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交表单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-7-重置按钮"><a href="#6-2-7-重置按钮" class="headerlink" title="6.2.7 重置按钮"></a>6.2.7 重置按钮</h4><p>用于将表单数据清空，恢复到页面加载后的状态。</p><p>使用<code>input</code>元素。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置表单&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>button</code>元素。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置表单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-8-普通按钮"><a href="#6-2-8-普通按钮" class="headerlink" title="6.2.8 普通按钮"></a>6.2.8 普通按钮</h4><p>用于触发特定操作。</p><p>使用<code>input</code>元素。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>button</code>元素。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-9-文本域"><a href="#6-2-9-文本域" class="headerlink" title="6.2.9 文本域"></a>6.2.9 文本域</h4><p>用于存储多行文本。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请输入多行文本：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;3&quot;</span>&gt;</span>我是文本域<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>textarea</code>元素时不需要使用<code>type</code>属性，其他和<code>input</code>元素的文本输入框一致。</p><h4 id="6-2-10-下拉框"><a href="#6-2-10-下拉框" class="headerlink" title="6.2.10 下拉框"></a>6.2.10 下拉框</h4><p>用于选择下拉选项。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请选择省份：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;from&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;黑&quot;</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;辽&quot;</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;吉&quot;</span>&gt;</span>吉林<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;粤&quot;</span> <span class="attr">selected</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>option</code>元素时如果没有设置<code>value</code>属性，会将元素内容作为数据提交。</p><h4 id="6-2-11-标记"><a href="#6-2-11-标记" class="headerlink" title="6.2.11 标记"></a>6.2.11 标记</h4><p>和表单控件关联，点击元素可使表单控件获得焦点，需要配合表单控件使用。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>请输入密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-12-分组"><a href="#6-2-12-分组" class="headerlink" title="6.2.12 分组"></a>6.2.12 分组</h4><p>用于对表单元素进行分组，和其他控件不同，分组元素属于块级元素。</p><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">legend</span>&gt;</span>主要信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>账户：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  性别：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-框架"><a href="#7-框架" class="headerlink" title="7 框架"></a>7 框架</h2><p>用于在当前页面加载其他内容，属于行内元素。</p><p>在HTML中，将和框架类似的元素称为可替换元素，即这种元素展示的内容是由外部的文件决定的，典型的元素有：</p><ul><li>表示框架的<code>iframe</code>元素</li><li>表示视频的<code>video</code>元素</li><li>表示音频的<code>audio</code>元素</li><li>表示图片的<code>img</code>元素</li><li>表示外部资源的<code>embed</code>元素，该元素现在已经不建议使用了，可以用上面的元素代替</li></ul><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>iframe</td>      <td>框架，允许在框架里展示其他内容</td>      <td>双标签</td>    </tr>  </tbody></table><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>name</td>      <td>框架名字，可以与其他元素的<code>target</code>属性配合，实现在框架中展示页面的效果</td>      <td>框架名字</td>    </tr>    <tr>      <td>src</td>      <td>框架内容，可以是网址，也可以是资源文件地址</td>      <td>框架内容</td>    </tr>    <tr>      <td>width</td>      <td>框架宽度</td>      <td>长度值</td>    </tr>    <tr>      <td>height</td>      <td>框架高度</td>      <td>长度值</td>    </tr>    <tr>      <td>frameborder</td>      <td>是否显示边框</td>      <td>        0：默认值，否，不显示边框<br>        1：是，显示边框<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://momashanhe.com&quot;</span>&gt;</span>查看博客<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-全局属性"><a href="#8-全局属性" class="headerlink" title="8 全局属性"></a>8 全局属性</h2><p>常用属性：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>含义</th>    </tr>  </thead>  <tbody>    <tr>      <td>id</td>      <td>元素唯一标识，一个页面中的<code>id</code>属性值不能重复。可以配合CSS和JS使用，也可以在其他元素中使用</td>    </tr>    <tr>      <td>class</td>      <td>元素类名，可以配合CSS和JS使用</td>    </tr>    <tr>      <td>style</td>      <td>元素样式，给元素设置CSS样式</td>    </tr>    <tr>      <td>title</td>      <td>元素提示，一般超链接和图片用得比较多</td>    </tr>    <tr>      <td>lang</td>      <td>元素语言，给元素指定语言，很少使用</td>    </tr>  </tbody></table><p>一般来说，在<code>html</code>元素中设置<code>lang</code>属性设置语言即可，很少会在其他元素中使用<code>lang</code>属性，除非想要使用其他语言显示某个元素。</p><p>虽然这些属性是全局属性，但是在一些特殊元素上使用是没有意义的，不建议使用，也没有必要使用，比如<code>html</code>元素，以及<code>head</code>元素及其内部元素，等一些其他特殊元素。</p><p>完整的全局属性可以参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes">MDN全局属性</a></p><h2 id="9-元数据"><a href="#9-元数据" class="headerlink" title="9 元数据"></a>9 元数据</h2><h3 id="9-1-基本结构"><a href="#9-1-基本结构" class="headerlink" title="9.1 基本结构"></a>9.1 基本结构</h3><p>元数据就是描述数据的数据，对于HTML而言，元数据就是描述HTML页面的数据。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>meta</td>      <td>表示元数据，用在<code>head</code>元素</td>      <td>单标签</td>    </tr>  </tbody></table><h3 id="9-2-使用示例"><a href="#9-2-使用示例" class="headerlink" title="9.2 使用示例"></a>9.2 使用示例</h3><p>配置字符编码：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置网页自动刷新：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;10;url=https://momashanhe.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新说明：</p><ul><li>数字表示秒数，非负整数有效。</li><li>url表示地址，省略或地址无效会刷新当前页面。</li></ul><p>针对IE浏览器的兼容性配置：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>针对移动端的兼容性配置：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置网页关键字：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;英文逗号隔开的一组词语&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置网页描述信息：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;80字以内的一段话，与网站内容相关&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>针对搜索引擎爬虫配置：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;可选值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可选值如下：</p><table>  <thead>    <tr>      <th>值</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>index</td>      <td>要求搜索爬虫索引此页面</td>    </tr>    <tr>      <td>noindex</td>      <td>要求搜索爬虫不索引此页面</td>    </tr>    <tr>      <td>follow</td>      <td>要求搜索爬虫跟随此页面上的链接</td>    </tr>    <tr>      <td>nofollow</td>      <td>要求搜索爬虫不跟随此页面上的链接</td>    </tr>    <tr>      <td>all</td>      <td>和设置index, follow相同</td>    </tr>    <tr>      <td>none</td>      <td>和设置noindex, nofollow相同</td>    </tr>    <tr>      <td>noarchive</td>      <td>要求搜索引擎不缓存页面内容</td>    </tr>    <tr>      <td>nocache</td>      <td>是noarchive的代名词</td>    </tr>  </tbody></table><p>配置网页作者：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;momashanhe&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置网页生成工具：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Visual Studio Code&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置网页版权信息：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;copyright&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2020-2050©版权所有&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整的网页元数据可以参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta">MDN元数据</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了HTML常见的元素及其特点。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>博客文章加密</title>
    <link href="https://momashanhe.com/posts/20240314/144908/"/>
    <id>https://momashanhe.com/posts/20240314/144908/</id>
    <published>2024-03-14T06:49:08.000Z</published>
    <updated>2024-04-24T01:40:04.924Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了如何对博客文章进行加密。</p><span id="more"></span><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件源码地址：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt">https://github.com/D0n9X1n/hexo-blog-encrypt</a></p><p>安装插件：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure><p>然后需要经过配置，并且最好修改下页面样式，以后再说吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了如何对博客文章进行加密。&lt;/p&gt;</summary>
    
    
    
    <category term="建站技术" scheme="https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://momashanhe.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>HTML4入门</title>
    <link href="https://momashanhe.com/posts/20240314/143553/"/>
    <id>https://momashanhe.com/posts/20240314/143553/</id>
    <published>2024-03-14T06:35:53.000Z</published>
    <updated>2024-05-08T08:42:38.308Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了HTML相关的一些概念。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-软件"><a href="#1-1-软件" class="headerlink" title="1.1 软件"></a>1.1 软件</h3><p>软件分类：</p><ul><li>系统软件：Windows、Linux、MacOS</li><li>应用软件：Office、QQ</li><li>游戏软件：绝地求生、王者荣耀</li><li>其他分类</li></ul><p>通常情况下，现在的软件一般由客户端与服务端两个部分组成：</p><ul><li>客户端：用户通过客户端来使用软件。</li><li>服务端：服务端负责在远程处理业务逻辑。</li></ul><p>服务端开发的语言：</p><ul><li>Java</li><li>PHP</li><li>C#</li><li>Python</li><li>Node.js</li></ul><p>客户端的形式：</p><ul><li>命令行界面：占老的方式，通过命令行来使用软件。</li><li>图形化界面：通过点击拖动等来使用软件。比较典型的时Windows中的大部分应用，属于C&#x2F;S架构，即Client&#x2F;Server架构。</li><li>网页：通过访问网页来使用软件。所有的网站都属于这个范畴，属于B&#x2F;S架构，即Brower&#x2F;Server架构。</li></ul><p>相较于传统的命令行界面和图形化界面，网页具有如下一些优点：</p><ul><li>不需要安装</li><li>无需更新</li><li>跨平台</li></ul><p>网页中使用的语言：</p><ul><li>HTML</li><li>CSS</li><li>JS</li></ul><h3 id="1-2-网页"><a href="#1-2-网页" class="headerlink" title="1.2 网页"></a>1.2 网页</h3><p>网站是指在因特网上根据一定的规则，使用HTML等制作的用于展示特定内容相关的网页集合。</p><p>网页是网站中的一“页”，通常是HTML格式的文件，它要通过浏览器来阅读。</p><p>网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以<code>.htm</code>或<code>.html</code>后缀结尾的文件，因此将其俗称为HTML文件。</p><p>HTML全称：HyperText Markup Language（超文本标记语言），含义如下：</p><ul><li>HyperText（超文本）：指可以加入图片、声音、动画、多媒体等内容，超越了文本限制，也指可以从一个文件跳转到另一个文件，与世界各地主机的文件连接。</li><li>Markup（标记）：文本要变成超文本，就需要用到各种标记符号，包括各种元素。</li><li>Language（语言）：每一个标记的写法、读音、使用规则，组成了一个标记语言。</li></ul><p>HTML不是一种编程语言，而是一种标记语言（Markup Language），标记语言是一套标记标签（Markup Tag）。</p><h3 id="1-3-浏览器"><a href="#1-3-浏览器" class="headerlink" title="1.3 浏览器"></a>1.3 浏览器</h3><p>浏览器是网页显示、运行的平台。常用的浏览器有IE、Firefox、Chrome、Safari和Opera等，称为五大浏览器。</p><p>浏览器内核是将文件展示成网页的渲染引擎，负责读取网页内容、整理讯息、计算网页的显示方式并显示页面。</p><h3 id="1-4-国际组织"><a href="#1-4-国际组织" class="headerlink" title="1.4 国际组织"></a>1.4 国际组织</h3><h4 id="1-4-1-IETF"><a href="#1-4-1-IETF" class="headerlink" title="1.4.1 IETF"></a>1.4.1 IETF</h4><p>全称：Internet Engineering Task Force（国际互联网工程任务组），成立于1985年底，是一个权威的互联网技术标准化组织，主要负责互联网相关技术规范的研发和制定，当前绝大多数国际互联网技术标准均出自IETF。</p><p>官网：<a href="https://www.ietf.org/">https://www.ietf.org</a></p><h4 id="1-4-2-W3C"><a href="#1-4-2-W3C" class="headerlink" title="1.4.2 W3C"></a>1.4.2 W3C</h4><p>全称：World Wide Web Consortium（万维网联盟），创建于1994年，是目前Web技术领域，最具影<br>响力的技术标准机构。共计发布了200多项技术标准和实施指南，对互联网技术的发展和应用起到<br>了基础性和根本性的支撑作用。</p><p>官网：<a href="https://www.w3.org/">https://www.w3.org</a></p><h4 id="1-4-3-WHATWF"><a href="#1-4-3-WHATWF" class="headerlink" title="1.4.3 WHATWF"></a>1.4.3 WHATWF</h4><p>全称：Web Hypertext Application Technology Working Group（网页超文本应用技术工作小组），成立<br>于2004年，是一个以推动网络HTML5标准为目的而成立的组织。由Opera、Mozilla基金会、苹果，<br>等这些浏览器厂商组成。</p><p>官网：<a href="https://whatwg.org/">https://whatwg.org</a></p><h3 id="1-5-发展历史"><a href="#1-5-发展历史" class="headerlink" title="1.5 发展历史"></a>1.5 发展历史</h3><p>从HTML1.0开始发展，期间经历了很多版本，目前HTML的最新标准是HMTL5，具体发展史如图：<br><img src="/@image/101001/001001-114913.jpg" alt="001-发展历史"></p><h3 id="1-6-Web标准"><a href="#1-6-Web标准" class="headerlink" title="1.6 Web标准"></a>1.6 Web标准</h3><p>Web标准是由W3C组织和其他标准化组织制定的一系列标准的集合。</p><p>遵循Web标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：</p><ul><li>让Web的发展前景更广阔。</li><li>内容能被更广泛的设备访问。</li><li>更容易被搜寻引擎搜索。</li><li>降低网站流量费用。</li><li>使网站更易于维护。</li><li>提高页面浏览速度。</li></ul><p>Web标准主要包括三个方面：</p><ul><li>结构（Structure）：用于对网页元素进行整理和分类，主要指的是HTML。</li><li>表现（Presentation）：用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。</li><li>行为（Behavior）：用于定义网页模型及编写网页交互，主要指的是JS。</li></ul><p>Web标准提出的最佳体验方案是结构、样式、行为互相分离，即结构写到HTML文件中、表现写到CSS文件中、行为写到JS文件中。</p><h3 id="1-7-官方文档"><a href="#1-7-官方文档" class="headerlink" title="1.7 官方文档"></a>1.7 官方文档</h3><p>官方文档地址：</p><ul><li>W3C官网：<a href="https://www.w3.org/">https://www.w3.org/</a></li><li>W3School：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn</a></li><li>MDN：<a href="https://developer.mozilla.org/">https://developer.mozilla.org</a></li></ul><p>推荐使用MDN官方文档。</p><h2 id="2-概念"><a href="#2-概念" class="headerlink" title="2 概念"></a>2 概念</h2><h3 id="2-1-标签"><a href="#2-1-标签" class="headerlink" title="2.1 标签"></a>2.1 标签</h3><h4 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h4><p>标签又称元素，是HTML的基本组成单位。</p><p>标签名不区分大小写，但推荐小写，因为小写更规范。</p><p>元素分为双标签和单标签，绝大多数都是双标签：</p><div class="tabs" id="tab-tab-id-1"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1-1">双标签</a></li><li class="tab"><a class="#tab-id-1-2">单标签</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1-1"><p>前面的是开始标签，两个标签中间的是元素内容，后面的是结束标签，结束标签多了一个<code>/</code>符号且不可省略：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-id-1-2"><p>只有一个标签，不存在元素内容：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>标签后面的空格和<code>/</code>符号可以省略：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div></div><h4 id="2-1-2-尝试"><a href="#2-1-2-尝试" class="headerlink" title="2.1.2 尝试"></a>2.1.2 尝试</h4><p>使用鼠标右键新建文本文档，输入以下内容：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将文本文档重命名为<code>hello.html</code>后，双击打开，即可看到创建的页面。</p><h4 id="2-1-3-基本结构"><a href="#2-1-3-基本结构" class="headerlink" title="2.1.3 基本结构"></a>2.1.3 基本结构</h4><p>一般情况下，在网页中右键，在菜单的底部可以看到<code>查看页面源代码</code>和<code>检查</code>这两个选项：</p><ul><li>查看页面源代码：可以看到程序员编写的页面源码。</li><li>检查：浏览器对页面源码经过格式化等处理后的代码。</li></ul><p>选择<code>检查</code>后，可以看到页面的基本结构：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>html</td>      <td>页面中最大的元素，称为根元素</td>      <td>双标签</td>    </tr>    <tr>      <td>head</td>      <td>用于定义页面的特性，不会展示在页面上，通常是给浏览器或者搜索引擎使用的</td>      <td>双标签</td>    </tr>    <tr>      <td>title</td>      <td>用于定义页面的标题，嵌套在<code>head</code>元素中</td>      <td>双标签</td>    </tr>    <tr>      <td>body</td>      <td>用于定义页面的内容，会展示在页面上</td>      <td>双标签</td>    </tr>  </tbody></table><p>使用VSCode工具快速生成页面结构：</p><ul><li>第一步：双击打开软件。</li><li>第二步：新建文件并保存为<code>.html</code>文件。</li><li>第三步：输入<code>!</code>符号并根据提示按下<code>Tab</code>键，会自动生成基本结构。</li></ul><p>生成的页面结构如下：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此外，如果想配置网站图标，可以在存放页面的根目录中，使用<code>favicon.ico</code>图片作为网站图标。</p><h4 id="2-1-4-关系"><a href="#2-1-4-关系" class="headerlink" title="2.1.4 关系"></a>2.1.4 关系</h4><p>元素的关系可以分为两类：嵌套和并列。</p><p>嵌套指的是不同层次的元素之间的关系，将被嵌套的元素置于嵌套元素之中，要求嵌套元素必须有双标签。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>嵌套的元素之间存在父子关系：</p><ul><li>父亲元素：对于<code>title</code>元素来说，<code>head</code>元素是其父亲元素。对于<code>head</code>元素来说，<code>html</code>元素是其父亲元素。</li><li>儿子元素：对于<code>head</code>元素来说，<code>title</code>元素是其儿子元素。对于<code>html</code>元素来说，<code>head</code>元素是其儿子元素。</li><li>祖先元素：对于<code>title</code>元素来说，<code>head</code>元素和<code>html</code>元素都是其祖先元素。父亲元素也是祖先元素的一种。</li><li>后代元素：对于<code>html</code>元素来说，<code>head</code>元素和<code>title</code>元素都是其后代元素。儿子元素也是后代元素的一种。</li></ul><p>并列指的是相同层次的元素之间的关系，对元素的标签无要求。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并列的元素之间存在兄弟关系：</p><ul><li>兄弟元素：对于<code>body</code>元素来说，<code>head</code>元素是其兄弟元素。对于<code>head</code>元素来说，<code>body</code>元素是其兄弟元素。</li></ul><h3 id="2-2-声明"><a href="#2-2-声明" class="headerlink" title="2.2 声明"></a>2.2 声明</h3><h4 id="2-2-1-说明"><a href="#2-2-1-说明" class="headerlink" title="2.2.1 说明"></a>2.2.1 说明</h4><p>用于告知浏览器当前页面的版本。</p><p>页面的声明必须写在第一行，并且要写在<code>html</code>元素外面，即和<code>html</code>元素同级且在<code>html</code>元素上面。</p><p>格式：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br></pre></td></tr></table></figure><p>DOCTYPE是Document Type Declaration（文档类型声明）的缩写。</p><p>声明不是HTML标签，既不是单标签也不是双标签。</p><p>声明不区分大小写，可以按照个人习惯选择。</p><h4 id="2-2-2-HTML4"><a href="#2-2-2-HTML4" class="headerlink" title="2.2.2 HTML4"></a>2.2.2 HTML4</h4><p>在HTML4中，确切的说是在HTML4.01及之前版本中，因为基于SGML（Standard Generalized Markup Language，标准通用标记语言），声明可能会指向DTD（Document Type Definition，文档类型定义）文件，这个文件定义了文档的结构和元素规则。</p><p>HTML4.01规定了三种不同的声明：</p><ol><li>Strict：最严格，包含所有元素和属性，<code>不包括</code>表象或过时的元素，框架集<code>frameset</code>是<code>不允许</code>使用的。示例：<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Transitional：较严格，包含所有元素和属性，<code>包括</code>表象或过时的元素，框架集<code>frameset</code>是<code>不允许</code>使用的。示例：<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Frameset：最宽松，包含所有元素和属性，<code>包括</code>表象或过时的元素，框架集<code>frameset</code>是<code>允许</code>使用的。示例：<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-3-HTML5"><a href="#2-2-3-HTML5" class="headerlink" title="2.2.3 HTML5"></a>2.2.3 HTML5</h4><p>在HTML5中不再基于SGML，因此不再依赖DTD文件，而是使用更简单的声明。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为声明是向下兼容的，因此可以在HTML5的声明中编写HTML4的代码，但是不能在HTML4的声明中编写HTML5的代码。</p><h3 id="2-3-属性"><a href="#2-3-属性" class="headerlink" title="2.3 属性"></a>2.3 属性</h3><p>属性用于给元素提供附加信息，在双标签中可以将属性写在开始标签中，在单标签中可以将属性写在<code>/</code>符号前。</p><p>属性一般由属性名和属性值组成，某些特殊属性也可以只有属性名，其属性值可以省略：</p><div class="tabs" id="tab-tab-id-2"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-2-1">指定属性值</a></li><li class="tab"><a class="#tab-id-2-2">省略属性值</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-2-1"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-id-2-2"><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">disable</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div></div><p>注意：</p><ul><li>不同的元素有不同的属性，存在适用所有元素的通用属性，比如<code>id</code>属性用于在页面上作为元素的唯一标识。</li><li>属性名和属性值都是W3C规定好的，不能乱写。</li><li>属性名和属性值不区分大小写，推荐使用小写。</li><li>属性值的双引号也可以写成单引号，如果没有空格等特殊字符也可以不写，推荐使用双引号。</li><li>元素中如果出现同名属性，后面的属性会失效。</li></ul><h3 id="2-4-语言"><a href="#2-4-语言" class="headerlink" title="2.4 语言"></a>2.4 语言</h3><p>设置页面语言可以让浏览器显示对应的翻译提示，也可以方便搜索引擎的优化。</p><p>语言可以在<code>html</code>元素中使用<code>lang</code>属性设置，写法如下：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他语言的设置：</p><ul><li>zh-CN：中文-中国大陆（简体中文）</li><li>zh-TW：中文-中国台湾（繁体中文）</li><li>zh：中文</li><li>en-US：英语-美国</li><li>en-GB：英语-英国</li></ul><h3 id="2-5-字符集"><a href="#2-5-字符集" class="headerlink" title="2.5 字符集"></a>2.5 字符集</h3><p>计算机本身是二进制的，为了方便使用，在写入时会对输入的数据进行编码，在读取时会对输出的数据进行解码。</p><p>在编码和解码时，需要使用字符集进行规范，解码需要使用和编码相同的字符集，否则会导致最终读取出来的内容产生乱码。</p><p>常见的字符集如下：</p><ul><li>ASCII：大写字母、小写字母、数字、一些符号，共计128个。</li><li>ISO 8859-1：在ASCII基础上，扩充了一些欧洲字符，比如希腊字符等，共计是256个。</li><li>GB2312：继续扩充，收录了6763个常用汉字和682个字符。</li><li>GBK：收录了的汉字和符号达到20000多个，支持繁体中文。</li><li>UTF-8：包含世界上所有的文字与符号。建议使用。</li></ul><p>可以在<code>head</code>元素中通过<code>meta</code>元素配合<code>charset</code>属性指定页面的字符集，让浏览器使用这种字符集对页面内容进行解析：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-注释"><a href="#2-6-注释" class="headerlink" title="2.6 注释"></a>2.6 注释</h3><p>使用注释可以对页面源码进行解释和说明，并且注释在展示的时候会被过滤掉，但是查看源码是可以看到的。</p><p>格式：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容，在页面上不可见 --&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>注释不支持嵌套，不要在注释里嵌套其他注释。</li></ul><h2 id="3-基础"><a href="#3-基础" class="headerlink" title="3 基础"></a>3 基础</h2><h3 id="3-1-排版元素"><a href="#3-1-排版元素" class="headerlink" title="3.1 排版元素"></a>3.1 排版元素</h3><p>排版元素用于规范页面内容的显示。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>h1~h6</td>      <td>用于标识页面内容的6个标题级别，从h1到h6级别越来越低，元素里不能嵌套其他排版元素</td>      <td>双标签</td>    </tr>    <tr>      <td>p</td>      <td>用于表示页面内容的段落，元素里不能嵌套其他排版元素</td>      <td>双标签</td>    </tr>    <tr>      <td>div</td>      <td>无特殊含义，用于整体布局，元素里可以嵌套其他元素，包括排版元素</td>      <td>双标签</td>    </tr>    <tr>      <td>span</td>      <td>无特殊含义，用于局部修饰，元素里不能嵌套其他排版元素</td>      <td>双标签</td>    </tr>  </tbody></table><h3 id="3-2-语义化"><a href="#3-2-语义化" class="headerlink" title="3.2 语义化"></a>3.2 语义化</h3><p>语义指的是元素的含义，某些元素是有特定含义的，比如<code>p</code>元素的含义是表示段落，某些元素是没有特定含义的，比如<code>span</code>元素。</p><p>语义化元素指的是具有特定含义的元素，这种元素有一定的优势：</p><ul><li>代码结构清晰，方便阅读，有利于团队合作开发。</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页。</li><li>有利于搜索引擎优化（SEO）。</li></ul><p>在使用语义化元素时，应该关注元素特定含义，不应该关注元素样式，因为样式可以通过CSS进行调整。</p><p>常用的元素：</p><table>  <thead>    <tr>      <th>标签名</th>      <th>说明</th>      <th>单双</th>    </tr>  </thead>  <tbody>    <tr>      <td>br</td>      <td>换行，如果只想增加段落间隔，建议使用CSS实现</td>      <td>单标签</td>    </tr>    <tr>      <td>hr</td>      <td>分隔，如果只想使用水平线，建议使用CSS实现</td>      <td>单标签</td>    </tr>    <tr>      <td>pre</td>      <td>按原文显示，一般用于在页面中嵌入大段代码</td>      <td>双标签</td>    </tr>  </tbody></table><h3 id="3-3-元素区块"><a href="#3-3-元素区块" class="headerlink" title="3.3 元素区块"></a>3.3 元素区块</h3><p>在页面上只能独占一行的元素被称为块级元素，比如<code>div</code>元素，在页面上不需要独占一行的元素被称为行内元素，比如<code>span</code>元素。</p><p>排版元素属于块级元素，是独占一行的。</p><p>一般情况下，在块级元素中可以嵌套块级元素和行内元素，在行内元素中只能嵌套行内元素，但某些特殊的块级元素不能嵌套：</p><ul><li>标题元素<code>h1~h6</code>中不支持互相嵌套，也不建议在标题中嵌套其他块级元素。</li><li>段落元素<code>p</code>中不支持其他块级元素，建议分段并在段落中使用其他块级元素。</li></ul><h3 id="3-4-实体"><a href="#3-4-实体" class="headerlink" title="3.4 实体"></a>3.4 实体</h3><h4 id="3-4-1-介绍"><a href="#3-4-1-介绍" class="headerlink" title="3.4.1 介绍"></a>3.4.1 介绍</h4><p>在HTML中存在一些预留字符，比如标签的<code>&lt;</code>字符和<code>&gt;</code>字符。</p><p>浏览器默认会将预留字符识别为标签，如果想要在页面内容里使用预留字符，就需要用特殊形式的内容来表示这些预留字符，这种特殊形式的内容称为实体。</p><p>比如想要在页面中显示这句话：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我记得<span class="tag">&lt;<span class="name">div</span>&gt;</span>是块级元素</span><br></pre></td></tr></table></figure><p>如果在代码中直接写的话，会导致页面将<code>&lt;div&gt;</code>解析为标签，而不是文本内容，解决办法就是使用实体替换预留字符。</p><p>再比如想要在页面中显示多个空格：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里有   三个空格</span><br></pre></td></tr></table></figure><p>但是页面实际上会将多个空格合并为一个空格，想要强制显示多个空格，就需要使用实体。</p><h4 id="3-4-2-规则"><a href="#3-4-2-规则" class="headerlink" title="3.4.2 规则"></a>3.4.2 规则</h4><p>实体的规则：</p><ul><li>以<code>&amp;</code>符号开始。</li><li>以<code>;</code>符号结束。</li><li>如果使用实体名称，格式为<code>&amp;实体名称;</code>，如果使用实体编号，格式为<code>&amp;#实体编号;</code>。</li></ul><p>实体名称更方便记忆，能使用实体名称就尽量使用实体名称，但是需要注意：</p><ul><li>实体名称对大小写敏感。</li><li>并不是所有的预留字符都有实体名称。</li><li>部分浏览器可能不支持某些实体名称。</li></ul><h4 id="3-4-3-常见"><a href="#3-4-3-常见" class="headerlink" title="3.4.3 常见"></a>3.4.3 常见</h4><p>常见的预留字符对应的实体名称和实体编号如下：</p><table>  <thead>    <tr>      <th>预留字符</th>      <th>描述</th>      <th>实体名称</th>      <th>实体编号</th>    </tr>  </thead>  <tbody>    <tr>      <td>&#38;</td>      <td>和</td>      <td>amp</td>      <td>38</td>    </tr>    <tr>      <td>&#60;</td>      <td>小于号</td>      <td>lt</td>      <td>60</td>    </tr>    <tr>      <td>&#62;</td>      <td>大于号</td>      <td>gt</td>      <td>62</td>    </tr>    <tr>      <td>&#160;</td>      <td>空格</td>      <td>nbsp</td>      <td>160</td>    </tr>    <tr>      <td>&#165;</td>      <td>元</td>      <td>yen</td>      <td>165</td>    </tr>    <tr>      <td>&#169;</td>      <td>版权</td>      <td>copy</td>      <td>169</td>    </tr>    <tr>      <td>&#174;</td>      <td>商标</td>      <td>reg</td>      <td>174</td>    </tr>    <tr>      <td>&#215;</td>      <td>乘号</td>      <td>times</td>      <td>215</td>    </tr>    <tr>      <td>&#247;</td>      <td>除号</td>      <td>divide</td>      <td>247</td>    </tr>    <tr>      <td>&#34;</td>      <td>双引号</td>      <td>quot</td>      <td>34</td>    </tr>    <tr>      <td>&#39;</td>      <td>单引号</td>      <td>无</td>      <td>39</td>    </tr>    <tr>      <td>&#96;</td>      <td>反引号</td>      <td>无</td>      <td>96</td>    </tr>  </tbody></table><p>更多的对应关系可以参考文档：<a href="https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references">WHATWG实体</a></p><h4 id="3-4-4-解决"><a href="#3-4-4-解决" class="headerlink" title="3.4.4 解决"></a>3.4.4 解决</h4><p>回到之前的问题，可以使用下面的代码实现：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我记得<span class="symbol">&amp;lt;</span>div<span class="symbol">&amp;gt;</span>是块级元素</span><br><span class="line">这里有<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>三个空格</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了HTML相关的一些概念。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>使用GitHub图床存放博客静态资源</title>
    <link href="https://momashanhe.com/posts/20240310/141520/"/>
    <id>https://momashanhe.com/posts/20240310/141520/</id>
    <published>2024-03-10T06:15:20.000Z</published>
    <updated>2024-08-13T02:35:29.172Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了如何使用GitHub图床存放静态资源，并对静态资源的获取进行加速。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>Git 2.37.3<br>Hexo 4.3.1</p>              </div>            </details><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>博客暂时还没有服务器进行备案，也不想使用别人的图床，就只能自己打一个比较简陋的了。</p><p>使用GitHub作为图床，但是需要注意不要超过1G容量，超过1G的时候需要想办法进行拆分。</p><p>使用NPM加速访问，实现CDN的效果。</p><h2 id="2-GitHub"><a href="#2-GitHub" class="headerlink" title="2 GitHub"></a>2 GitHub</h2><p>GitHub官网：<a href="https://github.com/">https://github.com/</a></p><p>如果没有注册过GitHub的话，需要注册一个账号。</p><p>创建一个用于存储静态资源的仓库。</p><p>点击右上角个人头像，在下拉列表中点击<code>Settings</code>进入设置界面。</p><p>点击左侧菜单栏底部的<code>Developer Settings</code>进入开发者界面。</p><p>点击<code>Personal access tokens</code>选项，然后点击<code>Tokens (classic)</code>菜单，并在右侧点击<code>Generate new token</code>下拉列表中的<code>Generate new token (classic)</code>按钮：<br><img src="/@image/001002/007001-132103.jpg" alt="001-创建Token"></p><p>在<code>Note</code>中输入对Token使用的描述，把<code>Expiration</code>设置为<code>No expiration</code>永不过期，然后给下面的<code>Select scopes</code>勾选<code>repo</code>选框：<br><img src="/@image/001002/007002-135621.jpg" alt="002-勾选作用域"></p><p>最后点击底部的<code>Generate token</code>创建Token，并将页面上展示的Token进行复制保存，这个Token只会出现这一次，忘记只能重新生成。</p><p>将静态资源文件上传到仓库里。</p><h2 id="3-NPM"><a href="#3-NPM" class="headerlink" title="3 NPM"></a>3 NPM</h2><h3 id="3-1-注册"><a href="#3-1-注册" class="headerlink" title="3.1 注册"></a>3.1 注册</h3><p>NPM官网：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p><p>注册NPM账号：<br><img src="/@image/001002/007003-140338.jpg" alt="003-注册NPM"></p><p>新账号注册后需要配置2FA认证：</p><figure class="highlight txt"><figcaption><span>txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You don’t have two-factor authentication (2FA) enabled on your account. Configure 2FA or visit our docs to learn more.</span><br></pre></td></tr></table></figure><p>点击2FA认证链接，选择使用<code>Authenticator app</code>的方式认证：<br><img src="/@image/001002/007004-141025.jpg" alt="004-2FA认证"></p><p>在手机上下载<code>Authenticator</code>并安装，打开后选择<code>扫描QR码</code>然后扫描网页上的二维码，将生成的一次性密码代码输入底部的密码框中。</p><p>保存好生成的恢复代码，这里只出现一次，忘记需要重新生成。</p><h3 id="3-2-本地仓库"><a href="#3-2-本地仓库" class="headerlink" title="3.2 本地仓库"></a>3.2 本地仓库</h3><p>进入静态资源的本地仓库，执行以下命名切换回原生源：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><p>如果是第一次使用，需要执行命令添加本地NPM用户配置，输入账户和密码以及邮箱即可：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><p>如果不是第一次使用，执行登录命令，输入账户和密码以及邮箱即可：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>如果命令行提示需要登录，在下面的网址里完成登录即可：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Create your account at:</span><br></pre></td></tr></table></figure><p>在打包前准备好包名，需要事先确认包名没有重复，可以在NPM官网搜索相应包名，搜不到就说明还没被占用。</p><p>执行初始化命令，将仓库打包，按照指示进行配置：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>根据实际情况填写，红框内的使用默认就好：<br><img src="/@image/001002/007005-141236.jpg" alt="005-包初始化"></p><p>注意名称不要使用带有年月日的数字，不然会被认为垃圾名称发布失败，尽量是用<code>-</code>短横线分隔。</p><p>最后输入<code>yes</code>即可。</p><p>打包以后就可以发布了，执行命令：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --otp=123456</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>–otp：需要输入Authenticator生成的一次性密码。</li></ul><p>发布成功提示：<br><img src="/@image/001002/007006-141308.jpg" alt="006-发布成功"></p><p>发布成功后，可以寻找NPM的节点使用，比如可以按照下面的方式使用：</p><figure class="highlight plaintext"><figcaption><span>url</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://unpkg.com/:package@:version/:file</span><br></pre></td></tr></table></figure><h3 id="3-3-升级仓库"><a href="#3-3-升级仓库" class="headerlink" title="3.3 升级仓库"></a>3.3 升级仓库</h3><p>以后使用静态资源的时候，先在本地试用，然后将静态资源同步到GitHub上，再发布NPM升级包。</p><p>使用命令增加NPM版本，版本由3位组成，从左到右分别是：</p><ul><li>major：主要版本，左边首位，不会向后兼容的重大改动。</li><li>minor：次要版本，中间位，向后兼容的新增功能。</li><li>patch：补丁版本，右边首位，向后兼容的缺陷修复。</li></ul><p>如果需要更新补丁版本，执行如下命令即可，会自动给版本的<code>patch</code>部分加一：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm version patch</span><br></pre></td></tr></table></figure><p>然后执行发布命令：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --otp=123456</span><br></pre></td></tr></table></figure><p>发布成功后修改使用的版本就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了如何使用GitHub图床存放静态资源，并对静态资源的获取进行加速。&lt;/p&gt;</summary>
    
    
    
    <category term="建站技术" scheme="https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://momashanhe.com/tags/Hexo/"/>
    
    <category term="GitHub" scheme="https://momashanhe.com/tags/GitHub/"/>
    
    <category term="NPM" scheme="https://momashanhe.com/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>博客图床对比</title>
    <link href="https://momashanhe.com/posts/20240310/113145/"/>
    <id>https://momashanhe.com/posts/20240310/113145/</id>
    <published>2024-03-10T03:31:45.000Z</published>
    <updated>2024-04-24T01:43:33.725Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了不同图床之间的区别。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>Git 2.37.3<br>Hexo 4.3.1</p>              </div>            </details><h2 id="1-对比"><a href="#1-对比" class="headerlink" title="1 对比"></a>1 对比</h2><p>图床一般用来加速对博客图片的访问，实际上是一种专门存储图片的服务器，大致分为：个人图床，平台图床。</p><h3 id="1-1-个人图床"><a href="#1-1-个人图床" class="headerlink" title="1.1 个人图床"></a>1.1 个人图床</h3><p>由个人搭建的图床，搭建之后将其公开，允许公众使用的图床。</p><p>代表：</p><ul><li><a href="https://sm.ms/">SM.MS图床</a>：土豪兽兽建的图床，2015年开始正式运营，烧风自建的CDN，支持HTTPS地址。</li><li><a href="https://imgse.com/">路过图床</a>：老牌图床，2011年开放，提供全球CDN，支持HTTPS地址。</li><li><a href="https://7bu.top/login">去不图床</a>：杜老师创建的图床，部署在腾讯云上，需要搭配CDN。</li></ul><h3 id="1-2-平台图床"><a href="#1-2-平台图床" class="headerlink" title="1.2 平台图床"></a>1.2 平台图床</h3><p>由大型服务商搭建的图床，安全性要比个人图床好，但也更贵一些，可能会有一些限制。</p><p>代表：</p><ul><li><a href="https://github.com/">GitHub</a>：支持存储1G以内图片，稳定可靠，需要额外配置CDN。</li><li><a href="https://cloud.tencent.com/">腾讯云</a>：稳定可靠，就是贵。</li><li><a href="https://cn.aliyun.com/">阿里云</a>：稳定可靠，就是贵。</li><li><a href="https://www.upyun.com/">又拍云</a>：需要在网站底部添加LOGO和官网链接，每月10G免费空间，每月10G免费CDN。</li><li><a href="https://www.qiniu.com/">七牛云</a>：免费流量不支持HTTPS地址，每月10G免费空间，每月15G免费CDN。</li><li><a href="https://www.dogecloud.com/">多吉云</a>：域名需要在服务器进行ICP备案，每月10G免费空间，每月20G免费CDN。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了不同图床之间的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="建站技术" scheme="https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://momashanhe.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>给博客加装Waline评论</title>
    <link href="https://momashanhe.com/posts/20240309/100821/"/>
    <id>https://momashanhe.com/posts/20240309/100821/</id>
    <published>2024-03-09T02:08:21.000Z</published>
    <updated>2024-04-24T01:48:11.467Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了通过使用LeanCloud数据库和Vercel服务器将Waline评论部署到Hexo博客。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>Git 2.37.3<br>Hexo 4.3.1</p>              </div>            </details><h2 id="1-Waline评论"><a href="#1-Waline评论" class="headerlink" title="1 Waline评论"></a>1 Waline评论</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>详情查看官方文档：<a href="https://waline.js.org/guide/get-started/">Waline官方文档 - 快速上手</a></p><h2 id="2-使用LeanCloud"><a href="#2-使用LeanCloud" class="headerlink" title="2 使用LeanCloud"></a>2 使用LeanCloud</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>LeanCloud是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage数据存储、LeanMessage通信服务、LeanAnalytics统计分析、LeanModules拓展模块等四大类型的后端云服务，加速应用开发。</p><p>加装Waline评论主要使用LeanCloud的LeanStorage数据存储功能。</p><p>LeanCloud中文官网：<a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a></p><h3 id="2-2-注册账号并创建应用"><a href="#2-2-注册账号并创建应用" class="headerlink" title="2.2 注册账号并创建应用"></a>2.2 注册账号并创建应用</h3><p>注册LeanCloud账号，分为中国大陆版和国际版，区别是中国大陆版需要绑定手机、实名认证、备案域名，国际版不需要，这里注册国际版就能满足要求。</p><p>国际版注册链接：<a href="https://console.leancloud.app/register">https://console.leancloud.app/register</a></p><p>输入注册信息，然后在邮箱中验证邮件完成注册。</p><p>点击<code>创建应用</code>并选择免费的开发版，创建用于Waline的应用：<br><img src="/@image/001002/005001-082344.jpg" alt="001-创建应用"></p><p>进入应用，在左侧的导航栏内进入<code>设置</code>下的<code>应用凭证</code>界面，记录认证信息以便后续使用：<br><img src="/@image/001002/005002-083612.jpg" alt="002-应用凭证"></p><h2 id="3-使用Vercel"><a href="#3-使用Vercel" class="headerlink" title="3 使用Vercel"></a>3 使用Vercel</h2><h3 id="3-1-创建项目"><a href="#3-1-创建项目" class="headerlink" title="3.1 创建项目"></a>3.1 创建项目</h3><p>创建账户并登录到Vercel，在Waline提供的文档里找到快速创建Vercel项目的链接。</p><p>快速链接：<a href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example">部署Waline到Vercel</a></p><p>输入GitHub项目名称后会自动在GitHub上创建项目，然后会在Vercel上自动部署，首次部署后需要设置环境变量。</p><h3 id="3-2-配置项目"><a href="#3-2-配置项目" class="headerlink" title="3.2 配置项目"></a>3.2 配置项目</h3><p>进入刚刚创建的项目界面，切换到<code>Settings</code>标签。</p><p>在左侧导航栏点击<code>Environment Variables</code>设置，配置<code>LEAN_ID</code>、<code>LEAN_KEY</code>、<code>LEAN_MASTER_KEY</code>三个环境变量，值为上面LeanCloud里的应用凭证里的认证信息：<br><img src="/@image/001002/005003-083853.jpg" alt="003-设置环境变量"></p><blockquote><p>如果使用LeanCloud国内版，需要额外配置<code>LEAN_SERVER</code>环境变量，值为绑定的域名。</p></blockquote><p>切换到<code>Deployments</code>标签，点击任意一项后面的<code>...</code>并在下拉选项中选择<code>Redeploy</code>，点击弹出界面下方的<code>Redeploy</code>重新部署。</p><p>在<code>Domains</code>中的<code>https://xxx.vercel.app</code>地址即为环境ID。</p><h2 id="4-前端部署"><a href="#4-前端部署" class="headerlink" title="4 前端部署"></a>4 前端部署</h2><h3 id="4-1-选择评论系统"><a href="#4-1-选择评论系统" class="headerlink" title="4.1 选择评论系统"></a>4.1 选择评论系统</h3><p>在主题的配置文件中选择Waline作为评论系统。</p><p>特殊配置参考官方文档即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了通过使用LeanCloud数据库和Vercel服务器将Waline评论部署到Hexo博客。&lt;/p&gt;</summary>
    
    
    
    <category term="建站技术" scheme="https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://momashanhe.com/tags/Hexo/"/>
    
    <category term="Vercel" scheme="https://momashanhe.com/tags/Vercel/"/>
    
    <category term="LeanCloud" scheme="https://momashanhe.com/tags/LeanCloud/"/>
    
    <category term="Waline" scheme="https://momashanhe.com/tags/Waline/"/>
    
  </entry>
  
  <entry>
    <title>给博客加装Twikoo评论</title>
    <link href="https://momashanhe.com/posts/20240303/152102/"/>
    <id>https://momashanhe.com/posts/20240303/152102/</id>
    <published>2024-03-03T07:21:02.000Z</published>
    <updated>2024-04-24T01:48:13.664Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了通过使用MongoDB数据库和Vercel服务器将Twikoo评论部署到Hexo博客。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NPM 9.3.1<br>Git 2.37.3<br>Hexo 4.3.1</p>              </div>            </details><h2 id="1-Twikoo评论"><a href="#1-Twikoo评论" class="headerlink" title="1 Twikoo评论"></a>1 Twikoo评论</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>详情查看官方文档：<a href="https://twikoo.js.org/quick-start.html">Twikoo官方文档 - 快速上手</a></p><h2 id="2-使用MongoDB"><a href="#2-使用MongoDB" class="headerlink" title="2 使用MongoDB"></a>2 使用MongoDB</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>MongoDB是一款流行的开源文档型数据库，用于存储文档类型的数据，比如博客产生的评论。</p><p>MongoDB中文官网：<a href="https://www.mongodb.com/zh-cn/">https://www.mongodb.com/zh-cn/</a></p><p>如果有云服务器，可以在服务器上使用MongoDB本地数据库，如果没有云服务器，可以使用MongoDB Atlas云数据库。</p><h3 id="2-2-注册账号并创建集群"><a href="#2-2-注册账号并创建集群" class="headerlink" title="2.2 注册账号并创建集群"></a>2.2 注册账号并创建集群</h3><p>注册MongoDB账号，然后在邮箱中验证邮件完成注册。</p><p>在<code>Overview</code>界面中可以设置组织名和项目名，然后创建一个集群：<br><img src="/@image/001002/004001-141923.jpg" alt="001-创建集群"></p><p>在区域选择界面，选择免费的，提供商Provider选择<code>AWS</code>亚马逊即可，区域Region选择<code>N. Virginia (us-east-1)</code>弗吉尼亚州，也可以选择其他的。</p><p>继续设置Name集群名称，默认使用<code>Cluster0</code>作为集群名称，可以自定义，一旦设定不可修改。</p><p>继续设置Tag标签，这是可选的。</p><p>点击页面下方的<code>Create</code>创建免费集群。</p><h3 id="2-3-创建用户"><a href="#2-3-创建用户" class="headerlink" title="2.3 创建用户"></a>2.3 创建用户</h3><p>进入<code>Database Access</code>界面，创建用户。</p><p>选择<code>Password</code>作为认证方式，输入用户和密码，这个用户是用来登录云数据库的，因此密码尽量设置的难一些：<br><img src="/@image/001002/004002-142832.jpg" alt="002-创建用户"></p><p>继续设置用户权限，点击<code>Add Built In Role</code>并选择<code>Atlas Admin</code>选项：<br><img src="/@image/001002/004003-143613.jpg" alt="003-设置用户角色"></p><p>点击页面下方的<code>Add User</code>创建用户。</p><h3 id="2-4-设置IP地址"><a href="#2-4-设置IP地址" class="headerlink" title="2.4 设置IP地址"></a>2.4 设置IP地址</h3><p>进入<code>Network Access</code>界面，添加能访问云数据库的IP地址。</p><p>点击<code>Allow Access from Anywhere</code>或者在<code>Access List Entry</code>输入<code>0.0.0.0/0</code>表示允许所有IP地址的连接，点击<code>Confirm</code>保存设置：<br><img src="/@image/001002/004004-143955.jpg" alt="004-添加IP地址"></p><h3 id="2-5-查看如何连接"><a href="#2-5-查看如何连接" class="headerlink" title="2.5 查看如何连接"></a>2.5 查看如何连接</h3><p>进入<code>Database</code>界面，点击集群后面的<code>Connect</code>建立连接，连接方式选择<code>Drivers</code>使用驱动连接：<br><img src="/@image/001002/004005-144127.jpg" alt="005-创建连接"></p><p>使用Driver默认的<code>Node.js</code>作为驱动，使用Version默认的<code>5.5 or later</code>作为版本：<br><img src="/@image/001002/004006-144638.jpg" alt="006-配置连接"></p><p>复制下方<code>mongodb+srv</code>开头的字符串，并将<code>&lt;password&gt;</code>修改为创建用户时设置的密码，将这个数据库连接字符串复制并保存，后面需要用到。</p><p>点击页面下方的<code>Close</code>关闭退出即可。</p><h2 id="3-使用Vercel"><a href="#3-使用Vercel" class="headerlink" title="3 使用Vercel"></a>3 使用Vercel</h2><h3 id="3-1-创建项目"><a href="#3-1-创建项目" class="headerlink" title="3.1 创建项目"></a>3.1 创建项目</h3><p>创建账户并登录到Vercel，在Twikoo提供的文档里找到快速创建Vercel项目的链接。</p><p>快速链接：<a href="https://vercel.com/import/project?template=https://github.com/twikoojs/twikoo/tree/main/src/server/vercel-min">部署Twikoo到Vercel</a></p><p>输入GitHub项目名称后会自动在GitHub上创建项目，然后会在Vercel上自动部署，首次部署后会提示需要设置<code>MONGODB_URI</code>环境变量。</p><h3 id="3-2-配置项目"><a href="#3-2-配置项目" class="headerlink" title="3.2 配置项目"></a>3.2 配置项目</h3><p>进入刚刚创建的项目界面，切换到<code>Settings</code>标签。</p><p>在左侧导航栏点击<code>Environment Variables</code>设置，在Key中输入<code>MONGODB_URI</code>，在Value中输入前面设置MongoDB保存的数据库连接字符串，点击<code>Save</code>保存：<br><img src="/@image/001002/004007-145352.jpg" alt="007-设置环境变量"></p><p>在左侧导航栏点击<code>Environment Variables</code>设置，将<code>Vercel Authentication</code>设置为<code>Disable</code>，点击<code>Save</code>保存，这是关闭对项目的登录保护，支持任何人访问项目：<br><img src="/@image/001002/004008-150308.jpg" alt="008-关闭登录保护"></p><p>切换到<code>Deployments</code>标签，点击任意一项后面的<code>...</code>并在下拉选项中选择<code>Redeploy</code>，点击弹出界面下方的<code>Redeploy</code>重新部署，如果环境配置正确，可以看到提示：<br><img src="/@image/001002/004009-151026.jpg" alt="009-部署成功"></p><p>在<code>Domains</code>中的<code>https://xxx.vercel.app</code>地址即为环境ID。</p><h2 id="4-前端部署"><a href="#4-前端部署" class="headerlink" title="4 前端部署"></a>4 前端部署</h2><h3 id="4-1-选择评论系统"><a href="#4-1-选择评论系统" class="headerlink" title="4.1 选择评论系统"></a>4.1 选择评论系统</h3><p>在主题的配置文件中选择Twikoo作为评论系统。</p><p>特殊配置参考官方文档即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了通过使用MongoDB数据库和Vercel服务器将Twikoo评论部署到Hexo博客。&lt;/p&gt;</summary>
    
    
    
    <category term="建站技术" scheme="https://momashanhe.com/categories/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://momashanhe.com/tags/Hexo/"/>
    
    <category term="Vercel" scheme="https://momashanhe.com/tags/Vercel/"/>
    
    <category term="MongoDB" scheme="https://momashanhe.com/tags/MongoDB/"/>
    
    <category term="Twikoo" scheme="https://momashanhe.com/tags/Twikoo/"/>
    
  </entry>
  
</feed>

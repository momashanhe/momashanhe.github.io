<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨码山河</title>
  
  <subtitle>代码改变世界</subtitle>
  <link href="https://momashanhe.com/atom.xml" rel="self"/>
  
  <link href="https://momashanhe.com/"/>
  <updated>2025-03-08T11:26:53.676Z</updated>
  <id>https://momashanhe.com/</id>
  
  <author>
    <name>墨码山河</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件系统</title>
    <link href="https://momashanhe.com/posts/20250306/235429/"/>
    <id>https://momashanhe.com/posts/20250306/235429/</id>
    <published>2025-03-06T15:54:29.000Z</published>
    <updated>2025-03-08T11:26:53.676Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node的文件系统相关的API接口。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>文件系统即FS（File System），是Node中的内置模块，可以对计算机中的磁盘进行操作。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node的文件系统相关的API接口。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>缓冲器</title>
    <link href="https://momashanhe.com/posts/20250306/190456/"/>
    <id>https://momashanhe.com/posts/20250306/190456/</id>
    <published>2025-03-06T11:04:56.000Z</published>
    <updated>2025-03-08T11:26:55.928Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node的缓冲器。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>缓冲器即Buffer，是一个类似于数组的对象，用于表示固定长度的字节序列。</p><p>Buffer的本质是一段内存空间，用于处理二进制数据，所以常在文件操作、网络通信、图像处理等场景中使用。</p><h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2 特点"></a>2 特点</h2><p>Buffer大小固定且无法调整。</p><p>Buffer中每个元素的大小为1字节，1个字节能够存储8个比特的二进制数据，也就是2的8次方，即从0到255。</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h2><p>Node中创建Buffer的方式主要如下几种：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了一个长度为10字节的Buffer，相当于申请了10字节的内存空间，每个字节的值为0。</span></span><br><span class="line"><span class="keyword">let</span> buf_1 = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_1);<span class="comment">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br><span class="line"><span class="comment">// 创建了一个长度为10字节的Buffer，创建速度比上面的快。Unsafe说明可能存在旧的数据, 可能会影响执行结果。</span></span><br><span class="line"><span class="keyword">let</span> buf_2 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2);<span class="comment">// &lt;Buffer 80 a5 ab ae ... more bytes&gt;</span></span><br><span class="line"><span class="comment">// 通过字符串创建。</span></span><br><span class="line"><span class="keyword">let</span> buf_3 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3);<span class="comment">// &lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line"><span class="comment">// 通过数组创建。</span></span><br><span class="line"><span class="keyword">let</span> buf_4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_4);<span class="comment">// &lt;Buffer 01 02 03 04 05&gt;</span></span><br></pre></td></tr></table></figure><p>打印的结果是基于十六进制显示的，这是为了节省显示的空间。</p><p>使用<code>toString()</code>方法将Buffer转为字符串：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);<span class="comment">// &lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>());<span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>通过使用显式的字符编码，可以在Buffer实例与字符串之间进行相互转换，默认使用<code>utf8</code>字符编码。：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf_1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_1);<span class="comment">// &lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_1.<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>));<span class="comment">// hello</span></span><br><span class="line"><span class="keyword">let</span> buf_2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2);<span class="comment">// &lt;Buffer 85 e9 65&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>));<span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>使用数组下标读取和设置Buffer元素：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);<span class="comment">// &lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf[<span class="number">0</span>]);<span class="comment">// 104，即h字母在utf8编码中对应的十进制数字是104</span></span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">360</span>;<span class="comment">// 对应二进制为000101101000，一个元素存储一个字节，即八个比特，左边的高位被舍弃</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf[<span class="number">0</span>]);<span class="comment">// 104，左边的高位在舍弃后，等同于104</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node的缓冲器。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>管理工具</title>
    <link href="https://momashanhe.com/posts/20250306/121736/"/>
    <id>https://momashanhe.com/posts/20250306/121736/</id>
    <published>2025-03-06T04:17:36.000Z</published>
    <updated>2025-03-09T06:05:13.340Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node的管理工具，包括包管理和版本管理，以及源码管理。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><h3 id="1-1-NPM（Node-Package-Manager）"><a href="#1-1-NPM（Node-Package-Manager）" class="headerlink" title="1.1 NPM（Node Package Manager）"></a>1.1 NPM（Node Package Manager）</h3><p>NPM是Node的默认包管理工具，用于安装、更新、卸载和管理JS包。它还支持依赖管理、脚本运行等功能，并且是Node安装时自带的一部分。</p><p>包是对模块的封装，包的根目录必须包含<code>package.json</code>文件，包的范围要比模块大一些，在使用第三方的包时，可以将包看做模块。</p><h3 id="1-2-NRM（NPM-Registry-Manager）"><a href="#1-2-NRM（NPM-Registry-Manager）" class="headerlink" title="1.2 NRM（NPM Registry Manager）"></a>1.2 NRM（NPM Registry Manager）</h3><p>NRM是NPM的镜像源管理工具，用于快速切换NPM的镜像源。由于NPM默认的镜像源在国外，访问速度可能较慢，NRM可以帮助开发者切换到国内镜像源，从而提高包的下载速度。</p><h3 id="1-3-NVM（Node-Version-Manager）"><a href="#1-3-NVM（Node-Version-Manager）" class="headerlink" title="1.3 NVM（Node Version Manager）"></a>1.3 NVM（Node Version Manager）</h3><p>NVM是Node版本管理工具，用于在同一台机器上安装、管理和切换多个Node版本。它解决了不同项目对不同Node版本的需求，避免版本冲突。</p><h2 id="2-NPM"><a href="#2-NPM" class="headerlink" title="2 NPM"></a>2 NPM</h2><h3 id="2-1-查看版本和配置信息"><a href="#2-1-查看版本和配置信息" class="headerlink" title="2.1 查看版本和配置信息"></a>2.1 查看版本和配置信息</h3><p>在安装Node时会自动安装NPM工具。</p><p>使用<code>npm -v</code>命令查看NPM的版本：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">npm</span> -<span class="title">v</span></span></span><br><span class="line"><span class="function">9.3.1</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>npm config list</code>命令查看Node和NPM的版本信息及其他信息。</p><h3 id="2-2-包管理"><a href="#2-2-包管理" class="headerlink" title="2.2 包管理"></a>2.2 包管理</h3><h4 id="2-2-1-初始化包"><a href="#2-2-1-初始化包" class="headerlink" title="2.2.1 初始化包"></a>2.2.1 初始化包</h4><p>创建包对应的目录，使用<code>npm init</code>命令初始化包：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>\<span class="title">codes</span>\<span class="title">work</span>&gt;<span class="title">npm</span> <span class="title">init</span></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"><span class="title">Press</span> ^<span class="title">C</span> <span class="title">at</span> <span class="title">any</span> <span class="title">time</span> <span class="title">to</span> <span class="title">quit</span>.</span></span><br><span class="line"><span class="function"><span class="title">package</span> <span class="title">name</span>: (<span class="title">work</span>)</span></span><br><span class="line"><span class="function"><span class="title">version</span>: (1.0.0)</span></span><br><span class="line"><span class="function"><span class="title">description</span>:</span></span><br><span class="line"><span class="function"><span class="title">entry</span> <span class="title">point</span>: (<span class="title">index.js</span>)</span></span><br><span class="line"><span class="function"><span class="title">test</span> <span class="title">command</span>:</span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">repository</span>:</span></span><br><span class="line"><span class="function"><span class="title">keywords</span>:</span></span><br><span class="line"><span class="function"><span class="title">author</span>:</span></span><br><span class="line"><span class="function"><span class="title">license</span>: (<span class="title">ISC</span>)</span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>支持交互式的创建<code>package.json</code>文件，该文件是包的配置文件，每个包都必须存在：</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;work&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>文件内容说明如下：</p><ul><li>name是包名，默认是目录名。</li><li>version是包版本，默认从<code>1.0.0</code>开始。</li><li>description是包的描述，说明包有什么功能。</li><li>main是包的入口文件，默认是目录下的<code>index.js</code>文件。</li><li>scripts是脚本配置，用于执行脚本。</li><li>author是包的作者。</li><li>license是包的开源证书。</li></ul><p>注意事项：</p><ul><li>包名不能使用中文和大写。</li><li>版本要求<code>x.x.x</code>的格式，并且全为数字。</li><li>可以手动创建<code>package.json</code>文件，只要有这个文件就可以将该目录作为包。</li><li>可以使用<code>npm init -y</code>或<code>npm init --yes</code>跳过交互快速创建<code>package.json</code>文件，使用这种方式要求目录不能使用中文和大写。</li></ul><h4 id="2-2-2-搜索包"><a href="#2-2-2-搜索包" class="headerlink" title="2.2.2 搜索包"></a>2.2.2 搜索包</h4><p>搜索包的方式有两种：</p><ul><li>在命令行使用<code>npm s 关键字</code>搜索包含指定关键字的包，其中的<code>s</code>是<code>search</code>的简写。</li><li>在NPM网站搜索：<a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li></ul><p>也可以使用<code>npm view 包名 versions</code>命令搜索包版本。</p><h4 id="2-2-3-下载并安装包"><a href="#2-2-3-下载并安装包" class="headerlink" title="2.2.3 下载并安装包"></a>2.2.3 下载并安装包</h4><p>下载和安装包需要在包目录中执行，需要有<code>package.json</code>文件。</p><p>使用<code>npm i 包名</code>命令下载并安装包，其中的<code>i</code>是<code>install</code>的简写，也可以使用<code>npm add 包名</code>命令。</p><p>支持多个包同时下载和安装，只需要将多个包名用空格分开即可。</p><p>在下载并安装后，会在当前包目录下增加两个资源：</p><ul><li>node_modules用于存放下载的包。</li><li>package-lock.json用于锁定包依赖的精确版本，确保在不同环境中安装依赖时结果完全一致。</li></ul><p>依赖指的是当前包安装的其他包，可以认为当前包依赖了其他包，将其他包看做是当前包的依赖包。</p><p>在安装指定包时，安装命令会在<code>node_modules</code>目录先安装指定包的依赖包，然后再安装指定包。</p><p>如果需要指定包的版本，可以使用<code>npm i 包名@版本</code>命令下载并安装指定版本的包。</p><p>默认使用国外的镜像源，使用<code>npm get registry</code>命令查看当前使用的镜像源。</p><p>使用<code>npm config set registry https://registry.npmmirror.com/</code>命令设置为淘宝镜像源可以加速下载。</p><p>使用<code>npm config set registry https://registry.npmjs.org/</code>命令设置为默认的官方镜像源。</p><h4 id="2-2-4-使用包"><a href="#2-2-4-使用包" class="headerlink" title="2.2.4 使用包"></a>2.2.4 使用包</h4><p>使用包的方式同导入模块一样，只不过是将模块路径改为包名：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;包名&#x27;</span>);</span><br></pre></td></tr></table></figure><p>导入后就能使用包暴露的资源了。</p><p>在导入模块时，遵循以下流程：<br><img src="/@image/104001/005001-102018.jpg" alt="001-流程"></p><h4 id="2-2-5-根据环境安装"><a href="#2-2-5-根据环境安装" class="headerlink" title="2.2.5 根据环境安装"></a>2.2.5 根据环境安装</h4><p>在安装包时可以将包安装到不同的环境：</p><ul><li>生产环境：默认安装的环境就是生产环境，支持在生产环境和开发环境使用，可以使用<code>npm i 包名 -S</code>命令指定，其中的<code>-S</code>是<code>--save</code>的简写。</li><li>开发环境：开发环境的包仅支持在开发环境使用，在生产环境会被忽略，需要使用<code>npm i 包名 -D</code>命令指定，其中的<code>-D</code>是<code>--save-dev</code>的简写。</li></ul><p>在<code>package.json</code>文件中存储的位置也不一样：</p><ul><li>生产环境：包信息存储在<code>dependencies</code>属性中。</li><li>开发环境：包信息存储在<code>devDependencies</code>属性中。</li></ul><h4 id="2-2-6-根据作用范围安装"><a href="#2-2-6-根据作用范围安装" class="headerlink" title="2.2.6 根据作用范围安装"></a>2.2.6 根据作用范围安装</h4><p>在安装包时可以选择安装位置：</p><ul><li>本地安装：将包安装到当前包的<code>node_modules</code>目录，默认安装到本地。</li><li>全局安装：将包安装到全局的<code>node_modules</code>目录，使用<code>npm i 包名 -g</code>命令安装到全局，其中的<code>-g</code>是<code>--global</code>的简写。</li></ul><p>查看安装列表：</p><ul><li>本地安装：使用<code>npm list</code>命令可以查看安装在本地的包有哪些。</li><li>全局安装：使用<code>npm list -g</code>命令可以查看安装在全局的包有哪些。</li></ul><p>查看安装目录：</p><ul><li>本地目录：使用<code>npm root</code>命令可以查看本地的<code>node_modules</code>目录。</li><li>全局目录：使用<code>npm root -g</code>命令可以查看全局的<code>node_modules</code>目录。</li></ul><p>全局安装的包可以在任何目录执行，本地安装的包只能在本地目录中执行。</p><p>全局安装的包版本由NPM管理，不会在项目的<code>package.json</code>文件中体现。这意味着全局安装的包可能在不同项目之间共享，但也可能因为版本冲突而导致问题。</p><h4 id="2-2-7-删除包"><a href="#2-2-7-删除包" class="headerlink" title="2.2.7 删除包"></a>2.2.7 删除包</h4><p>删除包需要在包目录中执行，需要有<code>package.json</code>文件。</p><p>使用<code>npm uni 包名</code>命令删除依赖包，其中的<code>uni</code>是<code>uninstall</code>的简写，也可以使用<code>npm remove 包名</code>命令。</p><p>使用<code>npm uni 包名 -g</code>命令删除全局依赖包。</p><h4 id="2-2-8-重新安装包"><a href="#2-2-8-重新安装包" class="headerlink" title="2.2.8 重新安装包"></a>2.2.8 重新安装包</h4><p>在上传提交项目代码到Git仓库时，不会提交<code>node_modules</code>目录，因为该目录占用的磁盘空间比较大，并且该目录可以重新生成。</p><p>当下载项目后，就需要执行<code>npm i</code>命令重新安装依赖包，重新生成<code>node_modules</code>目录。</p><h3 id="2-3-命令别名"><a href="#2-3-命令别名" class="headerlink" title="2.3 命令别名"></a>2.3 命令别名</h3><p>通过配置命令别名可以更简单的执行命令，只需要配置<code>package.json</code>文件中的<code>scripts</code>属性：</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>即可通过<code>npm run 别名</code>命令执行，其作用和别名对应的命令一样。</p><p>注意：</p><ul><li>最后一个别名后面不需要有逗号，非最后一个别名后面必须要有逗号。</li><li>别名对应的命令有自动向上查找的功能，只要上级目录是包目录并且有对应的资源就能执行。</li><li>当别名是<code>start</code>时，可以直接通过<code>npm start</code>命令执行，这是其他命令别名没有的执行方式，所以常用<code>start</code>别名启动项目。</li><li>对于新项目，可以通过<code>scripts</code>属性查看项目的一些命令。</li></ul><h3 id="2-4-版本管理"><a href="#2-4-版本管理" class="headerlink" title="2.4 版本管理"></a>2.4 版本管理</h3><p>在使用NPM管理包的版本时，使用的是<code>x.x.x</code>格式：</p><ul><li>第一个数字是主版本，当进行了不兼容的API修改时，需要更新主版本。</li><li>第二个数字是次版本，当添加了向下兼容的新功能时，应该更新次版本。</li><li>第三个数字是补丁版本，当进行了向下兼容的问题修正时，应该更新补丁版本。</li></ul><p>除了常规的版本外，NPM还支持使用特定的符号来指定版本范围或选择策略：</p><ul><li>使用<code>^1.2.3</code>表示只允许安装主版本相同的其他版本，仅允许安装<code>1.x.x</code>的任何版本。</li><li>使用<code>~1.2.3</code>表示只允许安装次版本相同的其他版本，仅允许安装<code>1.2.x</code>的任何版本。</li><li>使用<code>*</code>表示允许安装任意版本的版本，这是不推荐的，因为可能导致安装到不兼容的版本。</li><li>使用<code>&gt;1.2.3</code>表示只允许安装指定版本之后的其他版本。</li><li>使用<code>&lt;1.2.3</code>表示只允许安装指定版本之前的其他版本。</li></ul><p>精确控制版本：</p><ul><li>在NPM的5版本之前，如果需要记录包的精确版本，需要使用<code>npm shrinkwrap</code>命令生成<code>npm-shrinkwrap.json</code>文件用于记录包的精确版本。</li><li>在NPM的5版本中，加入了新特性，在初始化包时会创建<code>package-lock.json</code>文件，每次安装包时都会记录包的精确版本。</li></ul><h3 id="2-5-发布服务包"><a href="#2-5-发布服务包" class="headerlink" title="2.5 发布服务包"></a>2.5 发布服务包</h3><p>可以将自己开发的工具包发布到NPM服务上，方便自己和其他开发者使用：</p><ol><li>创建包目录并完成初始化，起一个有意义的包名，否则会被NPM识别为垃圾包，不允许发布。</li><li>在包中创建<code>index.js</code>文件，编写代码，使用<code>module.exports</code>暴露数据。</li><li>访问<a href="https://www.npmjs.com/">NPM官网</a>注册账号，并使用邮箱激活账号。</li><li>确保正在使用的镜像源是官方的镜像源，否则无法发布到NPM服务器。</li><li>使用<code>npm login</code>命令登录到NPM服务器，填写用户名和密码，以及邮箱收到的验证码。</li><li>使用<code>npm publish</code>命令将包发布到NPM服务器。</li></ol><h3 id="2-6-更新服务包"><a href="#2-6-更新服务包" class="headerlink" title="2.6 更新服务包"></a>2.6 更新服务包</h3><p>后续可以对自己发布的包进行更新，操作步骤如下：</p><ol><li>更新包中的代码。</li><li>测试代码功能是否正常可用。</li><li>更新<code>package.json</code>文件中的版本，参考版本更新规则。</li><li>使用<code>npm publish</code>命令将包发布到NPM服务器。</li></ol><h3 id="2-7-删除服务包"><a href="#2-7-删除服务包" class="headerlink" title="2.7 删除服务包"></a>2.7 删除服务包</h3><p>NPM官方建议如果是为了鼓励用户升级，或者不想维护了，可以考虑使用<code>deprecate</code>命令。</p><p>如果在发布后72小时内，需要满足条件：</p><ul><li>没有其他包依赖。</li><li>只有一个维护者。</li></ul><p>如果在发布后超过了72小时，需要满足条件：</p><ul><li>没有其他包依赖。</li><li>只有一个维护者。</li><li>每周小于300下载量。</li></ul><p>某些条件可能随时间发生变化，建议参考官方文档：<a href="https://docs.npmjs.com/policies/unpublish">https://docs.npmjs.com/policies/unpublish</a></p><p>删除服务包有两种方式，一种是在NPM官网上删除包，一种是通过命令行的方式。</p><p>通过命令行删除：</p><ul><li>删除指定版本：使用<code>npm unpublish 包名@版本</code>删除指定版本的包。</li><li>删除全部版本：使用<code>npm unpublish 包名 -f</code>命令删除全部版本的包，其中的<code>-f</code>是<code>--force</code>的简写。</li></ul><p>如果使用了2FA验证，还需要在命令后面增加<code>--otp=2FA验证码</code>参数，只要2FA验证码正确后才能删除。</p><p>注意：</p><ul><li>删除是不可逆的，一旦删除将无法撤销。</li><li>即使删除了包的某个版本，在以后发布版本的时候，也不能发布该版本，必须发布新版本。</li><li>如果删除包的所有版本，则要等到24小时后才能重新发布该包。</li></ul><h2 id="3-NRM"><a href="#3-NRM" class="headerlink" title="3 NRM"></a>3 NRM</h2><h3 id="3-1-下载安装"><a href="#3-1-下载安装" class="headerlink" title="3.1 下载安装"></a>3.1 下载安装</h3><p>除了在NPM使用命令修改配置切换镜像源，还可以使用NRM切换，更推荐使用这种方式。</p><p>NRM依赖NPM，可以管理NPM使用的镜像源。</p><p>使用<code>npm i nrm -g</code>命令将NRM安装到全局目录。</p><h3 id="3-2-常用命令"><a href="#3-2-常用命令" class="headerlink" title="3.2 常用命令"></a>3.2 常用命令</h3><h4 id="3-2-1-查看镜像源"><a href="#3-2-1-查看镜像源" class="headerlink" title="3.2.1 查看镜像源"></a>3.2.1 查看镜像源</h4><p>安装后可以使用<code>nrm ls</code>命令查看镜像源：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">nrm</span> <span class="title">ls</span></span></span><br><span class="line"><span class="function">  <span class="title">npm</span> ---------- <span class="title">https</span>://<span class="title">registry.npmjs.org</span>/</span></span><br><span class="line"><span class="function">  <span class="title">yarn</span> --------- <span class="title">https</span>://<span class="title">registry.yarnpkg.com</span>/</span></span><br><span class="line"><span class="function">  <span class="title">tencent</span> ------ <span class="title">https</span>://<span class="title">mirrors.tencent.com</span>/<span class="title">npm</span>/</span></span><br><span class="line"><span class="function">  <span class="title">cnpm</span> --------- <span class="title">https</span>://<span class="title">r.cnpmjs.org</span>/</span></span><br><span class="line"><span class="function">  <span class="title">taobao</span> ------- <span class="title">https</span>://<span class="title">registry.npmmirror.com</span>/</span></span><br><span class="line"><span class="function">  <span class="title">npmMirror</span> ---- <span class="title">https</span>://<span class="title">skimdb.npmjs.com</span>/<span class="title">registry</span>/</span></span><br><span class="line"><span class="function">  <span class="title">huawei</span> ------- <span class="title">https</span>://<span class="title">repo.huaweicloud.com</span>/<span class="title">repository</span>/<span class="title">npm</span>/</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-切换镜像源"><a href="#3-2-2-切换镜像源" class="headerlink" title="3.2.2 切换镜像源"></a>3.2.2 切换镜像源</h4><p>使用<code>nrm use taobao</code>命令切换到淘宝的镜像源，淘宝是国内的镜像源，可以提高下载包的速度：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">nrm</span> <span class="title">use</span> <span class="title">taobao</span></span></span><br><span class="line"><span class="function"> <span class="title">SUCCESS</span>  <span class="title">The</span> <span class="title">registry</span> <span class="title">has</span> <span class="title">been</span> <span class="title">changed</span> <span class="title">to</span> &#x27;<span class="title">taobao</span>&#x27;.</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次查看镜像源列表，正在使用的镜像源会在前面添加<code>*</code>符号进行提示：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">nrm</span> <span class="title">ls</span></span></span><br><span class="line"><span class="function">  <span class="title">npm</span> ---------- <span class="title">https</span>://<span class="title">registry.npmjs.org</span>/</span></span><br><span class="line"><span class="function">  <span class="title">yarn</span> --------- <span class="title">https</span>://<span class="title">registry.yarnpkg.com</span>/</span></span><br><span class="line"><span class="function">  <span class="title">tencent</span> ------ <span class="title">https</span>://<span class="title">mirrors.tencent.com</span>/<span class="title">npm</span>/</span></span><br><span class="line"><span class="function">  <span class="title">cnpm</span> --------- <span class="title">https</span>://<span class="title">r.cnpmjs.org</span>/</span></span><br><span class="line"><span class="function">* <span class="title">taobao</span> ------- <span class="title">https</span>://<span class="title">registry.npmmirror.com</span>/</span></span><br><span class="line"><span class="function">  <span class="title">npmMirror</span> ---- <span class="title">https</span>://<span class="title">skimdb.npmjs.com</span>/<span class="title">registry</span>/</span></span><br><span class="line"><span class="function">  <span class="title">huawei</span> ------- <span class="title">https</span>://<span class="title">repo.huaweicloud.com</span>/<span class="title">repository</span>/<span class="title">npm</span>/</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，淘宝的镜像源是只读的，只能下载和安装包，不能上传包。如果想要上传包，还需要切换回原来的镜像源进行上传。</p><h2 id="4-NVM"><a href="#4-NVM" class="headerlink" title="4 NVM"></a>4 NVM</h2><h3 id="4-1-下载安装"><a href="#4-1-下载安装" class="headerlink" title="4.1 下载安装"></a>4.1 下载安装</h3><p>NVM主要用于管理Node和NPM版本的工具，用来切换不同版本的Node和NPM以便适配不同的软件开发工具。</p><p>NVM仅支持Linux系统和Mac系统，如果想在Windows系统使用，需要使用和NVM类似的<code>nvm-windows</code>软件。</p><p>GitHub下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a></p><p>下载<code>nvm-setup.exe</code>并安装即可。</p><p>重新打开命令行，输入命令查询版本：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">nvm</span> -<span class="title">v</span></span></span><br><span class="line"><span class="function">1.1.12</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在安装NVM后，会将Node的原安装目录迁移到NVM的安装目录，并在Node的原安装目录的父级目录创建一个指向新安装目录的链接。</p><p>使用<code>nvm root</code>命令可以查看NVM下载安装Node的目录，在该目录下有Node的原安装目录。</p><h3 id="4-2-常用命令"><a href="#4-2-常用命令" class="headerlink" title="4.2 常用命令"></a>4.2 常用命令</h3><h4 id="4-2-1-查看已安装"><a href="#4-2-1-查看已安装" class="headerlink" title="4.2.1 查看已安装"></a>4.2.1 查看已安装</h4><p>使用<code>nvm list</code>命令查看已安装的Node列表：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">nvm</span> <span class="title">list</span></span></span><br><span class="line"><span class="function">  * 18.14.0 (<span class="title">Currently</span> <span class="title">using</span> 64-<span class="title">bit</span> <span class="title">executable</span>)</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-查看可安装"><a href="#4-2-2-查看可安装" class="headerlink" title="4.2.2 查看可安装"></a>4.2.2 查看可安装</h4><p>使用<code>nvm list available</code>命令查看可以安装的Node列表：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">nvm</span> <span class="title">list</span> <span class="title">available</span></span></span><br><span class="line"><span class="function">|   <span class="title">CURRENT</span>    |     <span class="title">LTS</span>      |  <span class="title">OLD</span> <span class="title">STABLE</span>  | <span class="title">OLD</span> <span class="title">UNSTABLE</span> |</span></span><br><span class="line"><span class="function">|--------------|--------------|--------------|--------------|</span></span><br><span class="line"><span class="function">|    23.6.0    |   22.11.0    |   0.12.14    |   0.11.12    |</span></span><br><span class="line"><span class="function">|    23.5.0    |   20.18.3    |   0.12.13    |   0.11.11    |</span></span><br><span class="line"><span class="function">|    23.4.0    |   20.18.2    |   0.12.12    |   0.11.10    |</span></span><br><span class="line"><span class="function">|    23.3.0    |   20.18.1    |   0.12.11    |    0.11.9    |</span></span><br><span class="line"><span class="function">|    23.2.0    |   20.18.0    |   0.12.10    |    0.11.8    |</span></span><br><span class="line"><span class="function">|    23.1.0    |   20.17.0    |    0.12.9    |    0.11.7    |</span></span><br><span class="line"><span class="function">|    23.0.0    |   20.16.0    |    0.12.8    |    0.11.6    |</span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-安装Node"><a href="#4-2-3-安装Node" class="headerlink" title="4.2.3 安装Node"></a>4.2.3 安装Node</h4><p>使用<code>nvm install 版本</code>命令安装指定版本的Node：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">nvm</span> <span class="title">install</span> 23.1.0</span></span><br><span class="line"><span class="function"><span class="title">Downloading</span> <span class="title">node.js</span> <span class="title">version</span> 23.1.0 (64-<span class="title">bit</span>)...</span></span><br><span class="line"><span class="function"><span class="title">Extracting</span> <span class="title">node</span> <span class="title">and</span> <span class="title">npm</span>...</span></span><br><span class="line"><span class="function"><span class="title">Complete</span></span></span><br><span class="line"><span class="function"><span class="title">npm</span> <span class="title">v10</span>.9.0 <span class="title">installed</span> <span class="title">successfully</span>.</span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-4-切换Node"><a href="#4-2-4-切换Node" class="headerlink" title="4.2.4 切换Node"></a>4.2.4 切换Node</h4><p>使用<code>nvm use 版本</code>命令切换指定版本的Node：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">nvm</span> <span class="title">use</span> 23.1.0</span></span><br><span class="line"><span class="function"><span class="title">Now</span> <span class="title">using</span> <span class="title">node</span> <span class="title">v23</span>.1.0 (64-<span class="title">bit</span>)</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-5-卸载Node"><a href="#4-2-5-卸载Node" class="headerlink" title="4.2.5 卸载Node"></a>4.2.5 卸载Node</h4><p>使用<code>nvm uninstall 版本</code>命令卸载指定版本的Node：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">nvm</span> <span class="title">uninstall</span> 23.1.0</span></span><br><span class="line"><span class="function"><span class="title">Uninstalling</span> <span class="title">node</span> <span class="title">v23</span>.1.0... <span class="title">done</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-Yarn"><a href="#5-Yarn" class="headerlink" title="5 Yarn"></a>5 Yarn</h2><h3 id="5-1-下载安装"><a href="#5-1-下载安装" class="headerlink" title="5.1 下载安装"></a>5.1 下载安装</h3><p>Yarn是由Facebook、Google、Exponent和Tilde联合推出了一个新的JS包管理工具，目的是为了弥补NPM的一些缺陷。</p><p>官网地址：<a href="https://yarnpkg.com/">https://yarnpkg.com/</a></p><p>Yarn的优点：</p><ul><li>并行安装：使用NPM安装软件包时采用顺序执行。使用Yarn安装软件包时采用并行执行，提高了性能。</li><li>离线模式：使用NPM再次安装已经安装过的软件包时需要从网络下载。使用Yarn再次安装已经安装过的软件包时直接从缓存中获取，节省了时间。</li><li>输出简洁：使用NPM打印的输出信息比较冗长，不容易识别报错的信息。使用Yarn打印的输出信息比较简洁，只打印出必要的信息，更加易读。</li></ul><p>使用NPM命令安装Yarn到全局：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">npm</span> <span class="title">i</span> <span class="title">yarn</span> -<span class="title">g</span></span></span><br><span class="line"><span class="function"><span class="title">added</span> 1 <span class="title">package</span> <span class="title">in</span> 949<span class="title">ms</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-常用命令"><a href="#5-2-常用命令" class="headerlink" title="5.2 常用命令"></a>5.2 常用命令</h3><h4 id="5-2-1-查看版本和配置信息"><a href="#5-2-1-查看版本和配置信息" class="headerlink" title="5.2.1 查看版本和配置信息"></a>5.2.1 查看版本和配置信息</h4><p>使用<code>yarn -v</code>命令查看NPM的版本：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">yarn</span> -<span class="title">v</span></span></span><br><span class="line"><span class="function">1.22.22</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>yarn config list</code>命令查看配置信息。</p><h4 id="5-2-2-初始化包"><a href="#5-2-2-初始化包" class="headerlink" title="5.2.2 初始化包"></a>5.2.2 初始化包</h4><p>使用<code>yarn init</code>命令或<code>yarn init -y</code>命令初始化包。</p><h4 id="5-2-3-下载并安装包"><a href="#5-2-3-下载并安装包" class="headerlink" title="5.2.3 下载并安装包"></a>5.2.3 下载并安装包</h4><p>使用<code>yarn add 包名</code>命令下载并安装包，默认安装到生产环境。</p><p>使用<code>yarn add 包名 -S</code>命令下载并安装包，安装到生产环境，支持开发环境和生产环境使用。</p><p>使用<code>yarn add 包名 -D</code>命令下载并安装包，安装到开发环境，仅支持开发环境使用。</p><p>使用<code>yarn global add 包名</code>命令安装到全局。</p><p>使用<code>yarn list</code>命令可以查看安装在本地的包有哪些。</p><p>使用<code>yarn global list</code>命令可以查看安装在全局的包有哪些。</p><p>使用<code>yarn bin</code>命令可以查看本地的bin目录。</p><p>使用<code>yarn global bin</code>命令可以查看全局的bin目录。</p><p>需要将全局的bin目录配置到环境变量，这样才能使用全局安装的包附带的命令。</p><p>默认使用国外的镜像源，使用<code>yarn config get registry</code>命令查看当前使用的镜像源。</p><p>使用<code>yarn config set registry https://registry.npmmirror.com/</code>命令设置为淘宝镜像源可以加速下载。</p><p>使用<code>yarn config set registry https://registry.yarnpkg.com</code>命令设置为默认的官方镜像源。</p><h4 id="5-2-4-删除包"><a href="#5-2-4-删除包" class="headerlink" title="5.2.4 删除包"></a>5.2.4 删除包</h4><p>使用<code>yarn remove 包名</code>命令删除依赖包。</p><p>使用<code>yarn global remove 包名</code>命令删除全局依赖包。</p><h4 id="5-2-5-重新安装包"><a href="#5-2-5-重新安装包" class="headerlink" title="5.2.5 重新安装包"></a>5.2.5 重新安装包</h4><p>使用<code>yarn</code>命令重新安装依赖包，重新生成<code>node_modules</code>目录。</p><h4 id="5-2-6-命令别名"><a href="#5-2-6-命令别名" class="headerlink" title="5.2.6 命令别名"></a>5.2.6 命令别名</h4><p>在<code>package.json</code>文件中配置好命令别名后，使用<code>yarn 别名</code>命令执行，不需要使用<code>run</code>参数。</p><h4 id="5-2-7-发布服务包"><a href="#5-2-7-发布服务包" class="headerlink" title="5.2.7 发布服务包"></a>5.2.7 发布服务包</h4><p>使用<code>yarn login</code>命令登录到NPM服务器，填写用户名和密码，以及邮箱收到的验证码。</p><p>使用<code>yarn publish</code>命令将包发布到NPM服务器。</p><h4 id="5-2-8-更新服务包"><a href="#5-2-8-更新服务包" class="headerlink" title="5.2.8 更新服务包"></a>5.2.8 更新服务包</h4><p>使用<code>yarn publish</code>命令将包发布到NPM服务器。</p><h4 id="5-2-9-删除服务包"><a href="#5-2-9-删除服务包" class="headerlink" title="5.2.9 删除服务包"></a>5.2.9 删除服务包</h4><p>Yarn不支持删除服务包，建议使用NPM删除服务包。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node的管理工具，包括包管理和版本管理，以及源码管理。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>模块化</title>
    <link href="https://momashanhe.com/posts/20250306/100822/"/>
    <id>https://momashanhe.com/posts/20250306/100822/</id>
    <published>2025-03-06T02:08:22.000Z</published>
    <updated>2025-03-08T11:26:57.713Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node的模块化。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>模块是一个封装了特定功能的独立文件以便在其他文件中引入和使用，模块化是将一个复杂的程序文件依据一定规则或规范拆分成多个文件的过程。如果在开发时是按照模块开发的，那么整个项目就是模块化项目。</p><p>模块的内部数据是私有的，可以暴露内部数据让其他模块引用。</p><p>每个文件都可以作为一个模块，默认处于独立的作用域内。每个模块都包含一组相关的函数、对象或变量，通过这种方式，可以使用结构化的方法来管理大型应用程序，让代码更加清晰和易于维护。</p><p>Node支持以下几种模块：</p><ul><li>内置模块：Node自带的模块，如fs、http、path等。</li><li>用户自定义模块：由开发者创建的模块。</li><li>第三方模块：通过命令安装的模块，如express、lodash等。</li></ul><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><p>在使用模块时遵循CommonJS模块规范，简称CJS模块，也支持ES模块规范，简称EJS模块。</p><h3 id="2-1-CommonJS模块"><a href="#2-1-CommonJS模块" class="headerlink" title="2.1 CommonJS模块"></a>2.1 CommonJS模块</h3><h4 id="2-1-1-导入模块"><a href="#2-1-1-导入模块" class="headerlink" title="2.1.1 导入模块"></a>2.1.1 导入模块</h4><p>导入模块的方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;路径&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>导入自己创建的模块时，导入时路径建议写相对路径，不能省略<code>./</code>和<code>../</code>。</li><li>导入内置模块或第三方模块时，导入时直接写模块的名字即可，可以省略<code>./</code>和<code>../</code>。</li></ul><p>导入的文件类型说明：</p><ul><li>导入JS和JSON文件时可以不用写后缀，导入C和C++编写的Node扩展文件也可以不写后缀，但是一般用不到。</li><li>导入其他类型的文件会以JS文件进行处理。</li><li>导入文件夹会先检测该文件夹下的<code>package.json</code>文件中<code>main</code>属性对应的文件，如果对应的文件存在则导入，如果对应的文件不存在会报错。如果<code>package.json</code>文件不存在，或者<code>main</code>属性不存在，则会尝试导入文件夹下的<code>index.js</code>文件和<code>index.json</code>文件，如果还是没找到，就会报错。</li></ul><p>如果要使用第三方模块，需要先试用<code>npm install 模块名</code>命令进行安装，然后才能在代码里导入。</p><h4 id="2-1-2-暴露模块"><a href="#2-1-2-暴露模块" class="headerlink" title="2.1.2 暴露模块"></a>2.1.2 暴露模块</h4><p>如果需要让外部模块使用模块内的数据，就需要将模块内的数据暴露出去。</p><p>模块暴露数据的方式有两种：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = 数据;</span><br><span class="line"><span class="built_in">exports</span>.属性名 = 属性值;</span><br></pre></td></tr></table></figure><p>两种方式的区别：</p><ul><li><code>module.exports</code>是导出对象的真正引用，<code>exports</code>是导出对象的快捷方式。</li><li>不能直接赋值<code>exports = 数据</code>，这样会导致断开<code>exports</code>对<code>module.exports</code>的引用。</li></ul><p>如果暴露的属性名重复的话，后面的会覆盖前面的。</p><h4 id="2-1-3-示例"><a href="#2-1-3-示例" class="headerlink" title="2.1.3 示例"></a>2.1.3 示例</h4><p>暴露模块：</p><figure class="highlight js"><figcaption><span>tool.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sex</span> = sex;</span><br></pre></td></tr></table></figure><p>导入模块：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tools = <span class="built_in">require</span>(<span class="string">&#x27;./tools.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tools.<span class="property">sex</span>);<span class="comment">// 男</span></span><br></pre></td></tr></table></figure><h3 id="2-2-ES模块"><a href="#2-2-ES模块" class="headerlink" title="2.2 ES模块"></a>2.2 ES模块</h3><p>如果要在Node中使用ES模块，包括使用<code>import</code>加载和<code>export</code>输出，就需要将文件扩展名设置为<code>mjs</code>表示这是一个ES模块，启用严格模式。</p><p>如果不想修改文件的扩展名，也可以在项目的<code>package.json</code>文件中将<code>type</code>字段指定为<code>module</code>表示将JS都作为ES模块。一旦设置了以后，该目录里面的JS脚本都会被解释用ES模块。如果此时还想在项目中使用CommonJS模块，就需要将文件扩展名改为<code>cjs</code>表示这是一个CommonJS模块。</p><p>注意，ES模块与CommonJS模块尽量不要混用，一个项目里面尽量统一一种规范。</p><h3 id="2-3-比较"><a href="#2-3-比较" class="headerlink" title="2.3 比较"></a>2.3 比较</h3><p>语法上面：</p><ul><li>CommonJS模块使用<code>require()</code>加载和<code>module.exports</code>输出。</li><li>ES模块使用<code>import</code>加载和<code>export</code>输出。</li></ul><p>用法上面：</p><ul><li>CommonJS模块的<code>require()</code>是同步加载，后面的代码必须等待这个命令执行完，才会执行。</li><li>ES模块的<code>import</code>则是异步加载。或者更准确地说，ES模块有一个独立的静态解析阶段，依赖关系的分析是在那个阶段完成的，最底层的模块第一个执行。</li></ul><p>加载方式：</p><ul><li>扩展名为<code>mjs</code>的文件总是以ES模块加载。</li><li>扩展名为<code>cjs</code>的文件总是以CommonJS模块加载。</li><li>扩展名为<code>js</code>的文件加载取决于<code>package.json</code>里面<code>type</code>字段的设置，默认使用CommonJS模块加载。</li></ul><h3 id="2-4-混用"><a href="#2-4-混用" class="headerlink" title="2.4 混用"></a>2.4 混用</h3><h4 id="2-4-1-CommonJS模块加载ES模块"><a href="#2-4-1-CommonJS模块加载ES模块" class="headerlink" title="2.4.1 CommonJS模块加载ES模块"></a>2.4.1 CommonJS模块加载ES模块</h4><p>不能在CommonJS模块中使用<code>require()</code>加载ES模块，否则会报错，可以使用<code>import()</code>加载ES模块。</p><p>在<code>mjs</code>文件中暴露ES模块：</p><figure class="highlight js"><figcaption><span>tool.mjs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; sex &#125;;</span><br></pre></td></tr></table></figure><p>在<code>js</code>文件CommonJS模块中使用<code>import()</code>加载<code>mjs</code>文件ES模块：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> tools = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./tools.mjs&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(tools.<span class="property">sex</span>);<span class="comment">// 男</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>不能使用<code>require()</code>加载ES模块的原因是CommonJS的模块是同步加载，而ES模块内部使用的是顶层<code>await</code>命令，导致无法被同步加载。</p><h4 id="2-4-2-ES模块加载CommonJS模块"><a href="#2-4-2-ES模块加载CommonJS模块" class="headerlink" title="2.4.2 ES模块加载CommonJS模块"></a>2.4.2 ES模块加载CommonJS模块</h4><p>ES模块的<code>import</code>可以加载CommonJS模块。</p><p>在<code>js</code>文件中暴露CommonJS模块：</p><figure class="highlight js"><figcaption><span>tool.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sex</span> = sex;</span><br></pre></td></tr></table></figure><p>在<code>mjs</code>文件ES模块中使用<code>import</code>加载<code>js</code>文件CommonJS模块：</p><figure class="highlight js"><figcaption><span>test.mjs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tools <span class="keyword">from</span> <span class="string">&quot;./tools.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tools.<span class="property">sex</span>);<span class="comment">// 男</span></span><br></pre></td></tr></table></figure><h2 id="3-缓存"><a href="#3-缓存" class="headerlink" title="3 缓存"></a>3 缓存</h2><p>Node会缓存已加载的模块，而不必每次都重新加载。</p><p>如果要重新加载模块，可以删除缓存：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.<span class="property">cache</span>[<span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;./tools.js&#x27;</span>)];</span><br><span class="line"><span class="keyword">let</span> tools = <span class="built_in">require</span>(<span class="string">&#x27;./tools.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tools.<span class="property">sex</span>);<span class="comment">// 男</span></span><br></pre></td></tr></table></figure><h2 id="4-分类"><a href="#4-分类" class="headerlink" title="4 分类"></a>4 分类</h2><p>根据模块的来源、作用范围可以分为4钟类别：</p><ul><li>内置模块：Node内置的模块，无需额外安装，通过<code>require(模块名)</code>引入。</li><li>自定义模块：开发者创建的模块，通过<code>require(路径)</code>引入。</li><li>本地模块：通过<code>npm install 包名</code>安装在本地<code>node_modules</code>目录的第三方模块，通过<code>require(模块名)</code>引入。</li><li>全局模块：通过<code>npm install -g 包名</code>安装在全局<code>node_modules</code>目录的第三方模块，通过<code>require(模块名)</code>引入。</li></ul><p>将内置模块以外的3种模块称为文件模块。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node的模块化。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>初体验</title>
    <link href="https://momashanhe.com/posts/20250305/221745/"/>
    <id>https://momashanhe.com/posts/20250305/221745/</id>
    <published>2025-03-05T14:17:45.000Z</published>
    <updated>2025-03-08T12:20:43.610Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了如何使用Node编写和运行程序。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-编写"><a href="#1-编写" class="headerlink" title="1 编写"></a>1 编写</h2><p>新建<code>hello.js</code>文件并输入内容保存：</p><figure class="highlight js"><figcaption><span>hello.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure><p>该命令的作用是在控制台打印一行字符串。</p><h2 id="2-运行"><a href="#2-运行" class="headerlink" title="2 运行"></a>2 运行</h2><p>在VSCode编辑器中打开文件，并在终端里使用<code>node</code>命令运行文件：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>\<span class="title">codes</span>&gt;<span class="title">node</span> <span class="title">hello.js</span> </span></span><br><span class="line"><span class="function"><span class="title">hello</span> <span class="title">world</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>\<span class="title">codes</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回车后，能够在终端中看到打印的字符串。</p><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3 注意事项"></a>3 注意事项</h2><p>Node中不能使用浏览器提供的BOM和DOM等API，可以使用Node提供的后端API。</p><p>在浏览器中如果要使用全局对象，需要使用window对象。在Node中如果要使用全局对象，需要使用global对象。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了如何使用Node编写和运行程序。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>安装</title>
    <link href="https://momashanhe.com/posts/20250224/102746/"/>
    <id>https://momashanhe.com/posts/20250224/102746/</id>
    <published>2025-02-24T02:27:46.000Z</published>
    <updated>2025-03-08T12:20:40.472Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了Node的下载和安装。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h2><p>下载网站：</p><ul><li><a href="https://nodejs.org/">英文官方</a></li><li><a href="https://nodejs.cn/">中文</a></li></ul><p>软件分为LTS和Current两个版本：</p><ul><li>LTS：即Long Term Support，长期稳定版本，版本号较老，但胜在稳定。</li><li>Current：当前最新版本，版本号最新，能体验新特性，但可能有BUG存在。</li></ul><p>建议下载适合自己操作系统和架构的LTS版本进行安装，下载得到的是后缀为<code>.msi</code>的文件。</p><p>如果需要下载历史版本可以访问官网提供的下载页：<a href="https://nodejs.org/download/release/">历史版本</a></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h2><p>双击下载的文件安装即可。</p><p>注意这里不需要勾选，继续下一步即可：<br><img src="/@image/104001/002001-110812.jpg" alt="001-安装"></p><p>安装结束后打开cmd命令行，输入命令查询版本：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;<span class="title">node</span> -<span class="title">v</span></span></span><br><span class="line"><span class="function"><span class="title">v18</span>.14.0</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Work</span>\<span class="title">WebSite</span>\<span class="title">momashanhe</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了Node的下载和安装。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>比较for-in和for-of两种遍历方式</title>
    <link href="https://momashanhe.com/posts/20250220/101944/"/>
    <id>https://momashanhe.com/posts/20250220/101944/</id>
    <published>2025-02-20T02:19:44.000Z</published>
    <updated>2025-02-21T00:44:37.576Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要比较了JS中for-in和for-of两种遍历方式有什么区别，以及使用场景。</p><span id="more"></span><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><h3 id="1-1-for-in"><a href="#1-1-for-in" class="headerlink" title="1.1 for-in"></a>1.1 for-in</h3><p>使用for-in可以遍历对象所有属性，基于原型链，不能保证按顺序遍历，支持遍历对象属性。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; &gt; &#x27;</span> + arr[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="string">&quot;sex&quot;</span>:<span class="string">&#x27;男&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; &gt; &#x27;</span> + person[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-for-of"><a href="#1-2-for-of" class="headerlink" title="1.2 for-of"></a>1.2 for-of</h3><p>使用for-of可以遍历所有可迭代对象，能保证按顺序遍历，不支持遍历对象属性。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2 总结"></a>2 总结</h2><p>使用for-in可以遍历对象属性，在遍历时可以获取到索引下标，根据索引下标进行遍历，不能保证按照顺序遍历。</p><p>如果需要遍历对象属性，或者需要获取索引下标，可以使用for-in的方式。</p><p>使用for-of可以遍历可迭代对象，在遍历时直接获取值，能保证按照顺序遍历。</p><p>如果需要按顺序遍历，并且不是遍历对象属性，也不需要索引下标，可以使用for-of的方式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要比较了JS中for-in和for-of两种遍历方式有什么区别，以及使用场景。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>简写优化技术</title>
    <link href="https://momashanhe.com/posts/20250220/092707/"/>
    <id>https://momashanhe.com/posts/20250220/092707/</id>
    <published>2025-02-20T01:27:07.000Z</published>
    <updated>2025-02-24T01:13:35.016Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了JS中可以简写和优化的代码。</p><span id="more"></span><h2 id="1-多个条件"><a href="#1-多个条件" class="headerlink" title="1 多个条件"></a>1 多个条件</h2><p>在多个条件的判断语句中可以使用<code>include()</code>方法简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">if</span> (x === <span class="string">&#x27;abc&#x27;</span> || x === <span class="string">&#x27;def&#x27;</span> || x === <span class="string">&#x27;ghi&#x27;</span> || x ===<span class="string">&#x27;jkl&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">//代码逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;ghi&#x27;</span>, <span class="string">&#x27;jkl&#x27;</span>].<span class="title function_">includes</span>(x)) &#123;</span><br><span class="line">  <span class="comment">//代码逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-判断语句"><a href="#2-判断语句" class="headerlink" title="2 判断语句"></a>2 判断语句</h2><p>在简单的判断语句中可以使用三元运算符简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;未知&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">  result = <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  result = <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> result = score &gt;= <span class="number">60</span> ? <span class="string">&#x27;及格&#x27;</span> : <span class="string">&#x27;不及格&#x27;</span>;</span><br></pre></td></tr></table></figure><p>支持嵌套条件的场景：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;未知&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    result = <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  result = <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> result = score &gt;= <span class="number">60</span> ? score &gt;= <span class="number">90</span> ? <span class="string">&#x27;优秀&#x27;</span> : <span class="string">&#x27;及格&#x27;</span> : <span class="string">&#x27;不及格&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-声明多个变量"><a href="#3-声明多个变量" class="headerlink" title="3 声明多个变量"></a>3 声明多个变量</h2><p>在声明多个变量时可以简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="4-非空判断"><a href="#4-非空判断" class="headerlink" title="4 非空判断"></a>4 非空判断</h2><p>在判断变量是否为空时可以简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; x !== <span class="literal">undefined</span> &amp;&amp; x !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  result = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">  result = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">  result = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">let</span> result = x || <span class="string">&#x27;error&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="5-Switch判断简写"><a href="#5-Switch判断简写" class="headerlink" title="5 Switch判断简写"></a>5 Switch判断简写</h2><p>在使用Switch判断语句时可以简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写前</span></span><br><span class="line"><span class="keyword">switch</span> (data) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="title function_">test1</span>();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="title function_">test2</span>();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="title function_">test3</span>();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写后</span></span><br><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">  <span class="number">1</span>: test1,</span><br><span class="line">  <span class="number">2</span>: test2,</span><br><span class="line">  <span class="number">3</span>: test3</span><br><span class="line">&#125;;</span><br><span class="line">test[data] &amp;&amp; test[data]();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了JS中可以简写和优化的代码。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>简介</title>
    <link href="https://momashanhe.com/posts/20250214/102820/"/>
    <id>https://momashanhe.com/posts/20250214/102820/</id>
    <published>2025-02-14T02:28:20.000Z</published>
    <updated>2025-03-08T11:26:59.883Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文介绍了Node相关的一些基础知识。</p><span id="more"></span><details ><summary> 环境 </summary>              <div class='content'>              <p>Windows 10 企业版 LTSC 21H2<br>Node 18.14.0<br>NVM 1.1.12</p>              </div>            </details><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>Node是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。</p><p>Node采用Google开发的V8引擎运行JS代码，使用事件驱动、非阻塞和异步I&#x2F;O模型等技术来提高性能，可优化应用程序的传输量和规模。</p><p>简单来说，Node是一个让JavaScript运行在服务器端的开发平台，它让JavaScript的触角伸到了服务器端。</p><h2 id="2-与JavaScript和浏览器的区别"><a href="#2-与JavaScript和浏览器的区别" class="headerlink" title="2 与JavaScript和浏览器的区别"></a>2 与JavaScript和浏览器的区别</h2><p>JavaScript是一种高级编程语言，严格来说是指ECMAScript，不包含BOM和DOM。</p><p>浏览器提供了JavaScript的运行环境，包括全局对象、BOM、DOM等工具方便JavaScript脚本的解析和执行，浏览器是客户端的一种。</p><p>浏览器都有两个引擎：一个是渲染引擎，一个是JavaScript解析执行引擎。比如Chrome浏览器的V8引擎就是专门用来解析和执行JavaScript代码的。</p><p>Node是一个开源的、跨平台的JavaScript运行环境，允许JavaScript在服务器端运行。</p><p>以前的JavaScript只能在客户端运行，Node将Chrome浏览器里的V8引擎移植到自己的环境当中，在这个环境之上构建了一系列的底层API，提供了一些特定环境的编程接口。</p><p>虽然Node不提供BOM和DOM等客户端用到的API，但提供了丰富的服务端API，这些API是对ECMAScript的扩展，使得JavaScript能够在服务器端进行高效的开发工作。</p><h2 id="3-优势"><a href="#3-优势" class="headerlink" title="3 优势"></a>3 优势</h2><p>服务端的运行环境有很多，比如Tomcat，但Node具有其他运行环境没有的优势。</p><h3 id="3-1-非阻塞I-O模型和事件驱动架构"><a href="#3-1-非阻塞I-O模型和事件驱动架构" class="headerlink" title="3.1 非阻塞I&#x2F;O模型和事件驱动架构"></a>3.1 非阻塞I&#x2F;O模型和事件驱动架构</h3><p>Node采用非阻塞I&#x2F;O模型和事件驱动架构，这是其核心优势之一。</p><p>在传统的服务器端编程中，当一个请求需要进行I&#x2F;O操作时，采用的是阻塞I&#x2F;O模型。例如，当读取文件时，服务器会阻塞当前线程，直到操作完成。</p><p>而Node通过非阻塞I&#x2F;O模型，允许服务器在等待I&#x2F;O操作完成时继续处理其他请求。例如，当请求需要读取文件时，Node不会阻塞线程，而是将读取操作交给底层系统，同时继续处理其他请求。当文件读取完成时，会触发一个事件，通知服务器继续处理该请求的后续逻辑。</p><p>这种非阻塞I&#x2F;O和事件驱动的机制使得Node能够高效地处理大量并发请求，特别适合构建高性能的网络应用。</p><h3 id="3-2-语言统一性"><a href="#3-2-语言统一性" class="headerlink" title="3.2 语言统一性"></a>3.2 语言统一性</h3><p>Node使用JavaScript作为开发语言，这意味着开发者可以在服务器端和客户端使用相同的语言进行编程。</p><p>这种语言的统一性降低了学习成本，使得前端开发者能够更容易地进入后端开发领域，也使得代码的复用性更高，开发者可以将一些公共逻辑在客户端和服务器端共享。</p><h3 id="3-3-丰富的生态系统"><a href="#3-3-丰富的生态系统" class="headerlink" title="3.3 丰富的生态系统"></a>3.3 丰富的生态系统</h3><p>Node使用NPM作为包管理器，NPM提供了庞大的JavaScript库和模块生态系统，开发者可以轻松找到所需的工具和框架。</p><h3 id="3-4-轻量级和快速开发"><a href="#3-4-轻量级和快速开发" class="headerlink" title="3.4 轻量级和快速开发"></a>3.4 轻量级和快速开发</h3><p>Node的轻量级特性和丰富的框架使得开发者能够快速开发和部署应用。</p><h2 id="4-作用"><a href="#4-作用" class="headerlink" title="4 作用"></a>4 作用</h2><p>开发服务器应用：开发运行在服务器上的程序。</p><p>开发工具类应用：Webpack，Vite，Babel。</p><p>开发桌面端应用：Electron，VSCode，Figma，Postman。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文介绍了Node相关的一些基础知识。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="Node" scheme="https://momashanhe.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>异步编程</title>
    <link href="https://momashanhe.com/posts/20250121/102547/"/>
    <id>https://momashanhe.com/posts/20250121/102547/</id>
    <published>2025-01-21T02:25:47.000Z</published>
    <updated>2025-02-14T01:48:08.588Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了常见的几种实现异步。</p><span id="more"></span><h2 id="1-回调函数"><a href="#1-回调函数" class="headerlink" title="1 回调函数"></a>1 回调函数</h2><p>在微任务队列出现之前，JS实现异步的主要方式就是通过回调函数，即通过AJAX请求的回调函数实现异步调用。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;/api/getData&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;调用成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种异步调用不能控制顺序，如果想在第一个回调函数执行后再执行第二个回调函数，就需要将第二个回调函数嵌套在第一个回调函数中，这种回调函数中嵌套回调函数的情况就叫做回调地狱。</p><h2 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2 Promise"></a>2 Promise</h2><p>Promise作为典型的微任务之一，它的出现可以使JS达到异步执行的效果。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">adder</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(++arg)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">adder</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="title function_">adder</span>(val))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>()<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="3-Generator"><a href="#3-Generator" class="headerlink" title="3 Generator"></a>3 Generator</h2><p>Generator和Promise都是在ES6新增的，Generator返回的是一个Iterator对象。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">add</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(++arg)<span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">yield</span> arg</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(++arg)<span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())<span class="comment">// &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())<span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-async和await"><a href="#4-async和await" class="headerlink" title="4 async和await"></a>4 async和await</h2><p>async和await是ES7提出的关于异步的终极解决方案，进一步简化了Promise的代码。</p><p>示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">adder</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(++arg)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// adder(1)</span></span><br><span class="line">  <span class="comment">//   .then(val =&gt; adder(val))</span></span><br><span class="line">  <span class="comment">//   .then(val =&gt; console.log(val))</span></span><br><span class="line">  <span class="keyword">let</span> val = <span class="keyword">await</span> <span class="title function_">adder</span>(<span class="number">1</span>)</span><br><span class="line">  val = <span class="keyword">await</span> <span class="title function_">adder</span>(val)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>()<span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了常见的几种实现异步。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="异步" scheme="https://momashanhe.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="https://momashanhe.com/posts/20250117/115818/"/>
    <id>https://momashanhe.com/posts/20250117/115818/</id>
    <published>2025-01-17T03:58:18.000Z</published>
    <updated>2025-02-06T02:00:57.486Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了AJAX的原理和使用。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>AJAX是异步的JS和XML，即：Asynchronous JavaScript And XML。</p><p>AJAX的目的是在不发生页面跳转的情况下，使用异步载入内容并改写页面内容的技术。</p><p>AJAX可以简单的理解为通过JS向服务器发送请求。</p><p>AJAX这门技术很早就被发明，但是直到2005年被谷歌的大量使用，才在市场中流行起来，可以说Google为AJAX的推广起到到推波助澜的作用。</p><h2 id="2-同步和异步"><a href="#2-同步和异步" class="headerlink" title="2 同步和异步"></a>2 同步和异步</h2><h3 id="2-1-同步处理"><a href="#2-1-同步处理" class="headerlink" title="2.1 同步处理"></a>2.1 同步处理</h3><p>在AJAX出现之前，访问互联网时一般都是同步请求，也就是当一个页面向服务器发送一个请求时，在服务器响应结束之前，整个页面是不能操作的，直观上来看是卡住的或者是正在加载中的。</p><p>这就带来了非常糟糕的用户体验。首先，同步请求时，用户只能等待服务器的响应，而不能做任何操作。其次，如果请求时间过长可能会给用户一个卡死的感觉。最后，同步请求的最大缺点，就是即使整个页面中只有一小部分内容发生改变也要刷新整个页面。</p><h3 id="2-2-异步处理"><a href="#2-2-异步处理" class="headerlink" title="2.2 异步处理"></a>2.2 异步处理</h3><p>异步处理指的是在浏览网页的同时，通过AJAX向服务器发送请求，发送请求的过程中浏览网页的行为并不会收到任何影响，甚至主观上感知不到在向服务器发送请求。当服务器正常响应请求后，响应信息会直接发送到AJAX中，AJAX可以根据服务器响应的内容做一些操作。</p><p>使用AJAX的异步请求基本上完美的解决了同步请求带来的问题。首先，发送请求时不会影响到用户的正常访问。其次，即使请求时间过长，用户不会有任何感知。最后，AJAX可以根据服务器的响应信息局部的修改页面，而不需要整个页面刷新。</p><h2 id="3-工作原理"><a href="#3-工作原理" class="headerlink" title="3 工作原理"></a>3 工作原理</h2><h3 id="3-1-XMLHttpRequest对象"><a href="#3-1-XMLHttpRequest对象" class="headerlink" title="3.1 XMLHttpRequest对象"></a>3.1 XMLHttpRequest对象</h3><p>如果需要向服务器发送请求，就需要使用Http协议，需要通过JS向服务器发送一个请求报文。</p><p>浏览器为开发人员提供了XMLHttpRequest对象，用于封装请求报文，浏览器向服务器发送的请求信息全部都需要封装到该对象中。</p><h3 id="3-2-获取XMLHttpRequest对象"><a href="#3-2-获取XMLHttpRequest对象" class="headerlink" title="3.2 获取XMLHttpRequest对象"></a>3.2 获取XMLHttpRequest对象</h3><p>由于浏览器之间的差异，不同浏览器中获取XMLHttpRequest的方式不同，但总的来说一共有三种方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();<span class="comment">//目前主流浏览器都支持</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Msxml2.XMLHTTP&quot;</span>);<span class="comment">//IE6支持的方式</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);<span class="comment">//IE5.5以下支持的方式</span></span><br></pre></td></tr></table></figure><p>使用兼容方式获取XMLHttpRequest对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createXMLHttpRequest</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">XMLHttpRequest</span> === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Msxml2.XMLHTTP.6.0&#x27;</span>); &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">      <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Msxml2.XMLHTTP.3.0&#x27;</span>); &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">      <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Msxml2.XMLHTTP&#x27;</span>); &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">      <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>); &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;This browser does not support XMLHttpRequest.&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-使用XMLHttpRequest对象"><a href="#3-3-使用XMLHttpRequest对象" class="headerlink" title="3.3 使用XMLHttpRequest对象"></a>3.3 使用XMLHttpRequest对象</h3><h4 id="3-3-1-发送请求"><a href="#3-3-1-发送请求" class="headerlink" title="3.3.1 发送请求"></a>3.3.1 发送请求</h4><p>如果需要将请求发送到服务器，可以使用XMLHttpRequest对象的open方法和send方法。</p><ol><li>使用open方法规定请求的类型、URL以及是否异步处理请求。</li></ol><p>格式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">open</span>(method,url,<span class="keyword">async</span>)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>method：发送请求的HTTP类型(GET，POST，PUT，DELETE)，必须大写。</li><li>uri：XMLHttpRequest对象把请求发送到的服务器相应的URI。</li><li>async：是否请求是异步的，缺省值为true（异步）。</li></ul><ol start="2"><li>使用send方法将请求发送到服务器。</li></ol><p>格式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">send</span>(string)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>string：仅用于POST请求，并且POST请求在发送数据之前还需要设置请求头。</li></ul><h4 id="3-3-2-获取响应"><a href="#3-3-2-获取响应" class="headerlink" title="3.3.2 获取响应"></a>3.3.2 获取响应</h4><p>如果要获取服务器的响应，需要使用responseText或者responseXML属性。</p><p>如果响应返回的数据是文本就使用responseText，如果响应返回的数据是XML就使用responseXML。</p><p>状态相关的属性有readyState和status：</p><ol><li>readyState描述XMLHttpRequest对象的状态，从0到4变化：</li></ol><ul><li>0表示未初始化，XMLHttpRequest对象已创建，但还未初始化。</li><li>1表示服务器连接已建立。</li><li>2表示请求已接收，响应未接收。</li><li>3表示响应正在接收。</li><li>4表示响应已接收。</li></ul><ol start="2"><li>status描述HTTP状态码，当且仅当readyStatus的值为3或4时，这个属性才可以用：</li></ol><ul><li>200表示一切正常(ok)</li><li>304表示没有被修改(not modified)</li><li>403表示禁止访问(forbidden)</li><li>404表示没找到页面(not found)</li><li>500表示内部服务器出错(internal service error)</li></ul><p>每当readyState的值发生改变，XMLHttpRequest对象就会激发一个readystatechange事件，可以在readystatechange事件中设置回调。</p><h3 id="3-4-举例"><a href="#3-4-举例" class="headerlink" title="3.4 举例"></a>3.4 举例</h3><p>使用GET方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="title function_">getXMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;AJAXServlet?name=xxx&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div_area&quot;</span>).<span class="property">innerHTML</span> = xhr.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用POST方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="title function_">getXMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;AJAXServlet&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;email=xxx@163.com&quot;</span>);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div_area&quot;</span>).<span class="property">innerHTML</span> = xhr.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-JQuery对AJAX的封装"><a href="#4-JQuery对AJAX的封装" class="headerlink" title="4 JQuery对AJAX的封装"></a>4 JQuery对AJAX的封装</h2><p>JQuery中提供了一些方法，封装了原生的AJAX。</p><h3 id="4-1-get方法"><a href="#4-1-get方法" class="headerlink" title="4.1 get方法"></a>4.1 get方法</h3><p>格式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="title function_">get</span>(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>url：发送请求的URL地址。</li><li>data：发送到服务器的数据，支持<code>k=v&amp;k=v</code>字符串和<code>&#123;k:v,k:v&#125;</code>对象两种格式。</li><li>callback：载入成功时回调函数。</li><li>type：预期服务器返回的数据类型，支持xml、html、script、json、text、_default等类型。</li></ul><p>举例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/getPassword&quot;</span>,</span><br><span class="line">    &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">html</span>(data);<span class="comment">// 123456</span></span><br><span class="line">    &#125;, <span class="string">&quot;json&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="4-2-post方法"><a href="#4-2-post方法" class="headerlink" title="4.2 post方法"></a>4.2 post方法</h3><p>格式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="title function_">post</span>(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>url：发送请求的URL地址。</li><li>data：发送到服务器的数据，支持<code>k=v&amp;k=v</code>字符串和<code>&#123;k:v,k:v&#125;</code>对象两种格式。</li><li>callback：载入成功时回调函数。</li><li>type：预期服务器返回的数据类型，支持xml、html、script、json、text、_default等类型。</li></ul><p>举例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/getPassword&quot;</span>,</span><br><span class="line">    &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">html</span>(data);<span class="comment">// 123456</span></span><br><span class="line">    &#125;, <span class="string">&quot;json&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="4-3-底层方法"><a href="#4-3-底层方法" class="headerlink" title="4.3 底层方法"></a>4.3 底层方法</h3><p>封装好的get方法和post方法可扩展性差，不能实现定制化开发，所以JQuery提供了底层的方法。</p><p>格式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="title function_">ajax</span>(url,[settings])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>url：发送请求的url地址。</li><li>type：请求方式，POST或者GET，默认GET。</li><li>async：请求是同步（true）还是异步（false），默认是true（同步）。</li><li>cache：是否缓存页面，默认是true（缓存）。</li><li>data：发送到服务器的数据，支持<code>k=v&amp;k=v</code>字符串和<code>&#123;k:v,k:v&#125;</code>对象两种格式。</li><li>dataType：预期服务器返回的数据类型，支持xml、html、script、json、text、_default等类型。</li><li>success：请求成功时的回调函数。</li><li>error：请求失败时的回调函数。</li><li>complete：请求完成后的回调函数，成功或失败之后都会调用。</li><li>statusCode：一组数值的HTTP代码和函数对象，当响应时调用了相应的代码。</li></ul><p>举例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/getPassword&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">async</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">cache</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&quot;id=1&amp;name=hello&quot;</span>,</span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">html</span>(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请求错误了&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请求完成了&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">statusCode</span>:&#123;</span><br><span class="line">        <span class="number">200</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;操作完成&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="number">500</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;服务器错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了AJAX的原理和使用。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="AJAX" scheme="https://momashanhe.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>JQuery</title>
    <link href="https://momashanhe.com/posts/20250117/115122/"/>
    <id>https://momashanhe.com/posts/20250117/115122/</id>
    <published>2025-01-17T03:51:22.000Z</published>
    <updated>2025-01-21T01:18:26.468Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要学习了JQuery库，包括选择器、文档处理、事件、效果，以及AJAX调用。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>JQuery这个名字由JavaScript和Query组合而成，但并非官方定义的全称。</p><p>JQuery是一个流行的JavaScript库，旨在简化HTML文档遍历、事件处理、动画和AJAX交互等网页开发任务。尽管名字中有”Query”，它并不用于数据库查询，而是专注于提供易于使用的API来操作DOM（文档对象模型）和实现各种前端功能。</p><p>JQuery设计的宗旨是写更少的代码，做更多的事情。</p><h2 id="2-引入"><a href="#2-引入" class="headerlink" title="2 引入"></a>2 引入</h2><p>JQuery库实际上就是一个JS文件，只需要在网页中直接引入这个文件就可以了。</p><p>从官网引入：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-1.10.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为网络原因，建议从CDN引入：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以下载JQuery文件并放置在项目中，然后通过<code>script</code>元素引用。</p><h2 id="3-语法"><a href="#3-语法" class="headerlink" title="3 语法"></a>3 语法</h2><h3 id="3-1-基础语法"><a href="#3-1-基础语法" class="headerlink" title="3.1 基础语法"></a>3.1 基础语法</h3><p>JQuery语法是通过选取HTML元素，并对选取的元素执行某些操作。</p><p>基础语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">action</span>();</span><br></pre></td></tr></table></figure><p>美元<code>$</code>符号定义JQuery，选择器<code>selector</code>用于查询HTML元素，方法<code>action()</code>执行对元素的操作。</p><h3 id="3-2-核心"><a href="#3-2-核心" class="headerlink" title="3.2 核心"></a>3.2 核心</h3><p>JQuery库为window对象定义了一个$函数<code>JQuery()</code>，也可以写作<code>$()</code>。</p><p>JQuery()函数会根据参数数据类型的不同做不同的工作，返回一个JQuery封装的伪数组对象。</p><h4 id="3-2-1-四种参数形式"><a href="#3-2-1-四种参数形式" class="headerlink" title="3.2.1 四种参数形式"></a>3.2.1 四种参数形式</h4><p>JQuery()函数中可以存放的四种参数形式，返回的均是JQuery对象。</p><ol><li>选择器字符串</li></ol><p>格式为：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(选择器字符串)</span><br></pre></td></tr></table></figure><p>通过相应选择器获取对应的DOM对象，然后将这些DOM封装到一个JQuery对象中并返回：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $div = $(<span class="string">&#x27;div&#x27;</span>);<span class="comment">//选取所有div元素节点并返回，将这些DOM节点封装到JQuery对象</span></span><br></pre></td></tr></table></figure><ol start="2"><li>DOM对象</li></ol><p>格式为：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable constant_">DOM</span>对象)</span><br></pre></td></tr></table></figure><p>将该DOM对象封装成JQuery对象并返回：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> $div = $(div);<span class="comment">//将DOM对象转化为JQuer对象</span></span><br></pre></td></tr></table></figure><ol start="3"><li>HTML文本字符串</li></ol><p>格式为：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable constant_">HTML</span>文本字符串)</span><br></pre></td></tr></table></figure><p>根据传入的文本创建好HTML元素并封装成JQuery对象返回：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $div = $(<span class="string">&quot;&lt;div class=&#x27;one&#x27;&gt;one&lt;div&gt;&quot;</span>);<span class="comment">//创建一个类名为one的div元素且将其封装成一个JQuery对象</span></span><br></pre></td></tr></table></figure><ol start="4"><li>匿名函数</li></ol><p>格式为：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(匿名函数)</span><br></pre></td></tr></table></figure><p>当文档结构加载完毕之后JQuery函数调用匿名函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;);<span class="comment">//文档结构加载完毕后执行function函数中的代码</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;);<span class="comment">//将document节点转化为JQuery对象，在调用对象ready()方法实现文档加载完毕后再执行函数内代码</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-JQuery对象和DOM对象"><a href="#3-2-2-JQuery对象和DOM对象" class="headerlink" title="3.2.2 JQuery对象和DOM对象"></a>3.2.2 JQuery对象和DOM对象</h4><p>JQuery对象是JQuery独有的，JQuery对象无法使用DOM对象的任何方法。同样的，DOM对象也不能使用JQuery里的任何方法。</p><p>JQuery对象和DOM对象的转化：</p><ul><li>JQuery对象转化为DOM对象：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>];<span class="comment">//在JQuery对象后面添加数值下标即可选择其获取到的JQuery类数组对象中相应位置存放的DOM对象</span></span><br></pre></td></tr></table></figure></li><li>DOM对象转化为JQuery对象：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);<span class="comment">//多个div返回的是一个DOM类数组对象</span></span><br><span class="line"><span class="keyword">var</span> $div = $(div);<span class="comment">//将DOM对象作为JQuery函数的参数即可将该DOM对象转化为JQuery对象</span></span><br></pre></td></tr></table></figure></li></ul><p>JQuery对象的操作实际上就是对JQuery数组中DOM对象的批量操作。</p><h3 id="3-3-选择器"><a href="#3-3-选择器" class="headerlink" title="3.3 选择器"></a>3.3 选择器</h3><h4 id="3-3-1-基本选择器"><a href="#3-3-1-基本选择器" class="headerlink" title="3.3.1 基本选择器"></a>3.3.1 基本选择器</h4><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>id选择器</td>      <td>        <code>$('#username')</code>      </td>      <td>匹配id属性为username的第一个元素。</td>    </tr>    <tr>      <td>class选择器</td>      <td>        <code>$('.red')</code>      </td>      <td>匹配class属性包含red的所有元素。</td>    </tr>    <tr>      <td>标签选择器</td>      <td>        <code>$('span')</code>      </td>      <td>匹配标签名为span的所有元素。</td>    </tr>    <tr>      <td>多选择器</td>      <td>        <code>$('#username,.red, span, div')</code>      </td>      <td>匹配多个选择器匹配的所有元素。</td>    </tr>    <tr>      <td>全部选择器</td>      <td>        <code>$('*')</code>      </td>      <td>匹配页面上的所有元素。</td>    </tr>  </tbody></table><h4 id="3-3-2-层次选择器"><a href="#3-3-2-层次选择器" class="headerlink" title="3.3.2 层次选择器"></a>3.3.2 层次选择器</h4><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>匹配子元素</td>      <td>        <code>$('form>input')</code>      </td>      <td>在所有form元素的子元素中匹配input元素。</td>    </tr>    <tr>      <td>匹配后代元素</td>      <td>        <code>$('form input')</code>      </td>      <td>在所有form元素的后代元素中匹配input元素，后代元素包括子元素和孙子元素。</td>    </tr>    <tr>      <td>匹配之后相邻的兄弟元素</td>      <td>        <code>$('label+input')</code>      </td>      <td>在所有label元素后相邻的兄弟元素中匹配input元素。</td>    </tr>    <tr>      <td>匹配之后的兄弟元素</td>      <td>        <code>$('label~input')</code>      </td>      <td>在所有label元素后的兄弟元素中匹配input元素。</td>    </tr>  </tbody></table><h4 id="3-3-3-过滤选择器"><a href="#3-3-3-过滤选择器" class="headerlink" title="3.3.3 过滤选择器"></a>3.3.3 过滤选择器</h4><p>过滤选择器主要是通过特定的过滤规则来筛选出所需的DOM元素，该选择器都以<code>:</code>开头。</p><p>基本过滤选择器：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>匹配第一个元素</td>      <td>        <code>$('tr:first')</code>      </td>      <td>匹配第一个tr元素。</td>    </tr>    <tr>      <td>匹配最后一个元素</td>      <td>        <code>$('tr:last')</code>      </td>      <td>匹配最后一个tr元素。</td>    </tr>    <tr>      <td>匹配偶数索引元素</td>      <td>        <code>$('tr:even')</code>      </td>      <td>匹配所有索引值为偶数的tr元素，从0开始计数。</td>    </tr>    <tr>      <td>匹配奇数索引元素</td>      <td>        <code>$('tr:odd')</code>      </td>      <td>匹配所有索引值为奇数的tr元素，从0开始计数。</td>    </tr>    <tr>      <td>匹配等于指定索引的元素</td>      <td>        <code>$('tr:eq(3)')</code>      </td>      <td>匹配索引值等于3的tr元素，从0开始计数。</td>    </tr>    <tr>      <td>匹配大于指定索引的元素</td>      <td>        <code>$('tr:gt(3)')</code>      </td>      <td>匹配所有索引值大于3的tr元素，从0开始计数。</td>    </tr>    <tr>      <td>匹配小于指定索引的元素</td>      <td>        <code>$('tr:lt(3)')</code>      </td>      <td>匹配所有索引值小于3的tr元素，从0开始计数。</td>    </tr>    <tr>      <td>匹配不被指定的元素</td>      <td>        <code>$('tr:not(:eq(3))')</code>      </td>      <td>匹配索引值不等于3的tr元素，从0开始计数。</td>    </tr>  </tbody></table><p>子元素过滤选择器：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>匹配指定的子元素</td>      <td>        <code>$('td:nth-child(3)')</code>      </td>      <td>在所有父元素的第3个子元素中，匹配td元素。</td>    </tr>    <tr>      <td>匹配指定的第一个子元素</td>      <td>        <code>$('td:first-child()')</code>      </td>      <td>在所有父元素的第一个子元素中，匹配td元素。</td>    </tr>    <tr>      <td>匹配指定的最后一个子元素</td>      <td>        <code>$('td:last-child()')</code>      </td>      <td>在所有父元素的最后一个子元素中，匹配td元素。</td>    </tr>  </tbody></table><p>属性过滤选择器：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>匹配指定属性的元素</td>      <td>        <code>$('input[name]')</code>      </td>      <td>匹配name属性存在的input元素。</td>    </tr>    <tr>      <td>匹配属性和指定属性值相同的元素</td>      <td>        <code>$('input[name="username"]')</code>      </td>      <td>匹配name属性的属性值和username相同的input元素。</td>    </tr>    <tr>      <td>匹配属性和指定属性值不同的元素</td>      <td>        <code>$('input[name!="username"]')</code>      </td>      <td>匹配name属性的属性值和username不同的input元素。</td>    </tr>    <tr>      <td>匹配属性以指定属性值开始的元素</td>      <td>        <code>$('input[name^="user"]')</code>      </td>      <td>匹配name属性的属性值以user开始的input元素。</td>    </tr>    <tr>      <td>匹配属性以指定属性值结束的元素</td>      <td>        <code>$('input[name$="user"]')</code>      </td>      <td>匹配name属性的属性值以user结束的input元素。</td>    </tr>    <tr>      <td>匹配属性包含指定属性值的元素</td>      <td>        <code>$('input[name*="user"]')</code>      </td>      <td>匹配name属性的属性值包含user的input元素。</td>    </tr>  </tbody></table><p>表单过滤选择器：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>匹配输入框元素</td>      <td>        <code>$(':input')</code>      </td>      <td>匹配所有input元素，即匹配所有输入框元素。</td>    </tr>    <tr>      <td>匹配文本框元素</td>      <td>        <code>$(':text')</code>      </td>      <td>匹配所有type属性值为text的input元素。</td>    </tr>    <tr>      <td>匹配密码框元素</td>      <td>        <code>$(':password')</code>      </td>      <td>匹配所有type属性值为password的input元素。</td>    </tr>    <tr>      <td>匹配单选框元素</td>      <td>        <code>$(':radio')</code>      </td>      <td>匹配所有type属性值为radio的input元素。</td>    </tr>    <tr>      <td>匹配复选框元素</td>      <td>        <code>$(':checkbox')</code>      </td>      <td>匹配所有type属性值为checkbox的input元素。</td>    </tr>    <tr>      <td>匹配按钮元素</td>      <td>        <code>$(':button')</code>      </td>      <td>匹配所有type属性值为button的input元素。</td>    </tr>    <tr>      <td>匹配提交按钮元素</td>      <td>        <code>$(':submit')</code>      </td>      <td>匹配所有type属性值为submit的input元素。</td>    </tr>    <tr>      <td>匹配重置按钮元素</td>      <td>        <code>$(':reset')</code>      </td>      <td>匹配所有type属性值为reset的input元素。</td>    </tr>  </tbody></table><p>表单对象属性过滤选择器：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>匹配禁用的表单元素</td>      <td>        <code>$('input:disabled')</code>      </td>      <td>匹配所有disabled属性值为true的input元素。</td>    </tr>    <tr>      <td>匹配启用的表单元素</td>      <td>        <code>$('input:enabled')</code>      </td>      <td>匹配所有disabled属性值为false的input元素。</td>    </tr>    <tr>      <td>匹配选中的选项元素</td>      <td>        <code>$('input:checked')</code>      </td>      <td>匹配选中的input选项元素，包括单选框和复选框。</td>    </tr>    <tr>      <td>匹配选中的下拉项元素</td>      <td>        <code>$('select option:selected')</code>      </td>      <td>匹配选中的option选项元素。</td>    </tr>    <tr>      <td>匹配所有隐藏元素</td>      <td>        <code>$('div:hidden')</code>      </td>      <td>匹配所有隐藏的div元素。</td>    </tr>  </tbody></table><h3 id="3-4-文档处理"><a href="#3-4-文档处理" class="headerlink" title="3.4 文档处理"></a>3.4 文档处理</h3><h4 id="3-4-1-插入节点"><a href="#3-4-1-插入节点" class="headerlink" title="3.4.1 插入节点"></a>3.4.1 插入节点</h4><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>插入到内部尾部</td>      <td>        <code>$('p').append(插入内容)</code>      </td>      <td>向p元素内部的尾部插入指定内容，插入内容作为子节点。</td>    </tr>    <tr>      <td>插入到内部头部</td>      <td>        <code>$('p').prepend(插入内容)</code>      </td>      <td>向p元素内部的头部插入指定内容，插入内容作为子节点。</td>    </tr>    <tr>      <td>插入到外部尾部</td>      <td>        <code>$('p').after(插入内容)</code>      </td>      <td>向p元素外部的尾部插入指定内容，插入内容作为兄弟节点。</td>    </tr>    <tr>      <td>插入到外部头部</td>      <td>        <code>$('p').before(插入内容)</code>      </td>      <td>向p元素外部的头部插入指定内容，插入内容作为兄弟节点。</td>    </tr>  </tbody></table><h4 id="3-4-2-删除节点"><a href="#3-4-2-删除节点" class="headerlink" title="3.4.2 删除节点"></a>3.4.2 删除节点</h4><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>删除子节点</td>      <td>        <code>$('div').empty()</code>      </td>      <td>删除div元素的子节点和内容节点，保留div元素本身。</td>    </tr>    <tr>      <td>删除节点</td>      <td>        <code>$('div').remove()</code>      </td>      <td>删除div元素，包括div元素本身，以及div元素的子节点和内容节点。</td>    </tr>  </tbody></table><h4 id="3-4-3-查找节点"><a href="#3-4-3-查找节点" class="headerlink" title="3.4.3 查找节点"></a>3.4.3 查找节点</h4><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>查找节点</td>      <td>        <code>$('div').find('span')</code>      </td>      <td>在div元素中查找span元素，即匹配div元素的span后代元素。</td>    </tr>    <tr>      <td>遍历节点</td>      <td>        <code>$('div').each(function(index,element)&#123; &#125;)</code>      </td>      <td>        遍历div元素，使用<code>index</code>表示当前下标，使用<code>element</code>表示当前元素。<br>        如果是匿名函数，还可以使用<code>$&#123;this&#125;</code>代替<code>element</code>表示当前元素。<br>      </td>    </tr>  </tbody></table><h4 id="3-4-4-修改节点"><a href="#3-4-4-修改节点" class="headerlink" title="3.4.4 修改节点"></a>3.4.4 修改节点</h4><p>内容操作：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>获取文本内容</td>      <td>        <code>$('#welcome').text()</code>      </td>      <td>获取id属性为<code>welcome</code>的元素的文本内容。</td>    </tr>    <tr>      <td>修改文本内容</td>      <td>        <code>$('#welcome').text('欢迎')</code>      </td>      <td>修改id属性为<code>welcome</code>的元素的文本内容为<code>欢迎</code>。</td>    </tr>  </tbody></table><p>值操作：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>获取value属性</td>      <td>        <code>$('#username').val()</code>      </td>      <td>获取id属性为<code>username</code>的元素的文本内容。</td>    </tr>    <tr>      <td>修改value属性</td>      <td>        <code>$('#username').val('佚名')</code>      </td>      <td>修改id属性为<code>username</code>的元素的文本内容为<code>佚名</code>。</td>    </tr>  </tbody></table><p>属性操作：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>获取指定属性</td>      <td>        <code>$('#username').attr('readonly')</code>      </td>      <td>获取id属性为<code>username</code>的元素的<code>readonly</code>属性。</td>    </tr>    <tr>      <td>修改指定属性</td>      <td>        <code>$('#username').attr('readonly',true)</code>      </td>      <td>修改id属性为<code>username</code>的元素的<code>readonly</code>属性为<code>true</code>。</td>    </tr>    <tr>      <td>删除指定属性</td>      <td>        <code>$('#username').removeAttr('readonly')</code>      </td>      <td>删除id属性为<code>username</code>的元素的<code>readonly</code>属性。</td>    </tr>  </tbody></table><p>类操作：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>增加指定类</td>      <td>        <code>$('#username').addClass('username')</code>      </td>      <td>给id属性为<code>username</code>的元素增加<code>username</code>类。</td>    </tr>    <tr>      <td>删除指定类</td>      <td>        <code>$('#username').removeClass('username')</code>      </td>      <td>给id属性为<code>username</code>的元素删除<code>username</code>类。</td>    </tr>  </tbody></table><p>样式操作：</p><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>获取指定样式</td>      <td>        <code>$('#username').css('color')</code>      </td>      <td>获取id属性为<code>username</code>的元素的<code>color</code>样式。</td>    </tr>    <tr>      <td>修改指定样式</td>      <td>        <code>$('#username').css('color','red')</code>      </td>      <td>修改id属性为<code>username</code>的元素的<code>color</code>样式为<code>red</code>。</td>    </tr>  </tbody></table><h3 id="3-5-事件"><a href="#3-5-事件" class="headerlink" title="3.5 事件"></a>3.5 事件</h3><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>加载</td>      <td>        <code>$(document).ready(function()&#123; &#125;)</code>      </td>      <td>在页面加载DOM结构后执行方法。</td>    </tr>    <tr>      <td>点击</td>      <td>        <code>$('#submit').click(function()&#123; &#125;)</code>      </td>      <td>当id属性为submit的元素在点击时执行方法。</td>    </tr>    <tr>      <td>获得焦点</td>      <td>        <code>$('#username').focus(function()&#123; &#125;)</code>      </td>      <td>当id属性为username的元素在获得焦点时执行方法。</td>    </tr>    <tr>      <td>失去焦点</td>      <td>        <code>$('#username').blur(function()&#123; &#125;)</code>      </td>      <td>当id属性为username的元素在失去焦点时执行方法。</td>    </tr>    <tr>      <td>改变</td>      <td>        <code>$('#username').change(function()&#123; &#125;)</code>      </td>      <td>当id属性为username的元素在获得焦点后改变值时执行方法，也会在元素失去焦点时执行方法。</td>    </tr>    <tr>      <td>表单提交</td>      <td>        <code>$('#form').submit(function()&#123; &#125;)</code>      </td>      <td>当id属性为form的表单元素在提交时执行方法。</td>    </tr>  </tbody></table><h3 id="3-6-效果"><a href="#3-6-效果" class="headerlink" title="3.6 效果"></a>3.6 效果</h3><table>  <thead>    <tr>      <th>分类</th>      <th>示例</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>显示</td>      <td>        <code>$('#username').show()</code>      </td>      <td>显示id属性为username的元素。</td>    </tr>    <tr>      <td>隐藏</td>      <td>        <code>$('#username').hide()</code>      </td>      <td>隐藏id属性为username的元素。</td>    </tr>    <tr>      <td>切换</td>      <td>        <code>$('#username').toggle()</code>      </td>      <td>切换id属性为username的元素的可见性。</td>    </tr>  </tbody></table><h3 id="3-7-AJAX"><a href="#3-7-AJAX" class="headerlink" title="3.7 AJAX"></a>3.7 AJAX</h3><p>发送get请求：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url, &#123;<span class="attr">name</span>:<span class="string">&quot;John&quot;</span>,<span class="attr">location</span>:<span class="string">&quot;Boston&quot;</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Data Loaded: &quot;</span> + data);</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>发送post请求：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url, &#123;<span class="attr">name</span>:<span class="string">&quot;John&quot;</span>,<span class="attr">location</span>:<span class="string">&quot;Boston&quot;</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Data Loaded: &quot;</span> + data);</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>发送ajax请求：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: url,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;<span class="attr">name</span>:<span class="string">&quot;John&quot;</span>,<span class="attr">location</span>:<span class="string">&quot;Boston&quot;</span>&#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要学习了JQuery库，包括选择器、文档处理、事件、效果，以及AJAX调用。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
    <category term="JQuery" scheme="https://momashanhe.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>大模型</title>
    <link href="https://momashanhe.com/posts/20250116/145309/"/>
    <id>https://momashanhe.com/posts/20250116/145309/</id>
    <published>2025-01-16T06:53:09.000Z</published>
    <updated>2025-01-17T03:52:28.268Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：</p><span id="more"></span><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h2><p>大模型是指具有大规模参数和复杂计算结构的机器学习模型，通常由深度神经网络构建而成，拥有数十亿甚至数千亿个参数。</p><p>大模型的设计目的是为了提高模型的表达能力和预测性能，能够处理更加复杂的任务和数据。</p><p>大模型是人工智能领域的一个重要分支和关键技术。</p><h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2 特点"></a>2 特点</h2><p>规模和参数量大：大模型通过其庞大的规模（拥有从数亿到数千亿级别的参数数量）来捕获复杂的数据模式，使得它们能够理解和生成极其丰富的信息。</p><p>适应性和灵活性强：模型具有很强的适应性和灵活性，能够通过微调（fine-tune）或少样本学习高效地迁移到各种下游任务，有很强的跨域能力。</p><p>广泛数据集的预训练：大模型使用大量多样化的数据进行预训练，以学习广泛的知识表示，能够掌握语言、图像等数据的通用特征。</p><p>计算资源需求大：巨大的模型规模带来了高昂的计算和资源需求，包括但不限于数据存储、训练时间、能量消耗和硬件设施。</p><h2 id="3-提示词"><a href="#3-提示词" class="headerlink" title="3 提示词"></a>3 提示词</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：&lt;/p&gt;</summary>
    
    
    
    <category term="人工智能" scheme="https://momashanhe.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="大模型" scheme="https://momashanhe.com/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>背景知识</title>
    <link href="https://momashanhe.com/posts/20241207/083133/"/>
    <id>https://momashanhe.com/posts/20241207/083133/</id>
    <published>2024-12-07T00:31:33.000Z</published>
    <updated>2025-01-16T06:54:20.147Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文主要介绍了人工智能的起源和发展。</p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1 起源"></a>1 起源</h2><h3 id="1-1-起源"><a href="#1-1-起源" class="headerlink" title="1.1 起源"></a>1.1 起源</h3><p>人工智能（AI）的起源可以追溯到20世纪40年代和50年代，当时科学家们开始探索如何用机器模拟人类智能。</p><p>1950年，英国数学家艾伦·图灵（Alan Turing）提出了图灵测试，作为判断机器是否具有智能的标准。</p><p>1956年，达特茅斯会议（Dartmouth Conference）召开，首次提出了“人工智能”这一术语，标志着AI学科的诞生。</p><h3 id="1-2-历程"><a href="#1-2-历程" class="headerlink" title="1.2 历程"></a>1.2 历程</h3><p>早期探索期（19世纪 - 20世纪中叶）：</p><ul><li>语义概念提出：早在19世纪，自然语言处理的概念开始萌芽，人工神经网络的研究也逐渐起步，为人工智能的发展奠定了基础。</li></ul><p>起步发展期（1956年—20世纪60年代初）：</p><ul><li>早期研究成果：这一时期相继取得了一批令人瞩目的研究成果，如机器定理证明、跳棋程序等，掀起人工智能发展的第一个高潮。</li><li>达特茅斯会议：1956年，约翰·麦卡锡、马文·明斯基、克劳德·香农和纳撒尼尔·罗切斯特等人在达特茅斯学院组织了一次会议，正式提出了“人工智能”这个概念，标志着人工智能学科的诞生。</li></ul><p>反思发展期（20世纪60年代—70年代初）：</p><ul><li>聊天机器人：1966年，约瑟夫·魏岑鲍姆（Joseph Weizenbaum）开发了ELIZA，这是早期的聊天机器人，能够模拟人类对话，展示了自然语言处理的潜力。</li></ul><p>应用发展期（20世纪70年代初—80年代中）：</p><ul><li>专家系统：这一时期，专家系统成为人工智能的主流技术，实现了AI从理论研究走向实际应用的重大突破，通过规则推理来模拟人类专家在特定领域的决策过程。</li><li>MYCIN系统：1972年开发的MYCIN系统能够在医疗领域诊断传染病，准确率较高。</li></ul><p>低迷发展期（20世纪80年代中—90年代中）：</p><ul><li>AI寒冬：由于技术瓶颈和资金问题，人工智能研究进入低谷期，被称为“AI寒冬”。尽管如此，研究和资金仍在其他名义下继续进行。</li></ul><p>稳步发展期（20世纪90年代中—2010年）：</p><ul><li>机器学习：1997年，计算机科学家汤姆·米切尔（Tom Mitchell）定义了机器学习，强调了数据驱动算法的重要性，推动了人工智能系统的发展。</li><li>深蓝：1997年，IBM的深蓝（Deep Blue）超级计算机击败了世界国际象棋冠军加里·卡斯帕罗夫，标志着人工智能在复杂游戏中的突破。</li></ul><p>蓬勃发展期（2010年至今）：</p><ul><li>深度学习：2012年，杰弗里·辛顿（Geoffrey Hinton）的团队在ImageNet大规模视觉识别挑战赛中使用卷积神经网络（CNN）取得了显著的图像识别准确率提升，推动了深度学习的广泛应用。</li><li>大型语言模型：2020年代，大型语言模型如GPT-3和ChatGPT等不断涌现，这些模型展示了人类般的知识、注意力和创造力，推动了人工智能在自然语言处理领域的巨大进步。</li></ul><p>现代发展期（2020年至今）：</p><ul><li>多模态模型：2021年，谷歌的多模态模型MUM（Multitask Unified Model）能够同时处理文本、图像和视频，提供更全面、丰富的答案。</li><li>自动驾驶：2021年，特斯拉推出了全自动驾驶（FSD）Beta系统，利用深度学习和神经网络实现自动驾驶功能。</li></ul><h2 id="2-主要分支"><a href="#2-主要分支" class="headerlink" title="2 主要分支"></a>2 主要分支</h2><h3 id="2-1-机器学习（Machine-Learning-ML）"><a href="#2-1-机器学习（Machine-Learning-ML）" class="headerlink" title="2.1 机器学习（Machine Learning, ML）"></a>2.1 机器学习（Machine Learning, ML）</h3><h4 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h4><p>机器学习是人工智能的核心领域之一，它使计算机系统能够基于数据进行学习和改进，而无需进行明确的编程。通过算法和统计模型，机器学习能够让计算机自动分析和识别数据中的模式和规律，从而对新的数据做出预测或决策。</p><h4 id="2-1-2-特点"><a href="#2-1-2-特点" class="headerlink" title="2.1.2 特点"></a>2.1.2 特点</h4><p>数据驱动：依赖大量数据进行学习和训练，模型的性能随着数据量的增加而提高。</p><p>模型构建：构建数学模型来描述数据之间的关系，不同的算法适用于不同类型的问题和数据。</p><p>泛化能力：能够对新的、未见过的数据进行预测和分类，具有一定的泛化能力。</p><p>算法多样性：包括多种算法，如线性回归、决策树、支持向量机、神经网络等。</p><h4 id="2-1-3-应用"><a href="#2-1-3-应用" class="headerlink" title="2.1.3 应用"></a>2.1.3 应用</h4><p>推荐系统：根据用户的历史行为和偏好，为用户推荐商品、电影、音乐等。例如，亚马逊根据用户的购买历史和浏览行为，推荐用户可能感兴趣的商品。</p><p>金融风险预测：分析金融数据，预测信贷风险、市场风险等。例如，银行利用机器学习模型评估贷款申请人的信用风险。</p><p>医疗诊断：分析医疗影像和病历数据，辅助医生进行疾病诊断。例如，通过分析CT影像诊断肺癌。</p><p>图像识别：识别图像中的物体、场景和人物。例如，安防系统通过人脸识别技术识别犯罪嫌疑人。</p><p>自然语言处理：用于文本分类、情感分析、机器翻译等任务。例如，谷歌翻译利用机器学习技术实现多种语言之间的自动翻译。</p><h3 id="2-2-深度学习（Deep-Learning-DL）"><a href="#2-2-深度学习（Deep-Learning-DL）" class="headerlink" title="2.2 深度学习（Deep Learning, DL）"></a>2.2 深度学习（Deep Learning, DL）</h3><h4 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1 定义"></a>2.2.1 定义</h4><p>深度学习是机器学习的一个子领域，基于人工神经网络的深度结构来学习数据的高级特征表示。深度学习模型通常包含多个隐藏层，能够自动从原始数据中提取复杂的特征，从而实现更准确的预测和分类。</p><h4 id="2-2-2-特点"><a href="#2-2-2-特点" class="headerlink" title="2.2.2 特点"></a>2.2.2 特点</h4><p>多层结构：基于人工神经网络的深度结构，通常包含多个隐藏层，能够自动提取数据的高级特征。</p><p>强大的特征学习能力：无需人工设计特征，模型能够自动从原始数据中学习到有用的特征表示。</p><p>大规模数据处理：适合处理大规模、高维度的数据，如图像、语音和文本数据。</p><p>计算资源需求高：需要大量的计算资源，如GPU和TPU，以加速模型的训练和推理过程。</p><h4 id="2-2-3-应用"><a href="#2-2-3-应用" class="headerlink" title="2.2.3 应用"></a>2.2.3 应用</h4><p>计算机视觉：图像分类、目标检测、图像分割等任务。例如，自动驾驶汽车通过深度学习模型识别道路、行人和车辆。</p><p>自然语言处理：语言模型、机器翻译、文本生成等任务。例如，ChatGPT利用深度学习生成自然语言文本。</p><p>语音识别：将语音信号转换为文本，应用于智能语音助手和语音识别系统。例如，Siri和Alexa通过语音识别技术理解用户的语音指令。</p><p>游戏和娱乐：生成逼真的图像和音频，用于游戏开发和虚拟现实。例如，生成对抗网络（GAN）用于生成逼真的游戏角色和场景。</p><h3 id="2-3-自然语言处理（Natural-Language-Processing-NLP）"><a href="#2-3-自然语言处理（Natural-Language-Processing-NLP）" class="headerlink" title="2.3 自然语言处理（Natural Language Processing, NLP）"></a>2.3 自然语言处理（Natural Language Processing, NLP）</h3><h4 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2.3.1 定义"></a>2.3.1 定义</h4><p>自然语言处理是人工智能的一个重要分支，致力于使计算机能够理解和生成人类语言。它涉及语言学、计算机科学、人工智能等多个学科的知识，旨在让计算机能够像人类一样处理和理解自然语言文本。</p><h4 id="2-3-2-特点"><a href="#2-3-2-特点" class="headerlink" title="2.3.2 特点"></a>2.3.2 特点</h4><p>语言理解：能够理解自然语言的语法、语义和语用，处理复杂的语言结构和语义关系。</p><p>语言生成：生成自然、流畅的文本，模拟人类的写作风格和表达方式。</p><p>多模态交互：结合文本、语音和视觉信息，实现更自然的人机交互。</p><p>数据稀疏性：语言数据具有稀疏性和多样性，需要处理大量的词汇和语法变体。</p><h4 id="2-3-3-应用"><a href="#2-3-3-应用" class="headerlink" title="2.3.3 应用"></a>2.3.3 应用</h4><p>智能客服：自动回答用户的问题，提供客户服务和支持。例如，电商平台的智能客服系统能够解答用户的常见问题。</p><p>机器翻译：将一种语言的文本自动翻译成另一种语言。例如，百度翻译支持多种语言之间的互译。</p><p>文本分析：情感分析、主题建模、文本分类等任务。例如，通过情感分析了解用户对产品的评价。</p><p>语音助手：通过语音交互提供信息和服务。例如，智能音箱通过语音助手播放音乐、查询天气等。</p><h3 id="2-4-计算机视觉（Computer-Vision）"><a href="#2-4-计算机视觉（Computer-Vision）" class="headerlink" title="2.4 计算机视觉（Computer Vision）"></a>2.4 计算机视觉（Computer Vision）</h3><h4 id="2-4-1-定义"><a href="#2-4-1-定义" class="headerlink" title="2.4.1 定义"></a>2.4.1 定义</h4><p>计算机视觉是人工智能的一个重要领域，旨在使计算机能够像人类一样理解和解释视觉信息，如图像和视频。通过模拟人类视觉系统的感知和认知过程，计算机视觉能够让计算机自动识别、分析和理解图像中的内容。</p><h4 id="2-4-2-特点"><a href="#2-4-2-特点" class="headerlink" title="2.4.2 特点"></a>2.4.2 特点</h4><p>图像理解：能够理解图像中的物体、场景和事件，识别图像中的各种元素。</p><p>多尺度分析：处理不同尺度的图像信息，从全局到局部进行分析。</p><p>实时处理：需要在短时间内处理大量图像数据，支持实时应用。</p><p>鲁棒性：在不同的光照、角度和背景下，能够准确识别图像内容。</p><h4 id="2-4-3-应用"><a href="#2-4-3-应用" class="headerlink" title="2.4.3 应用"></a>2.4.3 应用</h4><p>安防监控：实时监控视频，识别异常行为和犯罪嫌疑人。例如，城市监控系统通过人脸识别技术识别可疑人员。</p><p>自动驾驶：识别道路、行人、车辆和交通标志，支持自动驾驶决策。例如，特斯拉的自动驾驶系统通过计算机视觉技术识别道路环境。</p><p>医疗影像：分析医学影像，辅助医生进行疾病诊断。例如，通过分析X光和CT影像诊断骨折和肿瘤。</p><p>工业检测：检测产品缺陷和质量控制。例如，通过图像识别技术检测电路板上的缺陷。</p><h3 id="2-5-机器人学（Robotics）"><a href="#2-5-机器人学（Robotics）" class="headerlink" title="2.5 机器人学（Robotics）"></a>2.5 机器人学（Robotics）</h3><h4 id="2-5-1-定义"><a href="#2-5-1-定义" class="headerlink" title="2.5.1 定义"></a>2.5.1 定义</h4><p>机器人学是人工智能与机械工程、电子工程等学科的交叉领域，致力于设计、制造和控制能够自动执行任务的机器人。机器人学不仅关注机器人的机械结构和运动控制，还涉及到机器人的感知、决策和交互等方面，使机器人能够在各种环境中自主地完成任务。</p><h4 id="2-5-2-特点"><a href="#2-5-2-特点" class="headerlink" title="2.5.2 特点"></a>2.5.2 特点</h4><p>自主性：能够自主感知环境、做出决策并执行任务。</p><p>多模态感知：结合视觉、听觉、触觉等多种传感器，全面感知环境信息。</p><p>运动控制：精确控制机器人的运动，实现复杂的动作和任务。</p><p>人机交互：与人类进行自然、安全的交互，支持协作和辅助任务。</p><h4 id="2-5-3-应用"><a href="#2-5-3-应用" class="headerlink" title="2.5.3 应用"></a>2.5.3 应用</h4><p>工业机器人：在制造业中进行装配、焊接、搬运等任务。例如，汽车制造工厂的机器人进行车身焊接。</p><p>服务机器人：在酒店、餐厅、医院等场所提供服务。例如，酒店服务机器人提供行李搬运和客房服务。</p><p>医疗机器人：进行手术辅助、康复治疗等任务。例如，达芬奇手术机器人辅助医生进行微创手术。</p><p>探索机器人：在危险环境或难以到达的地方进行探索和作业。例如，火星探测器进行火星表面的探测任务。</p><h3 id="2-6-知识表示与推理（Knowledge-Representation-and-Reasoning-KR-R）"><a href="#2-6-知识表示与推理（Knowledge-Representation-and-Reasoning-KR-R）" class="headerlink" title="2.6 知识表示与推理（Knowledge Representation and Reasoning, KR&amp;R）"></a>2.6 知识表示与推理（Knowledge Representation and Reasoning, KR&amp;R）</h3><h4 id="2-6-1-定义"><a href="#2-6-1-定义" class="headerlink" title="2.6.1 定义"></a>2.6.1 定义</h4><p>知识表示与推理是人工智能的一个重要研究领域，旨在用计算机能够理解和处理的形式来表示人类的知识，并通过推理机制从已有的知识中推导出新的知识或结论。知识表示是将知识转换为计算机可以处理的形式，推理则是根据已有的知识进行逻辑推理和决策。</p><h4 id="2-6-2-特点"><a href="#2-6-2-特点" class="headerlink" title="2.6.2 特点"></a>2.6.2 特点</h4><p>知识建模：将知识以结构化的方式表示，便于计算机处理和推理。</p><p>逻辑推理：基于逻辑规则进行推理，从已知知识推导出新的知识和结论。</p><p>语义理解：理解知识的语义和上下文关系，支持复杂的推理任务。</p><p>知识共享：支持知识的共享和重用，构建知识库和本体。</p><h4 id="2-6-3-应用"><a href="#2-6-3-应用" class="headerlink" title="2.6.3 应用"></a>2.6.3 应用</h4><p>专家系统：模拟专家的决策过程，提供专业领域的咨询和建议。例如，医疗专家系统辅助医生进行疾病诊断。</p><p>智能问答：回答用户的问题，提供准确的信息和解决方案。例如，智能问答系统通过知识推理回答用户的问题。</p><p>知识图谱：构建知识图谱，支持语义搜索和推荐。例如，百度知识图谱提供丰富的知识关联和语义搜索功能。</p><p>智能决策：支持复杂决策任务，提供决策支持和优化建议。例如，企业决策支持系统通过知识推理提供市场分析和决策建议。</p><h3 id="2-7-规划和调度（Planning-and-Scheduling）"><a href="#2-7-规划和调度（Planning-and-Scheduling）" class="headerlink" title="2.7 规划和调度（Planning and Scheduling）"></a>2.7 规划和调度（Planning and Scheduling）</h3><h4 id="2-7-1-定义"><a href="#2-7-1-定义" class="headerlink" title="2.7.1 定义"></a>2.7.1 定义</h4><p>规划和调度是人工智能的一个重要分支，涉及如何为代理生成实现特定目标的行动计划，使系统能够根据任务要求和资源情况，合理安排行动步骤和时间。</p><h4 id="2-7-2-特点"><a href="#2-7-2-特点" class="headerlink" title="2.7.2 特点"></a>2.7.2 特点</h4><p>任务分解：将复杂任务分解为多个子任务，进行逐步规划和执行。</p><p>资源优化：考虑资源的限制和约束，优化任务的执行顺序和资源分配。</p><p>动态调整：根据环境变化和任务执行情况，动态调整计划和调度策略。</p><p>多目标优化：同时考虑多个目标，如时间、成本、质量等，进行综合优化。</p><h4 id="2-7-3-应用"><a href="#2-7-3-应用" class="headerlink" title="2.7.3 应用"></a>2.7.3 应用</h4><p>物流配送：优化货物配送路线和时间，提高配送效率。例如，快递公司通过规划和调度系统优化配送路线。</p><p>生产计划：制定生产计划，优化生产流程和资源分配。例如，制造企业通过生产计划系统优化生产任务。</p><p>项目管理：制定项目计划，分配任务和资源，监控项目进度。例如，项目管理软件通过规划和调度功能支持项目管理。</p><p>交通管理：优化交通流量，减少拥堵，提高交通效率。例如，智能交通系统通过规划和调度优化交通信号。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文主要介绍了人工智能的起源和发展。&lt;/p&gt;</summary>
    
    
    
    <category term="人工智能" scheme="https://momashanhe.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="AI" scheme="https://momashanhe.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>使用Babel解决兼容问题</title>
    <link href="https://momashanhe.com/posts/20240802/145526/"/>
    <id>https://momashanhe.com/posts/20240802/145526/</id>
    <published>2024-08-02T06:55:26.000Z</published>
    <updated>2024-12-07T07:06:48.717Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用Babel解决ES5之后的版本的兼容问题。</p><span id="more"></span><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1 说明"></a>1 说明</h2><p>Babel是一个工具链，主要用于将采用ES5以后的语法编写的代码转换为ES5语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p><p>官网地址：<a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a></p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><p>进行初始化：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure><p>安装相关的开发依赖：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-cli babel-preset-env browserify -D</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>babel-cli：命令行工具</li><li>babel-preset-env：预设包，进行转换</li><li>browserify：打包工具，比webpack更简单</li></ul><p>进行转换：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx babel 原路径 -d 新路径 --presets=babel-preset-env</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>局部安装需要使用<code>npx</code>命令，全局安装可以直接使用<code>babel</code>命令。</li><li>在未设置配置文件的情况下，需要使用<code>--presets</code>指定配置。</li></ul><p>进行打包：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm browserify 转换后的新文件 -o 打包后的新文件</span><br></pre></td></tr></table></figure><p>网页中只要引用最后打包后的新文件即可，在修改原JS文件后，需要重新执行打包的命令。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用Babel解决ES5之后的版本的兼容问题。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>学习ES</title>
    <link href="https://momashanhe.com/posts/20240718/152438/"/>
    <id>https://momashanhe.com/posts/20240718/152438/</id>
    <published>2024-07-18T07:24:38.000Z</published>
    <updated>2025-03-07T03:00:53.486Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了ECMAScript的基本知识，包括简介和历史版本以及新特性。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>ECMAScript是一种由ECMA组织（前身为欧洲计算机制造商协会）制定和发布的脚本语言规范。</p><p>JavaScript是ECMAScript的实现，一般情况下，ECMAScript和JavaScript表达的是同一个意思。</p><p>严格来说，JavaScript包含三个部分：</p><ul><li>ECMAScript：核心，通用标准，简写为ES</li><li>DOM：文档对象模型，操作网页</li><li>BOM：浏览器对象模型，操作浏览器</li></ul><h3 id="1-2-历史版本"><a href="#1-2-历史版本" class="headerlink" title="1.2 历史版本"></a>1.2 历史版本</h3><p>ES5：2009年发布<br>ES6：2015年发布，也称为ES2015<br>ES7：2016年发布，也称为ES2016<br>ES8：2017年发布，也称为ES2017<br>ES9：2018年发布，也称为ES2018<br>ES10：2019年发布，也称为ES2019</p><h2 id="2-ES5"><a href="#2-ES5" class="headerlink" title="2 ES5"></a>2 ES5</h2><h3 id="2-1-严格模式"><a href="#2-1-严格模式" class="headerlink" title="2.1 严格模式"></a>2.1 严格模式</h3><p>在ES5中新增了严格模式，其作用是：</p><ul><li>使得JS在更严格的条件下运行</li><li>消除JS语法的一些不合理、不严谨之处，减少一些怪异行为</li><li>消除JS代码运行的一些不安全之处，保证代码运行的安全</li></ul><p>使用方式是在JS的第一行：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure><p>需要记住的几个变化：</p><ul><li>声明定义变量必须用<code>var</code>关键字：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line">age = <span class="number">18</span>;<span class="comment">// 页面报错</span></span><br></pre></td></tr></table></figure></li><li>禁止自定义的函数中的<code>this</code>关键字指向全局对象：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>(<span class="number">18</span>);<span class="comment">// 页面报错</span></span><br></pre></td></tr></table></figure></li><li>创建<code>eval</code>作用域：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;var age = 18;&#x27;</span>);<span class="comment">// 使用eval()方法可以执行传入的命令，有风险，不建议使用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">// 16 只在eval作用域有效，不会污染全局变量</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-JSON支持"><a href="#2-2-JSON支持" class="headerlink" title="2.2 JSON支持"></a>2.2 JSON支持</h3><p>JSON是一种轻量级的数据交换模式，用于传输数据。</p><p>ES5提供了对JSON的支持：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;age: 18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj);<span class="comment">// object</span></span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonStr);<span class="comment">// &#123;&quot;age&quot;:18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> jsonStr);<span class="comment">// string 将对象或数组转为JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj);<span class="comment">// &#123;age: 18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> jsonObj);<span class="comment">// object 将JSON字符串转为对象或数组</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Object扩展"><a href="#2-3-Object扩展" class="headerlink" title="2.3 Object扩展"></a>2.3 Object扩展</h3><p>增加了一种创建对象的方式，支持通过将指定对象作为原型的方式创建对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newObj = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">__proto__</span>);<span class="comment">// &#123;__proto__: null&#125;</span></span><br><span class="line">newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">__proto__</span>);<span class="comment">// &#123;age: 18&#125;</span></span><br></pre></td></tr></table></figure><p>增加操作属性的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123;value : <span class="number">16</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);<span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Array扩展"><a href="#2-4-Array扩展" class="headerlink" title="2.4 Array扩展"></a>2.4 Array扩展</h3><p>查询元素在数组中的下标：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">2</span>));<span class="comment">// 1 指定元素在数组中首次出现的下标</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="number">2</span>));<span class="comment">// 3 指定元素在数组中最后出现的下标</span></span><br></pre></td></tr></table></figure><p>遍历数组：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + index + <span class="string">&quot;]&quot;</span>, item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对数组进行处理：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><p>对数组进行过滤：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h3 id="2-5-Function扩展"><a href="#2-5-Function扩展" class="headerlink" title="2.5 Function扩展"></a>2.5 Function扩展</h3><p>将函数的this对象修改为指定的对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> + <span class="string">&#x27; age = &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">20</span>);<span class="comment">// [object Window] age = 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">// 20</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 修改方法的this对象，返回新方法</span></span><br><span class="line"><span class="keyword">var</span> newFun = fun.<span class="title function_">bind</span>(obj, <span class="number">12</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="comment">// 执行新方法</span></span><br><span class="line"><span class="title function_">newFun</span>();<span class="comment">// [object Object] age = 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);<span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;age: 12&#125;</span></span><br></pre></td></tr></table></figure><p>也可以直接执行新方法，需要在方法后面增加<code>()</code>，相当于<code>call()</code>方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> + <span class="string">&#x27; age = &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">20</span>);<span class="comment">// [object Window] age = 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">// 20</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 修改方法的this对象，并执行新方法，相当于fun.call(obj, 16)</span></span><br><span class="line">fun.<span class="title function_">bind</span>(obj, <span class="number">16</span>)();<span class="comment">// [object Object] age = 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;age: 16&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-ES6"><a href="#3-ES6" class="headerlink" title="3 ES6"></a>3 ES6</h2><h3 id="3-1-声明变量"><a href="#3-1-声明变量" class="headerlink" title="3.1 声明变量"></a>3.1 声明变量</h3><p>使用<code>let</code>关键字声明变量：</p><table>  <thead>    <tr>      <th>方式</th>      <th>作用域</th>      <th>重复声明</th>      <th>声明提升</th>    </tr>  </thead>  <tbody>    <tr>      <td>使用<code>var</code>关键字声明变量</td>      <td>属于全局变量</td>      <td>可以重复声明</td>      <td>存在变量提升</td>    </tr>    <tr>      <td>使用<code>let</code>关键字声明变量</td>      <td>属于局部变量，会创建一个块级作用域</td>      <td>不能重复声明</td>      <td>不会预处理，不存在提升</td>    </tr>  </tbody></table><p>使用<code>const</code>关键字声明的变量被称为常量，和<code>let</code>关键字类似，唯一的区别是不支持修改变量的值。</p><p>为了更好的区分常量，其标识符一般使用大写。</p><h3 id="3-2-解构赋值"><a href="#3-2-解构赋值" class="headerlink" title="3.2 解构赋值"></a>3.2 解构赋值</h3><p>按照一定模式，从数组或者对象中提取值，对变量进行赋值，这被称为解构赋值。</p><p>对象解构可以同时获取对象多个属性，但是要求属性名一致，使用<code>&#123;&#125;</code>包裹，按属性赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;age, sex&#125; = obj;<span class="comment">// 获取多个属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age, sex);<span class="comment">// 18 &#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">age</span>: objAge, <span class="attr">sex</span>: objSex&#125; = obj;<span class="comment">// 解构同时使用别名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objAge, objSex);<span class="comment">// 18 &#x27;男&#x27;</span></span><br></pre></td></tr></table></figure><p>数组解构可以同时获取多个元素，对变量名没有要求，使用<code>[]</code>包裹，按下标顺序赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, , , c, d] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d);<span class="comment">// 1 2 1 undefined</span></span><br></pre></td></tr></table></figure><h3 id="3-3-模板字符串"><a href="#3-3-模板字符串" class="headerlink" title="3.3 模板字符串"></a>3.3 模板字符串</h3><p>使用模板字符串可以简化字符串的拼接，支持在字符串中使用变量、对象、表达式、方法的返回值。</p><p>对于模板字符串需要使用<code>``</code>包裹，在字符串中的模板需要使用<code>$&#123;&#125;</code>包裹：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`个人信息：</span></span><br><span class="line"><span class="string">年龄：<span class="subst">$&#123;obj.age&#125;</span></span></span><br><span class="line"><span class="string">性别：<span class="subst">$&#123;obj.sex&#125;</span></span></span><br><span class="line"><span class="string">以上数据真实有效`</span>);<span class="comment">// 支持换行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取返回值：<span class="subst">$&#123;fun()&#125;</span>`</span>)<span class="comment">// 支持获取返回值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`数组内容：<span class="subst">$&#123;arr&#125;</span>`</span>);<span class="comment">// 支持变量和数组</span></span><br></pre></td></tr></table></figure><h3 id="3-4-简化对象"><a href="#3-4-简化对象" class="headerlink" title="3.4 简化对象"></a>3.4 简化对象</h3><p>在定义对象时，可以直接写入变量和函数作为对象的属性方法，这样的书写更加简洁：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>)&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  age,</span><br><span class="line">  sex,</span><br><span class="line">  test</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">// &#123;age: 18, sex: &#x27;男&#x27;, test: ƒ&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-箭头函数"><a href="#3-5-箭头函数" class="headerlink" title="3.5 箭头函数"></a>3.5 箭头函数</h3><p>使用<code>() =&gt; &#123;&#125;</code>箭头函数简化了函数的定义和调用，特点：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有参数，不能省略箭头左侧的()符号，一条语句，可以省略箭头右侧的`&#123;&#125;`符号</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="title function_">fun1</span>();<span class="comment">// test</span></span><br><span class="line"><span class="comment">// 一个参数，可以省略箭头左侧的`()`符号，一条语句，可以省略return关键字，默认将结果作为返回值</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun2</span> = str =&gt; <span class="string">&quot;str = &quot;</span> + str;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun2</span>(<span class="string">&quot;test&quot;</span>));</span><br><span class="line"><span class="title function_">fun2</span>(<span class="string">&#x27;hello&#x27;</span>);<span class="comment">// str = test</span></span><br><span class="line"><span class="comment">// 多个参数，不能省略箭头左侧的()符号，多条语句，不能省略箭头右侧的`&#123;&#125;`符号，不能省略return关键字</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun3</span> = (<span class="params">age,sex</span>) =&gt; &#123;<span class="keyword">let</span> obj = &#123;age, sex&#125;; <span class="keyword">return</span> obj&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun3</span>(<span class="number">18</span>,<span class="string">&quot;男&quot;</span>));<span class="comment">// &#123;age: 18, sex: &#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-扩展运算符"><a href="#3-6-扩展运算符" class="headerlink" title="3.6 扩展运算符"></a>3.6 扩展运算符</h3><p>扩展运算符就是使用<code>...变量名</code>作为变量，在特定场景下具有收集和扩展的功能。</p><p>使用扩展运算符的收集功能可以实现可变参数，必须将可变参数放在参数列表最后的位置：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a,b,...c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">// 1 2 [3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>使用扩展运算符的扩展功能可以更加方便的操作数组：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);<span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>还可以将伪数组转为真数组：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> arr = [...home];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// HTMLCollection [div]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [div]</span></span><br></pre></td></tr></table></figure><h3 id="3-7-参数默认值"><a href="#3-7-参数默认值" class="headerlink" title="3.7 参数默认值"></a>3.7 参数默认值</h3><p>在定义函数时，支持设置参数的默认值，当没有传入参数时，会使用定义的默认值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">str = <span class="string">&quot;test&quot;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>, str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();<span class="comment">// hello test</span></span><br></pre></td></tr></table></figure><h3 id="3-8-Symbol"><a href="#3-8-Symbol" class="headerlink" title="3.8 Symbol"></a>3.8 Symbol</h3><p>新增Symbol原始数据类型，用于解决命名冲突的问题，主要用于需要保证属性名唯一的场景。</p><p>Symbol属于第七种数据类型，其他六种是：Object，String，Number，Boolean，Null，Undefined。</p><p>创建Symbol类型的数据，因为不是对象，所以不能使用new关键字：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);<span class="comment">// Symbol()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s);<span class="comment">// symbol</span></span><br></pre></td></tr></table></figure><p>支持在创建时传入参数作为标识符，支持其他类型数据，包括对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);<span class="comment">// Symbol(test)</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);<span class="comment">// Symbol([object Object])</span></span><br></pre></td></tr></table></figure><p>在ES10中，增加了<code>description</code>属性，用于获取传入的参数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>);<span class="comment">// test</span></span><br></pre></td></tr></table></figure><p>即使创建了相同的Symbol数据，两个数据也是不同的，这就是Symbol的唯一性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>() == <span class="title class_">Symbol</span>());<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;test&quot;</span>) == <span class="title class_">Symbol</span>(<span class="string">&quot;test&quot;</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果想要创建相同的数据，需要使用<code>Symbol.for()</code>创建：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span> === <span class="title class_">Symbol</span>.<span class="title function_">for</span>());<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">for</span>() === <span class="title class_">Symbol</span>.<span class="title function_">for</span>());<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span> === <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>));<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>) === <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过<code>Symbol.for()</code>创建数据时会先从全局按照参数获取，如果获取到了就返回数据，如果没有获取到就会创建数据并注册到全局。</p><p>使用<code>Symbol.keyFor()</code>获取全局中的参数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s));<span class="comment">// test</span></span><br></pre></td></tr></table></figure><p>将Symbol作为对象的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [name]: <span class="string">&quot;test&quot;</span><span class="comment">// 在创建对象时创建Symbol数据作为属性</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> sex = <span class="title class_">Symbol</span>(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">obj[sex] = <span class="string">&#x27;男&#x27;</span>;<span class="comment">// 给对象手动设置Symbol数据作为属性</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="title class_">Symbol</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, age, &#123;value : <span class="number">18</span>&#125;);<span class="comment">// 通过defineProperty方法设置Symbol数据作为属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;Symbol(name): &#x27;test&#x27;, Symbol(sex): &#x27;男&#x27;, Symbol(age): 18&#125;</span></span><br></pre></td></tr></table></figure><p>虽然Symbol属性是共有属性，但是在遍历对象时，不会出现在<code>for</code>循环中，也不会被Object的<code>keys()</code>方法和<code>getOwnPropertyNames()</code>方法获取，同样也不会被<code>JSON.stringify()</code>返回。</p><p>可以通过Object的<code>getOwnPropertySymbols()</code>方法获取，只能获取Symbol属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>)]: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;sex&quot;</span>)]: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj));<span class="comment">// [Symbol(name), Symbol(sex)]</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>Reflect.ownKeys()</code>方法获取所有类型的属性名：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>)]: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;sex&quot;</span>)]: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj));<span class="comment">// [&#x27;age&#x27;, Symbol(name), Symbol(sex)]</span></span><br></pre></td></tr></table></figure><h3 id="3-9-Promise"><a href="#3-9-Promise" class="headerlink" title="3.9 Promise"></a>3.9 Promise</h3><p>引入Promise用于解决异步编程的问题，使用构造函数封装异步操作并可以获取其成功或失败的结果。</p><p>Promise对象代表一个异步操作，有三种状态：</p><ul><li>pending：进行中</li><li>fulfilled：已成功</li><li>rejected：已失败</li></ul><p>在执行完成后，Promise的状态会变成fulfilled（已成功）或者rejected（已失败），这种改变称为resolved（定型），并且一旦发生定型，结果就不会再次发生改变。</p><p>创建对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 异步操作</span></span><br><span class="line">  <span class="keyword">let</span> value;<span class="comment">// 返回值</span></span><br><span class="line">  <span class="keyword">let</span> error;<span class="comment">// 错误</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">true</span>;<span class="comment">// 异步操作结果</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);<span class="comment">// 异步操作成功</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);<span class="comment">// 异步操作失败</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调用<code>then()</code>方法执行操作：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);<span class="comment">// 得到异步操作成功的返回值</span></span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);<span class="comment">// 得到异步操作失败的返回值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调用<code>catch()</code>方法捕获异常：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reason);<span class="comment">// 得到异步操作异常的返回值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>相当于调用<code>then()</code>方法，属于<code>then()</code>方法的语法糖：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="literal">undefined</span>, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);<span class="comment">// 得到异步操作失败的返回值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-10-Iterator"><a href="#3-10-Iterator" class="headerlink" title="3.10 Iterator"></a>3.10 Iterator</h3><p>迭代器Iterator是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署了Iterator接口就可以完成遍历操作。</p><p>可以使用新的遍历命令<code>for-of</code>循环，部署了Iterator接口的数据接口可以通过<code>for-of</code>循环进行遍历。</p><p>和<code>for-in</code>循环相比，通过<code>for-of</code>循环的是value键值，而<code>for-in</code>循环的是index键名。</p><p>原生具备Iterator接口的数据，即不需要改动就可以使用<code>for-of</code>循环的有：Array、Arguments、Set、Map、String、TypedArray、NodeList。</p><p>非原生的数据可以通过自定义Iterator接口使用<code>for-of</code>循环。</p><p>原生Iterator接口：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>];</span><br><span class="line"><span class="comment">// for-in</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> names) &#123;</span><br><span class="line">  <span class="comment">// 0 张三</span></span><br><span class="line">  <span class="comment">// 1 李四</span></span><br><span class="line">  <span class="comment">// 2 王五</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index + <span class="string">&quot; &quot;</span> + names[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for-of</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> names) &#123;</span><br><span class="line">  <span class="comment">// 张三</span></span><br><span class="line">  <span class="comment">// 李四</span></span><br><span class="line">  <span class="comment">// 王五</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// iterator.next()</span></span><br><span class="line"><span class="keyword">let</span> iterator = names[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item = iterator.<span class="title function_">next</span>(); item.<span class="property">done</span> != <span class="literal">true</span>; item = iterator.<span class="title function_">next</span>()) &#123;</span><br><span class="line">  <span class="comment">// &#123;value: &#x27;张三&#x27;, done: false&#125;</span></span><br><span class="line">  <span class="comment">// &#123;value: &#x27;李四&#x27;, done: false&#125;</span></span><br><span class="line">  <span class="comment">// &#123;value: &#x27;王五&#x27;, done: false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br></pre></td></tr></table></figure><p>自定义Iterator接口：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="attr">home</span>: [<span class="string">&#x27;北京市&#x27;</span>, <span class="string">&#x27;北京市&#x27;</span>, <span class="string">&#x27;东城区&#x27;</span>],</span><br><span class="line">[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line"><span class="comment">// 索引变量</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 保存this</span></span><br><span class="line"><span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(index &lt; <span class="title class_">Object</span>.<span class="title function_">keys</span>(_this).<span class="property">length</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line"><span class="attr">value</span>: _this[<span class="title class_">Object</span>.<span class="title function_">keys</span>(_this)[index]],</span><br><span class="line"><span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下标自增</span></span><br><span class="line">index ++;</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line"><span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// iterator.next()</span></span><br><span class="line"><span class="keyword">let</span> iterator = person[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item = iterator.<span class="title function_">next</span>(); item.<span class="property">done</span> != <span class="literal">true</span>; item = iterator.<span class="title function_">next</span>()) &#123;</span><br><span class="line">  <span class="comment">// &#123;value: &#x27;张三&#x27;, done: false&#125;</span></span><br><span class="line">  <span class="comment">// &#123;value: Array(3), done: false&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br></pre></td></tr></table></figure><h3 id="3-11-Generator"><a href="#3-11-Generator" class="headerlink" title="3.11 Generator"></a>3.11 Generator</h3><p>生成器Generator是一种异步编程解决方案，语法行为与传统函数完全不同。</p><p>在创建时需要使用<code>*</code>符号创建，用于和普通函数区分：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用时返回的是迭代器Iterator对象，所以需要使用<code>next()</code>方法调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();<span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>在创建时，可以使用<code>yield</code>对函数中的内容进行分割，在调用<code>next()</code>方法执行时，会按照<code>yield</code>分割执行，并返回<code>yield</code>后面的值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;返回&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="comment">// &#123;value: 返回, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><p>在调用时，支持传入参数，需要在方法中接收<code>yield</code>的值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> param = <span class="keyword">yield</span> <span class="string">&#x27;返回&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印&quot;</span> + param);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="comment">// &#123;value: 返回, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;参数&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="3-12-Set"><a href="#3-12-Set" class="headerlink" title="3.12 Set"></a>3.12 Set</h3><p>新增Set对象用于存储不重复的数据列表，默认实现了Iterator接口，支持存储不同类型的数据。</p><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">// 使用add()方法添加</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s.<span class="title function_">add</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);<span class="comment">// Set(3) &#123;1, &#x27;2&#x27;, Array(3)&#125;</span></span><br><span class="line"><span class="comment">// 使用has()方法判断是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(arr));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 使用size查询数据个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>);<span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 使用forEach()方法遍历</span></span><br><span class="line">s.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));<span class="comment">// 1 2 (3) [3, 4, 5]</span></span><br><span class="line"><span class="comment">// 使用delete()方法删除</span></span><br><span class="line">s.<span class="title function_">delete</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);<span class="comment">// Set(2) &#123;1, &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 使用clear()方法删除所有数据</span></span><br><span class="line">s.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);<span class="comment">// Set(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-13-Map"><a href="#3-13-Map" class="headerlink" title="3.13 Map"></a>3.13 Map</h3><p>新增Map对象用于存储键值对，默认实现了Iterator接口，支持存储不同类型的键和值。</p><p>Map和Object一样，都可以存储对象的属性名和属性值，区别是Object的属性名只能是String类型或Symbol类型，而Map的键可以使任意类型。</p><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// 使用set()方法添加</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">m.<span class="title function_">set</span>(arr, arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">// Map(3) &#123;1 =&gt; 1, &#x27;2&#x27; =&gt; &#x27;2&#x27;, Array(3) =&gt; Array(3)&#125;</span></span><br><span class="line"><span class="comment">// 使用get()方法通过键获取值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(arr));<span class="comment">// (3) [3, 4, 5]</span></span><br><span class="line"><span class="comment">// 使用has()方法判断是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(arr));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 使用size查询键值对个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>);<span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 使用forEach()方法遍历</span></span><br><span class="line">m.<span class="title function_">forEach</span>(<span class="function">(<span class="params">k, v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(k + <span class="string">&#x27; = &#x27;</span> + v));<span class="comment">// 1 = 1 2 = 2 3,4,5 = 3,4,5</span></span><br><span class="line"><span class="comment">// 使用delete()方法删除</span></span><br><span class="line">m.<span class="title function_">delete</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">// Map(2) &#123;1 =&gt; 1, &#x27;2&#x27; =&gt; &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 使用clear()方法删除所有数据</span></span><br><span class="line">m.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">// Map(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-14-Class"><a href="#3-14-Class" class="headerlink" title="3.14 Class"></a>3.14 Class</h3><p>引入了类的概念，作为对象的模板，需要使用<code>class</code>关键字声明。</p><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">  <span class="comment">// 使用constructor关键字声明构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 声明对象方法</span></span><br><span class="line">  <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父类&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">home</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;地球&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用static关键字声明静态属性，不能通过对象调用，只能通过类调用</span></span><br><span class="line">  <span class="keyword">static</span> eat = <span class="string">&quot;食物&quot;</span>;</span><br><span class="line">  <span class="comment">// 通过set关键字定义设置属性的方法</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;设置年龄&quot;</span>, age);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过get关键字定义获取属性的方法</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取年龄&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用extends可以继承父类，自动拥有父类定义的属性和方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Human</span> &#123;</span><br><span class="line">  <span class="comment">// 创建子类的对象方法</span></span><br><span class="line">  <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;工作&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写父类的方法，默认调用的是子类重写的方法，使用super关键字调用父类的方法</span></span><br><span class="line">  <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子类&quot;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">home</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> <span class="title class_">Human</span>(<span class="string">&quot;人类&quot;</span>);</span><br><span class="line">h.<span class="title function_">hello</span>();<span class="comment">// 我是 人类</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h.<span class="property">name</span>);<span class="comment">// 人类</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h.<span class="property">eat</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Human</span>.<span class="property">eat</span>);<span class="comment">// 食物</span></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;工人&quot;</span>);</span><br><span class="line">w.<span class="title function_">hello</span>();<span class="comment">// 我是 工人</span></span><br><span class="line">w.<span class="title function_">work</span>();<span class="comment">// 工作</span></span><br><span class="line">w.<span class="title function_">test</span>();<span class="comment">// 子类 地球</span></span><br><span class="line">h.<span class="property">age</span> = <span class="number">100</span>;<span class="comment">// 设置年龄 100</span></span><br><span class="line">h.<span class="property">age</span>;<span class="comment">// 读取年龄</span></span><br></pre></td></tr></table></figure><h3 id="3-15-数值扩展"><a href="#3-15-数值扩展" class="headerlink" title="3.15 数值扩展"></a>3.15 数值扩展</h3><p>引入了二进制和八进制的新写法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0b100</span>);<span class="comment">// 4 二进制以0b开头，二进制100对应十进制4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0o100</span>);<span class="comment">// 64 八进制以0o开头，八进制100对应十进制64</span></span><br></pre></td></tr></table></figure><p>定义最小精度，其值接近于2.22×10^(-16)，即2.22乘以10的-16次方。</p><p>当无法准确的描述数值时，就会产生精度问题，比如无法通过二进制准确的表示0.1，再比如无法通过十进制表示1&#x2F;3，等等。</p><p>当两个数的差值小于Number.EPSILON时，就认为两个数值是相等的：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>);<span class="comment">// false</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(left - right) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>检测数值是否是有限数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1</span>/<span class="number">0</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>检测数值是否为NaN：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">NaN</span>));<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="literal">null</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>检测数值是否为整数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">1</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">1.1</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>将字符串转为整数和浮点数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&quot;123test456&quot;</span>));<span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&quot;0.123test456&quot;</span>));<span class="comment">// 0.123</span></span><br></pre></td></tr></table></figure><p>检测数值是整数、负数还是零：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">10</span>));<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>));<span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">10</span>));<span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>将数值的小数部分抹掉：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">1.1</span>));<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="3-16-对象方法扩展"><a href="#3-16-对象方法扩展" class="headerlink" title="3.16 对象方法扩展"></a>3.16 对象方法扩展</h3><p>判断两个值是否完全相等：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">10</span>, <span class="number">10</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>对象的合并，当旧对象中有新对象中没有的时候，会进行合并，否则会直接覆盖：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldObj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(oldObj, newObj));<span class="comment">// &#123;name: &#x27;李四&#x27;, sex: &#x27;男&#x27;, age: 18&#125;</span></span><br></pre></td></tr></table></figure><p>操作原型对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> human = &#123;</span><br><span class="line">  <span class="attr">eat</span>: <span class="string">&#x27;食物&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="attr">work</span>: <span class="string">&#x27;打工&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(worker.<span class="property">__proto__</span>);<span class="comment">// &#123;...&#125;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(worker, human);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(worker.<span class="property">__proto__</span>);<span class="comment">// &#123;eat: &#x27;食物&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(worker.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(worker));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="3-17-模块化"><a href="#3-17-模块化" class="headerlink" title="3.17 模块化"></a>3.17 模块化</h3><h4 id="3-17-1-说明"><a href="#3-17-1-说明" class="headerlink" title="3.17.1 说明"></a>3.17.1 说明</h4><p>模块化是指将一个大的程序文件拆成许多小的文件，然后进行组合。</p><p>优势：</p><ul><li>防止命名冲突：不同的模块之间可以使用相同名称的变量，彼此互不干扰。</li><li>代码复用：模块可以对外提供接口，相同的功能可以使用同一接口。</li><li>高维护性：模块之间独立运行，单个模块出现问题不会影响所有模块，模块支持单独升级。</li></ul><p>模块化规范比较：</p><div class="tabs" id="tab-tab-1"><ul class="nav-tabs"><li class="tab active"><a class="#tab-1-1">CommonJS</a></li><li class="tab"><a class="#tab-1-2">AMD</a></li><li class="tab"><a class="#tab-1-3">CMD</a></li><li class="tab"><a class="#tab-1-4">ES6</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1-1"><p>专用于服务器端，默认不支持在浏览器执行。</p><p>在服务器端使用，基于Node使用。<br>在浏览器端使用，使用Browserify编译打包JS文件，这个工具也是JS常用的打包工具。</p></div><div class="tab-pane" id="tab-1-2"><p>专用于浏览器端，模块的加载时异步的。</p><p>在浏览器端使用，基于Require.js使用。</p></div><div class="tab-pane" id="tab-1-3"><p>专用于浏览器端，模块的加载时异步的，并且在模块使用时才会加载和执行。</p><p>在浏览器端使用，基于Sea.js使用。</p></div><div class="tab-pane" id="tab-1-4"><p>专用于浏览器端。</p><p>在浏览器端使用，使用Babel将ES6编译为兼容ES5的代码，使用Browserify编译打包JS文件。</p></div></div></div><h4 id="3-17-2-导出方式"><a href="#3-17-2-导出方式" class="headerlink" title="3.17.2 导出方式"></a>3.17.2 导出方式</h4><p>使用<code>export</code>关键字将变量或方法导出。</p><p>分别导出，在JS文件中分别指定导出的变量或方法：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> hello = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统一导出，使用<code>export</code>关键字要导出的变量和方法集中导出：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;hello, test&#125;</span><br></pre></td></tr></table></figure><p>统一导出提供的并不是对象，所以导出的不是对象的简写形式，而是导出的标记，可以认为是名称。</p><p>默认导出，将要导出的变量和方法封装为对象：</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  hello, </span><br><span class="line">  test</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认导出提供的是对象，导出的内容是对象的简写形式，这一点和统一导出不同。</p><h4 id="3-17-3-导入方式"><a href="#3-17-3-导入方式" class="headerlink" title="3.17.3 导入方式"></a>3.17.3 导入方式</h4><p>使用<code>import</code>关键字将其他模块导出的变量或方法导入进来，同时设置<code>script</code>元素的<code>type</code>属性的值为<code>module</code>表示引入的是模块JS文件，并不是普通的JS文件。</p><p>全部导入，使用<code>*</code>将导出的全部变量和方法导入到页面：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> * <span class="keyword">as</span> test <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">hello</span>);</span></span><br><span class="line"><span class="language-javascript">test.<span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>命名导入，指定导入的变量和方法：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; hello, test &#125; <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(hello);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用命名导入可以使用分别导出和统一导出的变量和方法，不能直接使用默认导出的变量和方法。</p><p>默认导入，可以使用默认导出的变量和方法：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import * as test from &quot;./test.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(test.default.hello);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// test.default.test();</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">hello</span>);</span></span><br><span class="line"><span class="language-javascript">test.<span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果默认导出的只有一个变量或方法，那么默认导入的就是该变量或方法，不需要通过对象获取。</p><p>如果有大量模块需要引入，可以新建JS文件用于引入模块，然后将此文件引入到HTML文件：</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> test <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span>;</span><br></pre></td></tr></table></figure><p>在HTML文件中引入JS文件：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-ES7"><a href="#4-ES7" class="headerlink" title="4 ES7"></a>4 ES7</h2><h3 id="4-1-数组增强"><a href="#4-1-数组增强" class="headerlink" title="4.1 数组增强"></a>4.1 数组增强</h3><p>判断数组是否包含某个数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">includes</span>(<span class="number">1</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">includes</span>(<span class="number">4</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="4-2-指数操作符"><a href="#4-2-指数操作符" class="headerlink" title="4.2 指数操作符"></a>4.2 指数操作符</h3><p>引入<code>**</code>指数运算符，用来实现幂运算，功能与<code>Math.pow</code>结果相同：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> ** <span class="number">4</span>);<span class="comment">// 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">4</span>));<span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h2 id="5-ES8"><a href="#5-ES8" class="headerlink" title="5 ES8"></a>5 ES8</h2><h3 id="5-1-async和await"><a href="#5-1-async和await" class="headerlink" title="5.1 async和await"></a>5.1 async和await</h3><h4 id="5-1-1-async函数"><a href="#5-1-1-async函数" class="headerlink" title="5.1.1 async函数"></a>5.1.1 async函数</h4><p>async函数会将返回值封装为Promise对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// Promise &#123;&lt;fulfilled&gt;: undefined&#125;</span></span><br></pre></td></tr></table></figure><p>当函数执行成功时返回的是fulfilled状态的Promise对象，当函数执行失败时返回的是rejected状态的Promise对象。</p><p>当函数返回的是Promise对象时，不会再次封装，会将返回对象直接返回。</p><h4 id="5-1-2-await表达式"><a href="#5-1-2-await表达式" class="headerlink" title="5.1.2 await表达式"></a>5.1.2 await表达式</h4><p>await表达式必须写在async函数中，并且await右侧的表达式一般为Promise对象。</p><p>await返回的是Promise成功的值，需要使用手动捕获Promise失败的值。</p><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> promise;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// Promise &#123;&lt;fulfilled&gt;: undefined&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-对象方法扩展"><a href="#5-2-对象方法扩展" class="headerlink" title="5.2 对象方法扩展"></a>5.2 对象方法扩展</h3><p>获取对象的属性名和属性值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person));<span class="comment">// [&#x27;name&#x27;, &#x27;sex&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(person));<span class="comment">// [&#x27;test&#x27;, &#x27;男&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(person));<span class="comment">// [Array(2), Array(2)]</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="title class_">Object</span>.<span class="title function_">entries</span>(person);</span><br><span class="line"><span class="comment">// [&#x27;name&#x27;, &#x27;test&#x27;]</span></span><br><span class="line"><span class="comment">// [&#x27;sex&#x27;, &#x27;男&#x27;]</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function"><span class="params">obj</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj));</span><br></pre></td></tr></table></figure><p>获取对象属性信息：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// name: &#123;value: &#x27;test&#x27;, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="comment">// sex: &#123;value: &#x27;男&#x27;, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(person));</span><br></pre></td></tr></table></figure><h2 id="6-ES9"><a href="#6-ES9" class="headerlink" title="6 ES9"></a>6 ES9</h2><h3 id="6-1-Rest和Spread"><a href="#6-1-Rest和Spread" class="headerlink" title="6.1 Rest和Spread"></a>6.1 Rest和Spread</h3><p>rest参数与spread扩展运算符在ES6中已经引入，不过ES6中只针对于数组。</p><p>使用rest参数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function test(&#123;name, sex&#125;) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(name);</span></span><br><span class="line"><span class="comment">//   console.log(sex);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">&#123;...args&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用spread扩展运算符：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> attr1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> attr2 = &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> attr3 = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;...attr1, ...attr2, ...attr3&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// &#123;name: &#x27;张三&#x27;, sex: &#x27;男&#x27;, age: &#x27;18&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-正则扩展"><a href="#6-2-正则扩展" class="headerlink" title="6.2 正则扩展"></a>6.2 正则扩展</h3><h4 id="6-2-1-捕获分组"><a href="#6-2-1-捕获分组" class="headerlink" title="6.2.1 捕获分组"></a>6.2.1 捕获分组</h4><p>ES9允许使用符号<code>?&lt;name&gt;</code>获取捕获结果，可读性更强。</p><p>在ES9之前捕获结果，通过下标查看捕获分组，下标为0的元素是完整的匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 123 a4a</span></span><br><span class="line">  <span class="comment">// 123 a5a</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>], result[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ES9之后捕获结果：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?&lt;first&gt;123)(?&lt;last&gt;a.a)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 123 a4a</span></span><br><span class="line">  <span class="comment">// 123 a5a</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>.<span class="property">first</span>, result.<span class="property">groups</span>.<span class="property">last</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-反向断言"><a href="#6-2-2-反向断言" class="headerlink" title="6.2.2 反向断言"></a>6.2.2 反向断言</h4><p>通过正则表达式的<code>?=</code>符号进行正向断言，根据后面的判断是否返回前面的数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="string">&#x27;测试123正向456断言&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+(?=正向)/</span>;<span class="comment">// 根据后面的内容是否正向，返回前面的数字</span></span><br><span class="line"><span class="keyword">let</span> result = reg.<span class="title function_">exec</span>(test);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>]);<span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>通过正则表达式的<code>?&lt;=</code>符号进行反向断言，根据前面的判断是否返回后面的数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="string">&#x27;测试123反向456断言&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?&lt;=反向)\d+/</span>;<span class="comment">// 根据前面的内容是否反向，返回后面的数字</span></span><br><span class="line"><span class="keyword">let</span> result = reg.<span class="title function_">exec</span>(test);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>]);<span class="comment">// 456</span></span><br></pre></td></tr></table></figure><h4 id="6-2-3-dotAll模式"><a href="#6-2-3-dotAll模式" class="headerlink" title="6.2.3 dotAll模式"></a>6.2.3 dotAll模式</h4><p>使用<code>.</code>匹配除回车外的任何单字符，如果使用了<code>s</code>就可以匹配包括回车在内的任何单字符：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;</span></span><br><span class="line"><span class="string">    &lt;a&gt;这是第1个a标签&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;这是第1个p标签&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;</span></span><br><span class="line"><span class="string">    &lt;a&gt;这是第2个a标签&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;这是第2个p标签&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;a&gt;(.*?)&lt;\/a&gt;\s+&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>;<span class="comment">// 使用之前的方式，通过\s+过滤空格和换行，匹配两个标签中的内容</span></span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span> (result = reg.<span class="title function_">exec</span>(test)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>] + <span class="string">&#x27; &gt;&gt;&gt; &#x27;</span> + result[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s;<span class="comment">// 使用dotAll模式，通过s让.包含任何单字符，匹配两个标签中的内容</span></span><br><span class="line"><span class="keyword">while</span> (result = reg.<span class="title function_">exec</span>(test)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>] + <span class="string">&#x27; &gt;&gt;&gt; &#x27;</span> + result[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-ES10"><a href="#7-ES10" class="headerlink" title="7 ES10"></a>7 ES10</h2><h3 id="7-1-创建对象"><a href="#7-1-创建对象" class="headerlink" title="7.1 创建对象"></a>7.1 创建对象</h3><p>通过二维数组创建对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// &#123;name: &#x27;张三&#x27;, sex: &#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>通过Map创建对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// &#123;name: &#x27;张三&#x27;, sex: &#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>Object类的<code>fromEntries()</code>方法是<code>entries()</code>方法的反向操作。</p><h3 id="7-2-字符串扩展"><a href="#7-2-字符串扩展" class="headerlink" title="7.2 字符串扩展"></a>7.2 字符串扩展</h3><p>新增支持清除字符串空格的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27; hello &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimStart</span>());<span class="comment">// 清除左侧空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimEnd</span>());<span class="comment">// 清除右侧空格</span></span><br></pre></td></tr></table></figure><h3 id="7-3-数组扩展"><a href="#7-3-数组扩展" class="headerlink" title="7.3 数组扩展"></a>7.3 数组扩展</h3><p>将高维数组转为低维数组，支持设置向下转变的维度数目，默认向下转变1个维度：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>());<span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>());<span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">2</span>));<span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>在<code>map()</code>方法的基础上，增加了<code>flatMap()</code>方法，用于将结果向下维度转换处理：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">flatMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [10, 20]</span></span><br></pre></td></tr></table></figure><h3 id="7-4-Symbol扩展"><a href="#7-4-Symbol扩展" class="headerlink" title="7.4 Symbol扩展"></a>7.4 Symbol扩展</h3><p>支持在创建Symbol对象的时候传入描述内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>);<span class="comment">// 测试</span></span><br></pre></td></tr></table></figure><h2 id="8-ES11"><a href="#8-ES11" class="headerlink" title="8 ES11"></a>8 ES11</h2><h3 id="8-1-私有属性"><a href="#8-1-私有属性" class="headerlink" title="8.1 私有属性"></a>8.1 私有属性</h3><p>在属性前面添加<code>#</code>符号表示该属性是私有属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name;</span><br><span class="line">  #age;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.#age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);<span class="comment">// Person &#123;name: &#x27;张三&#x27;, #age: 18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.#age);<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="8-2-Promise扩展"><a href="#8-2-Promise扩展" class="headerlink" title="8.2 Promise扩展"></a>8.2 Promise扩展</h3><p>新增Promise的<code>allSettled()</code>静态方法，接收Promise数组作为入参，将结果封装为Promise返回，状态为成功，值为数组的每个Promise执行的状态和结果：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1result = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p1result) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;p1成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;p1失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2result = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p2result) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;p2成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;p2失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 方法永远返回成功</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2]).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;allSettled执行成功&quot;</span>);</span><br><span class="line">    <span class="comment">// &#123;status: &#x27;rejected&#x27;, reason: &#x27;p1失败&#x27;&#125;</span></span><br><span class="line">    <span class="comment">// &#123;status: &#x27;fulfilled&#x27;, value: &#x27;p2成功&#x27;&#125;</span></span><br><span class="line">    value.<span class="title function_">forEach</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result));</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;allSettled执行失败 &quot;</span> + error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 只要有一个失败，方法就返回失败</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;all执行成功&quot;</span>);</span><br><span class="line">    value.<span class="title function_">forEach</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result));</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="comment">// all执行失败 p1失败</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;all执行失败 &quot;</span> + error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>和Promise的<code>all()</code>静态方法不同，<code>allSettled()</code>方法不论数组里的结果是否成功，始终返回成功，<code>all()</code>会在数组里的结果存在失败时，返回失败。</p><h3 id="8-3-字符串扩展"><a href="#8-3-字符串扩展" class="headerlink" title="8.3 字符串扩展"></a>8.3 字符串扩展</h3><p>新增字符串<code>matchAll()</code>方法，用于正则表达式，其结果和正则表达式的<code>exec()</code>方法相同：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/g</span>;</span><br><span class="line"><span class="comment">// 使用match()方法</span></span><br><span class="line"><span class="keyword">var</span> matchResult = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matchResult);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123a5a&#x27;]</span></span><br><span class="line"><span class="comment">// 使用matchAll()方法</span></span><br><span class="line"><span class="keyword">var</span> matchAllResult = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">matchAll</span>(reg);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> r <span class="keyword">of</span> matchAllResult) &#123;</span><br><span class="line">  <span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line">  <span class="comment">// [&#x27;123a5a&#x27;, &#x27;123&#x27;, &#x27;a5a&#x27;, index: 6, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用matchAll()方法</span></span><br><span class="line"><span class="keyword">var</span> execResult;</span><br><span class="line"><span class="keyword">while</span>(execResult = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>)) &#123;</span><br><span class="line">  <span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line">  <span class="comment">// [&#x27;123a5a&#x27;, &#x27;123&#x27;, &#x27;a5a&#x27;, index: 6, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(execResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-可选链操作符"><a href="#8-4-可选链操作符" class="headerlink" title="8.4 可选链操作符"></a>8.4 可选链操作符</h3><p>使用<code>?.</code>可选链操作符可以代替繁琐的层级判断是否为空的操作：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 直接使用，如果不存在会报错</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">db</span>.<span class="property">url</span>);</span><br><span class="line">  <span class="comment">// 层级判断，存在才获取</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config &amp;&amp; config.<span class="property">cache</span> &amp;&amp; config.<span class="property">cache</span>.<span class="property">url</span>)</span><br><span class="line">  <span class="comment">// 简化操作，使用可选链操作符判断</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config?.<span class="property">cache</span>?.<span class="property">url</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(&#123;</span><br><span class="line">  <span class="attr">db</span>: &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;192.168.1.10&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="8-5-模块化扩展"><a href="#8-5-模块化扩展" class="headerlink" title="8.5 模块化扩展"></a>8.5 模块化扩展</h3><p>在导入模块时支持动态导入，可以实现按需加载模块，即在用到某个模块时再导入，而不是在加载时全部导入，可以提高加载效率。</p><p>使用<code>import()</code>方法传入文件路径即可导入指定文件，返回Promise对象，该对象的值是文件对应的导出的对象：</p><figure class="highlight html"><figcaption><span>test.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 全部导入</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import * as test from &quot;./test.js&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 动态导入</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span>(<span class="string">&quot;./test.js&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">test</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">hello</span>);</span></span><br><span class="line"><span class="language-javascript">    test.<span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-6-BigInt"><a href="#8-6-BigInt" class="headerlink" title="8.6 BigInt"></a>8.6 BigInt</h3><p>新增数据类型BigInt用于表示大整型数字：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大整型数字使用字母n作为数字结尾</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">1024n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);<span class="comment">// 1024n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> n);<span class="comment">// bigint</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(<span class="number">0</span>));<span class="comment">// 0n 支持将整型数字转为大整型数字，并且只支持转换整型数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用大整型数字解决大数字运算，只支持大整型数字之间的运算，需要先将整型数字转为大整型数字</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">1</span>);<span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">2</span>);<span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">1</span>));<span class="comment">// 9007199254740992n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">2</span>));<span class="comment">// 9007199254740993n</span></span><br></pre></td></tr></table></figure><h3 id="8-7-绝对全局对象"><a href="#8-7-绝对全局对象" class="headerlink" title="8.7 绝对全局对象"></a>8.7 绝对全局对象</h3><p>新增全局变量<code>globalThis</code>指向全局变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis);<span class="comment">// Window &#123;...&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了ECMAScript的基本知识，包括简介和历史版本以及新特性。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://momashanhe.com/posts/20240712/154239/"/>
    <id>https://momashanhe.com/posts/20240712/154239/</id>
    <published>2024-07-12T07:42:39.000Z</published>
    <updated>2025-02-24T02:23:28.414Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文学习了如何使用Web Work实现多线程的功能。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>在JavaScript中采用的是单线程机制，不需要考虑复杂的同步问题，但也无法同时处理两件任务，无法发挥计算能力。</p><p>为了满足多线程的需求，H5规范提供了JavaScript多线程的实现，这种技术称为Web Work。</p><p>Web Work的作用就是为JavaScript创造多线程环境，允许主线程创建Worker线程，将一些任务分配给后者在后台运行，主线程和Worker线程互不干扰，在Worker线程执行结束后会将结果返回给主线程。</p><p>Worker线程一旦创建成功就会运行，并且不会被主线程的交互动作打断，虽然有利于响应主线程的操作，但是长时间运行也会导致CPU资源的浪费，所以需要在使用后及时关闭Worker线程。</p><p>相比较在主线程执行函数，使用分线程函数会慢一些。分线程的优势是可以在不阻塞主线程的情况下，执行函数。</p><p>此外，使用Worker线程还有一些限制：</p><ul><li>DOM限制，Worker线程和主线程的this对象不一样，无法使用window对象，以及alert()等方法，只能使用navigator对象和location对象。</li><li>通信限制，Worker线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</li><li>兼容限制，不是所有的浏览器都支持。</li><li>跨域限制，不支持跨域加载JavaScript文件。</li></ul><p>即使通过Web Worker技术，也不能修改DOM，只有主线程可以修改，所以JavaScript单线程的本质并没有变化。</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><p>在主线程中使用构造函数创建Worker分线程，传入执行的JavaScript文件：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在主线程中给Worker对象的<code>onmessage</code>属性绑定函数，用于接收Worker分线程的消息：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">worker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主线程接收分线程返回的数据: &#x27;</span> + event.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主线程中调用Worker对象的<code>postMessage()</code>方法，给Worker分线程传输参数：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker.<span class="title function_">postMessage</span>(<span class="string">&#x27;I am main&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在分线程要执行的JavaScript文件中，使用<code>onmessage</code>属性接收主线程的信息，使用<code>postMessage()</code>方法给主线程传递结果：</p><figure class="highlight js"><figcaption><span>worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> onmessage = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主线程接收分线程返回的数据: &#x27;</span> + event.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">postMessage</span>(<span class="string">&#x27;I am worker&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在使用Worker分线程后，需要及时关闭：</p><ul><li>可以在主线程调用Worker对象的<code>terminate()</code>方法关闭：<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker.<span class="title function_">terminate</span>();</span><br></pre></td></tr></table></figure></li><li>在分线程要执行的JavaScript文件中调用<code>close()</code>方法关闭：<figure class="highlight js"><figcaption><span>worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">close</span>();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文学习了如何使用Web Work实现多线程的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>高级</title>
    <link href="https://momashanhe.com/posts/20240708/113151/"/>
    <id>https://momashanhe.com/posts/20240708/113151/</id>
    <published>2024-07-08T03:31:51.000Z</published>
    <updated>2025-02-24T02:23:54.957Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文总结了JS中易混淆的概念，并学习了JS的线程、事件、存储以及防抖和节流。</p><span id="more"></span><h2 id="1-数据类型的判断"><a href="#1-数据类型的判断" class="headerlink" title="1 数据类型的判断"></a>1 数据类型的判断</h2><h3 id="1-1-typeof"><a href="#1-1-typeof" class="headerlink" title="1.1 typeof"></a>1.1 typeof</h3><p>使用<code>typeof</code>关键字，得到字符串类型的返回结果：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;123&#x27;</span>);<span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);<span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">false</span>);<span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);<span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 对象|数组|日期|包装类型，均返回object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;<span class="attr">test</span>:<span class="number">123</span>&#125;);<span class="comment">// object</span></span><br><span class="line"><span class="comment">// 方法返回function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);<span class="comment">// function</span></span><br></pre></td></tr></table></figure><p>凡是通过对象的方式创建的变量，其使用<code>typeof</code>得到的都是<code>object</code>字符串。</p><p>另外，基本数据类型中的<code>null</code>使用<code>typeof</code>判断也会得到<code>object</code>字符串。</p><h3 id="1-2-instanceof"><a href="#1-2-instanceof" class="headerlink" title="1.2 instanceof"></a>1.2 instanceof</h3><p>使用<code>instanceof</code>关键字判断右侧显示调用的原型是否在左侧隐式调用的原型链上：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型，左侧非对象，没有原型链，直接返回false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>);<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>);<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>);<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// false</span></span><br><span class="line"><span class="comment">// 对象返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;<span class="attr">test</span>:<span class="number">123</span>&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 数组返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 日期返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() <span class="keyword">instanceof</span> <span class="title class_">Date</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 包装类型返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;123&#x27;</span>) <span class="keyword">instanceof</span> <span class="title class_">String</span>);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>) <span class="keyword">instanceof</span> <span class="title class_">Number</span>);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>) <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>);<span class="comment">// true Object.__proto__ == Function.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>);<span class="comment">// true Function.__proto__ == Function.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true Object.__proto__.__proto__ == Object.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true Function.__proto__.__proto__ == Object.prototype</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Func</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func <span class="keyword">instanceof</span> <span class="title class_">Func</span>);<span class="comment">// true func.__proto__ == Func.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true func.__proto__.__proto__ == Object.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Func</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>);<span class="comment">// true Func.__proto__ == Function.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Func</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true Func.__proto__.__proto__ == Object.prototype</span></span><br></pre></td></tr></table></figure><p>在创建对象时，会将显示调用赋值给隐式调用。在修改了显示调用的引用地址后，显示调用和隐式调用得到的原型对象将不再相同。</p><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2 函数"></a>2 函数</h2><h3 id="2-1-创建方式"><a href="#2-1-创建方式" class="headerlink" title="2.1 创建方式"></a>2.1 创建方式</h3><p>创建函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建匿名函数并赋值给变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建函数对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(this);&quot;</span>);</span><br></pre></td></tr></table></figure><p>创建构造函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建箭头函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">func</span> = (<span class="params"></span>) =&gt; &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-调用方式"><a href="#2-2-调用方式" class="headerlink" title="2.2 调用方式"></a>2.2 调用方式</h3><p>创建函数并调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 直接调用函数</span></span><br><span class="line"><span class="title function_">func</span>();</span><br><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用构造函数</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Func</span>();</span><br><span class="line"><span class="comment">// 创建对象方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">func</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用对象方法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>().<span class="title function_">func</span>();</span><br></pre></td></tr></table></figure><h3 id="2-3-回调函数"><a href="#2-3-回调函数" class="headerlink" title="2.3 回调函数"></a>2.3 回调函数</h3><p>回调函数在定义以后不需要主动调用，当某个事件触发时才会调用。</p><p>常见的回调函数：</p><ul><li>定时函数，包括使用<code>setTimeout()</code>方法和<code>setInterval()</code>方法传入的函数</li><li>DOM事件触发的函数，比如<code>onclick()</code>方法绑定的函数</li><li>AJAX请求回调函数</li><li>生命周期回调函数</li></ul><h2 id="3-this关键字"><a href="#3-this关键字" class="headerlink" title="3 this关键字"></a>3 this关键字</h2><p>任何函数本质上都是通过某个对象来调用的，所有函数内部都有一个this变量，它的值是调用函数的当前对象。</p><p>明确this的值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>();<span class="comment">// Window &#123;&#125; 直接调用函数，this指向window对象</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;console.log(this);&quot;</span>);</span><br><span class="line"><span class="title function_">func</span>();<span class="comment">// Window &#123;&#125; 直接调用函数对象，this指向window对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Func</span>();<span class="comment">// Func &#123;&#125; 调用构造函数，this指向新创建的对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">func</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>().<span class="title function_">func</span>();<span class="comment">// Person &#123;&#125; 调用对象方法，this指向调用方法的对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">func</span> = (<span class="params"></span>) =&gt; &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);&#125;;</span><br><span class="line"><span class="title function_">func</span>();<span class="comment">// Window &#123;&#125; 调用箭头函数，this指向定义函数的环境</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">func.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">String</span>());<span class="comment">// String &#123;&#x27;&#x27;&#125; 使用call和apply调用函数，this指向入参指定的对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// Window &#123;&#125; 在全局作用域中，this指向window对象</span></span><br></pre></td></tr></table></figure><h2 id="4-执行上下文和执行上下文栈"><a href="#4-执行上下文和执行上下文栈" class="headerlink" title="4 执行上下文和执行上下文栈"></a>4 执行上下文和执行上下文栈</h2><h3 id="4-1-执行上下文"><a href="#4-1-执行上下文" class="headerlink" title="4.1 执行上下文"></a>4.1 执行上下文</h3><p>代码按生命周期分为两种：</p><ul><li>全局代码：在全局任意位置有效</li><li>局部代码：仅在某段代码内有效，比如代码块、函数等，局部代码内可以使用全局代码</li></ul><p>执行上下文分为全局执行上下文和函数执行上下文两种。</p><p>全局执行上下文：</p><ul><li>在执行全局代码前将window确定为全局执行上下文</li><li>对全局数据进行预处理：<ol><li>将全局变量的声明提升，赋值为undefined，添加为window的属性</li><li>将全局函数添加为window的方法</li><li>将this对象赋值为window</li></ol></li><li>开始执行全局代码</li></ul><p>函数执行上下文：</p><ul><li>在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象</li><li>对局部数据进行预处理：<ol><li>将传入的实参赋值到函数定义的实参，添加为执行上下文的属性</li><li>对函数的arguments内部属性赋值实参列表，添加为执行上下文的属性</li><li>将局部变量的声明提升，赋值为undefined，添加为执行上下文的属性</li><li>将函数内声明的函数添加为执行上下文的方法</li><li>将this对象赋值为调用函数的对象</li></ol></li><li>开始执行函数体代码</li></ul><p>在计算代码执行产生的上下文时，函数每次被调用都会生成一个函数执行上下文，在代码执行时会生成一个全局执行上下文。</p><h3 id="4-2-执行上下文栈"><a href="#4-2-执行上下文栈" class="headerlink" title="4.2 执行上下文栈"></a>4.2 执行上下文栈</h3><p>在创建执行上下文之前，JavaScript引擎会创建一个栈来存储管理所有的执行上下文对象：</p><ol><li>在确定全局执行上下文后，将其压入到栈中</li><li>在创建函数执行上下文后，将其压入到栈中</li><li>在当前函数执行完后，将栈顶的对象移除</li><li>在所有代码执行完后，栈中只剩下全局执行上下文</li></ol><h2 id="5-作用域和作用域链"><a href="#5-作用域和作用域链" class="headerlink" title="5 作用域和作用域链"></a>5 作用域和作用域链</h2><h3 id="5-1-作用域"><a href="#5-1-作用域" class="headerlink" title="5.1 作用域"></a>5.1 作用域</h3><p>作用域是某段代码所在的区域，使用目的是为了隔离变量，不同的作用域之间，同名变量不会有冲突，比如覆盖。</p><p>按照代码的声明周期可以将作用域分为三种：</p><ul><li>全局作用域：全局代码区域</li><li>函数作用域：在函数中的代码区域</li><li>块作用域：在代码块中的区域，ES6之后才有这个概念</li></ul><p>相对于上下文来说，作用域是静止的，在编写代码时就确定了，作用域的确定时间要早于上下文的创建时间。</p><p>在统计作用域的数量时，每个函数作为一个函数作用域，整个代码作为一个全局作用域。在ES6以后，每个代码块是一个块作用域。</p><h3 id="5-2-作用域链"><a href="#5-2-作用域链" class="headerlink" title="5.2 作用域链"></a>5.2 作用域链</h3><p>作用域链是在发生函数嵌套时产生的，使用目的是为了查找变量，特别是当发生了变量冲突时确定变量的值。</p><p>在发生函数嵌套时，外层函数作为上级，内层函数作为下级，作用域链的查找方向是从下往上的。</p><h2 id="6-闭包"><a href="#6-闭包" class="headerlink" title="6 闭包"></a>6 闭包</h2><p>在发生函数嵌套时，并且内部函数引用了外部函数的变量或函数，就会在内部函数产生闭包：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inner</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure><p>闭包是在创建函数执行上下文时产生的对象，作为内部函数的属性，封装了在内部函数中使用的外部函数的变量或函数。</p><p>使用闭包的流程：</p><ul><li>执行内部函数定义时产生闭包：<br><img src="/@image/103001/002001-090816.jpg" alt="001-闭包产生"></li><li>在执行内部函数时，会将闭包对象作为函数执行上下文的变量：<br><img src="/@image/103001/002002-091808.jpg" alt="002-闭包使用"></li></ul><p>闭包的作用：</p><ol><li>延长局部变量的生命周期，局部变量在外部函数执行完后, 仍然存活在内存中</li><li>允许在外部函数之外，通过内部函数修改外部函数的局部变量</li></ol><p>闭包的生命周期：</p><ul><li>在执行内部函数定义时产生，即在创建内部函数执行上下文时产生</li><li>在内部函数被视为垃圾对象时死亡，即不存在指向内部函数的变量引用</li></ul><p>闭包会产生内存泄漏的可能，外部函数执行后，局部变量未能被马上释放：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(++num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inner = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">inner</span>();<span class="comment">// 1</span></span><br><span class="line"><span class="title function_">inner</span>();<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>解决办法：</p><ul><li>尽量少用闭包</li><li>在使用闭包后及时手动将内部函数的引用清空，释放局部变量：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(++num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inner = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">inner</span>();<span class="comment">// 1</span></span><br><span class="line">inner = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">inner</span>();<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="7-对象"><a href="#7-对象" class="headerlink" title="7 对象"></a>7 对象</h2><h3 id="7-1-创建"><a href="#7-1-创建" class="headerlink" title="7.1 创建"></a>7.1 创建</h3><p>创建对象的几种方式：</p><ul><li>直接创建：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">setName</span>: <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">setName</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;name: &#x27;李四&#x27;, setName: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li>通过Object构造函数创建：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">obj.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">setName</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">// &#123;name: &#x27;李四&#x27;, setName: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li>通过工厂模式创建：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">setName</span>: <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="title function_">createPerson</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">person.<span class="title function_">setName</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// &#123;name: &#x27;李四&#x27;, setName: ƒ&#125;</span></span><br></pre></td></tr></table></figure></li><li>通过自定义构造函数创建，推荐：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">__proto__</span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">person.<span class="title function_">setName</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">// Person &#123;name: &#x27;李四4&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-2-继承"><a href="#7-2-继承" class="headerlink" title="7.2 继承"></a>7.2 继承</h3><p>当需要在一个类中使用另一个类的属性和方法时，将没有相关属性和方法的类称为子类，将具有相关属性和方法的类称为父类，子类的属性和方法继承自父类。</p><p>使用原型链继承：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="string">&#x27;parent property&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">child</span> = <span class="string">&#x27;child property&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将父类的对象赋值给子类的显示调用的原型，这样子类的对象就可以通过隐式调用的原型访问父类定义的属性和方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="comment">// 子类显示调用的原型指向了父类的对象，其constructor属性也指向了父类的构造方法，所以还需要改为子类的构造方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line"><span class="comment">// 创建子类的实例</span></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="comment">// 通过子类调用父类的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">parent</span>);<span class="comment">// parent property</span></span><br><span class="line"><span class="comment">// 通过子类调用自身的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">child</span>);<span class="comment">// child property</span></span><br></pre></td></tr></table></figure><p>使用父类的构造方法继承：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用父类的构造方法，将父类的属性设置到子类的对象上</span></span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建子类的实例</span></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="comment">// 查看子类的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">name</span>);<span class="comment">// 张三</span></span><br></pre></td></tr></table></figure><p>组合继承，同时使用原型链和构造函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="string">&#x27;parent property&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">child</span> = <span class="string">&#x27;child property&#x27;</span>;</span><br><span class="line">  <span class="comment">// 调用父类的构造方法，将父类的属性设置到子类的对象上</span></span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将父类的对象赋值给子类的显示调用的原型，这样子类的对象就可以通过隐式调用的原型访问父类定义的属性和方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="comment">// 子类显示调用的原型指向了父类的对象，其constructor属性也指向了父类的构造方法，所以还需要改为子类的构造方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line"><span class="comment">// 创建子类的实例</span></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="comment">// 通过子类调用父类的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">parent</span>);<span class="comment">// parent property</span></span><br><span class="line"><span class="comment">// 通过子类调用自身的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">child</span>);<span class="comment">// child property</span></span><br></pre></td></tr></table></figure><h2 id="8-线程"><a href="#8-线程" class="headerlink" title="8 线程"></a>8 线程</h2><p>进程：</p><ul><li>进程是程序的一次执行，是程序在计算机中运行的实体。</li><li>进程是系统进行资源分配的最小单位，每个进程都有各自独立的内存空间，各个进程互不干扰。</li></ul><p>线程：</p><ul><li>线程是进程的子任务，是进程实际的运作单位。</li><li>线程是CPU调度的最小单位，线程有独立的栈空间和局部变量，但没有独立的内存空间，一个进程内的多个线程共享进程的存储空间。</li></ul><p>JavaScript采用的是单线程机制，作为浏览器脚本语言，主要用途是与用户互动以及操作DOM，使用单线程不需要考虑复杂的同步问题。</p><p>使用多线程的系统可以更好的利用CPU资源，提高CPU的运行效率，但也会因为需要频繁创建销毁线程导致占用了一部分性能。</p><p>线程池：</p><ul><li>线程池可以复用线程，减少线程创建和销毁的次数，减少了性能浪费，提高程序的运行效率。</li><li>线程池可以控制线程的最大并发数，避免过高的并发量导致系统卡死。</li></ul><h2 id="9-事件"><a href="#9-事件" class="headerlink" title="9 事件"></a>9 事件</h2><p>定时器的调用问题：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1秒后打印 &#x27;</span> + name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - time);</span><br><span class="line">&#125;, <span class="number">1000</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2秒后打印 &#x27;</span> + name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - time);</span><br><span class="line">&#125;, <span class="number">2000</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2000000000</span>; i++) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个定时函数不是在1秒后执行的，第二个定时函数不是在2秒后执行的，并且两个定时函数是同时执行的。</p><p>这是因为JavaScript是单线程的，定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行。</p><p>JavaScript引擎执行基本流程：</p><ul><li>执行初始化代码，包括对变量赋值、执行普通方法、执行代码、设置定时器、绑定监听事件、发送请求</li><li>执行回调函数，包括定时器回调、事件回调、请求回调</li></ul><p>事件管理模块：</p><ul><li>定时模块，处理定时任务绑定的回调函数</li><li>DOM模块，处理DOM元素绑定的回调函数</li><li>AJAX模块，处理请求返回触发的回调函数</li></ul><p>事件管理模型运转流程：</p><ul><li>在执行初始化代码时，将事件回调函数交给对应的模块管理</li><li>当事件发生时，管理模块会将回调函数及其数据添加到回调列队中</li><li>只有当初始化代码执行完后，才会遍历读取回调队列中的回调函数执行</li></ul><h2 id="10-存储"><a href="#10-存储" class="headerlink" title="10 存储"></a>10 存储</h2><p>WebStorage是一种新的浏览器存储机制，旨在克服传统Cookie存储方式的一些限制。</p><p>WebStorage包括LocalStorage和SessionStorage。</p><p>通用的API：</p><ul><li>setItem(key, value)：保存数据，如果键名已存在，则更新其对应的值。</li><li>getItem(key)：根据键名读取数据。</li><li>removeItem(key)：根据键名删除数据。</li><li>clear()：删除所有数据。</li><li>key(index)：获取某个索引位置的键名。</li></ul><h3 id="10-1-LocalStorage"><a href="#10-1-LocalStorage" class="headerlink" title="10.1 LocalStorage"></a>10.1 LocalStorage</h3><p>即本地存储，数据是持久化的，即使关闭浏览器窗口或浏览器后，数据也不会消失，除非主动删除。</p><p>存储数据大小通常为5MB，并且只能存储字符串类型的数据，复杂类型的需要转为JSON字符串存储。</p><p>适用于需要长期存储的数据，例如缓存静态资源、前端数据库存储介质等。</p><h3 id="10-2-SessionStorage"><a href="#10-2-SessionStorage" class="headerlink" title="10.2 SessionStorage"></a>10.2 SessionStorage</h3><p>即会话存储，数据是非持久化的，仅在本次会话期间（URL不变）有效，关闭浏览器窗口后数据会被销毁。</p><p>存储数据大小通常为5MB，并且只能存储字符串类型的数据，复杂类型的需要转为JSON字符串存储。</p><p>适用于存储会话级别的信息，例如用户在表单中输入的内容，以便在页面刷新后能够恢复。</p><h2 id="11-防抖和节流"><a href="#11-防抖和节流" class="headerlink" title="11 防抖和节流"></a>11 防抖和节流</h2><h3 id="11-1-防抖"><a href="#11-1-防抖" class="headerlink" title="11.1 防抖"></a>11.1 防抖</h3><p>通常事件触发之后，会立即执行相对应的函数，而防抖就是，事件触发之后，过一段时间才会触发相应的函数。如果事件不断的触发，执行函数会无限制的延后。</p><p>防抖可以确保函数在指定时间内最多执行一次，可以减少不必要的函数调用，提高性能。</p><p>防抖的基本思想：在事件触发时，设置一个定时器，在指定的延迟时间后执行函数。如果在这段时间内再次触发事件，则取消之前的定时器，并重新设置一个新的定时器。</p><p>防抖的应用场景：</p><ul><li>在输入内容时触发的检查，或者在输入内容时触发的显示建议。</li><li>在调整窗口时触发的resize事件。</li><li>在滚动窗口时触发的加载更多内容。</li><li>在点击按钮时触发的请求。</li></ul><p>防抖的简单实现：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">executedFunction</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">later</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">      <span class="title function_">func</span>(...args);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-2-节流"><a href="#11-2-节流" class="headerlink" title="11.2 节流"></a>11.2 节流</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文总结了JS中易混淆的概念，并学习了JS的线程、事件、存储以及防抖和节流。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>入门</title>
    <link href="https://momashanhe.com/posts/20240627/155926/"/>
    <id>https://momashanhe.com/posts/20240627/155926/</id>
    <published>2024-06-27T07:59:26.000Z</published>
    <updated>2025-02-24T02:23:46.077Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文介绍了JS中常用的概念、基础语法、对象以及两种对象模型。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><h3 id="1-1-是什么"><a href="#1-1-是什么" class="headerlink" title="1.1 是什么"></a>1.1 是什么</h3><p>JS全称：JavaScript。</p><p>JS是一种脚本语言，命名和Java没有任何关系，用于给网页设置行为，比如点击、弹窗等等。</p><p>官方文档地址：</p><ul><li>W3C官网：<a href="https://www.w3.org/">https://www.w3.org/</a></li><li>W3School：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn</a></li></ul><h3 id="1-2-发展历史"><a href="#1-2-发展历史" class="headerlink" title="1.2 发展历史"></a>1.2 发展历史</h3><p>JavaScript是由网景公司在1995年发明的，起初命名为LiveScript，后来由于SUN公司的介入更名为了JavaScript。</p><p>在1996年，微软公司在其最新的IE3浏览器中引入了自己对JavaScript的实现JScript。</p><p>于是在市面上存在两个版本的JavaScript，网景公司的JavaScript和微软的JScript，为了确保不同的浏览器上运行的JavaScript标准一致，几个公司定制了通用标准，名命为ECMAScript。</p><p>在一般情况下，会将这ECMAScript和JavaScript认作同一个意思，实际上JavaScript的含义要大一些，一个完整的JavaScript实现应该由以下三个部分构成：</p><ul><li>ECMAScript：通用的标准，通常简写为ES。</li><li>DOM：文档对象模型，操作网页。</li><li>BOM：浏览器对象模型，操作浏览器。</li></ul><p>严格来说JavaScript是指ECMAScript，本身不包含BOM和DOM，因为JavaScript运行在浏览器上，所以浏览器提供了BOM和DOM。</p><h2 id="2-基础"><a href="#2-基础" class="headerlink" title="2 基础"></a>2 基础</h2><h3 id="2-1-编写位置"><a href="#2-1-编写位置" class="headerlink" title="2.1 编写位置"></a>2.1 编写位置</h3><p>因为JS是运行在浏览器中的，因此需要在网页中编写JS代码。</p><p>和CSS类似，JS也有三种位置可以选择。</p><h4 id="2-1-1-行内脚本"><a href="#2-1-1-行内脚本" class="headerlink" title="2.1.1 行内脚本"></a>2.1.1 行内脚本</h4><p>直接写在元素内部，通过一些特殊的交互属性设置交互行为。</p><p>示例：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;点击测试&#x27;);&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式使用简单，但是功能比较少，并且和网页的结构耦合，不能体现出结构和行为分离的思想，也不利于维护，不建议使用这种方式。</p><p>说明：<code>alert()</code>是一个函数，可以将传入的参数通过弹窗显示在页面上。</p><h4 id="2-1-2-内部脚本"><a href="#2-1-2-内部脚本" class="headerlink" title="2.1.2 内部脚本"></a>2.1.2 内部脚本</h4><p>将JS提取出来，写在页面内部的<code>script</code>元素中。</p><p>示例：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;测试&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>理论上可以将<code>script</code>元素放在页面的任何位置，建议放到<code>head</code>元素中。另外，也可以省略<code>type</code>属性。</p><p>和行内样式相比，这种方式编写的结构和行为分离，样式也能复用，但也没有做到完全分离。</p><h4 id="2-1-3-外部脚本"><a href="#2-1-3-外部脚本" class="headerlink" title="2.1.3 外部脚本"></a>2.1.3 外部脚本</h4><p>将JS进一步提取，写在单独的JS文件中，在HTML页面中使用元素引用外部的JS文件。</p><p>创建JS文件，后缀为<code>.js</code>格式。示例：</p><figure class="highlight js"><figcaption><span>hello.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在HTML页面引用CSS文件。示例：</p><figure class="highlight html"><figcaption><span>hello.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./hello.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式可维护高，并且做到了结构和行为分离，也能被其他页面复用，建议使用这种方式。</p><h3 id="2-2-大小写敏感"><a href="#2-2-大小写敏感" class="headerlink" title="2.2 大小写敏感"></a>2.2 大小写敏感</h3><p>JavaScript是严格区分大小写的，在编写代码是要注意。</p><h3 id="2-3-注释"><a href="#2-3-注释" class="headerlink" title="2.3 注释"></a>2.3 注释</h3><p>JavaScript的注释分为单行注释和多行注释：</p><ul><li>单行注释：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释内容</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>多行注释：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释内容 */</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-语法"><a href="#3-语法" class="headerlink" title="3 语法"></a>3 语法</h2><h3 id="3-1-标识符"><a href="#3-1-标识符" class="headerlink" title="3.1 标识符"></a>3.1 标识符</h3><p>所谓标识符，就是指变量、函数、属性的名字，以及函数的参数。</p><p>标识符可以是按照下列格式规则组合起来的一或多个字符：</p><ul><li>第一个字符必须是字母、下划线<code>_</code>或美元符号<code>$</code>。</li><li>其他字符可以是字母、下划线、美元符号或数字。</li></ul><p>按照惯例，ECMAScript标识符采用驼峰命名法，但是JavaScript中的标识符不能是关键字和保留字符。</p><p>关键字：</p><table>  <tbody>    <tr>      <td>function</td>      <td>void</td>      <td>return</td>      <td>this</td>      <td>new</td>      <td>with</td>    </tr>    <tr>      <td>var</td>      <td>instanceof</td>      <td>typeof</td>      <td>switch</td>      <td>case</td>      <td>default</td>    </tr>    <tr>      <td>if</td>      <td>else</td>      <td>do</td>      <td>while</td>      <td>for</td>      <td>in</td>    </tr>    <tr>      <td>continue</td>      <td>break</td>      <td>try</td>      <td>catch</td>      <td>throw</td>      <td>finally</td>    </tr>    <tr>      <td>delete</td>      <td>debugger</td>      <td>true</td>      <td>false</td>      <td>null</td>      <td></td>    </tr>  </tbody></table><p>保留字符：</p><table>  <tbody>    <tr>      <td>import</td>      <td>export</td>      <td>package</td>      <td>public</td>      <td>protected</td>      <td>private</td>    </tr>    <tr>      <td>interface</td>      <td>class</td>      <td>enum</td>      <td>extends</td>      <td>implements</td>      <td>super</td>    </tr>    <tr>      <td>let</td>      <td>yield</td>      <td>static</td>      <td>const</td>      <td></td>      <td></td>    </tr>  </tbody></table><p>其他不建议使用的标识符：</p><table>  <tbody>    <tr>      <td>synchronize</td>      <td>volatile</td>      <td>abstract</td>      <td>final</td>      <td>native</td>      <td>transient</td>    </tr>    <tr>      <td>float</td>      <td>double</td>      <td>long</td>      <td>int</td>      <td>short</td>      <td>byte</td>    </tr>    <tr>      <td>char</td>      <td>boolean</td>      <td>throws</td>      <td>arguments</td>      <td>eval</td>      <td>goto</td>    </tr>    <tr>      <td>undefined</td>      <td>encodeURI</td>      <td>decodeURI</td>      <td>decodeURIComponent</td>      <td>encodeURICOmponent</td>      <td>isFinite</td>    </tr>    <tr>      <td>isNaN</td>      <td>parseFloat</td>      <td>parseInt</td>      <td>NaN</td>      <td>Number</td>      <td>String</td>    </tr>    <tr>      <td>Boolean</td>      <td>Object</td>      <td>Date</td>      <td>Array</td>      <td>JSON</td>      <td>RegExp</td>    </tr>    <tr>      <td>Infinity</td>      <td>Function</td>      <td>Math</td>      <td>Error</td>      <td>RangeError</td>      <td>SyntaxError</td>    </tr>    <tr>      <td>ReferenceError</td>      <td>TypeError</td>      <td>EvalError</td>      <td>URIError</td>      <td></td>      <td></td>    </tr>  </tbody></table><h3 id="3-2-数据类型"><a href="#3-2-数据类型" class="headerlink" title="3.2 数据类型"></a>3.2 数据类型</h3><p>数据类型决定了一个数据的特征，比如<code>123</code>和<code>&#39;123&#39;</code>，直观上看这两个数据都是123，但实际上前者是一个数字，而后者是一个字符串。</p><p>对于不同的数据类型我们在进行操作时会有很大的不同。JavaScript中一共有五种基本数据类型：</p><ul><li>字符串型（String）</li><li>数值型（Number）</li><li>布尔型（Boolean）</li><li>null型（Null）</li><li>undefined型（Undefined）</li></ul><p>这五种之外的类型都称为Object，所以总的来看JavaScript中共有六种数据类型。</p><p>使用<code>typeof</code>关键字检查数据可以得到数据的类型，返回结果是字符串类型：</p><ul><li>使用<code>typeof 字符串</code>判断会返回<code>string</code></li><li>使用<code>typeof 数值</code>判断会返回<code>number</code></li><li>使用<code>typeof 布尔型</code>判断会返回<code>boolean</code></li><li>使用<code>typeof null</code>判断会返回<code>object</code></li><li>使用<code>typeof undefined</code>判断会返回<code>undefined</code></li></ul><h4 id="3-2-1-String"><a href="#3-2-1-String" class="headerlink" title="3.2.1 String"></a>3.2.1 String</h4><p>在JavaScript中字符串使用String类型表示，都需要使用引号引起来，可以使用单引号，也可以使用双引号，但必须成对匹配，不能混搭使用。</p><p>在某些情况下，如果想要将特殊的字符作为字符串，需要使用转义字符<code>\</code>，也可以使用HTML中的实体：</p><ul><li>使用<code>&amp;lt;</code>表示<code>&lt;</code>，使用<code>&amp;gt;</code>表示<code>&gt;</code></li><li>使用<code>\&#39;</code>表示<code>&#39;</code>，使用<code>\&quot;</code>表示<code>&quot;</code></li><li>使用<code>\n</code>表示换行符</li><li>使用<code>\t</code>表示制表符，可以实现缩进的效果</li><li>使用<code>\\</code>表示<code>\</code></li></ul><p>转换为String有三种方式：</p><ul><li>使用<code>toString()</code>方法：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// number</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i.<span class="title function_">toString</span>());<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(m.<span class="title function_">toString</span>());<span class="comment">// 页面报错，Null类型的变量不能调用方法</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> m.<span class="title function_">toString</span>());<span class="comment">// 页面报错，Null类型的变量不能调用方法</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(n.<span class="title function_">toString</span>());<span class="comment">// 页面报错，Undefined类型的变量不能调用方法</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> n.<span class="title function_">toString</span>());<span class="comment">// 页面报错，Undefined类型的变量不能调用方法</span></span><br></pre></td></tr></table></figure></li><li>使用<code>String()</code>方法：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// number</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">String</span>(i));<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">String</span>(m));<span class="comment">// null</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">String</span>(m));<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">String</span>(n));<span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">String</span>(n));<span class="comment">// string</span></span><br></pre></td></tr></table></figure></li><li>拼接字符串：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// number</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i + <span class="string">&#x27;1&#x27;</span>);<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(m + <span class="string">&#x27;&#x27;</span>);<span class="comment">// null</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> m + <span class="string">&#x27;&#x27;</span>);<span class="comment">// string</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(n + <span class="string">&#x27;&#x27;</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> n + <span class="string">&#x27;&#x27;</span>);<span class="comment">// string</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-2-Number"><a href="#3-2-2-Number" class="headerlink" title="3.2.2 Number"></a>3.2.2 Number</h4><p>在JavaScript中所有的数值都是Number类型，包括整数和浮点数：</p><ul><li>使用<code>Number.MAX_VALUE</code>表示数值的最大值，使用<code>Number.MIN_VALUE</code>表示数值大于0的最小值。</li><li>使用<code>Infinity</code>表示超出数值最大值的正无穷，使用<code>-Infinity</code>表示负无穷。</li><li>使用<code>NaN</code>表示非数字的数值，即<code>Not a number</code>。</li></ul><p>在对<code>Infinity</code>和<code>-Infinity</code>以及<code>NaN</code>使用<code>typeof</code>判断时，也能得到<code>number</code>的结果。</p><p>有三个方法可以把变量转换为数值：</p><ul><li>使用<code>Number()</code>方法可以用来将变量转换为数值：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// string</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(i));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(a));<span class="comment">// 1 true会返回1，false会返回0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(a));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;1x&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(x));<span class="comment">// NaN 非数值字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(x));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(m));<span class="comment">// 0 null会返回0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(m));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(n));<span class="comment">// NaN undefined会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Number</span>(n));<span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li>使用<code>parseInt()</code>方法可以用来将字符串转换为整数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// string</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(i));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="string">&#x27;1.5&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(f));<span class="comment">// 1 开头为数值的字符串会返回开头的整数部分，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(f));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;1x&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(x));<span class="comment">// 1 开头为数值的字符串会返回开头的整数部分，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(x));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(b));<span class="comment">// NaN 非字符串会先转为字符串，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(b));<span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li>使用<code>parseFloat()</code>方法可以用来将字符串转换为浮点数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;1.5&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> i);<span class="comment">// string</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseFloat</span>(i));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;1.5x&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseFloat</span>(x));<span class="comment">// 1.5 开头为数值的字符串会返回开头的浮点数部分，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseFloat</span>(x));<span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseFloat</span>(b));<span class="comment">// NaN 非字符串会先转为字符串，开头非数值的字符串会返回NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="built_in">parseFloat</span>(b));<span class="comment">// number</span></span><br></pre></td></tr></table></figure></li></ul><p>在对浮点数进行计算时，可能会得到一个不精确的结果，所以在处理浮点数的运算时，需要使用特殊的方式保证得到的结果尽量精确，这里以后再说。</p><h4 id="3-2-3-Boolean"><a href="#3-2-3-Boolean" class="headerlink" title="3.2.3 Boolean"></a>3.2.3 Boolean</h4><p>在JavaScript中使用Boolean类型表示布尔型的数据，其取值只有<code>true</code>和<code>false</code>两种。</p><p>使用<code>Boolean()</code>方法可以用来将变量转换为布尔值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(i));<span class="comment">// false 非NaN且非0的数值会返回false，正数和负数会返回true，Infinity和-Infinity也会返回true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Boolean</span>(i));<span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(x));<span class="comment">// false 空字符串会返回false，非空字符串会返回true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Boolean</span>(x));<span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(m));<span class="comment">// false null会返回false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Boolean</span>(m));<span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(n));<span class="comment">// false undefined会返回false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="title class_">Boolean</span>(n));<span class="comment">// boolean</span></span><br></pre></td></tr></table></figure><h4 id="3-2-4-Null"><a href="#3-2-4-Null" class="headerlink" title="3.2.4 Null"></a>3.2.4 Null</h4><p>使用Null表示空对象。</p><p>可以显示的将对象赋值为<code>null</code>来强制将对象设置为Null类型：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(person);<span class="comment">// null</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> person);<span class="comment">// object</span></span><br></pre></td></tr></table></figure><h4 id="3-2-5-Undefined"><a href="#3-2-5-Undefined" class="headerlink" title="3.2.5 Undefined"></a>3.2.5 Undefined</h4><p>使用Undefined表示声明但未赋值的变量。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person;</span><br><span class="line"><span class="title function_">alert</span>(person);<span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> person);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h3><p>变量的作用是给某一个值或对象标注名称。</p><p>使用<code>var</code>关键字声明变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br></pre></td></tr></table></figure><p>对声明的变量进行赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在声明变量时赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>支持对多个变量同时声明和赋值：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, y, z = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>, n = <span class="number">2</span>, l = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-1-重复声明"><a href="#3-3-1-重复声明" class="headerlink" title="3.3.1 重复声明"></a>3.3.1 重复声明</h4><p>JavaScript允许对变量进行重复声明和赋值，也允许声明为不同的数据类型：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;i&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在ES6以后，还可以使用<code>let</code>声明变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>通过<code>var</code>声明的变量称为全局变量，支持修改值和类型，支持重复声明。通过<code>let</code>声明的变量称为局部变量，局部变量支持修改值和类型，但不支持重复声明，建议在代码块中使用。</p><h4 id="3-3-2-常量"><a href="#3-3-2-常量" class="headerlink" title="3.3.2 常量"></a>3.3.2 常量</h4><p>在ES6以后，使用<code>const</code>声明常量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>和<code>var</code>与<code>let</code>声明的变量相比，常量一经声明和赋值，就不再支持修改值和类型，也不支持重复声明。</p><h3 id="3-4-运算符"><a href="#3-4-运算符" class="headerlink" title="3.4 运算符"></a>3.4 运算符</h3><p>通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><p>优先级：</p><table>  <tbody>    <tr>      <td>. [] new</td>    </tr>    <tr>      <td>()</td>    </tr>    <tr>      <td>++ --</td>    </tr>    <tr>      <td>! ~</td>    </tr>    <tr>      <td>* / %</td>    </tr>    <tr>      <td>+ -</td>    </tr>    <tr>      <td><< >> >>></td>    </tr>    <tr>      <td>< <= > >=</td>    </tr>    <tr>      <td>== != === !===</td>    </tr>    <tr>      <td>&</td>    </tr>    <tr>      <td>^</td>    </tr>    <tr>      <td>|</td>    </tr>    <tr>      <td>&</td>    </tr>    <tr>      <td>^</td>    </tr>    <tr>      <td>|</td>    </tr>    <tr>      <td>&&</td>    </tr>    <tr>      <td>||</td>    </tr>    <tr>      <td>?:</td>    </tr>    <tr>      <td>= += -= *= /= %= <<= >>= >>>= &= ^= |=</td>    </tr>    <tr>      <td>,</td>    </tr>  </tbody></table><h4 id="3-4-1-算数运算符"><a href="#3-4-1-算数运算符" class="headerlink" title="3.4.1 算数运算符"></a>3.4.1 算数运算符</h4><p>在JavaScript中提供了以下几种算数运算符：</p><ul><li>使用<code>+</code>进行加法或拼接运算，如果拼接的是一个字符串，会将计算结果转为字符串</li><li>使用<code>-</code>进行减法运算，如果涉及数值，会将结果转为数值</li><li>使用<code>*</code>进行乘法运算，如果涉及数值，会将结果转为数值</li><li>使用<code>/</code>进行除法运算，如果涉及数值，会将结果转为数值</li><li>使用<code>%</code>进行取模运算</li></ul><p>自增和自减运算符：</p><ul><li>使用<code>++</code>进行自增运算，根据运算符位置分为前置<code>++i</code>和后置<code>i++</code>：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="title function_">alert</span>(++i);<span class="comment">// 1 前置获取的是自增后的值</span></span><br><span class="line"><span class="title function_">alert</span>(i++);<span class="comment">// 1 后置获取的是自增前的值</span></span><br><span class="line"><span class="title function_">alert</span>(i);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li>使用<code>--</code>进行自增运算，根据运算符位置分为前置<code>--i</code>和后置<code>i--</code>：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="title function_">alert</span>(--i);<span class="comment">// 1 前置获取的是自减后的值</span></span><br><span class="line"><span class="title function_">alert</span>(i--);<span class="comment">// 1 后置获取的是自减前的值</span></span><br><span class="line"><span class="title function_">alert</span>(i);<span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-4-2-逻辑运算符"><a href="#3-4-2-逻辑运算符" class="headerlink" title="3.4.2 逻辑运算符"></a>3.4.2 逻辑运算符</h4><p>在JavaScript中提供了以下三种逻辑运算符：</p><ul><li>使用<code>!</code>表示逻辑非，用于对布尔值进行取反，对于非布尔值的变量会先将其转换为布尔值再取反。</li><li>使用<code>&amp;&amp;</code>表示逻辑与，只有两个值都为true时，整个运算为true，返回第二个值。该运算符属于短路与，当第一个值为false时，整个运算为false，返回第一个值，不会判断第二个值。</li><li>使用<code>||</code>表示逻辑或，只有两个值都为false时，整个运算为false，返回第二个值。该运算符属于短路或，当第一个值为true时，整个运算为true，返回第一个值，不会判断第二个值。</li></ul><h4 id="3-4-3-赋值运算符"><a href="#3-4-3-赋值运算符" class="headerlink" title="3.4.3 赋值运算符"></a>3.4.3 赋值运算符</h4><p>在JavaScript中使用<code>=</code>进行赋值运算，可以使用简写：</p><ul><li>使用<code>+=</code>先计算后赋值，<code>i += 5</code>等同<code>i = i + 5</code></li><li>使用<code>-=</code>先计算后赋值，<code>i -= 5</code>等同<code>i = i - 5</code></li><li>使用<code>*=</code>先计算后赋值，<code>i *= 5</code>等同<code>i = i * 5</code></li><li>使用<code>/=</code>先计算后赋值，<code>i /= 5</code>等同<code>i = i / 5</code></li><li>使用<code>%=</code>先计算后赋值，<code>i %= 5</code>等同<code>i = i % 5</code></li></ul><h4 id="3-4-4-比较运算符"><a href="#3-4-4-比较运算符" class="headerlink" title="3.4.4 比较运算符"></a>3.4.4 比较运算符</h4><p>通过比较运算符可以比较两个变量的大小关系：</p><ul><li>使用<code>&gt;</code>大于号判断左侧的变量是否大于右侧的变量，成立返回true，否则返回false。</li><li>使用<code>&lt;</code>小于号判断左侧的变量是否小于右侧的变量，成立返回true，否则返回false。</li><li>使用<code>==</code>等号判断两侧的变量是否相等，如果类型不一样，会先进行自动类型转换再比较，相等返回true，否则返回false。</li><li>使用<code>===</code>全等号判断两侧的变量是否相等，相等返回true，否则返回false。不会进行自动类型转换。</li><li>使用<code>!=</code>不等号判断两侧的变量是否不等，如果类型不一样，会先进行自动类型转换再比较，不等返回true，否则返回false。</li><li>使用<code>!==</code>不全等号判断两侧的变量是否不等，不等返回true，否则返回false。不会进行自动类型转换。</li></ul><p>对于非数值的变量进行比较判断时，会将变量转换为数值再比较，但当两侧的变量都是字符串时，会根据字符串的Unicode编码进行比较。</p><h4 id="3-4-5-条件运算符"><a href="#3-4-5-条件运算符" class="headerlink" title="3.4.5 条件运算符"></a>3.4.5 条件运算符</h4><p>条件运算符也称为三元运算符，语法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件表达式?语句<span class="number">1</span>:语句<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>运算逻辑：</p><ul><li>条件运算符在执行时，首先对条件表达式进行求值。</li><li>如果该值为true，则执行语句1，并返回执行结果。如果该值为false，则执行语句2，并返回执行结果。</li><li>如果条件表达式的求值结果是一个非布尔值，会将其转换为布尔值然后再运算。</li></ul><h4 id="3-4-6-移位运算符"><a href="#3-4-6-移位运算符" class="headerlink" title="3.4.6 移位运算符"></a>3.4.6 移位运算符</h4><p>移位运算符一般用于数值类型的变量，作用在数值补码的所有位，按位运算：</p><ul><li>使用<code>&amp;</code>进行按位与运算，两个数值的相对位都为1，结果的对应位为1，否则结果的对应位为0</li><li>使用<code>|</code>进行按位或运算，两个数值的相对位都为0，结果的对应位为0，否则结果的对应位为1</li><li>使用<code>^</code>进行按位异或运算，两个数值的相对位不相同，结果的对应位为1，否则结果的对应位为0</li><li>使用<code>~</code>进行按位非运算，对数值的每位都进行反转</li><li>使用<code>&lt;&lt;</code>进行带符号左移运算，每位左移，右边补0。</li><li>使用<code>&gt;&gt;</code>进行带符号右移运算，每位右移，左边补0，符号位使用原来的。</li><li>使用<code>&gt;&gt;&gt;</code>进行无符号右移运算，每位右移，左边补0，符号位补0。</li></ul><p>移位运算改变的是数值的补码。对于正数来说，数值的原码是其补码。对于负数来说，数值的反码+1是其补码。</p><h3 id="3-5-语句和代码块"><a href="#3-5-语句和代码块" class="headerlink" title="3.5 语句和代码块"></a>3.5 语句和代码块</h3><p>表达式和运算符类似于单词和短语，语句是一条完整的命令，通常使用<code>;</code>结尾。</p><p>可以使用<code>&#123;&#125;</code>将多条语句包裹起来，称为代码块，只具有分组和排版的作用，没有其他意义。</p><h3 id="3-6-条件语句"><a href="#3-6-条件语句" class="headerlink" title="3.6 条件语句"></a>3.6 条件语句</h3><h4 id="3-6-1-if-else语句"><a href="#3-6-1-if-else语句" class="headerlink" title="3.6.1 if-else语句"></a>3.6.1 if-else语句</h4><p>如果if中的条件成立，返回布尔值为true，则执行if后面代码块里的操作语句，否则执行else后面代码块里的操作语句：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">  条件成立的操作</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  条件不成立的操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在if和else后面的代码块中，支持嵌套其他语句，如果嵌套的还是if-else语句，可以简写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">  条件<span class="number">1</span>成立的操作语句</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">  条件<span class="number">1</span>不成立但条件<span class="number">2</span>成立的操作语句</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  条件<span class="number">1</span>和条件<span class="number">2</span>都不成立的操作语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-2-switch-case语句"><a href="#3-6-2-switch-case语句" class="headerlink" title="3.6.2 switch-case语句"></a>3.6.2 switch-case语句</h4><p>也称为条件分支语句，会将switch后面的值同每个case后面的值相比较，相等就执行case后面的操作语句：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (值) &#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    操作语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    操作语句<span class="number">2</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    操作语句<span class="number">3</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    操作语句</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的break用于终止判断，如果没有break会在执行完当前case的操作语句后，继续判断后面case的值，直到遇到break或者判断结束。</p><p>如果所有switch的值和case后面的值都不相等，则执行default后面的操作语句。</p><h3 id="3-7-循环语句"><a href="#3-7-循环语句" class="headerlink" title="3.7 循环语句"></a>3.7 循环语句</h3><p>不管使用那种循环语句，都需要在适当位置跳过循环和终止循环：</p><ul><li>跳过循环：跳过本次循环，不执行后面的操作语句，直接进行条件判断，进行下一次循环，使用continue实现，一般在条件语句中使用：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">循环操作语句代码块 &#123;</span><br><span class="line">  操作语句<span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  操作语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>终止循环：跳出循环，终止整个循环的执行，执行循环后面的代码，使用break实现，一般在条件语句中使用：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">循环操作语句代码块 &#123;</span><br><span class="line">  操作语句<span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  操作语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-7-1-while语句"><a href="#3-7-1-while语句" class="headerlink" title="3.7.1 while语句"></a>3.7.1 while语句</h4><p>如果while后面的条件成立，则执行代码块中的操作语句，执行后重复判断是否成立，如果成立，则重复执行操作语句，只有当不成立时才终止循环：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">  条件成立的操作语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以使用do-while语句，这种方式会先执行操作语句，然后再循环判断条件是否成立，以及循环执行操作语句，最终终止循环：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  条件成立的操作语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br></pre></td></tr></table></figure><p>相比较而言，while语句会先判断再执行，do-while语句会先执行再判断，能够保证至少执行一次操作语句。</p><p>但不管使用那种循环语句，都需要做好终止循环的判断逻辑，否则会导致死循环，严重情况会导致系统没有足够的资源而崩溃。</p><h4 id="3-7-2-for语句"><a href="#3-7-2-for语句" class="headerlink" title="3.7.2 for语句"></a>3.7.2 for语句</h4><p>使用for语句可以更加明显的设置循环终止条件，但因此也显得比较繁琐：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">  条件成立的操作语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先执行初始化语句，可以省略，将初始化语句放在for循环前面执行。然后判断条件是否成立，可以省略，但需要在操作语句中控制终止循环的条件，类似while语句，否则会导致死循环。如果条件成立，会执行操作语句，否则终止循环。在操作语句执行结束后，执行更新语句，对循环条件更新，并循环判断条件是否成立，如果成立则循环执行操作语句，否则终止循环。</p><p>除了for语句代码块中的操作语句外，其他三个部分都是可以省略的，省略后就类似while语句了，需要手动控制循环。</p><h3 id="3-8-嵌套循环"><a href="#3-8-嵌套循环" class="headerlink" title="3.8 嵌套循环"></a>3.8 嵌套循环</h3><p>循环语句支持嵌套，在一个循环语句中支持嵌套另一个循环语句。</p><p>使用continue和break可以处理当前循环语句的循环逻辑，如果想处理上层循环语句的循环逻辑，需要配合label标签使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">label1</span>:</span><br><span class="line"><span class="keyword">for</span>(初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">  循环<span class="number">1</span>的操作语句</span><br><span class="line">  <span class="attr">label2</span>:</span><br><span class="line">  <span class="keyword">for</span>(初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">    循环<span class="number">2</span>的操作语句</span><br><span class="line">    <span class="keyword">for</span>(初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">      循环<span class="number">3</span>的操作语句</span><br><span class="line">      <span class="keyword">break</span> label1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用label给循环打标签，在continue和break后面使用标签控制要操作的循环。示例：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大学数组</span></span><br><span class="line"><span class="keyword">var</span> universities = [<span class="string">&#x27;Peking University&#x27;</span>, <span class="string">&#x27;Tsinghua University&#x27;</span>];</span><br><span class="line"><span class="comment">// 学院数组</span></span><br><span class="line"><span class="keyword">var</span> colleges = [<span class="string">&#x27;College of Foreign Languages&#x27;</span>, <span class="string">&#x27;College of Mathematics&#x27;</span>, <span class="string">&#x27;College of Software&#x27;</span>];</span><br><span class="line"><span class="comment">// 专业数组</span></span><br><span class="line"><span class="keyword">var</span> departments = [];</span><br><span class="line">departments[<span class="number">0</span>] = [<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;French&#x27;</span>, <span class="string">&#x27;Russian&#x27;</span>];</span><br><span class="line">departments[<span class="number">1</span>] = [<span class="string">&#x27;Statistics&#x27;</span>];</span><br><span class="line">departments[<span class="number">2</span>] = [<span class="string">&#x27;Software Engineering&#x27;</span>];</span><br><span class="line"><span class="comment">// 循环大学的标签，命名规范同标识符</span></span><br><span class="line"><span class="attr">university</span>:</span><br><span class="line"><span class="comment">// 循环遍历大学</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> l = <span class="number">0</span>; l &lt; universities.<span class="property">length</span>; l++) &#123;</span><br><span class="line">  <span class="comment">// 循环学院的标签</span></span><br><span class="line">  <span class="attr">college</span>:</span><br><span class="line">  <span class="comment">// 循环遍历学院</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> m = <span class="number">0</span>; m &lt; colleges.<span class="property">length</span>; m++) &#123;</span><br><span class="line">    <span class="comment">// 循环专业的标签，因为默认continue和break处理的是当前循环，所以这个标签可以省略</span></span><br><span class="line">    <span class="attr">department</span>:</span><br><span class="line">    <span class="comment">// 循环遍历专业</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; departments[m].<span class="property">length</span>; n++) &#123;</span><br><span class="line">      <span class="comment">// 如果是英语专业则进行提示</span></span><br><span class="line">      <span class="keyword">if</span> (departments[m][n] == <span class="string">&#x27;Russian&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(universities[l] + <span class="string">&#x27;-&#x27;</span> + colleges[m] + <span class="string">&#x27;-&#x27;</span> + departments[m][n]);</span><br><span class="line">        <span class="comment">// 跳过遍历专业，等同于不使用标签</span></span><br><span class="line">        <span class="comment">// continue department;</span></span><br><span class="line">        <span class="comment">// 跳过遍历学院</span></span><br><span class="line">        <span class="comment">// continue college;</span></span><br><span class="line">        <span class="comment">// 跳过遍历大学</span></span><br><span class="line">        <span class="keyword">continue</span> university;</span><br><span class="line">        <span class="comment">// 终止遍历专业，等同于不使用标签</span></span><br><span class="line">        <span class="comment">// break department;</span></span><br><span class="line">        <span class="comment">// 终止遍历学院</span></span><br><span class="line">        <span class="comment">// break college;</span></span><br><span class="line">        <span class="comment">// 终止遍历大学</span></span><br><span class="line">        <span class="comment">// break university;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 记录已遍历的专业</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(universities[l] + <span class="string">&#x27;-&#x27;</span> + colleges[m] + <span class="string">&#x27;-&#x27;</span> + departments[m][n]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<code>console.log()</code>是一个函数，可以将传入的参数打印到页面的控制台上。</p><h2 id="4-对象"><a href="#4-对象" class="headerlink" title="4 对象"></a>4 对象</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>JavaScript中的数据类型有六种，包括五种基本数据类型和一种引用数据类型。</p><p>五种基本数据类型：</p><ul><li>String字符串</li><li>Number数值</li><li>Boolean布尔值</li><li>Null空值</li><li>Undefined未定义</li></ul><p>使用Object对象来表示引用类型的数据，这是一种复合的数据类型，可以保存多个不同数据类型的属性。</p><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><p>创建对象有两种方式：</p><ul><li>先创建，然后对属性赋值：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">student.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">student.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="comment">// 不能赋值特殊的属性名</span></span><br><span class="line"><span class="comment">// student.&#x27;1 2 3&#x27; = 123;</span></span><br><span class="line"><span class="comment">// 可以赋值特殊的属性名</span></span><br><span class="line">student[<span class="string">&#x27;1 2 3&#x27;</span>] = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></li><li>在创建时对属性赋值：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1 2 3&#x27;</span>:<span class="number">123</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>访问对象的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1 2 3&#x27;</span>:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span>);<span class="comment">// 张三</span></span><br><span class="line"><span class="comment">// 不能访问特殊的属性名</span></span><br><span class="line"><span class="comment">// console.log(student.&#x27;1 2 3&#x27;);</span></span><br><span class="line"><span class="comment">// 可以访问特殊的属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student[<span class="string">&#x27;1 2 3&#x27;</span>]);<span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>删除对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1 2 3&#x27;</span>:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// &#123; &quot;name&quot;: &quot;张三&quot;, &quot;sex&quot;: &quot;男&quot;, &quot;1 2 3&quot;: 123 &#125;</span></span><br><span class="line"><span class="keyword">delete</span> student[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">delete</span> student[<span class="string">&#x27;1 2 3&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// &#123; &quot;sex&quot;: &quot;男&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>在JavaScript中，对象的属性可以是任意类型的数据，包括对象的属性时另一个对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">student.<span class="property">friend</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// &#123; &quot;name&quot;: &quot;张三&quot;, &quot;sex&quot;: &quot;男&quot;, &quot;friend&quot;: &#123; &quot;name&quot;: &quot;李四&quot;, &quot;sex&quot;: &quot;男&quot; &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>可以通过<code>in</code>关键字判断对象是否存在指定属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">age</span>);<span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> student);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>可以使用for-in语句循环遍历对象的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> student) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性名 &#x27;</span> + attr);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性值 &#x27;</span> + student[attr]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-堆栈"><a href="#4-3-堆栈" class="headerlink" title="4.3 堆栈"></a>4.3 堆栈</h3><p>JavaScript在运行时数据是保存到栈内存和堆内存当中的。简单来说栈内存保存堆内存中对象的引用和基本类型数据，堆内存保存引用类型数据，也就是对象。</p><p>基本数据类型和引用数据类型的区别：</p><ul><li>对于基本数据类型的变量来说，在栈上创建栈内存用于存储数据，每个变量都是独立的栈内存，变量的修改互不影响：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line">m = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);<span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li><li>对于引用数据类型的变量来说，在堆上创建堆内存用于存储对象，在栈上创建栈内存用于存储堆内存中对象的引用，对具有相同引用的对象的修改会互相影响：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zs = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> student = zs;</span><br><span class="line">student.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zs.<span class="property">age</span>);<span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ul><p>在进行比较运算时的区别：</p><ul><li>在比较基本类型数据的时候，比较的是栈内存中的值。</li><li>在比较引用类型数据的时候，比较的是栈内存中的引用地址。即使两个对象有完全相同的属性，但因为在堆内存是两个对象，就导致引用地址不同，两个对象也不同：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> n = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m == n);<span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4-垃圾回收"><a href="#4-4-垃圾回收" class="headerlink" title="4.4 垃圾回收"></a>4.4 垃圾回收</h3><p>垃圾回收（GC，Garbage Collection），是一种回收不再使用的对象内存的机制。</p><p>当一个对象没有任何的变量或属性对它进行引用，会导致无法操作该对象，这种对象就是一个垃圾，垃圾对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理。</p><p>JavaScript拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，开发人员不需要也不能进行垃圾回收的操作，只需要将不再使用的对象设置为null即可：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="4-5-分类"><a href="#4-5-分类" class="headerlink" title="4.5 分类"></a>4.5 分类</h3><p>在JavaScript中可以将对象分为内部对象、宿主对象和自定义对象三种。</p><h4 id="4-5-1-内部对象"><a href="#4-5-1-内部对象" class="headerlink" title="4.5.1 内部对象"></a>4.5.1 内部对象</h4><p>内部对象包括String、Number、Boolean、Object、Function、Array、Date、Math、RegExp、Global，以及各种错误类对象，包括Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError。</p><p>其中Global和Math这两个对象又被称为内置对象，这两个对象在脚本程序初始化时被创建，不必实例化这两个对象。</p><h4 id="4-5-2-宿主对象"><a href="#4-5-2-宿主对象" class="headerlink" title="4.5.2 宿主对象"></a>4.5.2 宿主对象</h4><p>宿主对象就是执行JavaScript的环境提供的对象。</p><p>对于嵌入到网页中的JavaScript来说，其宿主对象就是浏览器提供的对象，所以又称为浏览器对象，如IE、Firefox等浏览器提供的对象。不同的浏览器提供的宿主对象可能不同，即使提供的对象相同，其实现方式也大相径庭，这会带来浏览器兼容问题，增加开发难度。</p><p>浏览器对象有很多，如window和document等等。</p><h4 id="4-5-3-自定义对象"><a href="#4-5-3-自定义对象" class="headerlink" title="4.5.3 自定义对象"></a>4.5.3 自定义对象</h4><p>顾名思义，就是开发人员自己定义的对象。JavaScript允许使用自定义对象，使应用及功能得到扩充。</p><h2 id="5-内部对象"><a href="#5-内部对象" class="headerlink" title="5 内部对象"></a>5 内部对象</h2><h3 id="5-1-函数"><a href="#5-1-函数" class="headerlink" title="5.1 函数"></a>5.1 函数</h3><h4 id="5-1-1-定义"><a href="#5-1-1-定义" class="headerlink" title="5.1.1 定义"></a>5.1.1 定义</h4><p>函数是封装了多条语句的代码块，这段代码块会让函数具有某种功能。</p><p>函数中的语句不会自动执行，需要在有需要的地方显示调用函数，在被调用时才会执行函数中的语句。</p><p>函数是一种Function类型的对象，使用<code>typeof</code>检查：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> fun);<span class="comment">// function</span></span><br></pre></td></tr></table></figure><p>当将函数赋值给对象的某个属性时，将这个属性称为方法，即对象的方法对应的类型是函数。</p><h4 id="5-1-2-使用"><a href="#5-1-2-使用" class="headerlink" title="5.1.2 使用"></a>5.1.2 使用</h4><p>创建函数的方式：</p><ul><li>使用普通函数，支持多个参数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test &#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>使用函数表达式，创建匿名函数，并将函数赋值给变量：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test &#x27;</span> + name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>使用函数的构造方法，支持多个参数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&quot;console.log(&#x27;test &#x27; + name);&quot;</span>);</span><br><span class="line"><span class="title function_">func</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>使用构造函数，支持多个参数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Func</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test &#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Func</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>函数的组成部分：</p><ul><li>函数名：用于显示调用函数，可以省略函数名使用变量名调用，也可以同时省略函数名和变量名使用函数自调用：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;)(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>入参：用于将数据传入到函数中进行处理，支持无参和有参，多个参数用<code>,</code>分隔，参数类型支持任意类型。在执行函数时会从左到右自动匹配参数，缺少的参数按照未定义处理：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fun</span>();<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li>返回值：用于获取函数处理的结果。使用<code>return</code>关键字返回结果，返回结果支持任意类型，无返回结果按照未定义处理：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(<span class="string">&#x27;hello&#x27;</span>));<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ul><p>使用匿名函数自调用（IIFE，Immediately Invoked Function Expression）的好处是隐藏了内部实现，不污染外部命名空间。</p><h4 id="5-1-3-作用域"><a href="#5-1-3-作用域" class="headerlink" title="5.1.3 作用域"></a>5.1.3 作用域</h4><p>作用域通常用于形容变量，指的是变量的有效范围。</p><p>在JavaScript中一共有两种作用域：</p><ul><li>全局作用域，在<code>script</code>元素内部声明的变量，而不是在某个方法内部声明的变量，都在全局作用域，这种变量称为全局变量。</li><li>局部作用域，在方法内部创建的变量，只在方法内部有效，这种变量称为局部变量。</li></ul><p>全局变量的特点：</p><ol><li>在页面打开时创建，在页面关闭时销毁。</li><li>可以直接使用由浏览器创建的window全局对象，代表浏览器的窗口，可以直接使用其属性和方法。</li><li>全局变量在页面的任意地方都可以访问。</li></ol><p>局部变量的特点：</p><ol><li>在方法调用时创建，在方法执行结束后销毁。</li><li>只能在方法内部使用。</li></ol><p>只有在方法内部使用关键字声明变量，该变量才是局部变量，否则就是全局变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// undefined 使用局部变量，声明提升但未初始化</span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sex);<span class="comment">// 男 未声明变量，使用全部变量</span></span><br><span class="line">  sex = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// 张三 全局变量未被修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sex);<span class="comment">// 女 全局变量被修改</span></span><br></pre></td></tr></table></figure><p>当全局变量和局部变量名称相同时，在方法中使用的是局部变量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// undefined 使用局部变量，声明提升但未初始化</span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// 张三 全局变量未被修改</span></span><br></pre></td></tr></table></figure><p>常用的全局函数：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对URI进行编码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;localhost:8080/test?name=test&#x27;</span>));<span class="comment">// localhost%3A8080%2Ftest%3Fname%3Dtest</span></span><br><span class="line"><span class="comment">// 对URI进行解码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;localhost%3A8080%2Ftest%3Fname%3Dtest&#x27;</span>));<span class="comment">// localhost:8080/test?name=test</span></span><br></pre></td></tr></table></figure><h4 id="5-1-4-声明提升"><a href="#5-1-4-声明提升" class="headerlink" title="5.1.4 声明提升"></a>5.1.4 声明提升</h4><p>在JavaScript中，函数及变量的声明都将被提升到函数的最顶部，变量可以先使用再声明。</p><p>在ES6引入let和const的声明方式后，只有var声明的变量才支持声明提升，并且使用函数表达式声明的函数变量也不支持声明提升。</p><p>声明提升只是将声明提前了，并没有将初始化的操作提前：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="5-1-5-内部属性"><a href="#5-1-5-内部属性" class="headerlink" title="5.1.5 内部属性"></a>5.1.5 内部属性</h4><p>在函数内部，有两个特殊的对象：</p><ul><li>arguments：该对象实际上是一个类数组对象，有数组的特性，但本质上是Object对象，用于保存函数的参数，同时该对象还有一个属性callee来表示当前函数。</li><li>this：引用的是一个对象，用来表示函数执行的上下文，一般是函数的调用者。根据函数调用方式的不同，引用对象也会有所不同。</li></ul><p>通过arguments对象可以获取传入的参数，即使函数没有定义入参：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">// Arguments []</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span> <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">// false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);<span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]);<span class="comment">// 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);<span class="comment">// 5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);<span class="comment">// function test() &#123;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span> == test);<span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>说明：<code>instanceof</code>关键字可以用来判断左侧的变量是否属于右侧的类型。</p><h4 id="5-1-6-构造函数"><a href="#5-1-6-构造函数" class="headerlink" title="5.1.6 构造函数"></a>5.1.6 构造函数</h4><p>构造函数就是一个普通的函数，创建方式和普通函数没有区别，不同的是，构造函数习惯上首字母大写：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用函数时，普通函数可以直接调用，构造函数需要使用<code>new</code>关键字调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, sex</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// &#123; &quot;name&quot;: &quot;张三&quot;, &quot;sex&quot;: &quot;男&quot; &#125; 构造函数调用</span></span><br><span class="line"><span class="keyword">var</span> student = <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);<span class="comment">// undefined 普通函数调用，this表示window对象，没有name属性</span></span><br></pre></td></tr></table></figure><p>也可以通过<code>instanceof</code>关键字判断是不是构造函数调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, sex</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Student</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;构造函数调用&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;普通函数调用&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);<span class="comment">// 构造函数调用</span></span><br><span class="line"><span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);<span class="comment">// 普通函数调用</span></span><br></pre></td></tr></table></figure><p>使用同一个构造函数创建的对象，称为一类对象。所以也将构造函数称为类，同时将通过构造函数创建的对象，称为该类的实例。</p><h4 id="5-1-7-原型对象"><a href="#5-1-7-原型对象" class="headerlink" title="5.1.7 原型对象"></a>5.1.7 原型对象</h4><p>JavaScript是一门面向对象的语言，而且它还是一个基于原型的面向对象的语言。</p><p>原型：</p><ul><li>所有函数都有<code>prototype</code>属性的对象，称为原型。</li><li>所有对象（包括原型和函数，函数也是对象）都有<code>__proto__</code>属性的对象，可以通过这个对象访问其构造方法的原型。</li><li>通过函数<code>prototype</code>属性获取原型的方式称为显示调用，通过对象<code>__proto__</code>属性获取原型的方式称为隐式调用。</li><li>默认情况下，原型是一个Object对象，该对象只包含<code>constructor</code>属性和<code>__proto__</code>属性：<br><img src="/@image/103001/001001-143122.jpg" alt="001-原型"></li></ul><p>说明：</p><ul><li>原型的<code>constructor</code>属性指向函数：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === func);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li>原型的<code>__proto__</code>属性在浏览器里显示为<code>[[Prototype]]</code>属性，对应Object的<code>prototype</code>属性：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><p>原型链：</p><ul><li>原型链又称为隐式原型链，隐式调用的原型会形成原型链，顶端是Object显示调用的原型，该原型如果继续通过隐式调用获取原型会返回null：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);<span class="comment">// null</span></span><br></pre></td></tr></table></figure></li><li>所有对象（包括原型和函数，函数也是对象）都是Object的实例，任何对象的原型链都能追溯到Object显示调用的原型：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li>所有方法（包括Object和Function）都是Function的实例，任何方法隐式调用的原型都是Function显示调用的原型：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><p>当访问对象的属性和方法时，首先在对象自身空间中寻找，如果没有，会在原型链上寻找，如果找不到会返回undefined：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;学生类&#x27;</span>;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.<span class="property">name</span> = <span class="string">&#x27;学生实例&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span>);<span class="comment">// 学生实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">age</span>);<span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">test</span>);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在调用<code>toString()</code>方法时，在没有重写的情况下，调用的实际上是Object的原型对象的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">toString</span>());<span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>在使用<code>in</code>关键字和for-in语句循环遍历对象的属性时，也会访问原型对象中的属性。</p><p>可以使用<code>hasOwnProperty()</code>方法判断对象自身是否包含指定属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;学生类&#x27;</span>;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.<span class="property">name</span> = <span class="string">&#x27;学生实例&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="5-1-8-函数对象方法"><a href="#5-1-8-函数对象方法" class="headerlink" title="5.1.8 函数对象方法"></a>5.1.8 函数对象方法</h4><p>当将函数作为对象赋值给变量时，这个对象即使函数对象，函数对象可以通过自身调用函数，也可以通过<code>call()</code>方法和<code>apply()</code>方法调用。</p><p>通过方法调用时，传入的第一个参数会被作为函数的调用者，即作为函数里的this对象：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();<span class="comment">// Window &#123;&#125;</span></span><br><span class="line">test.<span class="title function_">call</span>();<span class="comment">// Window &#123;&#125;</span></span><br><span class="line">test.<span class="title function_">apply</span>();<span class="comment">// Window &#123;&#125;</span></span><br><span class="line">test.<span class="title function_">call</span>(<span class="number">123</span>);<span class="comment">// Number &#123;123&#125;</span></span><br><span class="line">test.<span class="title function_">apply</span>(<span class="number">123</span>);<span class="comment">// Number &#123;123&#125;</span></span><br></pre></td></tr></table></figure><p>两个方法的区别在于对入参上的处理，第二个参数会作为入参：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params">first, last</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(first + <span class="string">&#x27; &#x27;</span> + last);</span><br><span class="line">&#125;</span><br><span class="line">test.<span class="title function_">call</span>(test, <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>);<span class="comment">// John Smith 入参是可变参数</span></span><br><span class="line">test.<span class="title function_">apply</span>(test, [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>]);<span class="comment">// John Smith 人参是数组</span></span><br></pre></td></tr></table></figure><h4 id="5-1-9-箭头函数"><a href="#5-1-9-箭头函数" class="headerlink" title="5.1.9 箭头函数"></a>5.1.9 箭头函数</h4><p>箭头函数是在ES6中添加的一种规范：</p><ul><li>省略了<code>function</code>关键字，箭头左侧表示入参，只有当入参只有一个时，才可以省略小括号</li><li>省略了<code>return</code>关键字，箭头右侧是返回语句，只有当函数直接返回表达式时，才可以省略大括号</li></ul><p>使用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">func</span> = (<span class="params">x</span>) =&gt; x * x;</span><br><span class="line"><span class="comment">// 使用普通函数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果返回值是对象，需要使用括号包裹：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">func</span> = (<span class="params">x</span>) =&gt; (&#123;<span class="attr">result</span>: x * x&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">func</span>(<span class="number">5</span>));<span class="comment">// &#123;result: 25&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-数组"><a href="#5-2-数组" class="headerlink" title="5.2 数组"></a>5.2 数组</h3><h4 id="5-2-1-定义"><a href="#5-2-1-定义" class="headerlink" title="5.2.1 定义"></a>5.2.1 定义</h4><p>数组也是对象的一种，数组是一种用于表达有顺序关系的数据的集合的语言结构。</p><p>数组和普通对象功能类似，也用来存储多个值。不同的是普通对象使用字符串作为属性名，而数组使用数字来作为索引操作元素。</p><p>索引是从0开始的整数，用于获取数组对应位置的数据。</p><p>数组可以存放任意类型的数据，可以在一个数组中存放不同类型的数据。</p><h4 id="5-2-2-使用"><a href="#5-2-2-使用" class="headerlink" title="5.2.2 使用"></a>5.2.2 使用</h4><p>创建数组有两种方式：</p><ul><li>先创建，然后插入数据：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr);<span class="comment">// object</span></span><br></pre></td></tr></table></figure></li><li>在创建时插入数据：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 也可以使用这种方式</span></span><br><span class="line"><span class="comment">// var arr = [1, 2, 3];</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr);<span class="comment">// object</span></span><br></pre></td></tr></table></figure></li></ul><p>删除数组数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 空, 3]</span></span><br></pre></td></tr></table></figure><p>访问数组数据：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>遍历数组数据：</p><ul><li>使用for-in循环遍历：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用forEach循环遍历：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">i, e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i + <span class="string">&#x27; &gt; &#x27;</span> + e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>数组的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span>);<span class="comment">// Array() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);<span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">__proto__</span>);<span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>数组的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 删除数组的最后一个元素，并返回删除的元素</span></span><br><span class="line"><span class="keyword">var</span> del = arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(del);<span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2]</span></span><br><span class="line"><span class="comment">// 向数组的末尾添加元素，并返回数组的新的长度</span></span><br><span class="line"><span class="keyword">var</span> len = arr.<span class="title function_">push</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len);<span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 删除数组的第一个元素，并返回删除的元素</span></span><br><span class="line"><span class="keyword">var</span> del = arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(del);<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [2, 4, 5]</span></span><br><span class="line"><span class="comment">// 向数组开头添加元素，并返回新的数组长度</span></span><br><span class="line"><span class="keyword">var</span> len = arr.<span class="title function_">unshift</span>(-<span class="number">2</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len);<span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 颠倒数组顺序</span></span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [5, 4, 2, -1, -2]</span></span><br><span class="line"><span class="comment">// 对数组元素进行排序，默认按照字母顺序</span></span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-1, -2, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 对数组元素进行排序，指定排序方式</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> m - n;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 选择指定范围的字符串，前闭后开，不改变原数组，第一个参数是起始位置，第二个参数是结束位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 空参选择全部</span></span><br><span class="line"><span class="keyword">var</span> sli = arr.<span class="title function_">slice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sli);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 一个参数，选择起始位置及其之后的元素</span></span><br><span class="line"><span class="keyword">var</span> sli = arr.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sli);<span class="comment">// [-1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 参数是负数则加上长度计算</span></span><br><span class="line"><span class="keyword">var</span> sli = arr.<span class="title function_">slice</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sli);<span class="comment">// [5]</span></span><br><span class="line"><span class="comment">// 两个参数，选择定位之间的元素</span></span><br><span class="line"><span class="keyword">var</span> sli = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sli);<span class="comment">// [-1, 2]</span></span><br><span class="line"><span class="comment">// 删除数组中的指定元素，并返回删除的元素，第一个参数是起始位置，第二个参数是删除数量，第三个及以后的参数是插入到起始位置之前的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [-2, -1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 空参不删除任何元素</span></span><br><span class="line"><span class="keyword">var</span> spli = arr.<span class="title function_">splice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spli);<span class="comment">// []</span></span><br><span class="line"><span class="comment">// 一个参数，删除起始位置的元素</span></span><br><span class="line"><span class="comment">// var spli = arr.splice(1);</span></span><br><span class="line"><span class="comment">// console.log(spli);// [-1, 2, 4, 5]</span></span><br><span class="line"><span class="comment">// 参数是负数则加上长度计算</span></span><br><span class="line"><span class="comment">// var spli = arr.splice(-1);</span></span><br><span class="line"><span class="comment">// console.log(spli);// [5]</span></span><br><span class="line"><span class="comment">// 两个参数，删除起始位置之后数量的元素</span></span><br><span class="line"><span class="comment">// var spli = arr.splice(1, 3);</span></span><br><span class="line"><span class="comment">// console.log(spli);// [-1, 2, 4]</span></span><br><span class="line"><span class="comment">// 两个参数，删除起始位置之后数量的元素，插入元素到起始位置之前</span></span><br><span class="line"><span class="comment">// var spli = arr.splice(1, 3, 0, 1);</span></span><br><span class="line"><span class="comment">// console.log(spli);// [-1, 2, 4]</span></span><br></pre></td></tr></table></figure><h3 id="5-3-日期"><a href="#5-3-日期" class="headerlink" title="5.3 日期"></a>5.3 日期</h3><p>在JavaScript中使用Date对象表示日期：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> now);<span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);<span class="comment">// Wed Jul 03 2024 10:30:10 GMT+0800 (中国标准时间)</span></span><br><span class="line">now = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1/31/2008&#x27;</span>);<span class="comment">// 入参支持MM/dd/yyyy日期格式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);<span class="comment">// Thu Jan 31 2008 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line">now = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1/31/2008 10:00:00&#x27;</span>);<span class="comment">// 入参支持MM/dd/yyyy HH:mm:ss日期时间格式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);<span class="comment">// Thu Jan 31 2008 10:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><p>日期的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="property">constructor</span>);<span class="comment">// ƒ Date() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="property">__proto__</span>);<span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>日期的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());<span class="comment">// 时间戳，获取从1970年1月1日至今所过的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getFullYear</span>());<span class="comment">// 2024 获取Date对象的年份</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDay</span>());<span class="comment">// 3 获取Date对象的星期，0表示周日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMonth</span>());<span class="comment">// 6 获取Date对象的月份，0表示1月</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDate</span>());<span class="comment">// 3 获取Date对象在月份的第几日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getHours</span>());<span class="comment">// 10 获取Date对象的小时，0表示0点和24点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMinutes</span>());<span class="comment">// 30 获取Date对象的分钟，0表示0分和60分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getSeconds</span>());<span class="comment">// 10 获取Date对象的秒数，0表示0秒和60秒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getMilliseconds</span>());<span class="comment">// 100 获取Date对象的毫秒</span></span><br></pre></td></tr></table></figure><h3 id="5-4-数学相关"><a href="#5-4-数学相关" class="headerlink" title="5.4 数学相关"></a>5.4 数学相关</h3><p>JavaScript为数学计算封装了一个Math对象，和其他的对象不同，Math不是一个构造函数，属于一个工具类，不用创建对象，里边封装了数学运算相关的属性和方法。</p><p>Math的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Math</span>);<span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">E</span>);<span class="comment">// 2.718... 获取算术常量e，即自然对数的底数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LN2</span>);<span class="comment">// 0.693... 获取2的自然对数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LN10</span>);<span class="comment">// 2.302... 获取10的自然对数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LOG2E</span>);<span class="comment">// 1.442... 获取以2为底的e的对数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">LOG10E</span>);<span class="comment">// 0.434... 获取以10为底的e的对数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);<span class="comment">// 3.141... 获取圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">SQRT1_2</span>);<span class="comment">// 0.707... 获取2的平方根的倒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">SQRT2</span>);<span class="comment">// 1.414... 获取2的平方根</span></span><br></pre></td></tr></table></figure><p>Math的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>));<span class="comment">// 1 获取绝对值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">1.2</span>));<span class="comment">// -1 向上取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">1.2</span>));<span class="comment">// -2 向下取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">1.2</span>));<span class="comment">// -1 四舍五入</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());<span class="comment">// 0.5 生成0到1的随机数，不包括0和1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 2 获取最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>));<span class="comment">// 0 获取最小值</span></span><br></pre></td></tr></table></figure><h3 id="5-5-包装类"><a href="#5-5-包装类" class="headerlink" title="5.5 包装类"></a>5.5 包装类</h3><p>JavaScript提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象：</p><ul><li>String：可以将基本数据类型字符串转换为String对象。</li><li>Number：可以将基本数据类型的数字转换为Number对象。</li><li>Boolean：可以将基本数据类型的布尔值转换为Boolean对象。</li></ul><p>在实际应用中不会使用基本数据类型的对象，如果使用基本数据类型的对象，因为对象在栈中存储的是对象的引用，所以在进行比较时会导致与预期不一致的结果：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="number">1</span>);<span class="comment">// true 基本数据类型之间的比较使用栈上的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>));<span class="comment">// true 基本数据类型与包装类之间的比较会发生自动拆箱，比较栈上的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>) == <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>));<span class="comment">// false 包装类之间的比较使用栈上的引用。</span></span><br></pre></td></tr></table></figure><h4 id="5-5-1-布尔值"><a href="#5-5-1-布尔值" class="headerlink" title="5.5.1 布尔值"></a>5.5.1 布尔值</h4><p>布尔值的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boo = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boo.<span class="property">constructor</span>);<span class="comment">// ƒ Boolean() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boo.<span class="property">__proto__</span>);<span class="comment">// Boolean &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>布尔值的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boo = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boo.<span class="title function_">valueOf</span>());<span class="comment">// true 获取原始值</span></span><br></pre></td></tr></table></figure><h4 id="5-5-2-数字"><a href="#5-5-2-数字" class="headerlink" title="5.5.2 数字"></a>5.5.2 数字</h4><p>数字的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="property">constructor</span>);<span class="comment">// ƒ Number() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="property">__proto__</span>);<span class="comment">// Number &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>);<span class="comment">// 5e-324</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);<span class="comment">// 1.7976931348623157e+308</span></span><br></pre></td></tr></table></figure><p>数字的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&#x27;1&#x27;</span>));<span class="comment">// false 判断指定参数是否为NaN，只有当参数是数字且为NaN才会返回true，参数非数字和非NaN的数字会返回false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1</span>));<span class="comment">// false 判断指定参数是否为无穷大</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">1</span>));<span class="comment">// true 判断指定参数是否为整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1.159</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>));<span class="comment">// 1.16 获取指定小数位数的字符串，采用四舍五入（银行家舍入）策略，无参会返回整数字符串，参数范围是1到100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1.615</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>));<span class="comment">// 1.61 不是严格的四舍五入，严格四舍五入可以使用Math.round()方法实现，或者缩放某个倍数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>).<span class="title function_">toFixed</span>(<span class="number">4</span>));<span class="comment">// 10.0000 精度不足时会进行补位，常用于需要统一精度的场景</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1.159</span>).<span class="title function_">toPrecision</span>(<span class="number">3</span>));<span class="comment">// 1.16 获取指定位数的字符串，采用四舍五入（银行家舍入）策略，无参会返回原数字字符串，参数范围是1到100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1.615</span>).<span class="title function_">toPrecision</span>(<span class="number">3</span>));<span class="comment">// 1.61 不是严格的四舍五入，严格四舍五入可以使用Math.round()方法实现，或者缩放某个倍数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0.159</span>).<span class="title function_">toPrecision</span>(<span class="number">2</span>));<span class="comment">// 0.16 整数部分为0时，指定位数不包括整数部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>).<span class="title function_">toPrecision</span>(<span class="number">6</span>));<span class="comment">// 10.0000 精度不足时会进行补位，常用于需要统一精度的场景</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>).<span class="title function_">valueOf</span>());<span class="comment">// 10 获取原始值</span></span><br></pre></td></tr></table></figure><h4 id="5-5-3-字符串"><a href="#5-5-3-字符串" class="headerlink" title="5.5.3 字符串"></a>5.5.3 字符串</h4><p>字符串的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">constructor</span>);<span class="comment">// ƒ String() &#123;[native code]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);<span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">__proto__</span>);<span class="comment">// String &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>字符串的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;l&#x27;</span>));<span class="comment">// 2 获取首次出现的位置，找不到返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;l&#x27;</span>, <span class="number">3</span>));<span class="comment">// 3 获取首次出现的位置，从指定位置开始，包含指定位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;l&#x27;</span>));<span class="comment">// 3 获取最后出现的位置，从右往左查找，找不到返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;l&#x27;</span>, <span class="number">2</span>));<span class="comment">// 2 获取最后出现的位置，从右往左查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">1</span>));<span class="comment">// e 获取指定位置的字符，指定位置超出长度返回空串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">1</span>));<span class="comment">// 101 获取指定位置的字符编码，即Unicode编码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="string">&#x27;l&#x27;</span>));<span class="comment">// [&#x27;l&#x27;, ...] 查找匹配的字符串，返回匹配的数组，支持正则表达式，找不到返回null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(<span class="string">&#x27;l&#x27;</span>));<span class="comment">// 2 获取首次出现的位置，支持正则表达式，找不到返回-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;&#x27;</span>));<span class="comment">// helo 查找首个匹配第一个参数的字符串，并替换为第二个参数指定的字符串，不改变原字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replaceAll</span>(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;&#x27;</span>));<span class="comment">// heo 查找全部匹配第一个参数的字符串，并替换为第二个参数指定的字符串，不改变原字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;world&#x27;</span>));<span class="comment">// hello world 获取拼接字符串，支持可变参数，不改变原字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>));<span class="comment">// el 获取指定范围的字符串，不改变原字符串，第一个参数是起始位置，第二个参数是结束位置，前闭后开</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>));<span class="comment">// ello 获取指定范围的字符串，不改变原字符串，只有一个参数会获取到末尾</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(-<span class="number">1</span>));<span class="comment">// o 获取指定范围的字符串，不改变原字符串，负数参数会从后往前查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">3</span>));<span class="comment">// el 和slice类似，区别是不支持负数参数，负数参数会替换为0，并且参数会自动排序，保证前小后大</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>());<span class="comment">// [&#x27;hello&#x27;] 根据字符将字符串拆分为数组，无参或字符不存在会将整个字符串作为数组的一个元素，支持正则表达式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>));<span class="comment">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;] 空串将每个字符串作为数组的一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;ell&#x27;</span>));<span class="comment">// [&#x27;h&#x27;, &#x27;o&#x27;] 拆分后指定的字符被删除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLowerCase</span>());<span class="comment">// hello 获取小写字符串，不改变原字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>());<span class="comment">// HELLO 获取大写字符串，不改变原字符串</span></span><br></pre></td></tr></table></figure><h3 id="5-6-正则表达式"><a href="#5-6-正则表达式" class="headerlink" title="5.6 正则表达式"></a>5.6 正则表达式</h3><h4 id="5-6-1-定义"><a href="#5-6-1-定义" class="headerlink" title="5.6.1 定义"></a>5.6.1 定义</h4><p>在JavaScript中使用RegExp对象表示正则表达式，正则表达式是用于从字符串中选择特定字符串的文本。</p><h4 id="5-6-2-创建"><a href="#5-6-2-创建" class="headerlink" title="5.6.2 创建"></a>5.6.2 创建</h4><p>创建正则表达式有两种方式：</p><ul><li>使用构造方法创建，第一个参数是表达式，第二个参数是可选的修饰符，如果表达式有特殊字符，需要使用<code>\</code>进行转义：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var patt = new RegExp(pattern, modifiers);</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> reg);<span class="comment">// object</span></span><br></pre></td></tr></table></figure></li><li>直接创建，同样需要两个参数，但是使用<code>/</code>分隔：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var reg = /pattern/modifiers;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> reg);<span class="comment">// object</span></span><br></pre></td></tr></table></figure></li></ul><p>如果需要动态创建正则表达式，需要使用构造方法创建。</p><p>在创建正则表达式以后，其内部维护了一个<code>lastIndex</code>索引，记录下一次匹配从哪个位置开始。</p><h4 id="5-6-3-方法"><a href="#5-6-3-方法" class="headerlink" title="5.6.3 方法"></a>5.6.3 方法</h4><p>使用<code>test()</code>方法判断是否匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">test</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);<span class="comment">// 判断参数是否包含正则表达式匹配的字符串，返回true表示包含，返回false表示不包含</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用<code>exec()</code>方法获取匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);<span class="comment">// 返回从参数中匹配到的字符串，返回值是数组对象，对象内容和全局匹配修饰符有关</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">length</span>);<span class="comment">// 1 返回对象的数组长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">index</span>);<span class="comment">// 0 返回匹配到的起始位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>);<span class="comment">// undefined 返回匹配到的捕获分组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 未使用全局匹配修饰符时，匹配到就结束了，不会匹配下一个</span></span><br></pre></td></tr></table></figure><p>使用字符串的<code>match()</code>方法获取匹配内容，和正则表达式的<code>exec()</code>方法相同：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h4 id="5-6-4-修饰符"><a href="#5-6-4-修饰符" class="headerlink" title="5.6.4 修饰符"></a>5.6.4 修饰符</h4><p>修饰符用于对匹配方式进行说明，修饰符可以省略，但修饰符之前的<code>/</code>不能省略：</p><ul><li>i：执行对大小写不敏感的匹配，默认大小写敏感</li><li>g：执行全局匹配，默认匹配到第一个停止</li><li>m：执行多行匹配，默认匹配第一行</li></ul><p>如果没有使用<code>g</code>全局修饰，会在匹配到第一个停止，返回包含匹配信息的数组对象，并且<code>exec()</code>方法和<code>match()</code>方法获取的结果相同。</p><p>如果使用了<code>g</code>全局修饰，会匹配所有满足的内容，但是<code>exec()</code>方法和<code>match()</code>方法获取的结果不同。</p><p>使用<code>exec()</code>方法执行有全局修饰的正则表达式，返回从<code>lastIndex</code>开始匹配到的内容数组，匹配一次后返回匹配的内容并暂停：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 3 记录本次匹配结束时的索引，下次匹配从这个位置开始</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, index: 6, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 9 记录本次匹配结束时的索引，下次匹配从这个位置开始</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// null 匹配结束</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束</span></span><br></pre></td></tr></table></figure><p>使用<code>test()</code>方法也会更新<code>lastIndex</code>的值，如果不注意这一点，可能会出问题：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">test</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 3 第一次匹配</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 9 第二次匹配</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束 虽然执行了一次exec()方法，但实际上已经匹配两次了</span></span><br></pre></td></tr></table></figure><p>使用字符串的<code>match()</code>方法执行有全局修饰的正则表达式，返回匹配到的内容数组，匹配全部后结束：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123&#x27;, &#x27;123&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束</span></span><br></pre></td></tr></table></figure><h4 id="5-6-5-字符串方法"><a href="#5-6-5-字符串方法" class="headerlink" title="5.6.5 字符串方法"></a>5.6.5 字符串方法</h4><p>字符串中可以使用正则表达式的方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/l/</span>));<span class="comment">// [&#x27;l&#x27;, index: 2, input: &#x27;hello&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/l/g</span>));<span class="comment">// [&#x27;l&#x27;, &#x27;l&#x27;] 全局匹配会获取全部匹配的内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(<span class="regexp">/l/</span>));<span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="regexp">/l/</span>, <span class="string">&#x27;&#x27;</span>));<span class="comment">// helo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replaceAll</span>(<span class="regexp">/l/g</span>, <span class="string">&#x27;&#x27;</span>));<span class="comment">// heo 替换全部时，修饰符必须有全局匹配</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="regexp">/ll/</span>));<span class="comment">// [&#x27;he&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="5-6-6-量词"><a href="#5-6-6-量词" class="headerlink" title="5.6.6 量词"></a>5.6.6 量词</h4><p>表达式中可以使用量词，使用<code>n</code>表示任意字符：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/el+/g</span>));<span class="comment">// [&#x27;ell&#x27;] 使用n+匹配包含至少一个n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/hl+/g</span>));<span class="comment">// null 至少包含一个n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/el*/g</span>));<span class="comment">// [&#x27;ell&#x27;] 使用n*匹配包含零个或多个n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/hl*/g</span>));<span class="comment">// [&#x27;h&#x27;] 可以不包含n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/el?/g</span>));<span class="comment">// [&#x27;el&#x27;] 使用n?匹配包含零个或一个n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/hl?/g</span>));<span class="comment">// [&#x27;h&#x27;] 可以不包含n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/l&#123;2&#125;/g</span>));<span class="comment">// [&#x27;ll&#x27;] 使用n&#123;X&#125;匹配包含X个n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/l&#123;1,2&#125;/g</span>));<span class="comment">// [&#x27;ll&#x27;] 使用n&#123;X,Y&#125;匹配至少包含X个至多包含Y个n的字符串，Y可以省略</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/lo$/g</span>));<span class="comment">// [&#x27;lo&#x27;] 使用n$匹配任何结尾为n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/^he/g</span>));<span class="comment">// [&#x27;he&#x27;] 使用^n匹配任何开头为n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/e(?=l)/g</span>));<span class="comment">// [&#x27;e&#x27;] 使用?=n匹配任何后面紧跟n的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/h(?!l)/g</span>));<span class="comment">// [&#x27;h&#x27;] 使用?=n匹配任何后面紧跟n的字符串</span></span><br></pre></td></tr></table></figure><p>在具有量词匹配的表达式中，使用贪婪模式和非贪婪模式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123123&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/1.*3/g</span>));<span class="comment">// [&#x27;123123&#x27;] 默认开启贪婪模式，获取能匹配到的最多的内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/1.*?3/g</span>));<span class="comment">// [&#x27;123&#x27;, &#x27;123&#x27;] 使用?开启非贪婪模式，获取能匹配到的最少的内容</span></span><br></pre></td></tr></table></figure><h4 id="5-6-7-范围"><a href="#5-6-7-范围" class="headerlink" title="5.6.7 范围"></a>5.6.7 范围</h4><p>表达式中可以使用方括号限制查找某个范围的字符串，实际上比较的是ASCII码：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;ab12CD&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[abCD]/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;C&#x27;, &#x27;D&#x27;] 查找方括号之间的任何字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[^abCD]/g</span>));<span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;] 查找不在方括号之间的任何字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[0-9]/g</span>));<span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;] 查找0-9之间的数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[a-z]/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;] 查找a-z之间的字符，即小写英文字母</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[A-Z]/g</span>));<span class="comment">// [&#x27;C&#x27;, &#x27;D&#x27;] 查找A-Z之间的字符，即大写英文字母</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[A-z]/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;C&#x27;, &#x27;D&#x27;] 查找A-z之间的字符，即所有英文字母，因为在ASCII码中，大写字母在小写字母前面</span></span><br></pre></td></tr></table></figure><h4 id="5-6-8-特殊字符"><a href="#5-6-8-特殊字符" class="headerlink" title="5.6.8 特殊字符"></a>5.6.8 特殊字符</h4><p>表达式中可以使用元字符替代特殊字符进行查找：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/./g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;_&#x27;, &#x27;!&#x27;, &#x27;+&#x27;] 查找单个字符，除了换行和行结束符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\w/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;_&#x27;] 查找单词字符，包括数字、字母、下划线</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\W/g</span>));<span class="comment">// [&#x27;!&#x27;, &#x27;+&#x27;] 查找非单词字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\d/g</span>));<span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;] 查找数字字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\D/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;_&#x27;, &#x27;!&#x27;, &#x27;+&#x27;] 查找非数字字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\s/g</span>));<span class="comment">// null 查找空白字符，包括空格符、回车符、换行符、换页符、制表符、垂直制表符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab12_!+&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\S/g</span>));<span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;_&#x27;, &#x27;!&#x27;, &#x27;+&#x27;] 查找非空白字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\bwo/g</span>));<span class="comment">// [&#x27;wo&#x27;] 查找单词边界字符，即位于单词开头和结尾的字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\Blo/g</span>));<span class="comment">// [&#x27;lo&#x27;] 查找非单词边界字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\0/g</span>));<span class="comment">// null 查找NULL字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\n/g</span>));<span class="comment">// null 查找换行符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\r/g</span>));<span class="comment">// null 查找回车符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\f/g</span>));<span class="comment">// null 查找换页符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\t/g</span>));<span class="comment">// null 查找制表符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/\v/g</span>));<span class="comment">// null 查找垂直制表符</span></span><br></pre></td></tr></table></figure><h4 id="5-6-9-捕获分组"><a href="#5-6-9-捕获分组" class="headerlink" title="5.6.9 捕获分组"></a>5.6.9 捕获分组</h4><p>在正则表达式中使用<code>()</code>有两个作用：</p><ul><li>将被包裹的内容进行单独匹配，用于形成捕获分组</li><li>括号后的量词会将括号视为整体</li></ul><p>在未使用全局修饰的情况下，使用<code>exec()</code>方法获取匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);<span class="comment">// 在使用捕获分组时，数组第一个元素是完整的匹配内容，后面的元素是捕获的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><p>在未使用全局修饰的情况下，使用字符串的<code>match()</code>方法获取匹配内容，和正则表达式的<code>exec()</code>方法相同：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><p>在使用全局修饰的情况下，使用<code>exec()</code>方法获取匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123&#x27;, &#x27;a4a&#x27;, index: 0, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 6 记录本次匹配结束时的索引，下次匹配从这个位置开始</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a5a&#x27;, &#x27;123&#x27;, &#x27;a5a&#x27;, index: 6, input: &#x27;123a4a123a5a&#x27;, groups: undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 12 记录本次匹配结束时的索引，下次匹配从这个位置开始</span></span><br><span class="line"><span class="keyword">var</span> result = reg.<span class="title function_">exec</span>(<span class="string">&#x27;123a4a123a5a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// null 匹配结束</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束</span></span><br></pre></td></tr></table></figure><p>在使用全局修饰的情况下，使用字符串的<code>match()</code>方法获取匹配内容：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(123)(a.a)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123a4a123a5a&#x27;</span>.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">// [&#x27;123a4a&#x27;, &#x27;123a5a&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>);<span class="comment">// 0 匹配结束</span></span><br></pre></td></tr></table></figure><h2 id="6-文档对象模型"><a href="#6-文档对象模型" class="headerlink" title="6 文档对象模型"></a>6 文档对象模型</h2><h3 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1 定义"></a>6.1 定义</h3><p>文档对象模型（DOM，Document Object Model），在JavaScript中通过DOM操作HTML页面。</p><p>DOM将HTML页面映射为一个多节点模型，每个元素和属性都是节点：</p><ul><li>文档本身就是文档节点，使用document对象表示，作为window对象的属性存在的，不用获取可以直接使用。</li><li>注释是注释节点。</li><li>元素是元素节点。</li><li>元素内的属性是属性节点。</li><li>元素内的文本是文本节点。元素之间的空白也是文本节点。</li></ul><p>当网页被加载时，浏览器会创建页面的DOM树：<br><img src="/@image/103001/001002-104850.jpg" alt="002-页面DOM树"></p><p>节点的通用属性：</p><ul><li>nodeName：代表当前节点的名字，只读属性。元素节点返回大写的标签名，属性节点返回属性名，文本节点返回<code>#text</code>字符串。</li><li>nodeType：返回一个整数，这个数值代表着给定节点的类型，只读属性。元素节点返回1，属性节点返回2，文本节点返回3。</li><li>nodeValue：返回给定节点的当前值，可读写的属性。元素节点返回null，属性节点返回属性值，文本节点返回文本节点的内容。</li></ul><h3 id="6-2-节点"><a href="#6-2-节点" class="headerlink" title="6.2 节点"></a>6.2 节点</h3><h4 id="6-2-1-文档节点"><a href="#6-2-1-文档节点" class="headerlink" title="6.2.1 文档节点"></a>6.2.1 文档节点</h4><p>查询元素节点的方法，需要使用文档节点document对象调用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);<span class="comment">// 通过元素的id属性查找元素节点</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;home&#x27;</span>);<span class="comment">// 通过元素的name属性查找元素节点，返回多个匹配的节点</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;home&#x27;</span>);<span class="comment">// 通过元素的calss属性查找元素节点，返回多个匹配的节点，支持元素节点调用</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);<span class="comment">// 通过元素的标签名查找元素节点，返回多个匹配的节点，支持元素节点调用</span></span><br></pre></td></tr></table></figure><p>除了通过id属性查找返回的是对象外，其余三个返回的均为伪数组：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// &lt;span id=&quot;home&quot;&gt;home-id&lt;/span&gt;</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// NodeList [span]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(home));<span class="comment">// [span]</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// HTMLCollection [span.home]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(home));<span class="comment">// [span.home]</span></span><br><span class="line">home = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home);<span class="comment">// HTMLCollection [div]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(home));<span class="comment">// [div]</span></span><br></pre></td></tr></table></figure><p>文档节点的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">title</span>);<span class="comment">// 获取文档标题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">URL</span>);<span class="comment">// 获取文档URL</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">referrer</span>);<span class="comment">// 获取文档referrer，即前文档的URL</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">domain</span>);<span class="comment">// 获取文档域名</span></span><br></pre></td></tr></table></figure><p>使用文档节点操作节点：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#home&#x27;</span>));<span class="comment">// 使用CSS选择器查找元素节点，返回第一个元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#home&#x27;</span>));<span class="comment">// 使用CSS选择器查找元素节点，返回全部元素节点</span></span><br><span class="line"><span class="keyword">var</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);<span class="comment">// 创建元素节点，入参是标签名</span></span><br><span class="line"><span class="keyword">var</span> newName = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&#x27;name&#x27;</span>);<span class="comment">// 创建属性节点，入参是属性名</span></span><br><span class="line"><span class="keyword">var</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;text&#x27;</span>);<span class="comment">// 创建文本节点，入参是文本内容</span></span><br></pre></td></tr></table></figure><h4 id="6-2-2-元素节点"><a href="#6-2-2-元素节点" class="headerlink" title="6.2.2 元素节点"></a>6.2.2 元素节点</h4><p>元素节点的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">children</span>);<span class="comment">// 获取当前节点的所有子节点，只获取元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">childNodes</span>);<span class="comment">// 获取当前节点的所有子节点，包括元素节点和非元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">firstChild</span>);<span class="comment">// 获取当前节点的第一个子节点，包括元素节点和非元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">lastChild</span>);<span class="comment">// 获取当前节点的最后一个子节点，包括元素节点和非元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">parentNode</span>);<span class="comment">// 获取当前节点的父节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">previousSibling</span>);<span class="comment">// 获取当前节点的前一个兄弟节点，包括元素节点和非元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">nextSibling</span>);<span class="comment">// 获取当前节点的后一个兄弟节点，包括元素节点和非元素节点</span></span><br></pre></td></tr></table></figure><p>通过元素节点获取其他节点：</p><ul><li>通过firstChild属性获取的第一个节点通常是文本节点</li><li>通过getAttributeNode(属性名)方法获取指定属性节点，通常不使用属性节点</li></ul><p>获取和修改元素节点的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">id</span>);<span class="comment">// 获取id属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">class</span>);<span class="comment">// 获取class属性</span></span><br><span class="line">home.<span class="property">id</span> = <span class="string">&#x27;home-id&#x27;</span>;<span class="comment">// 修改id属性</span></span><br><span class="line">home.<span class="property">id</span> = <span class="string">&#x27;home-class&#x27;</span>;<span class="comment">// 修改class属性</span></span><br></pre></td></tr></table></figure><p>操作元素节点：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="comment">// 操作属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));<span class="comment">// 通过属性名获取属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="title function_">getAttributeNode</span>(<span class="string">&#x27;id&#x27;</span>));<span class="comment">// 通过属性名获取属性节点</span></span><br><span class="line">home.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;home&#x27;</span>);<span class="comment">// 通过属性名设置属性</span></span><br><span class="line">home.<span class="title function_">setAttributeNode</span>(<span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">// 设置属性节点</span></span><br><span class="line">home.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;name&#x27;</span>);<span class="comment">// 通过属性名删除属性</span></span><br><span class="line">home.<span class="title function_">removeAttributeNode</span>(home.<span class="title function_">getAttributeNode</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">// 删除属性节点</span></span><br><span class="line"><span class="comment">// 操作子节点</span></span><br><span class="line"><span class="keyword">var</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);<span class="comment">// 创建元素节点</span></span><br><span class="line"><span class="keyword">var</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;text&#x27;</span>);<span class="comment">// 创建文本节点</span></span><br><span class="line">home.<span class="title function_">appendChild</span>(newDiv);<span class="comment">// 添加子节点，新的字节点会添加到末尾子节点的后面</span></span><br><span class="line">home.<span class="title function_">insertBefore</span>(newText, home.<span class="property">childNodes</span>[<span class="number">0</span>]);<span class="comment">// 添加子节点，新的字节点会添加到首位子节点的前面</span></span><br><span class="line">home.<span class="title function_">removeChild</span>(home.<span class="property">childNodes</span>[<span class="number">0</span>]);<span class="comment">// 删除子节点</span></span><br><span class="line">home.<span class="title function_">replaceChild</span>(newText, home.<span class="property">childNodes</span>[<span class="number">0</span>]);<span class="comment">// 替换子节点</span></span><br></pre></td></tr></table></figure><p>操作元素样式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">style</span>[<span class="string">&#x27;fontSize&#x27;</span>] = <span class="string">&quot;16px&quot;</span>;<span class="comment">// 修改行内样式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">style</span>.<span class="property">fontSize</span>);<span class="comment">// 获取行内样式，需要将分隔命名转为驼峰命名</span></span><br><span class="line"><span class="comment">// 获取元素样式，包括内部样式和外部样式，兼容写法，不支持修改</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">getComputedStyle</span>) &#123;</span><br><span class="line">  <span class="comment">// 大部分浏览器兼容的方式，第二个参数是伪元素</span></span><br><span class="line">  <span class="keyword">var</span> fontSize = <span class="title function_">getComputedStyle</span>(home, <span class="literal">null</span>)[<span class="string">&#x27;fontSize&#x27;</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fontSize);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// IE8及以下</span></span><br><span class="line">  <span class="keyword">var</span> fontSize = home.<span class="property">currentStyle</span>[<span class="string">&#x27;fontSize&#x27;</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fontSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-属性节点"><a href="#6-2-3-属性节点" class="headerlink" title="6.2.3 属性节点"></a>6.2.3 属性节点</h4><p>属性节点的属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> homeName = home.<span class="title function_">getAttributeNode</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(homeName.<span class="property">name</span>);<span class="comment">// 获取属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(homeName.<span class="property">value</span>);<span class="comment">// 获取属性值</span></span><br><span class="line">homeName.<span class="property">value</span> = <span class="string">&#x27;name&#x27;</span>;<span class="comment">// 设置属性值</span></span><br></pre></td></tr></table></figure><h3 id="6-3-事件"><a href="#6-3-事件" class="headerlink" title="6.3 事件"></a>6.3 事件</h3><h4 id="6-3-1-事件的使用"><a href="#6-3-1-事件的使用" class="headerlink" title="6.3.1 事件的使用"></a>6.3.1 事件的使用</h4><p>事件就是用户和浏览器之间的交互行为，比如点击、移动。</p><p>事件是元素具备的行为方式，比如<code>click</code>事件表示元素被点击的事件。如果需要在触发事件时执行某些函数，就需要对事件进行绑定，比如<code>onclick</code>属性可以将<code>click</code>事件和函数绑定，当触发<code>click</code>事件时就会执行绑定的函数。</p><p>事件可以写在HTML的元素内，也可以写在JavaScript里：</p><ul><li>写在HTML的元素里，不建议使用这种方式：<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;home&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>写在JavaScript里，建议使用这种方式：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递给响应函数，在事件对象中封装了当前事件相关的一切信息。</p><p>在使用IE浏览器时，如果版本小于IE8，响应函数被触发时，浏览器不会传递事件对象，而是将事件对象作为window对象的属性保存。</p><p>兼容IE和其他浏览器的方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="comment">// 传入事件对象，可以省略</span></span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用事件：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="comment">// 鼠标点击时执行</span></span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 元素获取焦点时执行</span></span><br><span class="line">home.<span class="property">onfocus</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 元素失去焦点时执行</span></span><br><span class="line">home.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页面加载完后执行</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>target</code>属性获取触发事件的元素：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = event.<span class="property">target</span>;</span><br><span class="line">  <span class="title function_">alert</span>(obj.<span class="property">tagName</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-2-事件的传播"><a href="#6-3-2-事件的传播" class="headerlink" title="6.3.2 事件的传播"></a>6.3.2 事件的传播</h4><p>关于事件的传播网景公司和微软公司有不同的理解：</p><ul><li>微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。</li><li>网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，然后在向内传播给后代元素。</li></ul><p>W3C综合了两个公司的方案，将事件传播分成了三个阶段：</p><ul><li>捕获阶段：在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件。</li><li>处理阶段：事件捕获到目标元素，捕获结束开始在目标元素上触发事件。</li><li>冒泡阶段：事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件。</li></ul><p>IE8及以下的浏览器中没有捕获阶段，其他浏览器在调用方法时处理。</p><h4 id="6-3-3-事件的冒泡"><a href="#6-3-3-事件的冒泡" class="headerlink" title="6.3.3 事件的冒泡"></a>6.3.3 事件的冒泡</h4><p>事件的冒泡，指的是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发。</p><p>如果不希望发生事件冒泡可以取消冒泡：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">  <span class="comment">// 已弃用，不建议</span></span><br><span class="line">  event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 建议</span></span><br><span class="line">  event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取消冒泡并不会取消元素的默认动作，比如超链接的默认跳转，可以使用<code>preventDefault()</code>方法取消默认动作：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">  <span class="comment">// 取消跳转，但不能阻止冒泡</span></span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既可以取消冒泡，又可以取消默认动作：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="comment">// 取消跳转，阻止冒泡</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-4-事件的委派"><a href="#6-3-4-事件的委派" class="headerlink" title="6.3.4 事件的委派"></a>6.3.4 事件的委派</h4><p>事件的委派，是指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。</p><p>事件委派是利用了事件冒泡，通过委派可以减少事件绑定的次数，提高程序的性能。</p><p>给列表里的所有元素绑定同一事件：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象，兼容写法</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">className</span> == <span class="string">&quot;li&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-5-事件的绑定"><a href="#6-3-5-事件的绑定" class="headerlink" title="6.3.5 事件的绑定"></a>6.3.5 事件的绑定</h4><p>给元素绑定事件有两种方式：</p><ul><li>通过属性绑定，一个属性只能绑定一个函数，后面的会覆盖前面的：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过事件监听函数绑定，一个事件可以绑定多个函数，需要兼容不同的浏览器：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line"><span class="comment">// 在页面加载后绑定</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">bindClick</span>(home, <span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;first&#x27;</span>);</span><br><span class="line">  <span class="title function_">bindClick</span>(home, <span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;last&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 通用的绑定方法，将handle()方法绑定到传入的对象上</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindClick</span>(<span class="params">obj, eventStr, name</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">    <span class="comment">// 大部分浏览器兼容的方式，需要使用没有on前缀的事件</span></span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(eventStr, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// 在addEventListener()方法中，this对象是绑定的事件对象</span></span><br><span class="line">      <span class="title function_">handle</span>(name);</span><br><span class="line">    &#125;, <span class="literal">false</span>);<span class="comment">// 如果希望在捕获阶段就触发事件，可以设置为true，一般为false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// IE8及以下，需要使用有on前缀的事件</span></span><br><span class="line">    obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + eventStr, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// 在attachEvent()方法中，this对象是window对象</span></span><br><span class="line">      handle.<span class="title function_">call</span>(obj, name);<span class="comment">// 调用回调函数，强制将this对象设为绑定的事件对象</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通用的执行方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-4-版本"><a href="#6-4-版本" class="headerlink" title="6.4 版本"></a>6.4 版本</h3><h4 id="6-4-1-介绍"><a href="#6-4-1-介绍" class="headerlink" title="6.4.1 介绍"></a>6.4.1 介绍</h4><p>在W3C协会制定的DOM标准中，DOM标准可以分为DOM1，DOM2，DOM3三个版本。</p><p>事实上，DOM0级标准是不存在的，所谓DOM0只是DOM历史坐标中的一个参照点。</p><p>DOM1主要定义的是HTML和XML文档的底层结构，DOM2和DOM3分别在这个结构的基础上引入更多的交互能力，例如扩展API，也支持了更高级的XML特性。</p><h4 id="6-4-2-DOM0"><a href="#6-4-2-DOM0" class="headerlink" title="6.4.2 DOM0"></a>6.4.2 DOM0</h4><p>网景公司和微软公司分别在1997年的6月和10月发布了DHTML，它们是未形成标准的试验性质的初级阶段的DOM，这个DOM被公认为是DOM0。</p><p>浏览器处理事件的时候只有原始事件模型，可以直接在HTML标签上绑定事件，也可以获取DOM节点后绑定事件：</p><ul><li>直接在HTML标签上绑定事件：<figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;home&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>获取DOM节点后绑定事件：<figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">home.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这种处理事件的方式是使用元素的属性绑定事件和函数，元素的属性只能指向一个函数，所以这种绑定方式只能绑定一个函数。</p><h4 id="6-4-3-DOM1"><a href="#6-4-3-DOM1" class="headerlink" title="6.4.3 DOM1"></a>6.4.3 DOM1</h4><p>在1998年10月1日将DOM1作为W3C推荐标准，其实就是DOM0的规范版本。</p><p>在DOM1标准中并没有定义事件相关的内容，只是为基本的文档结构及查询提供了接口。</p><h4 id="6-4-4-DOM2"><a href="#6-4-4-DOM2" class="headerlink" title="6.4.4 DOM2"></a>6.4.4 DOM2</h4><p>在DOM2中，当事件发生时，目标元素的事件处理函数被触发，并且事件传播分为三个阶段进行：捕获阶段、处理阶段、冒泡阶段。</p><p>使用事件监听函数绑定事件：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">  home.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这种处理事件的方式是使用监听事件函数绑定事件和函数，在DOM2中某些浏览器会给某些事件开辟事件池，也就是事件的队列，存放事件绑定的函数，当事件触发时依次排序执行事件池里的函数，所以这种绑定方式可以绑定多个函数。</p><h4 id="6-4-5-DOM3"><a href="#6-4-5-DOM3" class="headerlink" title="6.4.5 DOM3"></a>6.4.5 DOM3</h4><p>在DOM3中，又在DOM2事件的基础上添加了更多的事件类型，以及一些内容模型和文档验证。</p><h2 id="7-浏览器对象模型"><a href="#7-浏览器对象模型" class="headerlink" title="7 浏览器对象模型"></a>7 浏览器对象模型</h2><h3 id="7-1-定义"><a href="#7-1-定义" class="headerlink" title="7.1 定义"></a>7.1 定义</h3><p>浏览器对象模型（BOM，Browser Object Model），允许JavaScript与浏览器交互。</p><p>BOM提供了一组对象用于对浏览器进行操作：</p><ul><li>Window：代表的是整个浏览器的窗口，同时window也是网页中的全局对象。</li><li>Navigator：代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器。</li><li>Location：代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面。</li><li>History：代表浏览器历史记录，可以通过该对象来操作浏览器的历史记录。由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页。而且该操作只在当次访问时有效。</li><li>Screen：代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息。</li></ul><p>这些BOM对象（全局对象）在浏览器中都是作为window对象的属性保存的，可以通过window对象来使用，也可以直接使用。</p><h3 id="7-2-使用"><a href="#7-2-使用" class="headerlink" title="7.2 使用"></a>7.2 使用</h3><h4 id="7-2-1-window对象"><a href="#7-2-1-window对象" class="headerlink" title="7.2.1 window对象"></a>7.2.1 window对象</h4><p>window对象的属性和方法可以省略直接使用。</p><p>window对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">document</span>);<span class="comment">// 返回document对象的只读引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>);<span class="comment">// 返回navigator对象的只读引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>);<span class="comment">// 返回location对象的只读引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">history</span>);<span class="comment">// 返回history对象的只读引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">screen</span>);<span class="comment">// 返回screen对象的只读引用</span></span><br></pre></td></tr></table></figure><p>window对象方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭浏览器窗口</span></span><br><span class="line"><span class="title function_">close</span>();</span><br><span class="line"><span class="comment">// 打开新的浏览器窗口</span></span><br><span class="line"><span class="title function_">open</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;_blank&#x27;</span>,<span class="string">&#x27;width=200,height=100&#x27;</span>);</span><br><span class="line"><span class="comment">// 显示带有消息和确认按钮的警告框</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;警告框&#x27;</span>);</span><br><span class="line"><span class="comment">// 显示带有消息以及确认按钮和取消按钮的对话框</span></span><br><span class="line"><span class="title function_">confirm</span>(<span class="string">&#x27;确认框&#x27;</span>);</span><br><span class="line"><span class="comment">// 按照指定的时间执行定时函数</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3秒后打印 &#x27;</span> + name);</span><br><span class="line">&#125;, <span class="number">3000</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="comment">// 取消设置的定时函数，在执行前有效</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(obj);</span><br><span class="line"><span class="comment">// 按照指定的时间（以毫秒计）重复调用函数</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id++ + <span class="string">&#x27; &#x27;</span> + name);</span><br><span class="line">  <span class="keyword">if</span> (id &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="comment">// 取消设置的重复调用函数</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">100</span>, <span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="7-2-2-navigator对象"><a href="#7-2-2-navigator对象" class="headerlink" title="7.2.2 navigator对象"></a>7.2.2 navigator对象</h4><p>navigator对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">appName</span>);<span class="comment">// 返回浏览器的名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">appCodeName</span>);<span class="comment">// 返回浏览器的代码名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">lappVersioncation</span>);<span class="comment">// 返回浏览器的平台和版本信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">platform</span>);<span class="comment">// 返回运行浏览器的操作系统平台</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">userAgent</span>);<span class="comment">// 返回由客户机发送服务器的代理信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">language</span>);<span class="comment">// 返回浏览器使用的语言</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">product</span>);<span class="comment">// 返回浏览器使用的引擎（产品）</span></span><br></pre></td></tr></table></figure><p>由于历史原因，navigator对象中的大部分属性都已经不能识别浏览器了，一般只使用userAgent来判断浏览器的信息。</p><h4 id="7-2-3-location对象"><a href="#7-2-3-location对象" class="headerlink" title="7.2.3 location对象"></a>7.2.3 location对象</h4><p>location对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);<span class="comment">// 返回URL的锚部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">host</span>);<span class="comment">// 返回URL的主机名和端口</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hostname</span>);<span class="comment">// 返回URL的主机名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>);<span class="comment">// 返回完整的URL</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">pathname</span>);<span class="comment">// 返回的URL路径名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">port</span>);<span class="comment">// 返回URL服务器使用的端口号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">protocol</span>);<span class="comment">// 返回URL协议</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>);<span class="comment">// 返回URL的查询部分</span></span><br></pre></td></tr></table></figure><p>location对象方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">assign</span>();<span class="comment">// 载入新的文档，相当于给location对象赋值</span></span><br><span class="line">location.<span class="title function_">reload</span>(<span class="literal">true</span>);<span class="comment">// 重新加载当前页面，相当于刷新，参数为true表示清空缓存</span></span><br><span class="line">location.<span class="title function_">replace</span>();<span class="comment">// 用新的文档替换当前文档，不能使用历史记录，不能使用后退</span></span><br></pre></td></tr></table></figure><h4 id="7-2-4-history对象"><a href="#7-2-4-history对象" class="headerlink" title="7.2.4 history对象"></a>7.2.4 history对象</h4><p>history对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">length</span>);<span class="comment">// 返回历史列表中的网址数</span></span><br></pre></td></tr></table></figure><p>history对象方法：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">back</span>();<span class="comment">// 加载历史列表中的前一个URL</span></span><br><span class="line">location.<span class="title function_">forward</span>();<span class="comment">// 加载历史列表中的下一个URL</span></span><br><span class="line">location.<span class="title function_">go</span>(<span class="number">1</span>);<span class="comment">// 加载历史列表中的某个具体页面，参数大于0时前进，参数小于0时后退</span></span><br></pre></td></tr></table></figure><h4 id="7-2-5-screen对象"><a href="#7-2-5-screen对象" class="headerlink" title="7.2.5 screen对象"></a>7.2.5 screen对象</h4><p>screen对象属性：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">height</span>);<span class="comment">// 返回屏幕的总高度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">width</span>);<span class="comment">// 返回屏幕的总宽度</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文介绍了JS中常用的概念、基础语法、对象以及两种对象模型。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
    <category term="JS" scheme="https://momashanhe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>移动端</title>
    <link href="https://momashanhe.com/posts/20240519/111744/"/>
    <id>https://momashanhe.com/posts/20240519/111744/</id>
    <published>2024-05-19T03:17:44.000Z</published>
    <updated>2024-12-07T03:44:14.632Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：本文探讨了移动端开发中的视口设置、适配不同屏幕的方法以及响应式布局的实现策略。</p><span id="more"></span><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>一般来说，移动端需要在屏幕远小于电脑端时，支持显示几乎相同分辨率的图像，所以移动端的逻辑像素要比电脑端的逻辑像素小。</p><p>默认情况下，如果未对网页适配移动端，移动端的浏览器会将视口设置为980px，以确保网页可以在移动端正常访问，此时将980px作为物理像素。</p><p>当网页宽度不超过980px时，将980px作为逻辑像素，像素比为980px&#x2F;980px&#x3D;1，网页能正常显示。当网页宽度超过了980px时，将网页宽度作为逻辑像素，像素比为980px&#x2F;网页宽度&lt;1，网页会被缩小。</p><p>为了能让移动端正常显示网页，大部分网站都会专门为移动端设计网页。</p><h2 id="2-完美视口"><a href="#2-完美视口" class="headerlink" title="2 完美视口"></a>2 完美视口</h2><p>为了让网页能在移动端合理显示，避免网页被缩小，需要根据网页的逻辑像素和移动端屏幕的最佳像素比调整视口的物理像素，可以在<code>meta</code>元素设置：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=200px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置最佳视口，可以让浏览器根据网页的逻辑像素，自动计算视口最佳的物理像素，实现完美视口：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置了视口的物理像素后，当网页的逻辑像素超出后，会使用滚动条加载页面，不会缩放页面，保证文字和内容显示正常。</p><h2 id="3-适配不同屏幕"><a href="#3-适配不同屏幕" class="headerlink" title="3 适配不同屏幕"></a>3 适配不同屏幕</h2><p>虽然设置完美视口能够解决缩放的问题，但不同设备的完美视口是不同的，在某个设备上使用200px能够撑满宽度，但是在其他设备上可能就只显示半屏，所以还需要适配不同的屏幕。</p><h3 id="3-1-使用百分比"><a href="#3-1-使用百分比" class="headerlink" title="3.1 使用百分比"></a>3.1 使用百分比</h3><p>使用百分比代替像素值，依据父元素的内容大小使用百分比。</p><p>这种方式可以避免使用像素带来的问题，但是如果父元素设置了边框或者边距，使用起来就比较麻烦。</p><p>只能在某些场景下使用，并不是完全取代像素的解决方案。</p><h3 id="3-2-使用视口百分比"><a href="#3-2-使用视口百分比" class="headerlink" title="3.2 使用视口百分比"></a>3.2 使用视口百分比</h3><p>使用视口的百分比代替像素值，单位是vw和vh，分别是水平方向和垂直方向。</p><p>在使用时，需要按照视口设置的物理像素，将设计图里的逻辑像素转化为视口百分比。</p><p>示例：</p><ul><li>第一步：假设网页宽度为750px，计算1px对应的vw：100÷750≈0.1333vw</li><li>第二步：假设容器宽度为200px，计算对应的vw：200×0.1333&#x3D;26.6666vw</li><li>第三步：使用26.6666vw作为容器宽度，替换200px</li></ul><p>这种方式不依赖父元素，能够按照比例适配不同屏幕，但是在计算的时候比较麻烦。</p><h3 id="3-3-使用字体倍数"><a href="#3-3-使用字体倍数" class="headerlink" title="3.3 使用字体倍数"></a>3.3 使用字体倍数</h3><p>使用字体倍数rem代替像素值，rem对应的是根元素的字体大小，这种方式是使用视口百分比的补充。</p><p>实例：</p><ul><li>第一步：假设网页宽度为750px，计算1px对应的vw：100÷750≈0.1333vw</li><li>第二步：为了防止字体过小被浏览器改为默认的12px，建议设置网页根元素的字体大小为40px，计算对应的vw：40×0.1333&#x3D;5.3333vw</li><li>第三步：使用5.3333vw作为网页根元素的字体大小，替换40px</li><li>第四步：假设容器宽度为200px，使用字体大小将px转为rem：200÷40&#x3D;5rem</li><li>第五步：使用5rem作为容器宽度，替换200px</li></ul><p>这种方式本质上使用的还是视口百分比，但是在计算的时候使用字体大小计算，更简单一些。</p><p>在实际开发中，并不是完全禁止使用px作为单位，如果需要根据屏幕进行缩放，才需要考虑避免使用px带来的问题。</p><h2 id="4-响应式布局"><a href="#4-响应式布局" class="headerlink" title="4 响应式布局"></a>4 响应式布局</h2><h3 id="4-1-匹配媒体查询"><a href="#4-1-匹配媒体查询" class="headerlink" title="4.1 匹配媒体查询"></a>4.1 匹配媒体查询</h3><p>浏览器可以通过媒体查询得到当前访问浏览器的设备类型，使用<code>@media</code>指定对不同媒体的样式处理，在不同设备访问时得到不同样式。</p><p>匹配媒体类型：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> 媒体类型 &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>媒体查询也遵循样式的覆盖原则，所以需要将媒体查询写在正常样式下面，避免被覆盖失效。</p><p>常用媒体类型：</p><ul><li>all：匹配所有设备。</li><li>screen：匹配屏幕，包括电脑屏幕、平板屏幕、手机屏幕、等等。</li><li>print：匹配打印机，在打印时使用的样式。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的媒体类型可以参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media">MDN媒体类型</a></p><h3 id="4-2-匹配媒体特性"><a href="#4-2-匹配媒体特性" class="headerlink" title="4.2 匹配媒体特性"></a>4.2 匹配媒体特性</h3><p>除了通过媒体类型设置不同的样式，也可以通过媒体特征匹配不同的样式。</p><p>匹配媒体特征：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (属性名: 属性值) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当匹配到指定的特征时，应用指定的样式。</p><p>常用媒体特征：</p><table>  <thead>    <tr>      <th>属性名</th>      <th>作用</th>      <th>取值</th>    </tr>  </thead>  <tbody>    <tr>      <td>width</td>      <td>匹配视口宽度，视口宽度匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>max-width</td>      <td>匹配视口最大宽度，视口宽度小于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>min-width</td>      <td>匹配视口最小宽度，视口宽度大于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>height</td>      <td>匹配视口高度，视口高度匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>max-height</td>      <td>匹配视口最大高度，视口高度小于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>min-height</td>      <td>匹配视口最小高度，视口高度大于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>device-width</td>      <td>匹配设备屏幕的宽度，设备屏幕宽度匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>max-device-width</td>      <td>匹配设备屏幕的最大宽度，设备屏幕宽度小于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>min-device-width</td>      <td>匹配设备屏幕的最小宽度，设备屏幕宽度大于等于匹配时应用样式</td>      <td>长度值</td>    </tr>    <tr>      <td>orientation</td>      <td>检测视口的旋转方向，即屏幕是否横屏</td>      <td>        portrait：视口处于纵向，即高度大于等于宽度<br>        landscape：视口处于横向，即宽度大于高度<br>      </td>    </tr>  </tbody></table><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>: <span class="number">10px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见用于区分不同等级屏幕的阈值：</p><ul><li>小屏幕：宽度在768px以下。</li><li>中屏幕：宽度在769px到992px之间。</li><li>大屏幕：宽度在992px到1200px之间。</li><li>超大屏幕：宽度在1200px以上。</li></ul><h3 id="4-3-匹配复杂条件"><a href="#4-3-匹配复杂条件" class="headerlink" title="4.3 匹配复杂条件"></a>4.3 匹配复杂条件</h3><p>支持复杂匹配，如果需要同时满足，可以使用运算符连接，如果需要满足任意一个，可以使用逗号分隔。</p><p>可以混合使用媒体查询和媒体特征进行匹配。</p><p>支持的运算符：</p><ul><li>and：并且，匹配全部条件。</li><li>or：或者，匹配任意条件，支持使用逗号<code>,</code>分隔。</li><li>not：否定，匹配相反条件。</li><li>only：肯定，用于让IE浏览器忽略设置的条件和样式，避免部分匹配，对现代浏览器无影响。</li></ul><p>示例：</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用时也可以通过指定条件使用不同的样式文件。示例：</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (max-width:768px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./index-small.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要：本文探讨了移动端开发中的视口设置、适配不同屏幕的方法以及响应式布局的实现策略。&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://momashanhe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://momashanhe.com/tags/HTML/"/>
    
    <category term="CSS" scheme="https://momashanhe.com/tags/CSS/"/>
    
  </entry>
  
</feed>
